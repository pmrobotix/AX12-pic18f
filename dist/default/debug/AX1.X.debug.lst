

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Apr 17 12:06:43 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataBANK0
    54  000EEA                     __pidataBANK0:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _I2C_slaveWriteData
    58  000EEA  55                 	db	85
    59                           
    60                           ;initializer for _currentCommand
    61  000EEB  FF                 	db	255
    62                           
    63                           	psect	idataBANK1
    64  000A38                     __pidataBANK1:
    65                           	opt stack 0
    66                           
    67                           ;initializer for I2C_StatusCallbackOld@EEPROM_Buffer
    68  000A38  00                 	db	0
    69  000A39  01                 	db	1
    70  000A3A  02                 	db	2
    71  000A3B  03                 	db	3
    72  000A3C  04                 	db	4
    73  000A3D  05                 	db	5
    74  000A3E  06                 	db	6
    75  000A3F  07                 	db	7
    76  000A40  08                 	db	8
    77  000A41  09                 	db	9
    78  000A42  0A                 	db	10
    79  000A43  0B                 	db	11
    80  000A44  0C                 	db	12
    81  000A45  0D                 	db	13
    82  000A46  0E                 	db	14
    83  000A47  0F                 	db	15
    84  000A48  10                 	db	16
    85  000A49  11                 	db	17
    86  000A4A  12                 	db	18
    87  000A4B  13                 	db	19
    88  000A4C  14                 	db	20
    89  000A4D  15                 	db	21
    90  000A4E  16                 	db	22
    91  000A4F  17                 	db	23
    92  000A50  18                 	db	24
    93  000A51  19                 	db	25
    94  000A52  1A                 	db	26
    95  000A53  1B                 	db	27
    96  000A54  1C                 	db	28
    97  000A55  1D                 	db	29
    98  000A56  1E                 	db	30
    99  000A57  1F                 	db	31
   100  000A58  20                 	db	32
   101  000A59  21                 	db	33
   102  000A5A  22                 	db	34
   103  000A5B  23                 	db	35
   104  000A5C  24                 	db	36
   105  000A5D  25                 	db	37
   106  000A5E  26                 	db	38
   107  000A5F  27                 	db	39
   108  000A60  28                 	db	40
   109  000A61  29                 	db	41
   110  000A62  2A                 	db	42
   111  000A63  2B                 	db	43
   112  000A64  2C                 	db	44
   113  000A65  2D                 	db	45
   114  000A66  2E                 	db	46
   115  000A67  2F                 	db	47
   116  000A68  30                 	db	48
   117  000A69  31                 	db	49
   118  000A6A  32                 	db	50
   119  000A6B  33                 	db	51
   120  000A6C  34                 	db	52
   121  000A6D  35                 	db	53
   122  000A6E  36                 	db	54
   123  000A6F  37                 	db	55
   124  000A70  38                 	db	56
   125  000A71  39                 	db	57
   126  000A72  3A                 	db	58
   127  000A73  3B                 	db	59
   128  000A74  3C                 	db	60
   129  000A75  3D                 	db	61
   130  000A76  3E                 	db	62
   131  000A77  3F                 	db	63
   132  000A78  40                 	db	64
   133  000A79  41                 	db	65
   134  000A7A  42                 	db	66
   135  000A7B  43                 	db	67
   136  000A7C  44                 	db	68
   137  000A7D  45                 	db	69
   138  000A7E  46                 	db	70
   139  000A7F  47                 	db	71
   140  000A80  48                 	db	72
   141  000A81  49                 	db	73
   142  000A82  4A                 	db	74
   143  000A83  4B                 	db	75
   144  000A84  4C                 	db	76
   145  000A85  4D                 	db	77
   146  000A86  4E                 	db	78
   147  000A87  4F                 	db	79
   148  000A88  50                 	db	80
   149  000A89  51                 	db	81
   150  000A8A  52                 	db	82
   151  000A8B  53                 	db	83
   152  000A8C  54                 	db	84
   153  000A8D  55                 	db	85
   154  000A8E  56                 	db	86
   155  000A8F  57                 	db	87
   156  000A90  58                 	db	88
   157  000A91  59                 	db	89
   158  000A92  5A                 	db	90
   159  000A93  5B                 	db	91
   160  000A94  5C                 	db	92
   161  000A95  5D                 	db	93
   162  000A96  5E                 	db	94
   163  000A97  5F                 	db	95
   164  000A98  60                 	db	96
   165  000A99  61                 	db	97
   166  000A9A  62                 	db	98
   167  000A9B  63                 	db	99
   168  000A9C  64                 	db	100
   169  000A9D  65                 	db	101
   170  000A9E  66                 	db	102
   171  000A9F  67                 	db	103
   172  000AA0  68                 	db	104
   173  000AA1  69                 	db	105
   174  000AA2  6A                 	db	106
   175  000AA3  6B                 	db	107
   176  000AA4  6C                 	db	108
   177  000AA5  6D                 	db	109
   178  000AA6  6E                 	db	110
   179  000AA7  6F                 	db	111
   180  000AA8  70                 	db	112
   181  000AA9  71                 	db	113
   182  000AAA  72                 	db	114
   183  000AAB  73                 	db	115
   184  000AAC  74                 	db	116
   185  000AAD  75                 	db	117
   186  000AAE  76                 	db	118
   187  000AAF  77                 	db	119
   188  000AB0  78                 	db	120
   189  000AB1  79                 	db	121
   190  000AB2  7A                 	db	122
   191  000AB3  7B                 	db	123
   192  000AB4  7C                 	db	124
   193  000AB5  7D                 	db	125
   194  000AB6  7E                 	db	126
   195  000AB7  7F                 	db	127
   196                           
   197                           	psect	nvBANK0
   198  0000E8                     __pnvBANK0:
   199                           	opt stack 0
   200  0000E8                     _timer1ReloadVal:
   201                           	opt stack 0
   202  0000E8                     	ds	2
   203  0000                     _WPUB	set	3931
   204  0000                     _ADCON0	set	4034
   205  0000                     _ADCON0bits	set	4034
   206  0000                     _ADCON1	set	4033
   207  0000                     _ADCON2	set	4032
   208  0000                     _ADRESH	set	4036
   209  0000                     _ADRESL	set	4035
   210  0000                     _BAUDCON1	set	4007
   211  0000                     _BAUDCON2	set	4025
   212  0000                     _CCP1CON	set	4027
   213  0000                     _CCPR1H	set	4029
   214  0000                     _CCPR1L	set	4028
   215  0000                     _CCPTMRSbits	set	3993
   216  0000                     _INTCONbits	set	4082
   217  0000                     _IPR1bits	set	3999
   218  0000                     _LATA	set	3977
   219  0000                     _LATB	set	3978
   220  0000                     _LATC	set	3979
   221  0000                     _LATD	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _OSCCON	set	4051
   224  0000                     _OSCCON2	set	4050
   225  0000                     _OSCTUNE	set	3995
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR3bits	set	4004
   229  0000                     _PORTCbits	set	3970
   230  0000                     _RCREG1	set	4014
   231  0000                     _RCREG2	set	3962
   232  0000                     _RCSTA1	set	4011
   233  0000                     _RCSTA1bits	set	4011
   234  0000                     _RCSTA2	set	4006
   235  0000                     _RCSTA2bits	set	4006
   236  0000                     _REFOCON	set	3994
   237  0000                     _SPBRG1	set	4015
   238  0000                     _SPBRG2	set	3963
   239  0000                     _SPBRGH1	set	3965
   240  0000                     _SPBRGH2	set	3964
   241  0000                     _SSPADD	set	4040
   242  0000                     _SSPBUF	set	4041
   243  0000                     _SSPCON1	set	4038
   244  0000                     _SSPCON1bits	set	4038
   245  0000                     _SSPCON2	set	4037
   246  0000                     _SSPSTAT	set	4039
   247  0000                     _SSPSTATbits	set	4039
   248  0000                     _T1CON	set	4045
   249  0000                     _T1CONbits	set	4045
   250  0000                     _T1GCON	set	4010
   251  0000                     _T1GCONbits	set	4010
   252  0000                     _TMR1H	set	4047
   253  0000                     _TMR1L	set	4046
   254  0000                     _TRISA	set	3986
   255  0000                     _TRISB	set	3987
   256  0000                     _TRISC	set	3988
   257  0000                     _TRISD	set	3989
   258  0000                     _TRISE	set	3990
   259  0000                     _TXREG1	set	4013
   260  0000                     _TXREG2	set	3961
   261  0000                     _TXSTA1	set	4012
   262  0000                     _TXSTA2	set	4026
   263  0000                     _IPEN	set	32391
   264  0000                     _LATB0	set	31824
   265  0000                     _LATB2	set	31826
   266  0000                     _LATB3	set	31827
   267  0000                     _LATC0	set	31832
   268  0000                     _LATC1	set	31833
   269  0000                     _LATC2	set	31834
   270  0000                     _LATD0	set	31840
   271  0000                     _LATD1	set	31841
   272  0000                     _LATD2	set	31842
   273  0000                     _LATD3	set	31843
   274  0000                     _LATD4	set	31844
   275  0000                     _TRISC0	set	31904
   276  0000                     _TRISC1	set	31905
   277                           
   278                           ; #config settings
   279  0000                     
   280                           	psect	cinit
   281  000C86                     __pcinit:
   282                           	opt stack 0
   283  000C86                     start_initialization:
   284                           	opt stack 0
   285  000C86                     __initialization:
   286                           	opt stack 0
   287                           
   288                           ; Initialize objects allocated to BANK1 (128 bytes)
   289                           ; load TBLPTR registers with __pidataBANK1
   290  000C86  0E38               	movlw	low __pidataBANK1
   291  000C88  6EF6               	movwf	tblptrl,c
   292  000C8A  0E0A               	movlw	high __pidataBANK1
   293  000C8C  6EF7               	movwf	tblptrh,c
   294  000C8E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   295  000C90  6EF8               	movwf	tblptru,c
   296  000C92  EE01  F000         	lfsr	0,__pdataBANK1
   297  000C96  EE10 F080          	lfsr	1,128
   298  000C9A                     copy_data0:
   299  000C9A  0009               	tblrd		*+
   300  000C9C  CFF5 FFEE          	movff	tablat,postinc0
   301  000CA0  50E5               	movf	postdec1,w,c
   302  000CA2  50E1               	movf	fsr1l,w,c
   303  000CA4  E1FA               	bnz	copy_data0
   304                           
   305                           ; Initialize objects allocated to BANK0 (2 bytes)
   306                           ; load TBLPTR registers with __pidataBANK0
   307  000CA6  0EEA               	movlw	low __pidataBANK0
   308  000CA8  6EF6               	movwf	tblptrl,c
   309  000CAA  0E0E               	movlw	high __pidataBANK0
   310  000CAC  6EF7               	movwf	tblptrh,c
   311  000CAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   312  000CB0  6EF8               	movwf	tblptru,c
   313  000CB2  0009               	tblrd		*+	;fetch initializer
   314  000CB4  CFF5 F0EA          	movff	tablat,__pdataBANK0
   315  000CB8  0009               	tblrd		*+	;fetch initializer
   316  000CBA  CFF5 F0EB          	movff	tablat,__pdataBANK0+1
   317                           
   318                           ; Clear objects allocated to BANK0 (45 bytes)
   319  000CBE  EE00  F0BB         	lfsr	0,__pbssBANK0
   320  000CC2  0E2D               	movlw	45
   321  000CC4                     clear_0:
   322  000CC4  6AEE               	clrf	postinc0,c
   323  000CC6  06E8               	decf	wreg,f,c
   324  000CC8  E1FD               	bnz	clear_0
   325  000CCA                     end_of_initialization:
   326                           	opt stack 0
   327  000CCA                     __end_of__initialization:
   328                           	opt stack 0
   329  000CCA  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   330  000CCC  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   331  000CCE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   332  000CD0  6EF8               	movwf	tblptru,c
   333  000CD2  0100               	movlb	0
   334  000CD4  EF1C  F001         	goto	_main	;jump to C main() function
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	bssBANK0
   345  0000BB                     __pbssBANK0:
   346                           	opt stack 0
   347  0000BB                     _dataToSend:
   348                           	opt stack 0
   349  0000BB                     	ds	32
   350  0000DB                     _bytesSent:
   351                           	opt stack 0
   352  0000DB                     	ds	2
   353  0000DD                     _c:
   354                           	opt stack 0
   355  0000DD                     	ds	2
   356  0000DF                     _nbBytesToSend:
   357                           	opt stack 0
   358  0000DF                     	ds	2
   359  0000E1                     _readIndex:
   360                           	opt stack 0
   361  0000E1                     	ds	2
   362  0000E3                     I2C_StatusCallbackOld@eepromAddress:
   363                           	opt stack 0
   364  0000E3                     	ds	1
   365  0000E4                     I2C_StatusCallbackOld@slaveWriteType:
   366                           	opt stack 0
   367  0000E4                     	ds	1
   368  0000E5                     _parameter1:
   369                           	opt stack 0
   370  0000E5                     	ds	1
   371  0000E6                     _parameter2:
   372                           	opt stack 0
   373  0000E6                     	ds	1
   374  0000E7                     _parameter3:
   375                           	opt stack 0
   376  0000E7                     	ds	1
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	dataBANK0
   387  0000EA                     __pdataBANK0:
   388                           	opt stack 0
   389  0000EA                     _I2C_slaveWriteData:
   390                           	opt stack 0
   391  0000EA                     	ds	1
   392  0000EB                     _currentCommand:
   393                           	opt stack 0
   394  0000EB                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	dataBANK1
   405  000100                     __pdataBANK1:
   406                           	opt stack 0
   407  000100                     I2C_StatusCallbackOld@EEPROM_Buffer:
   408                           	opt stack 0
   409  000100                     	ds	128
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	cstackBANK1
   420  000180                     __pcstackBANK1:
   421                           	opt stack 0
   422  000180                     main@i:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x0
   426  000180                     	ds	2
   427  000182                     main@delay:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x2
   431  000182                     	ds	2
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	cstackBANK0
   442  000060                     __pcstackBANK0:
   443                           	opt stack 0
   444  000060                     I2C_StatusCallback@i2c_bus_state:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x0
   448  000060                     	ds	1
   449  000061                     I2C_StatusCallback@data:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1
   453  000061                     	ds	1
   454  000062                     I2C_ISR@i2c_data:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x2
   458  000062                     	ds	1
   459  000063                     ??_INTERRUPT_InterruptManager:
   460                           
   461                           ; 1 bytes @ 0x3
   462  000063                     	ds	14
   463  000071                     ??_TMR1_Initialize:
   464  000071                     ?___awdiv:
   465                           	opt stack 0
   466  000071                     EUSART1_Write@txData:
   467                           	opt stack 0
   468  000071                     ___awdiv@dividend:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x11
   472  000071                     	ds	1
   473  000072                     sendAX@buffer:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x12
   477  000072                     	ds	1
   478  000073                     ___awdiv@divisor:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x13
   482  000073                     	ds	1
   483  000074                     sendAX@packetSize:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x14
   487  000074                     	ds	1
   488  000075                     ___awdiv@counter:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x15
   492  000075                     	ds	1
   493  000076                     ___awdiv@sign:
   494                           	opt stack 0
   495  000076                     sendAX@result:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x16
   499  000076                     	ds	1
   500  000077                     ___awdiv@quotient:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x17
   504  000077                     	ds	1
   505  000078                     sendAX@parametersToRead:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x18
   509  000078                     	ds	1
   510  000079                     delay_ms@ms:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x19
   514  000079                     	ds	1
   515  00007A                     ??_sendAX:
   516                           
   517                           ; 1 bytes @ 0x1A
   518  00007A                     	ds	1
   519  00007B                     ??_delay_ms:
   520  00007B                     sendAX@stop:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x1B
   524  00007B                     	ds	1
   525  00007C                     delay_ms@n:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x1C
   529  00007C                     	ds	1
   530  00007D                     sendAX@i:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x1D
   534  00007D                     	ds	1
   535  00007E                     delay_ms@i:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1E
   539  00007E                     	ds	1
   540  00007F                     sendAX@i_1221:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x1F
   544  00007F                     	ds	2
   545  000081                     sendAX@i_1224:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x21
   549  000081                     	ds	2
   550  000083                     sendAX@r0:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x23
   554  000083                     	ds	2
   555  000085                     sendAX@i_1227:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x25
   559  000085                     	ds	2
   560  000087                     sendAX@checksum:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x27
   564  000087                     	ds	1
   565  000088                     ?_pingAX:
   566                           	opt stack 0
   567  000088                     pingAX@id:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x28
   571  000088                     	ds	2
   572  00008A                     ??_pingAX:
   573                           
   574                           ; 1 bytes @ 0x2A
   575  00008A                     	ds	1
   576  00008B                     pingAX@result:
   577                           	opt stack 0
   578                           
   579                           ; 20 bytes @ 0x2B
   580  00008B                     	ds	20
   581  00009F                     pingAX@packet:
   582                           	opt stack 0
   583                           
   584                           ; 20 bytes @ 0x3F
   585  00009F                     	ds	20
   586  0000B3                     pingAX@nbParameters:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x53
   590  0000B3                     	ds	2
   591  0000B5                     pingAX@length:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x55
   595  0000B5                     	ds	2
   596  0000B7                     pingAX@instruction:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x57
   600  0000B7                     	ds	2
   601  0000B9                     pingAX@error:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x59
   605  0000B9                     	ds	2
   606  0000BB                     tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           ; 1 bytes @ 0x5B
   616                           
   617                           	psect	cstackCOMRAM
   618  000001                     __pcstackCOMRAM:
   619                           	opt stack 0
   620  000001                     ?_ADC_GetConversion:
   621                           	opt stack 0
   622  000001                     ?_getAddressSize:
   623                           	opt stack 0
   624  000001                     i2EUSART1_Write@txData:
   625                           	opt stack 0
   626  000001                     getAddressSize@address:
   627                           	opt stack 0
   628  000001                     setLedOn@led:
   629                           	opt stack 0
   630  000001                     setLedOff@led:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x0
   634  000001                     	ds	1
   635  000002                     i2sendAX@buffer:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x1
   639  000002                     	ds	1
   640  000003                     ??_ADC_GetConversion:
   641  000003                     ??_getAddressSize:
   642  000003                     ??_setLedOn:
   643  000003                     ??_setLedOff:
   644                           
   645                           ; 1 bytes @ 0x2
   646  000003                     	ds	1
   647  000004                     i2sendAX@packetSize:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x3
   651  000004                     	ds	1
   652  000005                     ADC_GetConversion@channel:
   653                           	opt stack 0
   654  000005                     handleByteReceived@i:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x4
   658  000005                     	ds	1
   659  000006                     ?_getADC:
   660                           	opt stack 0
   661  000006                     getADC@adc:
   662                           	opt stack 0
   663  000006                     i2sendAX@result:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x5
   667  000006                     	ds	1
   668  000007                     handleByteReceived@data:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x6
   672  000007                     	ds	1
   673  000008                     i2sendAX@parametersToRead:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x7
   677  000008                     	ds	2
   678  00000A                     ??i2_sendAX:
   679                           
   680                           ; 1 bytes @ 0x9
   681  00000A                     	ds	1
   682  00000B                     i2sendAX@stop:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0xA
   686  00000B                     	ds	2
   687  00000D                     i2sendAX@i:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0xC
   691  00000D                     	ds	2
   692  00000F                     i2sendAX@i_1221:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0xE
   696  00000F                     	ds	2
   697  000011                     i2sendAX@i_1224:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x10
   701  000011                     	ds	2
   702  000013                     i2sendAX@r0:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x12
   706  000013                     	ds	2
   707  000015                     i2sendAX@i_1227:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x14
   711  000015                     	ds	2
   712  000017                     i2sendAX@checksum:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x16
   716  000017                     	ds	1
   717  000018                     ?_readAXData:
   718                           	opt stack 0
   719  000018                     ?_writeAXData:
   720                           	opt stack 0
   721  000018                     ?i2_pingAX:
   722                           	opt stack 0
   723  000018                     readAXData@id:
   724                           	opt stack 0
   725  000018                     writeAXData@id:
   726                           	opt stack 0
   727  000018                     i2pingAX@id:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x17
   731  000018                     	ds	2
   732  00001A                     ??i2_pingAX:
   733  00001A                     readAXData@address:
   734                           	opt stack 0
   735  00001A                     writeAXData@address:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x19
   739  00001A                     	ds	1
   740  00001B                     i2pingAX@result:
   741                           	opt stack 0
   742                           
   743                           ; 20 bytes @ 0x1A
   744  00001B                     	ds	1
   745  00001C                     ??_readAXData:
   746  00001C                     writeAXData@data:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x1B
   750  00001C                     	ds	2
   751  00001E                     ??_writeAXData:
   752  00001E                     readAXData@result:
   753                           	opt stack 0
   754                           
   755                           ; 20 bytes @ 0x1D
   756  00001E                     	ds	1
   757  00001F                     writeAXData@result:
   758                           	opt stack 0
   759                           
   760                           ; 20 bytes @ 0x1E
   761  00001F                     	ds	16
   762  00002F                     i2pingAX@packet:
   763                           	opt stack 0
   764                           
   765                           ; 20 bytes @ 0x2E
   766  00002F                     	ds	3
   767  000032                     readAXData@error:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x31
   771  000032                     	ds	1
   772  000033                     writeAXData@packet:
   773                           	opt stack 0
   774                           
   775                           ; 20 bytes @ 0x32
   776  000033                     	ds	1
   777  000034                     readAXData@packet:
   778                           	opt stack 0
   779                           
   780                           ; 20 bytes @ 0x33
   781  000034                     	ds	15
   782  000043                     i2pingAX@nbParameters:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x42
   786  000043                     	ds	2
   787  000045                     i2pingAX@length:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x44
   791  000045                     	ds	2
   792  000047                     writeAXData@nbParameters:
   793                           	opt stack 0
   794  000047                     i2pingAX@instruction:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x46
   798  000047                     	ds	1
   799  000048                     readAXData@nbParameters:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x47
   803  000048                     	ds	1
   804  000049                     writeAXData@length:
   805                           	opt stack 0
   806  000049                     i2pingAX@error:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x48
   810  000049                     	ds	1
   811  00004A                     readAXData@length:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x49
   815  00004A                     	ds	1
   816  00004B                     writeAXData@instruction:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x4A
   820  00004B                     	ds	1
   821  00004C                     readAXData@instruction:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x4B
   825  00004C                     	ds	1
   826  00004D                     writeAXData@error:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x4C
   830  00004D                     	ds	1
   831  00004E                     readAXData@size:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x4D
   835  00004E                     	ds	1
   836  00004F                     writeAXData@size:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x4E
   840  00004F                     	ds	2
   841  000051                     ??_getByteToSend:
   842                           
   843                           ; 1 bytes @ 0x50
   844  000051                     	ds	1
   845  000052                     getByteToSend@error:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x51
   849  000052                     	ds	2
   850  000054                     getByteToSend@error_1278:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x53
   854  000054                     	ds	2
   855  000056                     getByteToSend@xlow:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x55
   859  000056                     	ds	1
   860  000057                     getByteToSend@xhigh:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x56
   864  000057                     	ds	1
   865  000058                     getByteToSend@xlow_1282:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x57
   869  000058                     	ds	1
   870  000059                     getByteToSend@xhigh_1283:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x58
   874  000059                     	ds	1
   875  00005A                     getByteToSend@d:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x59
   879  00005A                     	ds	1
   880  00005B                     getByteToSend@value:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x5A
   884  00005B                     	ds	2
   885  00005D                     getByteToSend@value_1280:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x5C
   889  00005D                     	ds	2
   890  00005F                     tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           postdec1	equ	0xFE5
   897                           fsr1l	equ	0xFE1
   898                           
   899                           ; 1 bytes @ 0x5E
   900 ;;
   901 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   902 ;;
   903 ;; *************** function _main *****************
   904 ;; Defined at:
   905 ;;		line 52 in file "main.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;		None
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  i               2    0[BANK1 ] int 
   910 ;;  delay           2    2[BANK1 ] int 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   921 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   923 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   924 ;;Total ram usage:        4 bytes
   925 ;; Hardware stack levels required when called:   10
   926 ;; This function calls:
   927 ;;		_SYSTEM_Initialize
   928 ;;		_delay_ms
   929 ;;		_pingAX
   930 ;; This function is called by:
   931 ;;		Startup code after reset
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text0
   936  000238                     __ptext0:
   937                           	opt stack 0
   938  000238                     _main:
   939                           	opt stack 21
   940                           
   941                           ;main.c: 54: SYSTEM_Initialize();
   942                           
   943                           ;incstack = 0
   944  000238  ECF7  F006         	call	_SYSTEM_Initialize	;wreg free
   945                           
   946                           ;main.c: 73: (INTCONbits.GIE = 1);
   947  00023C  8EF2               	bsf	intcon,7,c	;volatile
   948                           
   949                           ;main.c: 76: (INTCONbits.PEIE = 1);
   950  00023E  8CF2               	bsf	intcon,6,c	;volatile
   951                           
   952                           ;main.c: 87: do { TRISC0 = 0; } while(0);
   953  000240  9094               	bcf	3988,0,c	;volatile
   954                           
   955                           ;main.c: 88: do { TRISC1 = 0; } while(0);
   956  000242  9294               	bcf	3988,1,c	;volatile
   957                           
   958                           ;main.c: 89: int delay = 10;
   959  000244  0E00               	movlw	0
   960  000246  0101               	movlb	1	; () banked
   961  000248  6F83               	movwf	(main@delay+1)& (0+255),b
   962  00024A  0E0A               	movlw	10
   963  00024C  6F82               	movwf	main@delay& (0+255),b
   964                           
   965                           ; BSR set to: 1
   966                           ;main.c: 90: for (int i = 0; i < 2; i++) {
   967  00024E  0E00               	movlw	0
   968  000250  0101               	movlb	1	; () banked
   969  000252  6F81               	movwf	(main@i+1)& (0+255),b
   970  000254  0E00               	movlw	0
   971  000256  6F80               	movwf	main@i& (0+255),b
   972  000258                     l3103:
   973                           
   974                           ; BSR set to: 1
   975  000258  0101               	movlb	1	; () banked
   976  00025A  BF81               	btfsc	(main@i+1)& (0+255),7,b
   977  00025C  D008               	goto	l361
   978  00025E  0101               	movlb	1	; () banked
   979  000260  5181               	movf	(main@i+1)& (0+255),w,b
   980  000262  E15F               	bnz	l401
   981  000264  0E02               	movlw	2
   982  000266  0101               	movlb	1	; () banked
   983  000268  5D80               	subwf	main@i& (0+255),w,b
   984  00026A  B0D8               	btfsc	status,0,c
   985  00026C  D05A               	goto	l401
   986  00026E                     l361:
   987                           
   988                           ; BSR set to: 1
   989  00026E  868C               	bsf	3980,3,c	;volatile
   990                           
   991                           ; BSR set to: 1
   992                           ;main.c: 93: delay_ms(delay);
   993                           
   994                           ; BSR set to: 1
   995  000270  C182  F079         	movff	main@delay,delay_ms@ms
   996  000274  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
   997  000278  EC95  F004         	call	_delay_ms	;wreg free
   998                           
   999                           ;main.c: 94: do { LATD3 = 0; } while(0);
  1000  00027C  968C               	bcf	3980,3,c	;volatile
  1001                           
  1002                           ;main.c: 95: do { LATD2 = 1; } while(0);
  1003  00027E  848C               	bsf	3980,2,c	;volatile
  1004                           
  1005                           ;main.c: 96: delay_ms(delay);
  1006  000280  C182  F079         	movff	main@delay,delay_ms@ms
  1007  000284  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1008  000288  EC95  F004         	call	_delay_ms	;wreg free
  1009                           
  1010                           ;main.c: 97: do { LATD2 = 0; } while(0);
  1011  00028C  948C               	bcf	3980,2,c	;volatile
  1012                           
  1013                           ;main.c: 98: do { LATD1 = 1; } while(0);
  1014  00028E  828C               	bsf	3980,1,c	;volatile
  1015                           
  1016                           ;main.c: 99: delay_ms(delay);
  1017  000290  C182  F079         	movff	main@delay,delay_ms@ms
  1018  000294  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1019  000298  EC95  F004         	call	_delay_ms	;wreg free
  1020                           
  1021                           ;main.c: 100: do { LATD1 = 0; } while(0);
  1022  00029C  928C               	bcf	3980,1,c	;volatile
  1023                           
  1024                           ;main.c: 101: do { LATD0 = 1; } while(0);
  1025  00029E  808C               	bsf	3980,0,c	;volatile
  1026                           
  1027                           ;main.c: 102: delay_ms(delay);
  1028  0002A0  C182  F079         	movff	main@delay,delay_ms@ms
  1029  0002A4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1030  0002A8  EC95  F004         	call	_delay_ms	;wreg free
  1031                           
  1032                           ;main.c: 103: do { LATD0 = 0; } while(0);
  1033  0002AC  908C               	bcf	3980,0,c	;volatile
  1034                           
  1035                           ;main.c: 104: do { LATC2 = 1; } while(0);
  1036  0002AE  848B               	bsf	3979,2,c	;volatile
  1037                           
  1038                           ;main.c: 105: delay_ms(delay);
  1039  0002B0  C182  F079         	movff	main@delay,delay_ms@ms
  1040  0002B4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1041  0002B8  EC95  F004         	call	_delay_ms	;wreg free
  1042                           
  1043                           ;main.c: 106: do { LATC2 = 0; } while(0);
  1044  0002BC  948B               	bcf	3979,2,c	;volatile
  1045                           
  1046                           ;main.c: 107: do { LATC1 = 1; } while(0);
  1047  0002BE  828B               	bsf	3979,1,c	;volatile
  1048                           
  1049                           ;main.c: 108: delay_ms(delay);
  1050  0002C0  C182  F079         	movff	main@delay,delay_ms@ms
  1051  0002C4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1052  0002C8  EC95  F004         	call	_delay_ms	;wreg free
  1053                           
  1054                           ;main.c: 109: do { LATC1 = 0; } while(0);
  1055  0002CC  928B               	bcf	3979,1,c	;volatile
  1056                           
  1057                           ;main.c: 110: do { LATC0 = 1; } while(0);
  1058  0002CE  808B               	bsf	3979,0,c	;volatile
  1059                           
  1060                           ;main.c: 111: delay_ms(delay);
  1061  0002D0  C182  F079         	movff	main@delay,delay_ms@ms
  1062  0002D4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1063  0002D8  EC95  F004         	call	_delay_ms	;wreg free
  1064                           
  1065                           ;main.c: 112: do { LATC0 = 0; } while(0);
  1066  0002DC  908B               	bcf	3979,0,c	;volatile
  1067                           
  1068                           ;main.c: 113: do { LATB0 = 1; } while(0);
  1069  0002DE  808A               	bsf	3978,0,c	;volatile
  1070                           
  1071                           ;main.c: 114: delay_ms(delay);
  1072  0002E0  C182  F079         	movff	main@delay,delay_ms@ms
  1073  0002E4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1074  0002E8  EC95  F004         	call	_delay_ms	;wreg free
  1075                           
  1076                           ;main.c: 115: do { LATB0 = 0; } while(0);
  1077  0002EC  908A               	bcf	3978,0,c	;volatile
  1078                           
  1079                           ;main.c: 116: do { LATB2 = 1; } while(0);
  1080  0002EE  848A               	bsf	3978,2,c	;volatile
  1081                           
  1082                           ;main.c: 117: delay_ms(delay);
  1083  0002F0  C182  F079         	movff	main@delay,delay_ms@ms
  1084  0002F4  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1085  0002F8  EC95  F004         	call	_delay_ms	;wreg free
  1086                           
  1087                           ;main.c: 118: do { LATB2 = 0; } while(0);
  1088  0002FC  948A               	bcf	3978,2,c	;volatile
  1089                           
  1090                           ;main.c: 119: do { LATB3 = 1; } while(0);
  1091  0002FE  868A               	bsf	3978,3,c	;volatile
  1092                           
  1093                           ;main.c: 120: delay_ms(delay);
  1094  000300  C182  F079         	movff	main@delay,delay_ms@ms
  1095  000304  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1096  000308  EC95  F004         	call	_delay_ms	;wreg free
  1097                           
  1098                           ;main.c: 121: do { LATB3 = 0; } while(0);
  1099  00030C  968A               	bcf	3978,3,c	;volatile
  1100                           
  1101                           ;main.c: 122: delay_ms(delay);
  1102  00030E  C182  F079         	movff	main@delay,delay_ms@ms
  1103  000312  C183  F07A         	movff	main@delay+1,delay_ms@ms+1
  1104  000316  EC95  F004         	call	_delay_ms	;wreg free
  1105  00031A  0101               	movlb	1	; () banked
  1106  00031C  4B80               	infsnz	main@i& (0+255),f,b
  1107  00031E  2B81               	incf	(main@i+1)& (0+255),f,b
  1108  000320  D79B               	goto	l3103
  1109  000322                     l401:
  1110                           
  1111                           ; BSR set to: 1
  1112  000322  988C               	bcf	3980,4,c	;volatile
  1113  000324                     l3151:
  1114                           
  1115                           ;main.c: 129: delay_ms(500);
  1116  000324  0E01               	movlw	1
  1117  000326  0100               	movlb	0	; () banked
  1118  000328  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1119  00032A  0EF4               	movlw	244
  1120  00032C  6F79               	movwf	delay_ms@ms& (0+255),b
  1121  00032E  EC95  F004         	call	_delay_ms	;wreg free
  1122                           
  1123                           ;main.c: 130: do { LATB3 = 1; } while(0);
  1124  000332  868A               	bsf	3978,3,c	;volatile
  1125                           
  1126                           ;main.c: 131: delay_ms(500);
  1127  000334  0E01               	movlw	1
  1128  000336  0100               	movlb	0	; () banked
  1129  000338  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1130  00033A  0EF4               	movlw	244
  1131  00033C  6F79               	movwf	delay_ms@ms& (0+255),b
  1132  00033E  EC95  F004         	call	_delay_ms	;wreg free
  1133                           
  1134                           ;main.c: 133: do { LATB3 = 0; } while(0);
  1135  000342  968A               	bcf	3978,3,c	;volatile
  1136  000344  D7EF               	goto	l3151
  1137  000346                     l411:
  1138  000346  868A               	bsf	3978,3,c	;volatile
  1139                           
  1140                           ;main.c: 140: delay_ms(100);
  1141  000348  0E00               	movlw	0
  1142  00034A  0100               	movlb	0	; () banked
  1143  00034C  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1144  00034E  0E64               	movlw	100
  1145  000350  6F79               	movwf	delay_ms@ms& (0+255),b
  1146  000352  EC95  F004         	call	_delay_ms	;wreg free
  1147                           
  1148                           ;main.c: 141: pingAX(2);
  1149  000356  0E00               	movlw	0
  1150  000358  0100               	movlb	0	; () banked
  1151  00035A  6F89               	movwf	(pingAX@id+1)& (0+255),b
  1152  00035C  0E02               	movlw	2
  1153  00035E  6F88               	movwf	pingAX@id& (0+255),b
  1154  000360  ECDA  F004         	call	_pingAX	;wreg free
  1155                           
  1156                           ;main.c: 142: do { LATB3 = 0; } while(0);
  1157  000364  968A               	bcf	3978,3,c	;volatile
  1158                           
  1159                           ;main.c: 143: delay_ms(100);
  1160  000366  0E00               	movlw	0
  1161  000368  0100               	movlb	0	; () banked
  1162  00036A  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1163  00036C  0E64               	movlw	100
  1164  00036E  6F79               	movwf	delay_ms@ms& (0+255),b
  1165  000370  EC95  F004         	call	_delay_ms	;wreg free
  1166                           
  1167                           ;main.c: 145: do { LATB2 = 1; } while(0);
  1168  000374  848A               	bsf	3978,2,c	;volatile
  1169                           
  1170                           ;main.c: 146: delay_ms(100);
  1171  000376  0E00               	movlw	0
  1172  000378  0100               	movlb	0	; () banked
  1173  00037A  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1174  00037C  0E64               	movlw	100
  1175  00037E  6F79               	movwf	delay_ms@ms& (0+255),b
  1176  000380  EC95  F004         	call	_delay_ms	;wreg free
  1177                           
  1178                           ;main.c: 147: pingAX(2);
  1179  000384  0E00               	movlw	0
  1180  000386  0100               	movlb	0	; () banked
  1181  000388  6F89               	movwf	(pingAX@id+1)& (0+255),b
  1182  00038A  0E02               	movlw	2
  1183  00038C  6F88               	movwf	pingAX@id& (0+255),b
  1184  00038E  ECDA  F004         	call	_pingAX	;wreg free
  1185                           
  1186                           ;main.c: 148: do { LATB2 = 0; } while(0);
  1187  000392  948A               	bcf	3978,2,c	;volatile
  1188                           
  1189                           ;main.c: 149: delay_ms(100);
  1190  000394  0E00               	movlw	0
  1191  000396  0100               	movlb	0	; () banked
  1192  000398  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1193  00039A  0E64               	movlw	100
  1194  00039C  6F79               	movwf	delay_ms@ms& (0+255),b
  1195  00039E  EC95  F004         	call	_delay_ms	;wreg free
  1196                           
  1197                           ;main.c: 151: do { LATB0 = 1; } while(0);
  1198  0003A2  808A               	bsf	3978,0,c	;volatile
  1199                           
  1200                           ;main.c: 152: delay_ms(100);
  1201  0003A4  0E00               	movlw	0
  1202  0003A6  0100               	movlb	0	; () banked
  1203  0003A8  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1204  0003AA  0E64               	movlw	100
  1205  0003AC  6F79               	movwf	delay_ms@ms& (0+255),b
  1206  0003AE  EC95  F004         	call	_delay_ms	;wreg free
  1207                           
  1208                           ;main.c: 153: pingAX(2);
  1209  0003B2  0E00               	movlw	0
  1210  0003B4  0100               	movlb	0	; () banked
  1211  0003B6  6F89               	movwf	(pingAX@id+1)& (0+255),b
  1212  0003B8  0E02               	movlw	2
  1213  0003BA  6F88               	movwf	pingAX@id& (0+255),b
  1214  0003BC  ECDA  F004         	call	_pingAX	;wreg free
  1215                           
  1216                           ;main.c: 154: do { LATB0 = 0; } while(0);
  1217  0003C0  908A               	bcf	3978,0,c	;volatile
  1218                           
  1219                           ;main.c: 155: delay_ms(100);
  1220  0003C2  0E00               	movlw	0
  1221  0003C4  0100               	movlb	0	; () banked
  1222  0003C6  6F7A               	movwf	(delay_ms@ms+1)& (0+255),b
  1223  0003C8  0E64               	movlw	100
  1224  0003CA  6F79               	movwf	delay_ms@ms& (0+255),b
  1225  0003CC  EC95  F004         	call	_delay_ms	;wreg free
  1226  0003D0  D7BA               	goto	l411
  1227  0003D2                     __end_of_main:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           intcon	equ	0xFF2
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _pingAX *****************
  1241 ;; Defined at:
  1242 ;;		line 174 in file "ax.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  id              2   40[BANK0 ] int 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  packet         20   63[BANK0 ] unsigned char [20]
  1247 ;;  result         20   43[BANK0 ] unsigned char [20]
  1248 ;;  error           2   89[BANK0 ] int 
  1249 ;;  instruction     2   87[BANK0 ] int 
  1250 ;;  length          2   85[BANK0 ] int 
  1251 ;;  nbParameters    2   83[BANK0 ] int 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  2   40[BANK0 ] int 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1261 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1262 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1264 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1265 ;;Total ram usage:       51 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    9
  1268 ;; This function calls:
  1269 ;;		_sendAX
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text1
  1276  0009B4                     __ptext1:
  1277                           	opt stack 0
  1278  0009B4                     _pingAX:
  1279                           	opt stack 21
  1280                           
  1281                           ;ax.c: 175: uint8_t packet[20];
  1282                           ;ax.c: 176: uint8_t result[20];
  1283                           ;ax.c: 177: packet[0] = 0xFF;
  1284                           
  1285                           ;incstack = 0
  1286  0009B4  0100               	movlb	0	; () banked
  1287  0009B6  699F               	setf	pingAX@packet& (0+255),b
  1288                           
  1289                           ;ax.c: 178: packet[1] = 0xFF;
  1290  0009B8  0100               	movlb	0	; () banked
  1291  0009BA  69A0               	setf	(pingAX@packet+1)& (0+255),b
  1292                           
  1293                           ;ax.c: 179: packet[2] = id;
  1294  0009BC  C088  F0A1         	movff	pingAX@id,pingAX@packet+2
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;ax.c: 180: int nbParameters = 0;
  1298  0009C0  0E00               	movlw	0
  1299  0009C2  0100               	movlb	0	; () banked
  1300  0009C4  6FB4               	movwf	(pingAX@nbParameters+1)& (0+255),b
  1301  0009C6  0E00               	movlw	0
  1302  0009C8  6FB3               	movwf	pingAX@nbParameters& (0+255),b
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;ax.c: 181: int length = nbParameters + 2;
  1306  0009CA  0E02               	movlw	2
  1307  0009CC  0100               	movlb	0	; () banked
  1308  0009CE  25B3               	addwf	pingAX@nbParameters& (0+255),w,b
  1309  0009D0  0100               	movlb	0	; () banked
  1310  0009D2  6FB5               	movwf	pingAX@length& (0+255),b
  1311  0009D4  0E00               	movlw	0
  1312  0009D6  0100               	movlb	0	; () banked
  1313  0009D8  21B4               	addwfc	(pingAX@nbParameters+1)& (0+255),w,b
  1314  0009DA  0100               	movlb	0	; () banked
  1315  0009DC  6FB6               	movwf	(pingAX@length+1)& (0+255),b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;ax.c: 182: packet[3] = length;
  1319  0009DE  C0B5  F0A2         	movff	pingAX@length,pingAX@packet+3
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;ax.c: 183: int instruction = 0x01;
  1323  0009E2  0E00               	movlw	0
  1324  0009E4  0100               	movlb	0	; () banked
  1325  0009E6  6FB8               	movwf	(pingAX@instruction+1)& (0+255),b
  1326  0009E8  0E01               	movlw	1
  1327  0009EA  6FB7               	movwf	pingAX@instruction& (0+255),b
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;ax.c: 184: packet[4] = instruction;
  1331  0009EC  C0B7  F0A3         	movff	pingAX@instruction,pingAX@packet+4
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;ax.c: 187: int error = sendAX(packet, 5, result, 0);
  1335  0009F0  0E9F               	movlw	low pingAX@packet
  1336  0009F2  0100               	movlb	0	; () banked
  1337  0009F4  6F72               	movwf	sendAX@buffer& (0+255),b
  1338  0009F6  0E00               	movlw	high pingAX@packet
  1339  0009F8  0100               	movlb	0	; () banked
  1340  0009FA  6F73               	movwf	(sendAX@buffer+1)& (0+255),b
  1341  0009FC  0E00               	movlw	0
  1342  0009FE  0100               	movlb	0	; () banked
  1343  000A00  6F75               	movwf	(sendAX@packetSize+1)& (0+255),b
  1344  000A02  0E05               	movlw	5
  1345  000A04  6F74               	movwf	sendAX@packetSize& (0+255),b
  1346  000A06  0E8B               	movlw	low pingAX@result
  1347  000A08  0100               	movlb	0	; () banked
  1348  000A0A  6F76               	movwf	sendAX@result& (0+255),b
  1349  000A0C  0E00               	movlw	high pingAX@result
  1350  000A0E  0100               	movlb	0	; () banked
  1351  000A10  6F77               	movwf	(sendAX@result+1)& (0+255),b
  1352  000A12  0E00               	movlw	0
  1353  000A14  0100               	movlb	0	; () banked
  1354  000A16  6F79               	movwf	(sendAX@parametersToRead+1)& (0+255),b
  1355  000A18  0E00               	movlw	0
  1356  000A1A  6F78               	movwf	sendAX@parametersToRead& (0+255),b
  1357  000A1C  EC47  F000         	call	_sendAX	;wreg free
  1358  000A20  0100               	movlb	0	; () banked
  1359  000A22  6F8A               	movwf	??_pingAX& (0+255),b
  1360  000A24  0100               	movlb	0	; () banked
  1361  000A26  518A               	movf	??_pingAX& (0+255),w,b
  1362  000A28  0100               	movlb	0	; () banked
  1363  000A2A  6FB9               	movwf	pingAX@error& (0+255),b
  1364  000A2C  6BBA               	clrf	(pingAX@error+1)& (0+255),b
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;ax.c: 188: return error;
  1368  000A2E  C0B9  F088         	movff	pingAX@error,?_pingAX
  1369  000A32  C0BA  F089         	movff	pingAX@error+1,?_pingAX+1
  1370  000A36  0012               	return	
  1371  000A38                     __end_of_pingAX:
  1372                           	opt stack 0
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           intcon	equ	0xFF2
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postdec1	equ	0xFE5
  1381                           fsr1l	equ	0xFE1
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _sendAX *****************
  1385 ;; Defined at:
  1386 ;;		line 123 in file "ax.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  buffer          2   18[BANK0 ] PTR unsigned char 
  1389 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  1390 ;;  packetSize      2   20[BANK0 ] int 
  1391 ;;  result          2   22[BANK0 ] PTR unsigned char 
  1392 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  1393 ;;  parametersTo    2   24[BANK0 ] int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  i               2   37[BANK0 ] int 
  1396 ;;  i               2   33[BANK0 ] int 
  1397 ;;  i               2   31[BANK0 ] int 
  1398 ;;  i               2   29[BANK0 ] int 
  1399 ;;  r0              2   35[BANK0 ] int 
  1400 ;;  stop            2   27[BANK0 ] int 
  1401 ;;  checksum        1   39[BANK0 ] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      unsigned char 
  1404 ;; Registers used:
  1405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1411 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1412 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1414 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1415 ;;Total ram usage:       22 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    8
  1418 ;; This function calls:
  1419 ;;		_EUSART1_Read
  1420 ;;		_EUSART1_Write
  1421 ;; This function is called by:
  1422 ;;		_pingAX
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text2
  1427  00008E                     __ptext2:
  1428                           	opt stack 0
  1429  00008E                     _sendAX:
  1430                           	opt stack 21
  1431                           
  1432                           ;ax.c: 124: uint8_t checksum = 0;
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;incstack = 0
  1436  00008E  0E00               	movlw	0
  1437  000090  0100               	movlb	0	; () banked
  1438  000092  6F87               	movwf	sendAX@checksum& (0+255),b
  1439                           
  1440                           ;ax.c: 126: for (int i = 2; i < packetSize; i++) {
  1441  000094  0E00               	movlw	0
  1442  000096  0100               	movlb	0	; () banked
  1443  000098  6F7E               	movwf	(sendAX@i+1)& (0+255),b
  1444  00009A  0E02               	movlw	2
  1445  00009C  6F7D               	movwf	sendAX@i& (0+255),b
  1446  00009E  D010               	goto	l2915
  1447  0000A0                     l2911:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;ax.c: 127: checksum += buffer[i];
  1451  0000A0  0100               	movlb	0	; () banked
  1452  0000A2  517D               	movf	sendAX@i& (0+255),w,b
  1453  0000A4  0100               	movlb	0	; () banked
  1454  0000A6  2572               	addwf	sendAX@buffer& (0+255),w,b
  1455  0000A8  6ED9               	movwf	fsr2l,c
  1456  0000AA  0100               	movlb	0	; () banked
  1457  0000AC  517E               	movf	(sendAX@i+1)& (0+255),w,b
  1458  0000AE  0100               	movlb	0	; () banked
  1459  0000B0  2173               	addwfc	(sendAX@buffer+1)& (0+255),w,b
  1460  0000B2  6EDA               	movwf	fsr2h,c
  1461  0000B4  50DF               	movf	indf2,w,c
  1462  0000B6  0100               	movlb	0	; () banked
  1463  0000B8  2787               	addwf	sendAX@checksum& (0+255),f,b
  1464                           
  1465                           ; BSR set to: 0
  1466  0000BA  0100               	movlb	0	; () banked
  1467  0000BC  4B7D               	infsnz	sendAX@i& (0+255),f,b
  1468  0000BE  2B7E               	incf	(sendAX@i+1)& (0+255),f,b
  1469  0000C0                     l2915:
  1470                           
  1471                           ; BSR set to: 0
  1472  0000C0  0100               	movlb	0	; () banked
  1473  0000C2  5174               	movf	sendAX@packetSize& (0+255),w,b
  1474  0000C4  0100               	movlb	0	; () banked
  1475  0000C6  5D7D               	subwf	sendAX@i& (0+255),w,b
  1476  0000C8  0100               	movlb	0	; () banked
  1477  0000CA  517E               	movf	(sendAX@i+1)& (0+255),w,b
  1478  0000CC  0A80               	xorlw	128
  1479  0000CE  0100               	movlb	0	; () banked
  1480  0000D0  6F7A               	movwf	??_sendAX& (0+255),b
  1481  0000D2  0100               	movlb	0	; () banked
  1482  0000D4  5175               	movf	(sendAX@packetSize+1)& (0+255),w,b
  1483  0000D6  0A80               	xorlw	128
  1484  0000D8  0100               	movlb	0	; () banked
  1485  0000DA  597A               	subwfb	??_sendAX& (0+255),w,b
  1486  0000DC  A0D8               	btfss	status,0,c
  1487  0000DE  D7E0               	goto	l2911
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;ax.c: 128: }
  1491                           ;ax.c: 129: checksum = ~checksum;
  1492                           
  1493                           ; BSR set to: 0
  1494  0000E0  0100               	movlb	0	; () banked
  1495  0000E2  1F87               	comf	sendAX@checksum& (0+255),f,b
  1496                           
  1497                           ; BSR set to: 0
  1498                           
  1499                           ; BSR set to: 0
  1500                           
  1501                           ;ax.c: 131: do { LATD4 = 1; } while(0);
  1502  0000E4  888C               	bsf	3980,4,c	;volatile
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;ax.c: 132: for (int i = 0; i < packetSize; i++) {
  1506                           
  1507                           ; BSR set to: 0
  1508  0000E6  0E00               	movlw	0
  1509  0000E8  0100               	movlb	0	; () banked
  1510  0000EA  6F80               	movwf	(sendAX@i_1221+1)& (0+255),b
  1511  0000EC  0E00               	movlw	0
  1512  0000EE  6F7F               	movwf	sendAX@i_1221& (0+255),b
  1513  0000F0  D010               	goto	l2927
  1514  0000F2                     l2923:
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;ax.c: 133: EUSART1_Write(buffer[i]);
  1518  0000F2  0100               	movlb	0	; () banked
  1519  0000F4  517F               	movf	sendAX@i_1221& (0+255),w,b
  1520  0000F6  0100               	movlb	0	; () banked
  1521  0000F8  2572               	addwf	sendAX@buffer& (0+255),w,b
  1522  0000FA  6ED9               	movwf	fsr2l,c
  1523  0000FC  0100               	movlb	0	; () banked
  1524  0000FE  5180               	movf	(sendAX@i_1221+1)& (0+255),w,b
  1525  000100  0100               	movlb	0	; () banked
  1526  000102  2173               	addwfc	(sendAX@buffer+1)& (0+255),w,b
  1527  000104  6EDA               	movwf	fsr2h,c
  1528  000106  50DF               	movf	indf2,w,c
  1529  000108  EC63  F007         	call	_EUSART1_Write
  1530  00010C  0100               	movlb	0	; () banked
  1531  00010E  4B7F               	infsnz	sendAX@i_1221& (0+255),f,b
  1532  000110  2B80               	incf	(sendAX@i_1221+1)& (0+255),f,b
  1533  000112                     l2927:
  1534                           
  1535                           ; BSR set to: 0
  1536  000112  0100               	movlb	0	; () banked
  1537  000114  5174               	movf	sendAX@packetSize& (0+255),w,b
  1538  000116  0100               	movlb	0	; () banked
  1539  000118  5D7F               	subwf	sendAX@i_1221& (0+255),w,b
  1540  00011A  0100               	movlb	0	; () banked
  1541  00011C  5180               	movf	(sendAX@i_1221+1)& (0+255),w,b
  1542  00011E  0A80               	xorlw	128
  1543  000120  0100               	movlb	0	; () banked
  1544  000122  6F7A               	movwf	??_sendAX& (0+255),b
  1545  000124  0100               	movlb	0	; () banked
  1546  000126  5175               	movf	(sendAX@packetSize+1)& (0+255),w,b
  1547  000128  0A80               	xorlw	128
  1548  00012A  0100               	movlb	0	; () banked
  1549  00012C  597A               	subwfb	??_sendAX& (0+255),w,b
  1550  00012E  A0D8               	btfss	status,0,c
  1551  000130  D7E0               	goto	l2923
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;ax.c: 134: }
  1555                           ;ax.c: 135: EUSART1_Write(checksum);
  1556                           
  1557                           ; BSR set to: 0
  1558  000132  0100               	movlb	0	; () banked
  1559  000134  5187               	movf	sendAX@checksum& (0+255),w,b
  1560  000136  EC63  F007         	call	_EUSART1_Write
  1561                           
  1562                           ;ax.c: 136: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1563  00013A  0E85               	movlw	133
  1564  00013C                     u1297:
  1565  00013C  2EE8               	decfsz	wreg,f,c
  1566  00013E  D7FE               	goto	u1297
  1567  000140  F000               	nop	
  1568                           
  1569                           ;ax.c: 137: do { LATD4 = 0; } while(0);
  1570  000142  988C               	bcf	3980,4,c	;volatile
  1571                           
  1572                           ;ax.c: 153: int stop = 6 + parametersToRead;
  1573  000144  0E06               	movlw	6
  1574  000146  0100               	movlb	0	; () banked
  1575  000148  2578               	addwf	sendAX@parametersToRead& (0+255),w,b
  1576  00014A  0100               	movlb	0	; () banked
  1577  00014C  6F7B               	movwf	sendAX@stop& (0+255),b
  1578  00014E  0E00               	movlw	0
  1579  000150  0100               	movlb	0	; () banked
  1580  000152  2179               	addwfc	(sendAX@parametersToRead+1)& (0+255),w,b
  1581  000154  0100               	movlb	0	; () banked
  1582  000156  6F7C               	movwf	(sendAX@stop+1)& (0+255),b
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;ax.c: 155: for (int i = 0; i < stop; i++) {
  1586  000158  0E00               	movlw	0
  1587  00015A  0100               	movlb	0	; () banked
  1588  00015C  6F82               	movwf	(sendAX@i_1224+1)& (0+255),b
  1589  00015E  0E00               	movlw	0
  1590  000160  6F81               	movwf	sendAX@i_1224& (0+255),b
  1591  000162  D00F               	goto	l2943
  1592  000164                     l2939:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;ax.c: 156: result[i] = 122;
  1596  000164  0100               	movlb	0	; () banked
  1597  000166  5181               	movf	sendAX@i_1224& (0+255),w,b
  1598  000168  0100               	movlb	0	; () banked
  1599  00016A  2576               	addwf	sendAX@result& (0+255),w,b
  1600  00016C  6ED9               	movwf	fsr2l,c
  1601  00016E  0100               	movlb	0	; () banked
  1602  000170  5182               	movf	(sendAX@i_1224+1)& (0+255),w,b
  1603  000172  0100               	movlb	0	; () banked
  1604  000174  2177               	addwfc	(sendAX@result+1)& (0+255),w,b
  1605  000176  6EDA               	movwf	fsr2h,c
  1606  000178  0E7A               	movlw	122
  1607  00017A  6EDF               	movwf	indf2,c
  1608                           
  1609                           ; BSR set to: 0
  1610  00017C  0100               	movlb	0	; () banked
  1611  00017E  4B81               	infsnz	sendAX@i_1224& (0+255),f,b
  1612  000180  2B82               	incf	(sendAX@i_1224+1)& (0+255),f,b
  1613  000182                     l2943:
  1614                           
  1615                           ; BSR set to: 0
  1616  000182  0100               	movlb	0	; () banked
  1617  000184  517B               	movf	sendAX@stop& (0+255),w,b
  1618  000186  0100               	movlb	0	; () banked
  1619  000188  5D81               	subwf	sendAX@i_1224& (0+255),w,b
  1620  00018A  0100               	movlb	0	; () banked
  1621  00018C  5182               	movf	(sendAX@i_1224+1)& (0+255),w,b
  1622  00018E  0A80               	xorlw	128
  1623  000190  0100               	movlb	0	; () banked
  1624  000192  6F7A               	movwf	??_sendAX& (0+255),b
  1625  000194  0100               	movlb	0	; () banked
  1626  000196  517C               	movf	(sendAX@stop+1)& (0+255),w,b
  1627  000198  0A80               	xorlw	128
  1628  00019A  0100               	movlb	0	; () banked
  1629  00019C  597A               	subwfb	??_sendAX& (0+255),w,b
  1630  00019E  A0D8               	btfss	status,0,c
  1631  0001A0  D7E1               	goto	l2939
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;ax.c: 157: }
  1635                           ;ax.c: 159: int r0 = EUSART1_Read();
  1636                           
  1637                           ; BSR set to: 0
  1638  0001A2  EC38  F007         	call	_EUSART1_Read	;wreg free
  1639  0001A6  D002               	goto	L2
  1640  0001A8                     l2947:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;ax.c: 161: r0 = EUSART1_Read();
  1644  0001A8  EC38  F007         	call	_EUSART1_Read	;wreg free
  1645  0001AC                     L2:
  1646  0001AC  0100               	movlb	0	; () banked
  1647  0001AE  6F7A               	movwf	??_sendAX& (0+255),b
  1648  0001B0  0100               	movlb	0	; () banked
  1649  0001B2  517A               	movf	??_sendAX& (0+255),w,b
  1650  0001B4  0100               	movlb	0	; () banked
  1651  0001B6  6F83               	movwf	sendAX@r0& (0+255),b
  1652  0001B8  6B84               	clrf	(sendAX@r0+1)& (0+255),b
  1653                           
  1654                           ; BSR set to: 0
  1655                           
  1656                           ; BSR set to: 0
  1657  0001BA  0100               	movlb	0	; () banked
  1658  0001BC  2983               	incf	sendAX@r0& (0+255),w,b
  1659  0001BE  0100               	movlb	0	; () banked
  1660  0001C0  1184               	iorwf	(sendAX@r0+1)& (0+255),w,b
  1661  0001C2  A4D8               	btfss	status,2,c
  1662  0001C4  D7F1               	goto	l2947
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;ax.c: 162: }
  1666                           ;ax.c: 163: result[0] = r0;
  1667                           
  1668                           ; BSR set to: 0
  1669  0001C6  C076  FFD9         	movff	sendAX@result,fsr2l
  1670  0001CA  C077  FFDA         	movff	sendAX@result+1,fsr2h
  1671  0001CE  C083  FFDF         	movff	sendAX@r0,indf2
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;ax.c: 164: for (int i = 1; i < stop; i++) {
  1675  0001D2  0E00               	movlw	0
  1676  0001D4  0100               	movlb	0	; () banked
  1677  0001D6  6F86               	movwf	(sendAX@i_1227+1)& (0+255),b
  1678  0001D8  0E01               	movlw	1
  1679  0001DA  6F85               	movwf	sendAX@i_1227& (0+255),b
  1680  0001DC  D010               	goto	l2959
  1681  0001DE                     l2955:
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;ax.c: 165: result[i] = EUSART1_Read();
  1685  0001DE  0100               	movlb	0	; () banked
  1686  0001E0  5185               	movf	sendAX@i_1227& (0+255),w,b
  1687  0001E2  0100               	movlb	0	; () banked
  1688  0001E4  2576               	addwf	sendAX@result& (0+255),w,b
  1689  0001E6  6ED9               	movwf	fsr2l,c
  1690  0001E8  0100               	movlb	0	; () banked
  1691  0001EA  5186               	movf	(sendAX@i_1227+1)& (0+255),w,b
  1692  0001EC  0100               	movlb	0	; () banked
  1693  0001EE  2177               	addwfc	(sendAX@result+1)& (0+255),w,b
  1694  0001F0  6EDA               	movwf	fsr2h,c
  1695  0001F2  EC38  F007         	call	_EUSART1_Read	;wreg free
  1696  0001F6  6EDF               	movwf	indf2,c
  1697  0001F8  0100               	movlb	0	; () banked
  1698  0001FA  4B85               	infsnz	sendAX@i_1227& (0+255),f,b
  1699  0001FC  2B86               	incf	(sendAX@i_1227+1)& (0+255),f,b
  1700  0001FE                     l2959:
  1701                           
  1702                           ; BSR set to: 0
  1703  0001FE  0100               	movlb	0	; () banked
  1704  000200  517B               	movf	sendAX@stop& (0+255),w,b
  1705  000202  0100               	movlb	0	; () banked
  1706  000204  5D85               	subwf	sendAX@i_1227& (0+255),w,b
  1707  000206  0100               	movlb	0	; () banked
  1708  000208  5186               	movf	(sendAX@i_1227+1)& (0+255),w,b
  1709  00020A  0A80               	xorlw	128
  1710  00020C  0100               	movlb	0	; () banked
  1711  00020E  6F7A               	movwf	??_sendAX& (0+255),b
  1712  000210  0100               	movlb	0	; () banked
  1713  000212  517C               	movf	(sendAX@stop+1)& (0+255),w,b
  1714  000214  0A80               	xorlw	128
  1715  000216  0100               	movlb	0	; () banked
  1716  000218  597A               	subwfb	??_sendAX& (0+255),w,b
  1717  00021A  A0D8               	btfss	status,0,c
  1718  00021C  D7E0               	goto	l2955
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;ax.c: 166: }
  1722                           ;ax.c: 169: _delay((unsigned long)((200)*(16000000/4000000.0)));
  1723                           
  1724                           ; BSR set to: 0
  1725  00021E  0EC8               	movlw	200
  1726  000220                     u1307:
  1727  000220  F000               	nop	
  1728  000222  2EE8               	decfsz	wreg,f,c
  1729  000224  D7FD               	goto	u1307
  1730                           
  1731                           ;ax.c: 170: return result[4];
  1732  000226  0100               	movlb	0	; () banked
  1733  000228  EE20 F004          	lfsr	2,4
  1734  00022C  5176               	movf	sendAX@result& (0+255),w,b
  1735  00022E  26D9               	addwf	fsr2l,f,c
  1736  000230  5177               	movf	(sendAX@result+1)& (0+255),w,b
  1737  000232  22DA               	addwfc	fsr2h,f,c
  1738  000234  50DF               	movf	indf2,w,c
  1739  000236  0012               	return	
  1740  000238                     __end_of_sendAX:
  1741                           	opt stack 0
  1742                           tblptru	equ	0xFF8
  1743                           tblptrh	equ	0xFF7
  1744                           tblptrl	equ	0xFF6
  1745                           tablat	equ	0xFF5
  1746                           intcon	equ	0xFF2
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           indf2	equ	0xFDF
  1752                           fsr2h	equ	0xFDA
  1753                           fsr2l	equ	0xFD9
  1754                           status	equ	0xFD8
  1755                           
  1756 ;; *************** function _EUSART1_Write *****************
  1757 ;; Defined at:
  1758 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  txData          1    wreg     unsigned char 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  txData          1   17[BANK0 ] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1775 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1776 ;;Total ram usage:        1 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    7
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_sendAX
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text3
  1787  000EC6                     __ptext3:
  1788                           	opt stack 0
  1789  000EC6                     _EUSART1_Write:
  1790                           	opt stack 21
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;incstack = 0
  1794                           ;EUSART1_Write@txData stored from wreg
  1795  000EC6  0100               	movlb	0	; () banked
  1796  000EC8  6F71               	movwf	EUSART1_Write@txData& (0+255),b
  1797  000ECA                     l122:
  1798  000ECA  A89E               	btfss	3998,4,c	;volatile
  1799  000ECC  D7FE               	goto	l122
  1800                           
  1801                           ;eusart1.c: 101: }
  1802                           ;eusart1.c: 103: TXREG1 = txData;
  1803  000ECE  C071  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1804  000ED2  0012               	return		;funcret
  1805  000ED4                     __end_of_EUSART1_Write:
  1806                           	opt stack 0
  1807                           tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           intcon	equ	0xFF2
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           indf2	equ	0xFDF
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _EUSART1_Read *****************
  1822 ;; Defined at:
  1823 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      unsigned char 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    7
  1844 ;; This function calls:
  1845 ;;		Nothing
  1846 ;; This function is called by:
  1847 ;;		_sendAX
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text4
  1852  000E70                     __ptext4:
  1853                           	opt stack 0
  1854  000E70                     _EUSART1_Read:
  1855                           	opt stack 21
  1856                           
  1857                           ;eusart1.c: 80: RCSTA1bits.SREN = 1;
  1858                           
  1859                           ;incstack = 0
  1860  000E70  8AAB               	bsf	4011,5,c	;volatile
  1861  000E72                     l115:
  1862  000E72  AA9E               	btfss	3998,5,c	;volatile
  1863  000E74  D7FE               	goto	l115
  1864                           
  1865                           ;eusart1.c: 83: }
  1866                           ;eusart1.c: 86: if(1 == RCSTA1bits.OERR)
  1867  000E76  A2AB               	btfss	4011,1,c	;volatile
  1868  000E78  D002               	goto	l2869
  1869                           
  1870                           ;eusart1.c: 87: {
  1871                           ;eusart1.c: 90: RCSTA1bits.SPEN = 0;
  1872  000E7A  9EAB               	bcf	4011,7,c	;volatile
  1873                           
  1874                           ;eusart1.c: 91: RCSTA1bits.SPEN = 1;
  1875  000E7C  8EAB               	bsf	4011,7,c	;volatile
  1876  000E7E                     l2869:
  1877                           
  1878                           ;eusart1.c: 92: }
  1879                           ;eusart1.c: 94: return RCREG1;
  1880  000E7E  50AE               	movf	4014,w,c	;volatile
  1881  000E80  0012               	return	
  1882  000E82                     __end_of_EUSART1_Read:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1l	equ	0xFE1
  1893                           indf2	equ	0xFDF
  1894                           fsr2h	equ	0xFDA
  1895                           fsr2l	equ	0xFD9
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _delay_ms *****************
  1899 ;; Defined at:
  1900 ;;		line 11 in file "ax.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  ms              2   25[BANK0 ] int 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  i               2   30[BANK0 ] int 
  1905 ;;  n               2   28[BANK0 ] int 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0, cstack
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1916 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1918 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1919 ;;Total ram usage:        7 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    8
  1922 ;; This function calls:
  1923 ;;		___awdiv
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;;		_I2C_StatusCallbackOld
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text5
  1931  00092A                     __ptext5:
  1932                           	opt stack 0
  1933  00092A                     _delay_ms:
  1934                           	opt stack 22
  1935                           
  1936                           ;ax.c: 12: if (ms < 10) {
  1937                           
  1938                           ;incstack = 0
  1939  00092A  0100               	movlb	0	; () banked
  1940  00092C  BF7A               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  1941  00092E  D008               	goto	l3031
  1942  000930  0100               	movlb	0	; () banked
  1943  000932  517A               	movf	(delay_ms@ms+1)& (0+255),w,b
  1944  000934  E10E               	bnz	l3033
  1945  000936  0E0A               	movlw	10
  1946  000938  0100               	movlb	0	; () banked
  1947  00093A  5D79               	subwf	delay_ms@ms& (0+255),w,b
  1948  00093C  B0D8               	btfsc	status,0,c
  1949  00093E  D009               	goto	l3033
  1950  000940                     l3031:
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;ax.c: 13: _delay((unsigned long)((10)*(16000000/4000.0)));
  1954  000940  0E34               	movlw	52
  1955  000942  0100               	movlb	0	; () banked
  1956  000944  6F7B               	movwf	??_delay_ms& (0+255),b
  1957  000946  0EF2               	movlw	242
  1958  000948                     u1317:
  1959  000948  2EE8               	decfsz	wreg,f,c
  1960  00094A  D7FE               	goto	u1317
  1961  00094C  2F7B               	decfsz	??_delay_ms& (0+255),f,b
  1962  00094E  D7FC               	goto	u1317
  1963                           
  1964                           ;ax.c: 14: } else {
  1965  000950  0012               	return	
  1966  000952                     l3033:
  1967                           
  1968                           ;ax.c: 15: int n = ms / 10;
  1969  000952  C079  F071         	movff	delay_ms@ms,___awdiv@dividend
  1970  000956  C07A  F072         	movff	delay_ms@ms+1,___awdiv@dividend+1
  1971  00095A  0E00               	movlw	0
  1972  00095C  0100               	movlb	0	; () banked
  1973  00095E  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  1974  000960  0E0A               	movlw	10
  1975  000962  6F73               	movwf	___awdiv@divisor& (0+255),b
  1976  000964  ECA0  F003         	call	___awdiv	;wreg free
  1977  000968  C071  F07C         	movff	?___awdiv,delay_ms@n
  1978  00096C  C072  F07D         	movff	?___awdiv+1,delay_ms@n+1
  1979                           
  1980                           ;ax.c: 16: for (int i = 0; i < n; i++) {
  1981  000970  0E00               	movlw	0
  1982  000972  0100               	movlb	0	; () banked
  1983  000974  6F7F               	movwf	(delay_ms@i+1)& (0+255),b
  1984  000976  0E00               	movlw	0
  1985  000978  6F7E               	movwf	delay_ms@i& (0+255),b
  1986  00097A  D00B               	goto	l460
  1987  00097C                     l3037:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;ax.c: 17: _delay((unsigned long)((10)*(16000000/4000.0)));
  1991  00097C  0E34               	movlw	52
  1992  00097E  0100               	movlb	0	; () banked
  1993  000980  6F7B               	movwf	??_delay_ms& (0+255),b
  1994  000982  0EF2               	movlw	242
  1995  000984                     u1327:
  1996  000984  2EE8               	decfsz	wreg,f,c
  1997  000986  D7FE               	goto	u1327
  1998  000988  2F7B               	decfsz	??_delay_ms& (0+255),f,b
  1999  00098A  D7FC               	goto	u1327
  2000  00098C  0100               	movlb	0	; () banked
  2001  00098E  4B7E               	infsnz	delay_ms@i& (0+255),f,b
  2002  000990  2B7F               	incf	(delay_ms@i+1)& (0+255),f,b
  2003  000992                     l460:
  2004                           
  2005                           ; BSR set to: 0
  2006  000992  0100               	movlb	0	; () banked
  2007  000994  517C               	movf	delay_ms@n& (0+255),w,b
  2008  000996  0100               	movlb	0	; () banked
  2009  000998  5D7E               	subwf	delay_ms@i& (0+255),w,b
  2010  00099A  0100               	movlb	0	; () banked
  2011  00099C  517F               	movf	(delay_ms@i+1)& (0+255),w,b
  2012  00099E  0A80               	xorlw	128
  2013  0009A0  0100               	movlb	0	; () banked
  2014  0009A2  6F7B               	movwf	??_delay_ms& (0+255),b
  2015  0009A4  0100               	movlb	0	; () banked
  2016  0009A6  517D               	movf	(delay_ms@n+1)& (0+255),w,b
  2017  0009A8  0A80               	xorlw	128
  2018  0009AA  0100               	movlb	0	; () banked
  2019  0009AC  597B               	subwfb	??_delay_ms& (0+255),w,b
  2020  0009AE  B0D8               	btfsc	status,0,c
  2021  0009B0  0012               	return	
  2022  0009B2  D7E4               	goto	l3037
  2023  0009B4                     __end_of_delay_ms:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           intcon	equ	0xFF2
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           fsr2h	equ	0xFDA
  2036                           fsr2l	equ	0xFD9
  2037                           status	equ	0xFD8
  2038                           
  2039 ;; *************** function ___awdiv *****************
  2040 ;; Defined at:
  2041 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  dividend        2   17[BANK0 ] int 
  2044 ;;  divisor         2   19[BANK0 ] int 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  quotient        2   23[BANK0 ] int 
  2047 ;;  sign            1   22[BANK0 ] unsigned char 
  2048 ;;  counter         1   21[BANK0 ] unsigned char 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  2   17[BANK0 ] int 
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2058 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;Total ram usage:        8 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    7
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_delay_ms
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text6
  2073  000740                     __ptext6:
  2074                           	opt stack 0
  2075  000740                     ___awdiv:
  2076                           	opt stack 22
  2077                           
  2078                           ;incstack = 0
  2079  000740  0E00               	movlw	0
  2080  000742  0100               	movlb	0	; () banked
  2081  000744  6F76               	movwf	___awdiv@sign& (0+255),b
  2082                           
  2083                           ; BSR set to: 0
  2084  000746  0100               	movlb	0	; () banked
  2085  000748  AF74               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2086  00074A  D008               	goto	l2975
  2087                           
  2088                           ; BSR set to: 0
  2089  00074C  0100               	movlb	0	; () banked
  2090  00074E  6D73               	negf	___awdiv@divisor& (0+255),b
  2091  000750  1F74               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2092  000752  B0D8               	btfsc	status,0,c
  2093  000754  2B74               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2094                           
  2095                           ; BSR set to: 0
  2096  000756  0E01               	movlw	1
  2097  000758  0100               	movlb	0	; () banked
  2098  00075A  6F76               	movwf	___awdiv@sign& (0+255),b
  2099  00075C                     l2975:
  2100                           
  2101                           ; BSR set to: 0
  2102  00075C  0100               	movlb	0	; () banked
  2103  00075E  AF72               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2104  000760  D008               	goto	l2981
  2105                           
  2106                           ; BSR set to: 0
  2107  000762  0100               	movlb	0	; () banked
  2108  000764  6D71               	negf	___awdiv@dividend& (0+255),b
  2109  000766  1F72               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2110  000768  B0D8               	btfsc	status,0,c
  2111  00076A  2B72               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2112                           
  2113                           ; BSR set to: 0
  2114  00076C  0E01               	movlw	1
  2115  00076E  0100               	movlb	0	; () banked
  2116  000770  1B76               	xorwf	___awdiv@sign& (0+255),f,b
  2117  000772                     l2981:
  2118                           
  2119                           ; BSR set to: 0
  2120  000772  0E00               	movlw	0
  2121  000774  0100               	movlb	0	; () banked
  2122  000776  6F78               	movwf	(___awdiv@quotient+1)& (0+255),b
  2123  000778  0E00               	movlw	0
  2124  00077A  6F77               	movwf	___awdiv@quotient& (0+255),b
  2125                           
  2126                           ; BSR set to: 0
  2127  00077C  0100               	movlb	0	; () banked
  2128  00077E  5173               	movf	___awdiv@divisor& (0+255),w,b
  2129  000780  0100               	movlb	0	; () banked
  2130  000782  1174               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2131  000784  B4D8               	btfsc	status,2,c
  2132  000786  D02C               	goto	l3003
  2133                           
  2134                           ; BSR set to: 0
  2135  000788  0E01               	movlw	1
  2136  00078A  0100               	movlb	0	; () banked
  2137  00078C  6F75               	movwf	___awdiv@counter& (0+255),b
  2138  00078E  D006               	goto	l2989
  2139  000790                     l2987:
  2140                           
  2141                           ; BSR set to: 0
  2142  000790  0100               	movlb	0	; () banked
  2143  000792  90D8               	bcf	status,0,c
  2144  000794  3773               	rlcf	___awdiv@divisor& (0+255),f,b
  2145  000796  3774               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2146  000798  0100               	movlb	0	; () banked
  2147  00079A  2B75               	incf	___awdiv@counter& (0+255),f,b
  2148  00079C                     l2989:
  2149                           
  2150                           ; BSR set to: 0
  2151  00079C  0100               	movlb	0	; () banked
  2152  00079E  AF74               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2153  0007A0  D7F7               	goto	l2987
  2154  0007A2                     l2991:
  2155                           
  2156                           ; BSR set to: 0
  2157  0007A2  0100               	movlb	0	; () banked
  2158  0007A4  90D8               	bcf	status,0,c
  2159  0007A6  3777               	rlcf	___awdiv@quotient& (0+255),f,b
  2160  0007A8  3778               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2161                           
  2162                           ; BSR set to: 0
  2163  0007AA  0100               	movlb	0	; () banked
  2164  0007AC  5173               	movf	___awdiv@divisor& (0+255),w,b
  2165  0007AE  0100               	movlb	0	; () banked
  2166  0007B0  5D71               	subwf	___awdiv@dividend& (0+255),w,b
  2167  0007B2  0100               	movlb	0	; () banked
  2168  0007B4  5174               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2169  0007B6  0100               	movlb	0	; () banked
  2170  0007B8  5972               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2171  0007BA  A0D8               	btfss	status,0,c
  2172  0007BC  D00A               	goto	l2999
  2173                           
  2174                           ; BSR set to: 0
  2175  0007BE  0100               	movlb	0	; () banked
  2176  0007C0  5173               	movf	___awdiv@divisor& (0+255),w,b
  2177  0007C2  0100               	movlb	0	; () banked
  2178  0007C4  5F71               	subwf	___awdiv@dividend& (0+255),f,b
  2179  0007C6  0100               	movlb	0	; () banked
  2180  0007C8  5174               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2181  0007CA  0100               	movlb	0	; () banked
  2182  0007CC  5B72               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2183                           
  2184                           ; BSR set to: 0
  2185  0007CE  0100               	movlb	0	; () banked
  2186  0007D0  8177               	bsf	___awdiv@quotient& (0+255),0,b
  2187  0007D2                     l2999:
  2188                           
  2189                           ; BSR set to: 0
  2190  0007D2  0100               	movlb	0	; () banked
  2191  0007D4  90D8               	bcf	status,0,c
  2192  0007D6  3374               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2193  0007D8  3373               	rrcf	___awdiv@divisor& (0+255),f,b
  2194                           
  2195                           ; BSR set to: 0
  2196  0007DA  0100               	movlb	0	; () banked
  2197  0007DC  2F75               	decfsz	___awdiv@counter& (0+255),f,b
  2198  0007DE  D7E1               	goto	l2991
  2199  0007E0                     l3003:
  2200                           
  2201                           ; BSR set to: 0
  2202  0007E0  0100               	movlb	0	; () banked
  2203  0007E2  5176               	movf	___awdiv@sign& (0+255),w,b
  2204  0007E4  0100               	movlb	0	; () banked
  2205  0007E6  B4D8               	btfsc	status,2,c
  2206  0007E8  D005               	goto	l3007
  2207                           
  2208                           ; BSR set to: 0
  2209  0007EA  0100               	movlb	0	; () banked
  2210  0007EC  6D77               	negf	___awdiv@quotient& (0+255),b
  2211  0007EE  1F78               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2212  0007F0  B0D8               	btfsc	status,0,c
  2213  0007F2  2B78               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2214  0007F4                     l3007:
  2215                           
  2216                           ; BSR set to: 0
  2217  0007F4  C077  F071         	movff	___awdiv@quotient,?___awdiv
  2218  0007F8  C078  F072         	movff	___awdiv@quotient+1,?___awdiv+1
  2219  0007FC  0012               	return	
  2220  0007FE                     __end_of___awdiv:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postdec1	equ	0xFE5
  2230                           fsr1l	equ	0xFE1
  2231                           indf2	equ	0xFDF
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function _SYSTEM_Initialize *****************
  2237 ;; Defined at:
  2238 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2256 ;;Total ram usage:        0 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    9
  2259 ;; This function calls:
  2260 ;;		_ADC_Initialize
  2261 ;;		_ECCP1_Initialize
  2262 ;;		_EUSART1_Initialize
  2263 ;;		_EUSART2_Initialize
  2264 ;;		_I2C_Initialize
  2265 ;;		_INTERRUPT_Initialize
  2266 ;;		_OSCILLATOR_Initialize
  2267 ;;		_PIN_MANAGER_Initialize
  2268 ;;		_TMR1_Initialize
  2269 ;; This function is called by:
  2270 ;;		_main
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text7
  2275  000DEE                     __ptext7:
  2276                           	opt stack 0
  2277  000DEE                     _SYSTEM_Initialize:
  2278                           	opt stack 21
  2279                           
  2280                           ;mcc.c: 113: INTERRUPT_Initialize();
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;incstack = 0
  2284  000DEE  EC70  F007         	call	_INTERRUPT_Initialize	;wreg free
  2285                           
  2286                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  2287  000DF2  ECC7  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  2288                           
  2289                           ;mcc.c: 115: OSCILLATOR_Initialize();
  2290  000DF6  EC41  F007         	call	_OSCILLATOR_Initialize	;wreg free
  2291                           
  2292                           ;mcc.c: 116: I2C_Initialize();
  2293  000DFA  EC0A  F007         	call	_I2C_Initialize	;wreg free
  2294                           
  2295                           ;mcc.c: 117: ECCP1_Initialize();
  2296  000DFE  EC53  F007         	call	_ECCP1_Initialize	;wreg free
  2297                           
  2298                           ;mcc.c: 118: ADC_Initialize();
  2299  000E02  EC2D  F007         	call	_ADC_Initialize	;wreg free
  2300                           
  2301                           ;mcc.c: 119: TMR1_Initialize();
  2302  000E06  ECAA  F006         	call	_TMR1_Initialize	;wreg free
  2303                           
  2304                           ;mcc.c: 120: EUSART1_Initialize();
  2305  000E0A  EC22  F007         	call	_EUSART1_Initialize	;wreg free
  2306                           
  2307                           ;mcc.c: 121: EUSART2_Initialize();
  2308  000E0E  EC17  F007         	call	_EUSART2_Initialize	;wreg free
  2309  000E12  0012               	return		;funcret
  2310  000E14                     __end_of_SYSTEM_Initialize:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           intcon	equ	0xFF2
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           postdec1	equ	0xFE5
  2320                           fsr1l	equ	0xFE1
  2321                           indf2	equ	0xFDF
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _TMR1_Initialize *****************
  2327 ;; Defined at:
  2328 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2345 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    8
  2349 ;; This function calls:
  2350 ;;		_TMR1_StartTimer
  2351 ;; This function is called by:
  2352 ;;		_SYSTEM_Initialize
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text8
  2357  000D54                     __ptext8:
  2358                           	opt stack 0
  2359  000D54                     _TMR1_Initialize:
  2360                           	opt stack 21
  2361                           
  2362                           ;tmr1.c: 67: T1CON = 0x00;
  2363                           
  2364                           ;incstack = 0
  2365  000D54  0E00               	movlw	0
  2366  000D56  6ECD               	movwf	4045,c	;volatile
  2367                           
  2368                           ;tmr1.c: 70: T1GCON = 0x00;
  2369  000D58  0E00               	movlw	0
  2370  000D5A  6EAA               	movwf	4010,c	;volatile
  2371                           
  2372                           ;tmr1.c: 73: TMR1H = 0x00;
  2373  000D5C  0E00               	movlw	0
  2374  000D5E  6ECF               	movwf	4047,c	;volatile
  2375                           
  2376                           ;tmr1.c: 76: TMR1L = 0x00;
  2377  000D60  0E00               	movlw	0
  2378  000D62  6ECE               	movwf	4046,c	;volatile
  2379                           
  2380                           ;tmr1.c: 79: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2381  000D64  50CE               	movf	4046,w,c	;volatile
  2382  000D66  CFCF F071          	movff	4047,??_TMR1_Initialize	;volatile
  2383  000D6A  0100               	movlb	0	; () banked
  2384  000D6C  6B72               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  2385  000D6E  C071  F072         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  2386  000D72  0100               	movlb	0	; () banked
  2387  000D74  6B71               	clrf	??_TMR1_Initialize& (0+255),b
  2388  000D76  0100               	movlb	0	; () banked
  2389  000D78  1171               	iorwf	??_TMR1_Initialize& (0+255),w,b
  2390  000D7A  0100               	movlb	0	; () banked
  2391  000D7C  6FE8               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  2392  000D7E  0100               	movlb	0	; () banked
  2393  000D80  5172               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  2394  000D82  0100               	movlb	0	; () banked
  2395  000D84  6FE9               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  2399  000D86  909E               	bcf	3998,0,c	;volatile
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;tmr1.c: 85: TMR1_StartTimer();
  2403  000D88  EC73  F007         	call	_TMR1_StartTimer	;wreg free
  2404  000D8C  0012               	return		;funcret
  2405  000D8E                     __end_of_TMR1_Initialize:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           intcon	equ	0xFF2
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           indf2	equ	0xFDF
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _TMR1_StartTimer *****************
  2422 ;; Defined at:
  2423 ;;		line 88 in file "mcc_generated_files/tmr1.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		None
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    7
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_TMR1_Initialize
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text9
  2452  000EE6                     __ptext9:
  2453                           	opt stack 0
  2454  000EE6                     _TMR1_StartTimer:
  2455                           	opt stack 21
  2456                           
  2457                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
  2458                           
  2459                           ;incstack = 0
  2460  000EE6  80CD               	bsf	4045,0,c	;volatile
  2461  000EE8  0012               	return		;funcret
  2462  000EEA                     __end_of_TMR1_StartTimer:
  2463                           	opt stack 0
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           intcon	equ	0xFF2
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postdec1	equ	0xFE5
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _PIN_MANAGER_Initialize *****************
  2479 ;; Defined at:
  2480 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2498 ;;Total ram usage:        0 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    7
  2501 ;; This function calls:
  2502 ;;		Nothing
  2503 ;; This function is called by:
  2504 ;;		_SYSTEM_Initialize
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text10
  2509  000D8E                     __ptext10:
  2510                           	opt stack 0
  2511  000D8E                     _PIN_MANAGER_Initialize:
  2512                           	opt stack 22
  2513                           
  2514                           ;pin_manager.c: 51: LATB = 0x0;
  2515                           
  2516                           ;incstack = 0
  2517  000D8E  0E00               	movlw	0
  2518  000D90  6E8A               	movwf	3978,c	;volatile
  2519                           
  2520                           ;pin_manager.c: 52: LATA = 0x0;
  2521  000D92  0E00               	movlw	0
  2522  000D94  6E89               	movwf	3977,c	;volatile
  2523                           
  2524                           ;pin_manager.c: 53: LATE = 0x0;
  2525  000D96  0E00               	movlw	0
  2526  000D98  6E8D               	movwf	3981,c	;volatile
  2527                           
  2528                           ;pin_manager.c: 54: LATD = 0x0;
  2529  000D9A  0E00               	movlw	0
  2530  000D9C  6E8C               	movwf	3980,c	;volatile
  2531                           
  2532                           ;pin_manager.c: 55: LATC = 0x0;
  2533  000D9E  0E00               	movlw	0
  2534  000DA0  6E8B               	movwf	3979,c	;volatile
  2535                           
  2536                           ;pin_manager.c: 56: WPUB = 0xFE;
  2537  000DA2  0EFE               	movlw	254
  2538  000DA4  010F               	movlb	15	; () banked
  2539  000DA6  6F5B               	movwf	91,b	;volatile
  2540                           
  2541                           ;pin_manager.c: 57: TRISD = 0xA0;
  2542  000DA8  0EA0               	movlw	160
  2543  000DAA  6E95               	movwf	3989,c	;volatile
  2544                           
  2545                           ;pin_manager.c: 58: TRISE = 0x7;
  2546  000DAC  0E07               	movlw	7
  2547  000DAE  6E96               	movwf	3990,c	;volatile
  2548                           
  2549                           ;pin_manager.c: 59: TRISB = 0xF2;
  2550  000DB0  0EF2               	movlw	242
  2551  000DB2  6E93               	movwf	3987,c	;volatile
  2552                           
  2553                           ;pin_manager.c: 60: TRISC = 0xB8;
  2554  000DB4  0EB8               	movlw	184
  2555  000DB6  6E94               	movwf	3988,c	;volatile
  2556                           
  2557                           ;pin_manager.c: 61: TRISA = 0xEF;
  2558  000DB8  0EEF               	movlw	239
  2559  000DBA  6E92               	movwf	3986,c	;volatile
  2560                           
  2561                           ; BSR set to: 15
  2562  000DBC  0012               	return		;funcret
  2563  000DBE                     __end_of_PIN_MANAGER_Initialize:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           intcon	equ	0xFF2
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           postdec1	equ	0xFE5
  2573                           fsr1l	equ	0xFE1
  2574                           indf2	equ	0xFDF
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _OSCILLATOR_Initialize *****************
  2580 ;; Defined at:
  2581 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    7
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_SYSTEM_Initialize
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text11
  2610  000E82                     __ptext11:
  2611                           	opt stack 0
  2612  000E82                     _OSCILLATOR_Initialize:
  2613                           	opt stack 22
  2614                           
  2615                           ;mcc.c: 126: OSCCON = 0x60;
  2616                           
  2617                           ; BSR set to: 15
  2618                           ;incstack = 0
  2619  000E82  0E60               	movlw	96
  2620  000E84  6ED3               	movwf	4051,c	;volatile
  2621                           
  2622                           ;mcc.c: 128: OSCCON2 = 0x00;
  2623  000E86  0E00               	movlw	0
  2624  000E88  6ED2               	movwf	4050,c	;volatile
  2625                           
  2626                           ;mcc.c: 130: OSCTUNE = 0x00;
  2627  000E8A  0E00               	movlw	0
  2628  000E8C  6E9B               	movwf	3995,c	;volatile
  2629                           
  2630                           ;mcc.c: 132: REFOCON = 0x00;
  2631  000E8E  0E00               	movlw	0
  2632  000E90  6E9A               	movwf	3994,c	;volatile
  2633  000E92  0012               	return		;funcret
  2634  000E94                     __end_of_OSCILLATOR_Initialize:
  2635                           	opt stack 0
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           intcon	equ	0xFF2
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           postdec1	equ	0xFE5
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _INTERRUPT_Initialize *****************
  2651 ;; Defined at:
  2652 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		None
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2670 ;;Total ram usage:        0 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    7
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_SYSTEM_Initialize
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text12
  2681  000EE0                     __ptext12:
  2682                           	opt stack 0
  2683  000EE0                     _INTERRUPT_Initialize:
  2684                           	opt stack 22
  2685                           
  2686                           ;interrupt_manager.c: 54: IPEN = 0;
  2687                           
  2688                           ;incstack = 0
  2689  000EE0  9ED0               	bcf	4048,7,c	;volatile
  2690                           
  2691                           ;interrupt_manager.c: 59: IPR1bits.SSPIP = 0;
  2692  000EE2  969F               	bcf	3999,3,c	;volatile
  2693  000EE4  0012               	return		;funcret
  2694  000EE6                     __end_of_INTERRUPT_Initialize:
  2695                           	opt stack 0
  2696                           tblptru	equ	0xFF8
  2697                           tblptrh	equ	0xFF7
  2698                           tblptrl	equ	0xFF6
  2699                           tablat	equ	0xFF5
  2700                           intcon	equ	0xFF2
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _I2C_Initialize *****************
  2711 ;; Defined at:
  2712 ;;		line 79 in file "mcc_generated_files/i2c.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    7
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_SYSTEM_Initialize
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text13
  2741  000E14                     __ptext13:
  2742                           	opt stack 0
  2743  000E14                     _I2C_Initialize:
  2744                           	opt stack 22
  2745                           
  2746                           ;i2c.c: 82: SSPSTAT = 0xC0;
  2747                           
  2748                           ;incstack = 0
  2749  000E14  0EC0               	movlw	192
  2750  000E16  6EC7               	movwf	4039,c	;volatile
  2751                           
  2752                           ;i2c.c: 84: SSPCON1 = 0x26;
  2753  000E18  0E26               	movlw	38
  2754  000E1A  6EC6               	movwf	4038,c	;volatile
  2755                           
  2756                           ;i2c.c: 86: SSPCON2 = 0x00;
  2757  000E1C  0E00               	movlw	0
  2758  000E1E  6EC5               	movwf	4037,c	;volatile
  2759                           
  2760                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  2761  000E20  0EFE               	movlw	254
  2762  000E22  6EC8               	movwf	4040,c	;volatile
  2763                           
  2764                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  2765  000E24  0E10               	movlw	16
  2766  000E26  6EC8               	movwf	4040,c	;volatile
  2767                           
  2768                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  2769  000E28  969E               	bcf	3998,3,c	;volatile
  2770                           
  2771                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  2772  000E2A  869D               	bsf	3997,3,c	;volatile
  2773  000E2C  0012               	return		;funcret
  2774  000E2E                     __end_of_I2C_Initialize:
  2775                           	opt stack 0
  2776                           tblptru	equ	0xFF8
  2777                           tblptrh	equ	0xFF7
  2778                           tblptrl	equ	0xFF6
  2779                           tablat	equ	0xFF5
  2780                           intcon	equ	0xFF2
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postdec1	equ	0xFE5
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _EUSART2_Initialize *****************
  2791 ;; Defined at:
  2792 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    7
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_SYSTEM_Initialize
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text14
  2821  000E2E                     __ptext14:
  2822                           	opt stack 0
  2823  000E2E                     _EUSART2_Initialize:
  2824                           	opt stack 22
  2825                           
  2826                           ;eusart2.c: 60: BAUDCON2 = 0x08;
  2827                           
  2828                           ;incstack = 0
  2829  000E2E  0E08               	movlw	8
  2830  000E30  6EB9               	movwf	4025,c	;volatile
  2831                           
  2832                           ;eusart2.c: 63: RCSTA2 = 0x90;
  2833  000E32  0E90               	movlw	144
  2834  000E34  6EA6               	movwf	4006,c	;volatile
  2835                           
  2836                           ;eusart2.c: 66: TXSTA2 = 0x26;
  2837  000E36  0E26               	movlw	38
  2838  000E38  6EBA               	movwf	4026,c	;volatile
  2839                           
  2840                           ;eusart2.c: 69: SPBRG2 = 0xA0;
  2841  000E3A  0EA0               	movlw	160
  2842  000E3C  6E7B               	movwf	3963,c	;volatile
  2843                           
  2844                           ;eusart2.c: 72: SPBRGH2 = 0x01;
  2845  000E3E  0E01               	movlw	1
  2846  000E40  6E7C               	movwf	3964,c	;volatile
  2847  000E42  0012               	return		;funcret
  2848  000E44                     __end_of_EUSART2_Initialize:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           tblptrh	equ	0xFF7
  2852                           tblptrl	equ	0xFF6
  2853                           tablat	equ	0xFF5
  2854                           intcon	equ	0xFF2
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           indf2	equ	0xFDF
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _EUSART1_Initialize *****************
  2865 ;; Defined at:
  2866 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    7
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_SYSTEM_Initialize
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text15
  2895  000E44                     __ptext15:
  2896                           	opt stack 0
  2897  000E44                     _EUSART1_Initialize:
  2898                           	opt stack 22
  2899                           
  2900                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2901                           
  2902                           ;incstack = 0
  2903  000E44  0E08               	movlw	8
  2904  000E46  6EA7               	movwf	4007,c	;volatile
  2905                           
  2906                           ;eusart1.c: 63: RCSTA1 = 0x90;
  2907  000E48  0E90               	movlw	144
  2908  000E4A  6EAB               	movwf	4011,c	;volatile
  2909                           
  2910                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  2911  000E4C  0EA4               	movlw	164
  2912  000E4E  6EAC               	movwf	4012,c	;volatile
  2913                           
  2914                           ;eusart1.c: 69: SPBRG1 = 0x03;
  2915  000E50  0E03               	movlw	3
  2916  000E52  6EAF               	movwf	4015,c	;volatile
  2917                           
  2918                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  2919  000E54  0E00               	movlw	0
  2920  000E56  6E7D               	movwf	3965,c	;volatile
  2921  000E58  0012               	return		;funcret
  2922  000E5A                     __end_of_EUSART1_Initialize:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           intcon	equ	0xFF2
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1l	equ	0xFE1
  2933                           indf2	equ	0xFDF
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _ECCP1_Initialize *****************
  2939 ;; Defined at:
  2940 ;;		line 57 in file "mcc_generated_files/eccp1.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2958 ;;Total ram usage:        0 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    7
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_SYSTEM_Initialize
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text16
  2969  000EA6                     __ptext16:
  2970                           	opt stack 0
  2971  000EA6                     _ECCP1_Initialize:
  2972                           	opt stack 22
  2973                           
  2974                           ;eccp1.c: 62: CCP1CON = 0x00;
  2975                           
  2976                           ;incstack = 0
  2977  000EA6  0E00               	movlw	0
  2978  000EA8  6EBB               	movwf	4027,c	;volatile
  2979                           
  2980                           ;eccp1.c: 65: CCPR1L = 0x00;
  2981  000EAA  0E00               	movlw	0
  2982  000EAC  6EBC               	movwf	4028,c	;volatile
  2983                           
  2984                           ;eccp1.c: 68: CCPR1H = 0x00;
  2985  000EAE  0E00               	movlw	0
  2986  000EB0  6EBD               	movwf	4029,c	;volatile
  2987                           
  2988                           ;eccp1.c: 71: CCPTMRSbits.C1TSEL = 0x0;
  2989  000EB2  9099               	bcf	3993,0,c	;volatile
  2990  000EB4  0012               	return		;funcret
  2991  000EB6                     __end_of_ECCP1_Initialize:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           intcon	equ	0xFF2
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1l	equ	0xFE1
  3002                           indf2	equ	0xFDF
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _ADC_Initialize *****************
  3008 ;; Defined at:
  3009 ;;		line 58 in file "mcc_generated_files/adc.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    7
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_SYSTEM_Initialize
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text17
  3038  000E5A                     __ptext17:
  3039                           	opt stack 0
  3040  000E5A                     _ADC_Initialize:
  3041                           	opt stack 22
  3042                           
  3043                           ;adc.c: 63: ADCON0 = 0x01;
  3044                           
  3045                           ;incstack = 0
  3046  000E5A  0E01               	movlw	1
  3047  000E5C  6EC2               	movwf	4034,c	;volatile
  3048                           
  3049                           ;adc.c: 66: ADCON1 = 0x00;
  3050  000E5E  0E00               	movlw	0
  3051  000E60  6EC1               	movwf	4033,c	;volatile
  3052                           
  3053                           ;adc.c: 69: ADCON2 = 0x02;
  3054  000E62  0E02               	movlw	2
  3055  000E64  6EC0               	movwf	4032,c	;volatile
  3056                           
  3057                           ;adc.c: 72: ADRESH = 0x00;
  3058  000E66  0E00               	movlw	0
  3059  000E68  6EC4               	movwf	4036,c	;volatile
  3060                           
  3061                           ;adc.c: 75: ADRESL = 0x00;
  3062  000E6A  0E00               	movlw	0
  3063  000E6C  6EC3               	movwf	4035,c	;volatile
  3064  000E6E  0012               	return		;funcret
  3065  000E70                     __end_of_ADC_Initialize:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           intcon	equ	0xFF2
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _INTERRUPT_InterruptManager *****************
  3082 ;; Defined at:
  3083 ;;		line 63 in file "mcc_generated_files/interrupt_manager.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3101 ;;Total ram usage:       14 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    6
  3104 ;; This function calls:
  3105 ;;		_I2C_ISR
  3106 ;; This function is called by:
  3107 ;;		Interrupt level 2
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	intcode
  3112  000008                     __pintcode:
  3113                           	opt stack 0
  3114  000008                     _INTERRUPT_InterruptManager:
  3115                           	opt stack 21
  3116                           
  3117                           ;incstack = 0
  3118  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3119  00000A  CFFA F063          	movff	pclath,??_INTERRUPT_InterruptManager
  3120  00000E  CFFB F064          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3121  000012  CFE9 F065          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3122  000016  CFEA F066          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3123  00001A  CFE1 F067          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3124  00001E  CFE2 F068          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3125  000022  CFD9 F069          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3126  000026  CFDA F06A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3127  00002A  CFF3 F06B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3128  00002E  CFF4 F06C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3129  000032  CFF6 F06D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3130  000036  CFF7 F06E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3131  00003A  CFF8 F06F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3132  00003E  CFF5 F070          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3133                           
  3134                           ;interrupt_manager.c: 66: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  3135  000042  BCF2               	btfsc	intcon,6,c	;volatile
  3136  000044  A69D               	btfss	3997,3,c	;volatile
  3137  000046  D003               	goto	i2l222
  3138  000048  B69E               	btfsc	3998,3,c	;volatile
  3139                           
  3140                           ;interrupt_manager.c: 67: {
  3141                           ;interrupt_manager.c: 68: I2C_ISR();
  3142  00004A  EC6C  F006         	call	_I2C_ISR	;wreg free
  3143  00004E                     i2l222:
  3144  00004E  C070  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3145  000052  C06F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3146  000056  C06E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3147  00005A  C06D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3148  00005E  C06C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3149  000062  C06B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3150  000066  C06A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3151  00006A  C069  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3152  00006E  C068  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3153  000072  C067  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3154  000076  C066  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3155  00007A  C065  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3156  00007E  C064  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3157  000082  C063  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3158  000086  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3159  000088  0011               	retfie		f
  3160  00008A                     __end_of_INTERRUPT_InterruptManager:
  3161                           	opt stack 0
  3162                           pclatu	equ	0xFFB
  3163                           pclath	equ	0xFFA
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           fsr0h	equ	0xFEA
  3173                           fsr0l	equ	0xFE9
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1h	equ	0xFE2
  3177                           fsr1l	equ	0xFE1
  3178                           indf2	equ	0xFDF
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _I2C_ISR *****************
  3184 ;; Defined at:
  3185 ;;		line 99 in file "mcc_generated_files/i2c.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  i2c_data        1    2[BANK0 ] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    5
  3206 ;; This function calls:
  3207 ;;		_I2C_StatusCallback
  3208 ;; This function is called by:
  3209 ;;		_INTERRUPT_InterruptManager
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text19
  3214  000CD8                     __ptext19:
  3215                           	opt stack 0
  3216  000CD8                     _I2C_ISR:
  3217                           	opt stack 21
  3218                           
  3219                           ;i2c.c: 100: uint8_t i2c_data = 0x55;
  3220                           
  3221                           ;incstack = 0
  3222  000CD8  0E55               	movlw	85
  3223  000CDA  0100               	movlb	0	; () banked
  3224  000CDC  6F62               	movwf	I2C_ISR@i2c_data& (0+255),b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;i2c.c: 106: PIR1bits.SSPIF = 0;
  3228  000CDE  969E               	bcf	3998,3,c	;volatile
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;i2c.c: 107: i2c_data = SSPBUF;
  3232  000CE0  CFC9 F062          	movff	4041,I2C_ISR@i2c_data	;volatile
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;i2c.c: 108: if (1 == SSPSTATbits.R_nW) {
  3236  000CE4  A4C7               	btfss	4039,2,c	;volatile
  3237  000CE6  D00B               	goto	i2l161
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;i2c.c: 109: if ((1 == SSPSTATbits.D_nA) && (1 == PORTCbits.RC4)) {
  3241  000CE8  BAC7               	btfsc	4039,5,c	;volatile
  3242                           
  3243                           ; BSR set to: 0
  3244  000CEA  A882               	btfss	3970,4,c	;volatile
  3245  000CEC  D004               	goto	i2l2633
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;i2c.c: 111: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
  3249  000CEE  0E03               	movlw	3
  3250  000CF0  EC8C  F006         	call	_I2C_StatusCallback
  3251                           
  3252                           ;i2c.c: 112: } else {
  3253  000CF4  D00F               	goto	i2l2639
  3254  000CF6                     i2l2633:
  3255                           
  3256                           ;i2c.c: 114: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
  3257  000CF6  0E01               	movlw	1
  3258  000CF8  EC8C  F006         	call	_I2C_StatusCallback
  3259                           
  3260                           ;i2c.c: 115: }
  3261                           ;i2c.c: 116: } else if (0 == SSPSTATbits.D_nA) {
  3262  000CFC  D00B               	goto	i2l2639
  3263  000CFE                     i2l161:
  3264                           
  3265                           ; BSR set to: 0
  3266  000CFE  BAC7               	btfsc	4039,5,c	;volatile
  3267  000D00  D004               	goto	i2l165
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;i2c.c: 120: I2C_StatusCallback(I2C_SLAVE_WRITE_REQUEST);
  3271  000D02  0E00               	movlw	0
  3272  000D04  EC8C  F006         	call	_I2C_StatusCallback
  3273                           
  3274                           ;i2c.c: 121: } else {
  3275  000D08  D005               	goto	i2l2639
  3276  000D0A                     i2l165:
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;i2c.c: 122: I2C_slaveWriteData = i2c_data;
  3280  000D0A  C062  F0EA         	movff	I2C_ISR@i2c_data,_I2C_slaveWriteData	;volatile
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;i2c.c: 125: I2C_StatusCallback(I2C_SLAVE_WRITE_COMPLETED);
  3284  000D0E  0E02               	movlw	2
  3285  000D10  EC8C  F006         	call	_I2C_StatusCallback
  3286  000D14                     i2l2639:
  3287                           
  3288                           ;i2c.c: 126: }
  3289                           ;i2c.c: 128: SSPCON1bits.CKP = 1;
  3290  000D14  88C6               	bsf	4038,4,c	;volatile
  3291  000D16  0012               	return		;funcret
  3292  000D18                     __end_of_I2C_ISR:
  3293                           	opt stack 0
  3294                           pclatu	equ	0xFFB
  3295                           pclath	equ	0xFFA
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           intcon	equ	0xFF2
  3303                           postinc0	equ	0xFEE
  3304                           fsr0h	equ	0xFEA
  3305                           fsr0l	equ	0xFE9
  3306                           wreg	equ	0xFE8
  3307                           postdec1	equ	0xFE5
  3308                           fsr1h	equ	0xFE2
  3309                           fsr1l	equ	0xFE1
  3310                           indf2	equ	0xFDF
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _I2C_StatusCallback *****************
  3316 ;; Defined at:
  3317 ;;		line 214 in file "mcc_generated_files/i2c.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  i2c_bus_stat    1    wreg     enum E18217
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  i2c_bus_stat    1    0[BANK0 ] enum E18217
  3322 ;;  data            1    1[BANK0 ] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3336 ;;Total ram usage:        2 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    4
  3339 ;; This function calls:
  3340 ;;		_getByteToSend
  3341 ;;		_handleByteReceived
  3342 ;; This function is called by:
  3343 ;;		_I2C_ISR
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text20
  3348  000D18                     __ptext20:
  3349                           	opt stack 0
  3350  000D18                     _I2C_StatusCallback:
  3351                           	opt stack 21
  3352                           
  3353                           ;incstack = 0
  3354                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
  3355  000D18  0100               	movlb	0	; () banked
  3356  000D1A  6F60               	movwf	I2C_StatusCallback@i2c_bus_state& (0+255),b
  3357                           
  3358                           ;i2c.c: 215: uint8_t data;
  3359                           ;i2c.c: 216: switch (i2c_bus_state) {
  3360  000D1C  D00E               	goto	i2l2497
  3361  000D1E                     i2l198:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;i2c.c: 224: data = I2C_slaveWriteData;
  3365  000D1E  C0EA  F061         	movff	_I2C_slaveWriteData,I2C_StatusCallback@data	;volatile
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;i2c.c: 226: handleByteReceived(data);
  3369  000D22  0100               	movlb	0	; () banked
  3370  000D24  5161               	movf	I2C_StatusCallback@data& (0+255),w,b
  3371  000D26  EC37  F003         	call	_handleByteReceived
  3372                           
  3373                           ;i2c.c: 228: break;
  3374  000D2A  0012               	return	
  3375  000D2C                     i2l2493:
  3376                           
  3377                           ;i2c.c: 232: data = getByteToSend();
  3378  000D2C  ECE9  F001         	call	_getByteToSend	;wreg free
  3379  000D30  0100               	movlb	0	; () banked
  3380  000D32  6F61               	movwf	I2C_StatusCallback@data& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;i2c.c: 234: SSPBUF = data;
  3384  000D34  C061  FFC9         	movff	I2C_StatusCallback@data,4041	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;i2c.c: 240: }
  3388                           
  3389                           ;i2c.c: 238: default:;
  3390                           
  3391                           ; BSR set to: 0
  3392                           
  3393                           ;i2c.c: 237: case I2C_SLAVE_READ_COMPLETED:
  3394                           
  3395                           ;i2c.c: 235: break;
  3396  000D38  0012               	return	
  3397  000D3A                     i2l2497:
  3398  000D3A  0100               	movlb	0	; () banked
  3399  000D3C  5160               	movf	I2C_StatusCallback@i2c_bus_state& (0+255),w,b
  3400                           
  3401                           ; Switch size 1, requested type "space"
  3402                           ; Number of cases is 4, Range of values is 0 to 3
  3403                           ; switch strategies available:
  3404                           ; Name         Instructions Cycles
  3405                           ; simple_byte           13     7 (average)
  3406                           ;	Chosen strategy is simple_byte
  3407  000D3E  0A00               	xorlw	0	; case 0
  3408  000D40  B4D8               	btfsc	status,2,c
  3409  000D42  0012               	return	
  3410  000D44  0A01               	xorlw	1	; case 1
  3411  000D46  B4D8               	btfsc	status,2,c
  3412  000D48  D7F1               	goto	i2l2493
  3413  000D4A  0A03               	xorlw	3	; case 2
  3414  000D4C  B4D8               	btfsc	status,2,c
  3415  000D4E  D7E7               	goto	i2l198
  3416  000D50  0A01               	xorlw	1	; case 3
  3417  000D52  0012               	return	
  3418  000D54                     __end_of_I2C_StatusCallback:
  3419                           	opt stack 0
  3420                           pclatu	equ	0xFFB
  3421                           pclath	equ	0xFFA
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           postinc0	equ	0xFEE
  3430                           fsr0h	equ	0xFEA
  3431                           fsr0l	equ	0xFE9
  3432                           wreg	equ	0xFE8
  3433                           postdec1	equ	0xFE5
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _handleByteReceived *****************
  3442 ;; Defined at:
  3443 ;;		line 255 in file "ax.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  data            1    wreg     unsigned char 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  data            1    6[COMRAM] unsigned char 
  3448 ;;  i               2    4[COMRAM] int 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3459 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3461 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3462 ;;Total ram usage:        3 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    1
  3465 ;; This function calls:
  3466 ;;		_setLedOff
  3467 ;;		_setLedOn
  3468 ;; This function is called by:
  3469 ;;		_I2C_StatusCallback
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text21
  3474  00066E                     __ptext21:
  3475                           	opt stack 0
  3476  00066E                     _handleByteReceived:
  3477                           	opt stack 23
  3478                           
  3479                           ;incstack = 0
  3480                           ;handleByteReceived@data stored from wreg
  3481  00066E  6E07               	movwf	handleByteReceived@data,c
  3482                           
  3483                           ;ax.c: 256: if (readIndex == 0) {
  3484  000670  0100               	movlb	0	; () banked
  3485  000672  51E1               	movf	_readIndex& (0+255),w,b
  3486  000674  0100               	movlb	0	; () banked
  3487  000676  11E2               	iorwf	(_readIndex+1)& (0+255),w,b
  3488  000678  A4D8               	btfss	status,2,c
  3489  00067A  D01C               	goto	i2l2323
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;ax.c: 257: currentCommand = data;
  3493  00067C  C007  F0EB         	movff	handleByteReceived@data,_currentCommand
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;ax.c: 258: readIndex++;
  3497  000680  0100               	movlb	0	; () banked
  3498  000682  4BE1               	infsnz	_readIndex& (0+255),f,b
  3499  000684  2BE2               	incf	(_readIndex+1)& (0+255),f,b
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;ax.c: 260: for (int i = 0; i < 32; i++) {
  3503  000686  0E00               	movlw	0
  3504  000688  6E06               	movwf	handleByteReceived@i+1,c
  3505  00068A  0E00               	movlw	0
  3506  00068C  6E05               	movwf	handleByteReceived@i,c
  3507  00068E                     i2l2313:
  3508                           
  3509                           ; BSR set to: 0
  3510  00068E  BE06               	btfsc	handleByteReceived@i+1,7,c
  3511  000690  D006               	goto	i2l2317
  3512  000692  5006               	movf	handleByteReceived@i+1,w,c
  3513  000694  E154               	bnz	i2l621
  3514  000696  0E20               	movlw	32
  3515  000698  5C05               	subwf	handleByteReceived@i,w,c
  3516  00069A  B0D8               	btfsc	status,0,c
  3517  00069C  0012               	return	
  3518  00069E                     i2l2317:
  3519                           
  3520                           ;ax.c: 261: dataToSend[i] = 66;
  3521  00069E  0EBB               	movlw	low _dataToSend
  3522  0006A0  2405               	addwf	handleByteReceived@i,w,c
  3523  0006A2  6ED9               	movwf	fsr2l,c
  3524  0006A4  0E00               	movlw	high _dataToSend
  3525  0006A6  2006               	addwfc	handleByteReceived@i+1,w,c
  3526  0006A8  6EDA               	movwf	fsr2h,c
  3527  0006AA  0E42               	movlw	66
  3528  0006AC  6EDF               	movwf	indf2,c
  3529  0006AE  4A05               	infsnz	handleByteReceived@i,f,c
  3530  0006B0  2A06               	incf	handleByteReceived@i+1,f,c
  3531  0006B2  D7ED               	goto	i2l2313
  3532  0006B4                     i2l2323:
  3533  0006B4  0100               	movlb	0	; () banked
  3534  0006B6  05E1               	decf	_readIndex& (0+255),w,b
  3535  0006B8  0100               	movlb	0	; () banked
  3536  0006BA  11E2               	iorwf	(_readIndex+1)& (0+255),w,b
  3537  0006BC  A4D8               	btfss	status,2,c
  3538  0006BE  D025               	goto	i2l2341
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;ax.c: 264: parameter1 = data;
  3542  0006C0  C007  F0E5         	movff	handleByteReceived@data,_parameter1
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;ax.c: 265: readIndex++;
  3546  0006C4  0100               	movlb	0	; () banked
  3547  0006C6  4BE1               	infsnz	_readIndex& (0+255),f,b
  3548  0006C8  2BE2               	incf	(_readIndex+1)& (0+255),f,b
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;ax.c: 266: if (currentCommand == 10) {
  3552  0006CA  0E0A               	movlw	10
  3553  0006CC  0100               	movlb	0	; () banked
  3554  0006CE  19EB               	xorwf	_currentCommand& (0+255),w,b
  3555  0006D0  A4D8               	btfss	status,2,c
  3556  0006D2  D00B               	goto	i2l2335
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;ax.c: 267: setLedOn(parameter1);
  3560  0006D4  C0E5  F001         	movff	_parameter1,setLedOn@led
  3561  0006D8  6A02               	clrf	setLedOn@led+1,c
  3562  0006DA  EC5C  F005         	call	_setLedOn	;wreg free
  3563                           
  3564                           ;ax.c: 268: readIndex = 0;
  3565  0006DE  0E00               	movlw	0
  3566  0006E0  0100               	movlb	0	; () banked
  3567  0006E2  6FE2               	movwf	(_readIndex+1)& (0+255),b
  3568  0006E4  0E00               	movlw	0
  3569  0006E6  6FE1               	movwf	_readIndex& (0+255),b
  3570                           
  3571                           ;ax.c: 269: } else if (currentCommand == 11) {
  3572  0006E8  0012               	return	
  3573  0006EA                     i2l2335:
  3574                           
  3575                           ; BSR set to: 0
  3576  0006EA  0E0B               	movlw	11
  3577  0006EC  0100               	movlb	0	; () banked
  3578  0006EE  19EB               	xorwf	_currentCommand& (0+255),w,b
  3579  0006F0  A4D8               	btfss	status,2,c
  3580  0006F2  0012               	return	
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;ax.c: 270: setLedOff(parameter1);
  3584  0006F4  C0E5  F001         	movff	_parameter1,setLedOff@led
  3585  0006F8  6A02               	clrf	setLedOff@led+1,c
  3586  0006FA  EC99  F005         	call	_setLedOff	;wreg free
  3587                           
  3588                           ;ax.c: 271: readIndex = 0;
  3589  0006FE  0E00               	movlw	0
  3590  000700  0100               	movlb	0	; () banked
  3591  000702  6FE2               	movwf	(_readIndex+1)& (0+255),b
  3592  000704  0E00               	movlw	0
  3593  000706  6FE1               	movwf	_readIndex& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;ax.c: 272: }
  3597                           ;ax.c: 274: } else if (readIndex == 2) {
  3598                           
  3599                           ; BSR set to: 0
  3600  000708  0012               	return	
  3601  00070A                     i2l2341:
  3602                           
  3603                           ; BSR set to: 0
  3604  00070A  0E02               	movlw	2
  3605  00070C  0100               	movlb	0	; () banked
  3606  00070E  19E1               	xorwf	_readIndex& (0+255),w,b
  3607  000710  0100               	movlb	0	; () banked
  3608  000712  11E2               	iorwf	(_readIndex+1)& (0+255),w,b
  3609  000714  A4D8               	btfss	status,2,c
  3610  000716  D006               	goto	i2l2347
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;ax.c: 275: parameter2 = data;
  3614  000718  C007  F0E6         	movff	handleByteReceived@data,_parameter2
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;ax.c: 276: readIndex++;
  3618  00071C  0100               	movlb	0	; () banked
  3619  00071E  4BE1               	infsnz	_readIndex& (0+255),f,b
  3620  000720  2BE2               	incf	(_readIndex+1)& (0+255),f,b
  3621                           
  3622                           ;ax.c: 277: } else if (readIndex == 3) {
  3623  000722  0012               	return	
  3624  000724                     i2l2347:
  3625                           
  3626                           ; BSR set to: 0
  3627  000724  0E03               	movlw	3
  3628  000726  0100               	movlb	0	; () banked
  3629  000728  19E1               	xorwf	_readIndex& (0+255),w,b
  3630  00072A  0100               	movlb	0	; () banked
  3631  00072C  11E2               	iorwf	(_readIndex+1)& (0+255),w,b
  3632  00072E  A4D8               	btfss	status,2,c
  3633  000730  0012               	return	
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;ax.c: 278: parameter3 = data;
  3637  000732  C007  F0E7         	movff	handleByteReceived@data,_parameter3
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;ax.c: 279: readIndex++;
  3641  000736  0100               	movlb	0	; () banked
  3642  000738  4BE1               	infsnz	_readIndex& (0+255),f,b
  3643  00073A  2BE2               	incf	(_readIndex+1)& (0+255),f,b
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ; BSR set to: 0
  3648                           
  3649                           ; BSR set to: 0
  3650  00073C  0012               	return	
  3651  00073E                     i2l621:
  3652  00073E  0012               	return		;funcret
  3653  000740                     __end_of_handleByteReceived:
  3654                           	opt stack 0
  3655                           pclatu	equ	0xFFB
  3656                           pclath	equ	0xFFA
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           postinc0	equ	0xFEE
  3665                           fsr0h	equ	0xFEA
  3666                           fsr0l	equ	0xFE9
  3667                           wreg	equ	0xFE8
  3668                           postdec1	equ	0xFE5
  3669                           fsr1h	equ	0xFE2
  3670                           fsr1l	equ	0xFE1
  3671                           indf2	equ	0xFDF
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _setLedOn *****************
  3677 ;; Defined at:
  3678 ;;		line 43 in file "ax.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;  led             2    0[COMRAM] int 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3695 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3696 ;;Total ram usage:        4 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_handleByteReceived
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text22
  3706  000AB8                     __ptext22:
  3707                           	opt stack 0
  3708  000AB8                     _setLedOn:
  3709                           	opt stack 23
  3710                           
  3711                           ;ax.c: 44: switch (led) {
  3712                           
  3713                           ;incstack = 0
  3714  000AB8  D014               	goto	i2l2189
  3715  000ABA                     i2l487:
  3716  000ABA  868C               	bsf	3980,3,c	;volatile
  3717                           
  3718                           ;ax.c: 47: break;
  3719  000ABC  0012               	return	
  3720  000ABE                     i2l491:
  3721  000ABE  848C               	bsf	3980,2,c	;volatile
  3722                           
  3723                           ;ax.c: 50: break;
  3724  000AC0  0012               	return	
  3725  000AC2                     i2l494:
  3726  000AC2  828C               	bsf	3980,1,c	;volatile
  3727                           
  3728                           ;ax.c: 53: break;
  3729  000AC4  0012               	return	
  3730  000AC6                     i2l497:
  3731  000AC6  808C               	bsf	3980,0,c	;volatile
  3732                           
  3733                           ;ax.c: 56: break;
  3734  000AC8  0012               	return	
  3735  000ACA                     i2l500:
  3736  000ACA  848B               	bsf	3979,2,c	;volatile
  3737                           
  3738                           ;ax.c: 59: break;
  3739  000ACC  0012               	return	
  3740  000ACE                     i2l503:
  3741  000ACE  828B               	bsf	3979,1,c	;volatile
  3742                           
  3743                           ;ax.c: 62: break;
  3744  000AD0  0012               	return	
  3745  000AD2                     i2l506:
  3746  000AD2  808B               	bsf	3979,0,c	;volatile
  3747                           
  3748                           ;ax.c: 65: break;
  3749  000AD4  0012               	return	
  3750  000AD6                     i2l509:
  3751  000AD6  808A               	bsf	3978,0,c	;volatile
  3752                           
  3753                           ;ax.c: 68: break;
  3754  000AD8  0012               	return	
  3755  000ADA                     i2l512:
  3756  000ADA  848A               	bsf	3978,2,c	;volatile
  3757                           
  3758                           ;ax.c: 71: break;
  3759  000ADC  0012               	return	
  3760  000ADE                     i2l515:
  3761  000ADE  868A               	bsf	3978,3,c	;volatile
  3762                           
  3763                           ;ax.c: 75: }
  3764                           
  3765                           ;ax.c: 74: break;
  3766  000AE0  0012               	return	
  3767  000AE2                     i2l2189:
  3768  000AE2  C001  F003         	movff	setLedOn@led,??_setLedOn
  3769  000AE6  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  3770                           
  3771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3772                           ; Switch size 1, requested type "space"
  3773                           ; Number of cases is 1, Range of values is 0 to 0
  3774                           ; switch strategies available:
  3775                           ; Name         Instructions Cycles
  3776                           ; simple_byte            4     3 (average)
  3777                           ;	Chosen strategy is simple_byte
  3778  000AEA  5004               	movf	??_setLedOn+1,w,c
  3779  000AEC  0A00               	xorlw	0	; case 0
  3780  000AEE  A4D8               	btfss	status,2,c
  3781  000AF0  0012               	return	
  3782                           
  3783                           ; Switch size 1, requested type "space"
  3784                           ; Number of cases is 10, Range of values is 1 to 10
  3785                           ; switch strategies available:
  3786                           ; Name         Instructions Cycles
  3787                           ; simple_byte           31    16 (average)
  3788                           ;	Chosen strategy is simple_byte
  3789  000AF2  5003               	movf	??_setLedOn,w,c
  3790  000AF4  0A01               	xorlw	1	; case 1
  3791  000AF6  B4D8               	btfsc	status,2,c
  3792  000AF8  D7E0               	goto	i2l487
  3793  000AFA  0A03               	xorlw	3	; case 2
  3794  000AFC  B4D8               	btfsc	status,2,c
  3795  000AFE  D7DF               	goto	i2l491
  3796  000B00  0A01               	xorlw	1	; case 3
  3797  000B02  B4D8               	btfsc	status,2,c
  3798  000B04  D7DE               	goto	i2l494
  3799  000B06  0A07               	xorlw	7	; case 4
  3800  000B08  B4D8               	btfsc	status,2,c
  3801  000B0A  D7DD               	goto	i2l497
  3802  000B0C  0A01               	xorlw	1	; case 5
  3803  000B0E  B4D8               	btfsc	status,2,c
  3804  000B10  D7DC               	goto	i2l500
  3805  000B12  0A03               	xorlw	3	; case 6
  3806  000B14  B4D8               	btfsc	status,2,c
  3807  000B16  D7DB               	goto	i2l503
  3808  000B18  0A01               	xorlw	1	; case 7
  3809  000B1A  B4D8               	btfsc	status,2,c
  3810  000B1C  D7DA               	goto	i2l506
  3811  000B1E  0A0F               	xorlw	15	; case 8
  3812  000B20  B4D8               	btfsc	status,2,c
  3813  000B22  D7D9               	goto	i2l509
  3814  000B24  0A01               	xorlw	1	; case 9
  3815  000B26  B4D8               	btfsc	status,2,c
  3816  000B28  D7D8               	goto	i2l512
  3817  000B2A  0A03               	xorlw	3	; case 10
  3818  000B2C  A4D8               	btfss	status,2,c
  3819  000B2E  0012               	return	
  3820  000B30  D7D6               	goto	i2l515
  3821  000B32                     __end_of_setLedOn:
  3822                           	opt stack 0
  3823                           pclatu	equ	0xFFB
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           fsr0h	equ	0xFEA
  3834                           fsr0l	equ	0xFE9
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _setLedOff *****************
  3845 ;; Defined at:
  3846 ;;		line 78 in file "ax.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  led             2    0[COMRAM] int 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3860 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3862 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3863 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3864 ;;Total ram usage:        4 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_handleByteReceived
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text23
  3874  000B32                     __ptext23:
  3875                           	opt stack 0
  3876  000B32                     _setLedOff:
  3877                           	opt stack 23
  3878                           
  3879                           ;ax.c: 79: switch (led) {
  3880                           
  3881                           ;incstack = 0
  3882  000B32  D014               	goto	i2l2199
  3883  000B34                     i2l522:
  3884  000B34  968C               	bcf	3980,3,c	;volatile
  3885                           
  3886                           ;ax.c: 82: break;
  3887  000B36  0012               	return	
  3888  000B38                     i2l526:
  3889  000B38  948C               	bcf	3980,2,c	;volatile
  3890                           
  3891                           ;ax.c: 85: break;
  3892  000B3A  0012               	return	
  3893  000B3C                     i2l529:
  3894  000B3C  928C               	bcf	3980,1,c	;volatile
  3895                           
  3896                           ;ax.c: 88: break;
  3897  000B3E  0012               	return	
  3898  000B40                     i2l532:
  3899  000B40  908C               	bcf	3980,0,c	;volatile
  3900                           
  3901                           ;ax.c: 91: break;
  3902  000B42  0012               	return	
  3903  000B44                     i2l535:
  3904  000B44  948B               	bcf	3979,2,c	;volatile
  3905                           
  3906                           ;ax.c: 94: break;
  3907  000B46  0012               	return	
  3908  000B48                     i2l538:
  3909  000B48  928B               	bcf	3979,1,c	;volatile
  3910                           
  3911                           ;ax.c: 97: break;
  3912  000B4A  0012               	return	
  3913  000B4C                     i2l541:
  3914  000B4C  908B               	bcf	3979,0,c	;volatile
  3915                           
  3916                           ;ax.c: 100: break;
  3917  000B4E  0012               	return	
  3918  000B50                     i2l544:
  3919  000B50  908A               	bcf	3978,0,c	;volatile
  3920                           
  3921                           ;ax.c: 103: break;
  3922  000B52  0012               	return	
  3923  000B54                     i2l547:
  3924  000B54  948A               	bcf	3978,2,c	;volatile
  3925                           
  3926                           ;ax.c: 106: break;
  3927  000B56  0012               	return	
  3928  000B58                     i2l550:
  3929  000B58  968A               	bcf	3978,3,c	;volatile
  3930                           
  3931                           ;ax.c: 110: }
  3932                           
  3933                           ;ax.c: 109: break;
  3934  000B5A  0012               	return	
  3935  000B5C                     i2l2199:
  3936  000B5C  C001  F003         	movff	setLedOff@led,??_setLedOff
  3937  000B60  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  3938                           
  3939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3940                           ; Switch size 1, requested type "space"
  3941                           ; Number of cases is 1, Range of values is 0 to 0
  3942                           ; switch strategies available:
  3943                           ; Name         Instructions Cycles
  3944                           ; simple_byte            4     3 (average)
  3945                           ;	Chosen strategy is simple_byte
  3946  000B64  5004               	movf	??_setLedOff+1,w,c
  3947  000B66  0A00               	xorlw	0	; case 0
  3948  000B68  A4D8               	btfss	status,2,c
  3949  000B6A  0012               	return	
  3950                           
  3951                           ; Switch size 1, requested type "space"
  3952                           ; Number of cases is 10, Range of values is 1 to 10
  3953                           ; switch strategies available:
  3954                           ; Name         Instructions Cycles
  3955                           ; simple_byte           31    16 (average)
  3956                           ;	Chosen strategy is simple_byte
  3957  000B6C  5003               	movf	??_setLedOff,w,c
  3958  000B6E  0A01               	xorlw	1	; case 1
  3959  000B70  B4D8               	btfsc	status,2,c
  3960  000B72  D7E0               	goto	i2l522
  3961  000B74  0A03               	xorlw	3	; case 2
  3962  000B76  B4D8               	btfsc	status,2,c
  3963  000B78  D7DF               	goto	i2l526
  3964  000B7A  0A01               	xorlw	1	; case 3
  3965  000B7C  B4D8               	btfsc	status,2,c
  3966  000B7E  D7DE               	goto	i2l529
  3967  000B80  0A07               	xorlw	7	; case 4
  3968  000B82  B4D8               	btfsc	status,2,c
  3969  000B84  D7DD               	goto	i2l532
  3970  000B86  0A01               	xorlw	1	; case 5
  3971  000B88  B4D8               	btfsc	status,2,c
  3972  000B8A  D7DC               	goto	i2l535
  3973  000B8C  0A03               	xorlw	3	; case 6
  3974  000B8E  B4D8               	btfsc	status,2,c
  3975  000B90  D7DB               	goto	i2l538
  3976  000B92  0A01               	xorlw	1	; case 7
  3977  000B94  B4D8               	btfsc	status,2,c
  3978  000B96  D7DA               	goto	i2l541
  3979  000B98  0A0F               	xorlw	15	; case 8
  3980  000B9A  B4D8               	btfsc	status,2,c
  3981  000B9C  D7D9               	goto	i2l544
  3982  000B9E  0A01               	xorlw	1	; case 9
  3983  000BA0  B4D8               	btfsc	status,2,c
  3984  000BA2  D7D8               	goto	i2l547
  3985  000BA4  0A03               	xorlw	3	; case 10
  3986  000BA6  A4D8               	btfss	status,2,c
  3987  000BA8  0012               	return	
  3988  000BAA  D7D6               	goto	i2l550
  3989  000BAC                     __end_of_setLedOff:
  3990                           	opt stack 0
  3991                           pclatu	equ	0xFFB
  3992                           pclath	equ	0xFFA
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           postinc0	equ	0xFEE
  4001                           fsr0h	equ	0xFEA
  4002                           fsr0l	equ	0xFE9
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function _getByteToSend *****************
  4013 ;; Defined at:
  4014 ;;		line 286 in file "ax.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  value           2   92[COMRAM] int 
  4019 ;;  xhigh           1   88[COMRAM] unsigned char 
  4020 ;;  xlow            1   87[COMRAM] unsigned char 
  4021 ;;  error           2   83[COMRAM] int 
  4022 ;;  value           2   90[COMRAM] int 
  4023 ;;  xhigh           1   86[COMRAM] unsigned char 
  4024 ;;  xlow            1   85[COMRAM] unsigned char 
  4025 ;;  error           2   81[COMRAM] int 
  4026 ;;  d               1   89[COMRAM] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      unsigned char 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4037 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4039 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4040 ;;Total ram usage:       14 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    3
  4043 ;; This function calls:
  4044 ;;		_getADC
  4045 ;;		_readAXData
  4046 ;;		_writeAXData
  4047 ;;		i2_pingAX
  4048 ;; This function is called by:
  4049 ;;		_I2C_StatusCallback
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text24
  4054  0003D2                     __ptext24:
  4055                           	opt stack 0
  4056  0003D2                     _getByteToSend:
  4057                           	opt stack 21
  4058                           
  4059                           ;ax.c: 289: if (currentCommand == 20) {
  4060                           
  4061                           ;incstack = 0
  4062  0003D2  0E14               	movlw	20
  4063  0003D4  0100               	movlb	0	; () banked
  4064  0003D6  19EB               	xorwf	_currentCommand& (0+255),w,b
  4065  0003D8  A4D8               	btfss	status,2,c
  4066  0003DA  D017               	goto	i2l2369
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;ax.c: 290: int error = pingAX(parameter1);
  4070  0003DC  C0E5  F018         	movff	_parameter1,i2pingAX@id
  4071  0003E0  6A19               	clrf	i2pingAX@id+1,c
  4072  0003E2  EC12  F006         	call	i2_pingAX	;wreg free
  4073  0003E6  C018  F052         	movff	?i2_pingAX,getByteToSend@error
  4074  0003EA  C019  F053         	movff	?i2_pingAX+1,getByteToSend@error+1
  4075                           
  4076                           ;ax.c: 292: nbBytesToSend = 2;
  4077  0003EE  0E00               	movlw	0
  4078  0003F0  0100               	movlb	0	; () banked
  4079  0003F2  6FE0               	movwf	(_nbBytesToSend+1)& (0+255),b
  4080  0003F4  0E02               	movlw	2
  4081  0003F6  6FDF               	movwf	_nbBytesToSend& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;ax.c: 293: dataToSend[0] = error;
  4085  0003F8  C052  F0BB         	movff	getByteToSend@error,_dataToSend
  4086  0003FC                     i2l2361:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;ax.c: 294: dataToSend[1] = 0;
  4090  0003FC  0E00               	movlw	0
  4091  0003FE  0100               	movlb	0	; () banked
  4092  000400  6FBC               	movwf	(_dataToSend+1)& (0+255),b
  4093  000402  D062               	goto	i2l2427
  4094  000404                     i2l2365:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;ax.c: 297: currentCommand = -1;
  4098  000404  0100               	movlb	0	; () banked
  4099  000406  69EB               	setf	_currentCommand& (0+255),b
  4100  000408  D065               	goto	L5
  4101  00040A                     i2l2369:
  4102                           
  4103                           ; BSR set to: 0
  4104  00040A  0E15               	movlw	21
  4105  00040C  0100               	movlb	0	; () banked
  4106  00040E  19EB               	xorwf	_currentCommand& (0+255),w,b
  4107  000410  A4D8               	btfss	status,2,c
  4108  000412  D01D               	goto	i2l2393
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;ax.c: 300: int value = readAXData(parameter1, parameter2);
  4112  000414  C0E5  F018         	movff	_parameter1,readAXData@id
  4113  000418  6A19               	clrf	readAXData@id+1,c
  4114  00041A  C0E6  F01A         	movff	_parameter2,readAXData@address
  4115  00041E  6A1B               	clrf	readAXData@address+1,c
  4116  000420  ECFF  F003         	call	_readAXData	;wreg free
  4117  000424  C018  F05B         	movff	?_readAXData,getByteToSend@value
  4118  000428  C019  F05C         	movff	?_readAXData+1,getByteToSend@value+1
  4119                           
  4120                           ;ax.c: 302: nbBytesToSend = 4;
  4121  00042C  0E00               	movlw	0
  4122  00042E  0100               	movlb	0	; () banked
  4123  000430  6FE0               	movwf	(_nbBytesToSend+1)& (0+255),b
  4124  000432  0E04               	movlw	4
  4125  000434  6FDF               	movwf	_nbBytesToSend& (0+255),b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;ax.c: 303: uint8_t xlow = value & 0xff;
  4129  000436  C05B  F056         	movff	getByteToSend@value,getByteToSend@xlow
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;ax.c: 304: uint8_t xhigh = (value >> 8);
  4133  00043A  505C               	movf	getByteToSend@value+1,w,c
  4134  00043C  6E57               	movwf	getByteToSend@xhigh,c
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;ax.c: 305: dataToSend[0] = xlow;
  4138  00043E  C056  F0BB         	movff	getByteToSend@xlow,_dataToSend
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;ax.c: 306: dataToSend[1] = 0;
  4142  000442  0E00               	movlw	0
  4143  000444  0100               	movlb	0	; () banked
  4144  000446  6FBC               	movwf	(_dataToSend+1)& (0+255),b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;ax.c: 307: dataToSend[2] = xhigh;
  4148  000448  C057  F0BD         	movff	getByteToSend@xhigh,_dataToSend+2
  4149  00044C  D03A               	goto	L4
  4150  00044E                     i2l2393:
  4151                           
  4152                           ; BSR set to: 0
  4153  00044E  0E16               	movlw	22
  4154  000450  0100               	movlb	0	; () banked
  4155  000452  19EB               	xorwf	_currentCommand& (0+255),w,b
  4156  000454  A4D8               	btfss	status,2,c
  4157  000456  D017               	goto	i2l2409
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;ax.c: 314: int error = writeAXData(parameter1, parameter2, parameter3);
  4161  000458  C0E5  F018         	movff	_parameter1,writeAXData@id
  4162  00045C  6A19               	clrf	writeAXData@id+1,c
  4163  00045E  C0E6  F01A         	movff	_parameter2,writeAXData@address
  4164  000462  6A1B               	clrf	writeAXData@address+1,c
  4165  000464  C0E7  F01C         	movff	_parameter3,writeAXData@data
  4166  000468  6A1D               	clrf	writeAXData@data+1,c
  4167  00046A  EC4B  F004         	call	_writeAXData	;wreg free
  4168  00046E  C018  F054         	movff	?_writeAXData,getByteToSend@error_1278
  4169  000472  C019  F055         	movff	?_writeAXData+1,getByteToSend@error_1278+1
  4170                           
  4171                           ;ax.c: 316: nbBytesToSend = 2;
  4172  000476  0E00               	movlw	0
  4173  000478  0100               	movlb	0	; () banked
  4174  00047A  6FE0               	movwf	(_nbBytesToSend+1)& (0+255),b
  4175  00047C  0E02               	movlw	2
  4176  00047E  6FDF               	movwf	_nbBytesToSend& (0+255),b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;ax.c: 317: dataToSend[0] = error;
  4180  000480  C054  F0BB         	movff	getByteToSend@error_1278,_dataToSend
  4181  000484  D7BB               	goto	i2l2361
  4182  000486                     i2l2409:
  4183                           
  4184                           ; BSR set to: 0
  4185  000486  0E0C               	movlw	12
  4186  000488  0100               	movlb	0	; () banked
  4187  00048A  19EB               	xorwf	_currentCommand& (0+255),w,b
  4188  00048C  A4D8               	btfss	status,2,c
  4189  00048E  D027               	goto	i2l2433
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;ax.c: 324: int value = getADC(parameter1);
  4193  000490  C0E5  F006         	movff	_parameter1,getADC@adc
  4194  000494  6A07               	clrf	getADC@adc+1,c
  4195  000496  EC5B  F007         	call	_getADC	;wreg free
  4196  00049A  C006  F05D         	movff	?_getADC,getByteToSend@value_1280
  4197  00049E  C007  F05E         	movff	?_getADC+1,getByteToSend@value_1280+1
  4198                           
  4199                           ;ax.c: 326: nbBytesToSend = 4;
  4200  0004A2  0E00               	movlw	0
  4201  0004A4  0100               	movlb	0	; () banked
  4202  0004A6  6FE0               	movwf	(_nbBytesToSend+1)& (0+255),b
  4203  0004A8  0E04               	movlw	4
  4204  0004AA  6FDF               	movwf	_nbBytesToSend& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;ax.c: 327: uint8_t xlow = value & 0xff;
  4208  0004AC  C05D  F058         	movff	getByteToSend@value_1280,getByteToSend@xlow_1282
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;ax.c: 328: uint8_t xhigh = (value >> 8);
  4212  0004B0  505E               	movf	getByteToSend@value_1280+1,w,c
  4213  0004B2  6E59               	movwf	getByteToSend@xhigh_1283,c
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;ax.c: 329: dataToSend[0] = xlow;
  4217  0004B4  C058  F0BB         	movff	getByteToSend@xlow_1282,_dataToSend
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;ax.c: 330: dataToSend[1] = 0;
  4221  0004B8  0E00               	movlw	0
  4222  0004BA  0100               	movlb	0	; () banked
  4223  0004BC  6FBC               	movwf	(_dataToSend+1)& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;ax.c: 331: dataToSend[2] = xhigh;
  4227  0004BE  C059  F0BD         	movff	getByteToSend@xhigh_1283,_dataToSend+2
  4228  0004C2                     L4:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;ax.c: 332: dataToSend[3] = 0;
  4232  0004C2  0E00               	movlw	0
  4233  0004C4  0100               	movlb	0	; () banked
  4234  0004C6  6FBE               	movwf	(_dataToSend+3)& (0+255),b
  4235  0004C8                     i2l2427:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;ax.c: 334: bytesSent = 0;
  4239  0004C8  0E00               	movlw	0
  4240  0004CA  0100               	movlb	0	; () banked
  4241  0004CC  6FDC               	movwf	(_bytesSent+1)& (0+255),b
  4242  0004CE  0E00               	movlw	0
  4243  0004D0  6FDB               	movwf	_bytesSent& (0+255),b
  4244  0004D2  D798               	goto	i2l2365
  4245  0004D4                     L5:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;ax.c: 336: readIndex = 0;
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;ax.c: 335: currentCommand = -1;
  4252  0004D4  0E00               	movlw	0
  4253  0004D6  0100               	movlb	0	; () banked
  4254  0004D8  6FE2               	movwf	(_readIndex+1)& (0+255),b
  4255  0004DA  0E00               	movlw	0
  4256  0004DC  6FE1               	movwf	_readIndex& (0+255),b
  4257  0004DE                     i2l2433:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;ax.c: 337: }
  4261                           ;ax.c: 338: if (nbBytesToSend == 0) {
  4262  0004DE  0100               	movlb	0	; () banked
  4263  0004E0  51DF               	movf	_nbBytesToSend& (0+255),w,b
  4264  0004E2  0100               	movlb	0	; () banked
  4265  0004E4  11E0               	iorwf	(_nbBytesToSend+1)& (0+255),w,b
  4266  0004E6  A4D8               	btfss	status,2,c
  4267  0004E8  D007               	goto	i2l2441
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;ax.c: 340: readIndex = 0;
  4271  0004EA  0E00               	movlw	0
  4272  0004EC  0100               	movlb	0	; () banked
  4273  0004EE  6FE2               	movwf	(_readIndex+1)& (0+255),b
  4274  0004F0  0E00               	movlw	0
  4275  0004F2  6FE1               	movwf	_readIndex& (0+255),b
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;ax.c: 341: return 0;
  4279  0004F4  0E00               	movlw	0
  4280                           
  4281                           ; BSR set to: 0
  4282  0004F6  0012               	return	
  4283  0004F8                     i2l2441:
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;ax.c: 342: }
  4287                           ;ax.c: 343: uint8_t d = dataToSend[bytesSent];
  4288  0004F8  0EBB               	movlw	low _dataToSend
  4289  0004FA  0100               	movlb	0	; () banked
  4290  0004FC  25DB               	addwf	_bytesSent& (0+255),w,b
  4291  0004FE  6ED9               	movwf	fsr2l,c
  4292  000500  0E00               	movlw	high _dataToSend
  4293  000502  0100               	movlb	0	; () banked
  4294  000504  21DC               	addwfc	(_bytesSent+1)& (0+255),w,b
  4295  000506  6EDA               	movwf	fsr2h,c
  4296  000508  50DF               	movf	indf2,w,c
  4297  00050A  6E5A               	movwf	getByteToSend@d,c
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;ax.c: 344: bytesSent++;
  4301  00050C  0100               	movlb	0	; () banked
  4302  00050E  4BDB               	infsnz	_bytesSent& (0+255),f,b
  4303  000510  2BDC               	incf	(_bytesSent+1)& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;ax.c: 346: if (bytesSent > nbBytesToSend) {
  4307  000512  0100               	movlb	0	; () banked
  4308  000514  51DB               	movf	_bytesSent& (0+255),w,b
  4309  000516  0100               	movlb	0	; () banked
  4310  000518  5DDF               	subwf	_nbBytesToSend& (0+255),w,b
  4311  00051A  0100               	movlb	0	; () banked
  4312  00051C  51E0               	movf	(_nbBytesToSend+1)& (0+255),w,b
  4313  00051E  0A80               	xorlw	128
  4314  000520  6E51               	movwf	??_getByteToSend& (0+255),c
  4315  000522  0100               	movlb	0	; () banked
  4316  000524  51DC               	movf	(_bytesSent+1)& (0+255),w,b
  4317  000526  0A80               	xorlw	128
  4318  000528  5851               	subwfb	??_getByteToSend& (0+255),w,c
  4319  00052A  B0D8               	btfsc	status,0,c
  4320  00052C  D007               	goto	i2l2453
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;ax.c: 348: readIndex = 0;
  4324  00052E  0E00               	movlw	0
  4325  000530  0100               	movlb	0	; () banked
  4326  000532  6FE2               	movwf	(_readIndex+1)& (0+255),b
  4327  000534  0E00               	movlw	0
  4328  000536  6FE1               	movwf	_readIndex& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;ax.c: 349: return 111;
  4332  000538  0E6F               	movlw	111
  4333                           
  4334                           ; BSR set to: 0
  4335  00053A  0012               	return	
  4336  00053C                     i2l2453:
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;ax.c: 350: }
  4340                           ;ax.c: 352: return d;
  4341  00053C  505A               	movf	getByteToSend@d,w,c
  4342  00053E  0012               	return	
  4343  000540                     __end_of_getByteToSend:
  4344                           	opt stack 0
  4345                           pclatu	equ	0xFFB
  4346                           pclath	equ	0xFFA
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           postinc0	equ	0xFEE
  4355                           fsr0h	equ	0xFEA
  4356                           fsr0l	equ	0xFE9
  4357                           wreg	equ	0xFE8
  4358                           postdec1	equ	0xFE5
  4359                           fsr1h	equ	0xFE2
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function i2_pingAX *****************
  4367 ;; Defined at:
  4368 ;;		line 174 in file "ax.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  id              2   23[COMRAM] int 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  pingAX         20   46[COMRAM] unsigned char [20]
  4373 ;;  pingAX         20   26[COMRAM] unsigned char [20]
  4374 ;;  pingAX          2   72[COMRAM] int 
  4375 ;;  pingAX          2   70[COMRAM] int 
  4376 ;;  pingAX          2   68[COMRAM] int 
  4377 ;;  pingAX          2   66[COMRAM] int 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  2   23[COMRAM] int 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4389 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4390 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4391 ;;Total ram usage:       51 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    2
  4394 ;; This function calls:
  4395 ;;		i2_sendAX
  4396 ;; This function is called by:
  4397 ;;		_getByteToSend
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text25
  4402  000C24                     __ptext25:
  4403                           	opt stack 0
  4404  000C24                     i2_pingAX:
  4405                           	opt stack 21
  4406                           
  4407                           ;ax.c: 175: uint8_t packet[20];
  4408                           ;ax.c: 176: uint8_t result[20];
  4409                           ;ax.c: 177: packet[0] = 0xFF;
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;incstack = 0
  4413  000C24  682F               	setf	i2pingAX@packet,c
  4414                           
  4415                           ;ax.c: 178: packet[1] = 0xFF;
  4416  000C26  6830               	setf	i2pingAX@packet+1,c
  4417                           
  4418                           ;ax.c: 179: packet[2] = id;
  4419  000C28  C018  F031         	movff	i2pingAX@id,i2pingAX@packet+2
  4420                           
  4421                           ;ax.c: 180: int nbParameters = 0;
  4422  000C2C  0E00               	movlw	0
  4423  000C2E  6E44               	movwf	i2pingAX@nbParameters+1,c
  4424  000C30  0E00               	movlw	0
  4425  000C32  6E43               	movwf	i2pingAX@nbParameters,c
  4426                           
  4427                           ;ax.c: 181: int length = nbParameters + 2;
  4428  000C34  0E02               	movlw	2
  4429  000C36  2443               	addwf	i2pingAX@nbParameters,w,c
  4430  000C38  6E45               	movwf	i2pingAX@length,c
  4431  000C3A  0E00               	movlw	0
  4432  000C3C  2044               	addwfc	i2pingAX@nbParameters+1,w,c
  4433  000C3E  6E46               	movwf	i2pingAX@length+1,c
  4434                           
  4435                           ;ax.c: 182: packet[3] = length;
  4436  000C40  C045  F032         	movff	i2pingAX@length,i2pingAX@packet+3
  4437                           
  4438                           ;ax.c: 183: int instruction = 0x01;
  4439  000C44  0E00               	movlw	0
  4440  000C46  6E48               	movwf	i2pingAX@instruction+1,c
  4441  000C48  0E01               	movlw	1
  4442  000C4A  6E47               	movwf	i2pingAX@instruction,c
  4443                           
  4444                           ;ax.c: 184: packet[4] = instruction;
  4445  000C4C  C047  F033         	movff	i2pingAX@instruction,i2pingAX@packet+4
  4446                           
  4447                           ;ax.c: 187: int error = sendAX(packet, 5, result, 0);
  4448  000C50  0E2F               	movlw	low i2pingAX@packet
  4449  000C52  6E02               	movwf	i2sendAX@buffer,c
  4450  000C54  0E00               	movlw	high i2pingAX@packet
  4451  000C56  6E03               	movwf	i2sendAX@buffer+1,c
  4452  000C58  0E00               	movlw	0
  4453  000C5A  6E05               	movwf	i2sendAX@packetSize+1,c
  4454  000C5C  0E05               	movlw	5
  4455  000C5E  6E04               	movwf	i2sendAX@packetSize,c
  4456  000C60  0E1B               	movlw	low i2pingAX@result
  4457  000C62  6E06               	movwf	i2sendAX@result,c
  4458  000C64  0E00               	movlw	high i2pingAX@result
  4459  000C66  6E07               	movwf	i2sendAX@result+1,c
  4460  000C68  0E00               	movlw	0
  4461  000C6A  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4462  000C6C  0E00               	movlw	0
  4463  000C6E  6E08               	movwf	i2sendAX@parametersToRead,c
  4464  000C70  ECA0  F002         	call	i2_sendAX	;wreg free
  4465  000C74  6E1A               	movwf	??i2_pingAX& (0+255),c
  4466  000C76  501A               	movf	??i2_pingAX,w,c
  4467  000C78  6E49               	movwf	i2pingAX@error,c
  4468  000C7A  6A4A               	clrf	i2pingAX@error+1,c
  4469                           
  4470                           ;ax.c: 188: return error;
  4471  000C7C  C049  F018         	movff	i2pingAX@error,?i2_pingAX
  4472  000C80  C04A  F019         	movff	i2pingAX@error+1,?i2_pingAX+1
  4473  000C84  0012               	return	
  4474  000C86                     __end_ofi2_pingAX:
  4475                           	opt stack 0
  4476                           pclatu	equ	0xFFB
  4477                           pclath	equ	0xFFA
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           intcon	equ	0xFF2
  4485                           postinc0	equ	0xFEE
  4486                           fsr0h	equ	0xFEA
  4487                           fsr0l	equ	0xFE9
  4488                           wreg	equ	0xFE8
  4489                           postdec1	equ	0xFE5
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _writeAXData *****************
  4498 ;; Defined at:
  4499 ;;		line 218 in file "ax.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  id              2   23[COMRAM] int 
  4502 ;;  address         2   25[COMRAM] int 
  4503 ;;  data            2   27[COMRAM] int 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  packet         20   50[COMRAM] unsigned char [20]
  4506 ;;  result         20   30[COMRAM] unsigned char [20]
  4507 ;;  size            2   78[COMRAM] int 
  4508 ;;  error           2   76[COMRAM] int 
  4509 ;;  instruction     2   74[COMRAM] int 
  4510 ;;  length          2   72[COMRAM] int 
  4511 ;;  nbParameters    2   70[COMRAM] int 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  2   23[COMRAM] int 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4521 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4522 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4524 ;;      Totals:        57       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4525 ;;Total ram usage:       57 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    2
  4528 ;; This function calls:
  4529 ;;		_getAddressSize
  4530 ;;		i2_sendAX
  4531 ;; This function is called by:
  4532 ;;		_getByteToSend
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text26
  4537  000896                     __ptext26:
  4538                           	opt stack 0
  4539  000896                     _writeAXData:
  4540                           	opt stack 21
  4541                           
  4542                           ;ax.c: 219: int size = getAddressSize(address);
  4543                           
  4544                           ;incstack = 0
  4545  000896  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  4546  00089A  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  4547  00089E  ECD6  F005         	call	_getAddressSize	;wreg free
  4548  0008A2  C001  F04F         	movff	?_getAddressSize,writeAXData@size
  4549  0008A6  C002  F050         	movff	?_getAddressSize+1,writeAXData@size+1
  4550                           
  4551                           ;ax.c: 221: uint8_t packet[20];
  4552                           ;ax.c: 222: uint8_t result[20];
  4553                           ;ax.c: 223: packet[0] = 0xFF;
  4554  0008AA  6833               	setf	writeAXData@packet,c
  4555                           
  4556                           ;ax.c: 224: packet[1] = 0xFF;
  4557  0008AC  6834               	setf	writeAXData@packet+1,c
  4558                           
  4559                           ;ax.c: 225: packet[2] = id;
  4560  0008AE  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  4561                           
  4562                           ;ax.c: 226: int nbParameters = 0;
  4563  0008B2  0E00               	movlw	0
  4564  0008B4  6E48               	movwf	writeAXData@nbParameters+1,c
  4565  0008B6  0E00               	movlw	0
  4566  0008B8  6E47               	movwf	writeAXData@nbParameters,c
  4567                           
  4568                           ;ax.c: 227: int length = nbParameters + 2;
  4569  0008BA  0E02               	movlw	2
  4570  0008BC  2447               	addwf	writeAXData@nbParameters,w,c
  4571  0008BE  6E49               	movwf	writeAXData@length,c
  4572  0008C0  0E00               	movlw	0
  4573  0008C2  2048               	addwfc	writeAXData@nbParameters+1,w,c
  4574  0008C4  6E4A               	movwf	writeAXData@length+1,c
  4575                           
  4576                           ;ax.c: 228: packet[3] = length;
  4577  0008C6  C049  F036         	movff	writeAXData@length,writeAXData@packet+3
  4578                           
  4579                           ;ax.c: 229: int instruction = 0x03;
  4580  0008CA  0E00               	movlw	0
  4581  0008CC  6E4C               	movwf	writeAXData@instruction+1,c
  4582  0008CE  0E03               	movlw	3
  4583  0008D0  6E4B               	movwf	writeAXData@instruction,c
  4584                           
  4585                           ;ax.c: 230: packet[4] = instruction;
  4586  0008D2  C04B  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  4587                           
  4588                           ;ax.c: 231: packet[5] = address;
  4589  0008D6  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  4590                           
  4591                           ;ax.c: 232: if (size == 1) {
  4592  0008DA  044F               	decf	writeAXData@size,w,c
  4593  0008DC  1050               	iorwf	writeAXData@size+1,w,c
  4594  0008DE  A4D8               	btfss	status,2,c
  4595  0008E0  D003               	goto	i2l588
  4596                           
  4597                           ;ax.c: 233: packet[6] = data;
  4598  0008E2  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  4599                           
  4600                           ;ax.c: 234: } else {
  4601  0008E6  D004               	goto	i2l2269
  4602  0008E8                     i2l588:
  4603                           
  4604                           ;ax.c: 235: packet[6] = data & 0xff;
  4605  0008E8  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  4606                           
  4607                           ;ax.c: 236: packet[7] = (data >> 8);
  4608  0008EC  501D               	movf	writeAXData@data+1,w,c
  4609  0008EE  6E3A               	movwf	writeAXData@packet+7,c
  4610  0008F0                     i2l2269:
  4611                           
  4612                           ;ax.c: 237: }
  4613                           ;ax.c: 240: int error = sendAX(packet, 6 + size, result, 0);
  4614  0008F0  0E33               	movlw	low writeAXData@packet
  4615  0008F2  6E02               	movwf	i2sendAX@buffer,c
  4616  0008F4  0E00               	movlw	high writeAXData@packet
  4617  0008F6  6E03               	movwf	i2sendAX@buffer+1,c
  4618  0008F8  0E06               	movlw	6
  4619  0008FA  244F               	addwf	writeAXData@size,w,c
  4620  0008FC  6E04               	movwf	i2sendAX@packetSize,c
  4621  0008FE  0E00               	movlw	0
  4622  000900  2050               	addwfc	writeAXData@size+1,w,c
  4623  000902  6E05               	movwf	i2sendAX@packetSize+1,c
  4624  000904  0E1F               	movlw	low writeAXData@result
  4625  000906  6E06               	movwf	i2sendAX@result,c
  4626  000908  0E00               	movlw	high writeAXData@result
  4627  00090A  6E07               	movwf	i2sendAX@result+1,c
  4628  00090C  0E00               	movlw	0
  4629  00090E  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4630  000910  0E00               	movlw	0
  4631  000912  6E08               	movwf	i2sendAX@parametersToRead,c
  4632  000914  ECA0  F002         	call	i2_sendAX	;wreg free
  4633  000918  6E1E               	movwf	??_writeAXData& (0+255),c
  4634  00091A  501E               	movf	??_writeAXData,w,c
  4635  00091C  6E4D               	movwf	writeAXData@error,c
  4636  00091E  6A4E               	clrf	writeAXData@error+1,c
  4637                           
  4638                           ;ax.c: 241: return error;
  4639  000920  C04D  F018         	movff	writeAXData@error,?_writeAXData
  4640  000924  C04E  F019         	movff	writeAXData@error+1,?_writeAXData+1
  4641  000928  0012               	return	
  4642  00092A                     __end_of_writeAXData:
  4643                           	opt stack 0
  4644                           pclatu	equ	0xFFB
  4645                           pclath	equ	0xFFA
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           postinc0	equ	0xFEE
  4654                           fsr0h	equ	0xFEA
  4655                           fsr0l	equ	0xFE9
  4656                           wreg	equ	0xFE8
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function _readAXData *****************
  4666 ;; Defined at:
  4667 ;;		line 191 in file "ax.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  id              2   23[COMRAM] int 
  4670 ;;  address         2   25[COMRAM] int 
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;  packet         20   51[COMRAM] unsigned char [20]
  4673 ;;  result         20   29[COMRAM] unsigned char [20]
  4674 ;;  size            2   77[COMRAM] int 
  4675 ;;  instruction     2   75[COMRAM] int 
  4676 ;;  length          2   73[COMRAM] int 
  4677 ;;  nbParameters    2   71[COMRAM] int 
  4678 ;;  error           2   49[COMRAM] int 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  2   23[COMRAM] int 
  4681 ;; Registers used:
  4682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4689 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4691 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;Total ram usage:       56 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    2
  4695 ;; This function calls:
  4696 ;;		_getAddressSize
  4697 ;;		i2_sendAX
  4698 ;; This function is called by:
  4699 ;;		_getByteToSend
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text27
  4704  0007FE                     __ptext27:
  4705                           	opt stack 0
  4706  0007FE                     _readAXData:
  4707                           	opt stack 21
  4708                           
  4709                           ;ax.c: 192: int size = getAddressSize(address);
  4710                           
  4711                           ;incstack = 0
  4712  0007FE  C01A  F001         	movff	readAXData@address,getAddressSize@address
  4713  000802  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  4714  000806  ECD6  F005         	call	_getAddressSize	;wreg free
  4715  00080A  C001  F04E         	movff	?_getAddressSize,readAXData@size
  4716  00080E  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  4717                           
  4718                           ;ax.c: 194: uint8_t packet[20];
  4719                           ;ax.c: 195: uint8_t result[20];
  4720                           ;ax.c: 196: packet[0] = 0xFF;
  4721  000812  6834               	setf	readAXData@packet,c
  4722                           
  4723                           ;ax.c: 197: packet[1] = 0xFF;
  4724  000814  6835               	setf	readAXData@packet+1,c
  4725                           
  4726                           ;ax.c: 198: packet[2] = id;
  4727  000816  C018  F036         	movff	readAXData@id,readAXData@packet+2
  4728                           
  4729                           ;ax.c: 199: int nbParameters = 2;
  4730  00081A  0E00               	movlw	0
  4731  00081C  6E49               	movwf	readAXData@nbParameters+1,c
  4732  00081E  0E02               	movlw	2
  4733  000820  6E48               	movwf	readAXData@nbParameters,c
  4734                           
  4735                           ;ax.c: 200: int length = nbParameters + 2;
  4736  000822  0E02               	movlw	2
  4737  000824  2448               	addwf	readAXData@nbParameters,w,c
  4738  000826  6E4A               	movwf	readAXData@length,c
  4739  000828  0E00               	movlw	0
  4740  00082A  2049               	addwfc	readAXData@nbParameters+1,w,c
  4741  00082C  6E4B               	movwf	readAXData@length+1,c
  4742                           
  4743                           ;ax.c: 201: packet[3] = length;
  4744  00082E  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  4745                           
  4746                           ;ax.c: 202: int instruction = 0x02;
  4747  000832  0E00               	movlw	0
  4748  000834  6E4D               	movwf	readAXData@instruction+1,c
  4749  000836  0E02               	movlw	2
  4750  000838  6E4C               	movwf	readAXData@instruction,c
  4751                           
  4752                           ;ax.c: 203: packet[4] = instruction;
  4753  00083A  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  4754                           
  4755                           ;ax.c: 204: packet[5] = address;
  4756  00083E  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  4757                           
  4758                           ;ax.c: 205: packet[6] = size;
  4759  000842  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  4760                           
  4761                           ;ax.c: 208: int error = sendAX(packet, 7, result, 1);
  4762  000846  0E34               	movlw	low readAXData@packet
  4763  000848  6E02               	movwf	i2sendAX@buffer,c
  4764  00084A  0E00               	movlw	high readAXData@packet
  4765  00084C  6E03               	movwf	i2sendAX@buffer+1,c
  4766  00084E  0E00               	movlw	0
  4767  000850  6E05               	movwf	i2sendAX@packetSize+1,c
  4768  000852  0E07               	movlw	7
  4769  000854  6E04               	movwf	i2sendAX@packetSize,c
  4770  000856  0E1E               	movlw	low readAXData@result
  4771  000858  6E06               	movwf	i2sendAX@result,c
  4772  00085A  0E00               	movlw	high readAXData@result
  4773  00085C  6E07               	movwf	i2sendAX@result+1,c
  4774  00085E  0E00               	movlw	0
  4775  000860  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4776  000862  0E01               	movlw	1
  4777  000864  6E08               	movwf	i2sendAX@parametersToRead,c
  4778  000866  ECA0  F002         	call	i2_sendAX	;wreg free
  4779  00086A  6E1C               	movwf	??_readAXData& (0+255),c
  4780  00086C  501C               	movf	??_readAXData,w,c
  4781  00086E  6E32               	movwf	readAXData@error,c
  4782  000870  6A33               	clrf	readAXData@error+1,c
  4783                           
  4784                           ;ax.c: 209: if (size == 1) {
  4785  000872  044E               	decf	readAXData@size,w,c
  4786  000874  104F               	iorwf	readAXData@size+1,w,c
  4787  000876  A4D8               	btfss	status,2,c
  4788  000878  D004               	goto	i2l2239
  4789                           
  4790                           ;ax.c: 211: return result[5];
  4791  00087A  C023  F018         	movff	readAXData@result+5,?_readAXData
  4792  00087E  6A19               	clrf	?_readAXData+1,c
  4793                           
  4794                           ;ax.c: 212: } else {
  4795  000880  0012               	return	
  4796  000882                     i2l2239:
  4797                           
  4798                           ;ax.c: 214: return result[5] + result[6]*256;
  4799  000882  5024               	movf	readAXData@result+6,w,c
  4800  000884  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  4801  000886  6A1C               	clrf	??_readAXData& (0+255),c
  4802  000888  5023               	movf	readAXData@result+5,w,c
  4803  00088A  241C               	addwf	??_readAXData,w,c
  4804  00088C  6E18               	movwf	?_readAXData,c
  4805  00088E  0E00               	movlw	0
  4806  000890  201D               	addwfc	??_readAXData+1,w,c
  4807  000892  6E19               	movwf	?_readAXData+1,c
  4808  000894  0012               	return	
  4809  000896                     __end_of_readAXData:
  4810                           	opt stack 0
  4811                           pclatu	equ	0xFFB
  4812                           pclath	equ	0xFFA
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           postinc0	equ	0xFEE
  4821                           fsr0h	equ	0xFEA
  4822                           fsr0l	equ	0xFE9
  4823                           wreg	equ	0xFE8
  4824                           postdec1	equ	0xFE5
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function i2_sendAX *****************
  4833 ;; Defined at:
  4834 ;;		line 123 in file "ax.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  4837 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  4838 ;;  packetSize      2    3[COMRAM] int 
  4839 ;;  result          2    5[COMRAM] PTR unsigned char 
  4840 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  4841 ;;  parametersTo    2    7[COMRAM] int 
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  sendAX          2   20[COMRAM] int 
  4844 ;;  sendAX          2   18[COMRAM] int 
  4845 ;;  sendAX          2   16[COMRAM] int 
  4846 ;;  sendAX          2   14[COMRAM] int 
  4847 ;;  sendAX          2   12[COMRAM] int 
  4848 ;;  sendAX          2   10[COMRAM] int 
  4849 ;;  sendAX          1   22[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      unsigned char 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4859 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4860 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4862 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4863 ;;Total ram usage:       22 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    1
  4866 ;; This function calls:
  4867 ;;		i2_EUSART1_Read
  4868 ;;		i2_EUSART1_Write
  4869 ;; This function is called by:
  4870 ;;		_readAXData
  4871 ;;		_writeAXData
  4872 ;;		i2_pingAX
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text28
  4877  000540                     __ptext28:
  4878                           	opt stack 0
  4879  000540                     i2_sendAX:
  4880                           	opt stack 21
  4881                           
  4882                           ;ax.c: 124: uint8_t checksum = 0;
  4883                           
  4884                           ;incstack = 0
  4885  000540  0E00               	movlw	0
  4886  000542  6E17               	movwf	i2sendAX@checksum,c
  4887                           
  4888                           ;ax.c: 126: for (int i = 2; i < packetSize; i++) {
  4889  000544  0E00               	movlw	0
  4890  000546  6E0E               	movwf	i2sendAX@i+1,c
  4891  000548  0E02               	movlw	2
  4892  00054A  6E0D               	movwf	i2sendAX@i,c
  4893  00054C  D00A               	goto	i2l2133
  4894  00054E                     i2l2129:
  4895                           
  4896                           ;ax.c: 127: checksum += buffer[i];
  4897  00054E  500D               	movf	i2sendAX@i,w,c
  4898  000550  2402               	addwf	i2sendAX@buffer,w,c
  4899  000552  6ED9               	movwf	fsr2l,c
  4900  000554  500E               	movf	i2sendAX@i+1,w,c
  4901  000556  2003               	addwfc	i2sendAX@buffer+1,w,c
  4902  000558  6EDA               	movwf	fsr2h,c
  4903  00055A  50DF               	movf	indf2,w,c
  4904  00055C  2617               	addwf	i2sendAX@checksum,f,c
  4905  00055E  4A0D               	infsnz	i2sendAX@i,f,c
  4906  000560  2A0E               	incf	i2sendAX@i+1,f,c
  4907  000562                     i2l2133:
  4908  000562  5004               	movf	i2sendAX@packetSize,w,c
  4909  000564  5C0D               	subwf	i2sendAX@i,w,c
  4910  000566  500E               	movf	i2sendAX@i+1,w,c
  4911  000568  0A80               	xorlw	128
  4912  00056A  6E0A               	movwf	??i2_sendAX& (0+255),c
  4913  00056C  5005               	movf	i2sendAX@packetSize+1,w,c
  4914  00056E  0A80               	xorlw	128
  4915  000570  580A               	subwfb	??i2_sendAX& (0+255),w,c
  4916  000572  A0D8               	btfss	status,0,c
  4917  000574  D7EC               	goto	i2l2129
  4918                           
  4919                           ;ax.c: 128: }
  4920                           ;ax.c: 129: checksum = ~checksum;
  4921  000576  1E17               	comf	i2sendAX@checksum,f,c
  4922                           
  4923                           ;ax.c: 131: do { LATD4 = 1; } while(0);
  4924  000578  888C               	bsf	3980,4,c	;volatile
  4925                           
  4926                           ;ax.c: 132: for (int i = 0; i < packetSize; i++) {
  4927  00057A  0E00               	movlw	0
  4928  00057C  6E10               	movwf	i2sendAX@i_1221+1,c
  4929  00057E  0E00               	movlw	0
  4930  000580  6E0F               	movwf	i2sendAX@i_1221,c
  4931  000582  D00B               	goto	i2l2145
  4932  000584                     i2l2141:
  4933                           
  4934                           ;ax.c: 133: EUSART1_Write(buffer[i]);
  4935  000584  500F               	movf	i2sendAX@i_1221,w,c
  4936  000586  2402               	addwf	i2sendAX@buffer,w,c
  4937  000588  6ED9               	movwf	fsr2l,c
  4938  00058A  5010               	movf	i2sendAX@i_1221+1,w,c
  4939  00058C  2003               	addwfc	i2sendAX@buffer+1,w,c
  4940  00058E  6EDA               	movwf	fsr2h,c
  4941  000590  50DF               	movf	indf2,w,c
  4942  000592  EC6A  F007         	call	i2_EUSART1_Write
  4943  000596  4A0F               	infsnz	i2sendAX@i_1221,f,c
  4944  000598  2A10               	incf	i2sendAX@i_1221+1,f,c
  4945  00059A                     i2l2145:
  4946  00059A  5004               	movf	i2sendAX@packetSize,w,c
  4947  00059C  5C0F               	subwf	i2sendAX@i_1221,w,c
  4948  00059E  5010               	movf	i2sendAX@i_1221+1,w,c
  4949  0005A0  0A80               	xorlw	128
  4950  0005A2  6E0A               	movwf	??i2_sendAX& (0+255),c
  4951  0005A4  5005               	movf	i2sendAX@packetSize+1,w,c
  4952  0005A6  0A80               	xorlw	128
  4953  0005A8  580A               	subwfb	??i2_sendAX& (0+255),w,c
  4954  0005AA  A0D8               	btfss	status,0,c
  4955  0005AC  D7EB               	goto	i2l2141
  4956                           
  4957                           ;ax.c: 134: }
  4958                           ;ax.c: 135: EUSART1_Write(checksum);
  4959  0005AE  5017               	movf	i2sendAX@checksum,w,c
  4960  0005B0  EC6A  F007         	call	i2_EUSART1_Write
  4961                           
  4962                           ;ax.c: 136: _delay((unsigned long)((100)*(16000000/4000000.0)));
  4963  0005B4  0E85               	movlw	133
  4964  0005B6                     i2u133_47:
  4965  0005B6  2EE8               	decfsz	wreg,f,c
  4966  0005B8  D7FE               	goto	i2u133_47
  4967  0005BA  F000               	nop	
  4968                           
  4969                           ;ax.c: 137: do { LATD4 = 0; } while(0);
  4970  0005BC  988C               	bcf	3980,4,c	;volatile
  4971                           
  4972                           ;ax.c: 153: int stop = 6 + parametersToRead;
  4973  0005BE  0E06               	movlw	6
  4974  0005C0  2408               	addwf	i2sendAX@parametersToRead,w,c
  4975  0005C2  6E0B               	movwf	i2sendAX@stop,c
  4976  0005C4  0E00               	movlw	0
  4977  0005C6  2009               	addwfc	i2sendAX@parametersToRead+1,w,c
  4978  0005C8  6E0C               	movwf	i2sendAX@stop+1,c
  4979                           
  4980                           ;ax.c: 155: for (int i = 0; i < stop; i++) {
  4981  0005CA  0E00               	movlw	0
  4982  0005CC  6E12               	movwf	i2sendAX@i_1224+1,c
  4983  0005CE  0E00               	movlw	0
  4984  0005D0  6E11               	movwf	i2sendAX@i_1224,c
  4985  0005D2  D00A               	goto	i2l2161
  4986  0005D4                     i2l2157:
  4987                           
  4988                           ;ax.c: 156: result[i] = 122;
  4989  0005D4  5011               	movf	i2sendAX@i_1224,w,c
  4990  0005D6  2406               	addwf	i2sendAX@result,w,c
  4991  0005D8  6ED9               	movwf	fsr2l,c
  4992  0005DA  5012               	movf	i2sendAX@i_1224+1,w,c
  4993  0005DC  2007               	addwfc	i2sendAX@result+1,w,c
  4994  0005DE  6EDA               	movwf	fsr2h,c
  4995  0005E0  0E7A               	movlw	122
  4996  0005E2  6EDF               	movwf	indf2,c
  4997  0005E4  4A11               	infsnz	i2sendAX@i_1224,f,c
  4998  0005E6  2A12               	incf	i2sendAX@i_1224+1,f,c
  4999  0005E8                     i2l2161:
  5000  0005E8  500B               	movf	i2sendAX@stop,w,c
  5001  0005EA  5C11               	subwf	i2sendAX@i_1224,w,c
  5002  0005EC  5012               	movf	i2sendAX@i_1224+1,w,c
  5003  0005EE  0A80               	xorlw	128
  5004  0005F0  6E0A               	movwf	??i2_sendAX& (0+255),c
  5005  0005F2  500C               	movf	i2sendAX@stop+1,w,c
  5006  0005F4  0A80               	xorlw	128
  5007  0005F6  580A               	subwfb	??i2_sendAX& (0+255),w,c
  5008  0005F8  A0D8               	btfss	status,0,c
  5009  0005FA  D7EC               	goto	i2l2157
  5010                           
  5011                           ;ax.c: 157: }
  5012                           ;ax.c: 159: int r0 = EUSART1_Read();
  5013  0005FC  EC4A  F007         	call	i2_EUSART1_Read	;wreg free
  5014  000600  D002               	goto	L3
  5015  000602                     i2l2165:
  5016                           
  5017                           ;ax.c: 161: r0 = EUSART1_Read();
  5018  000602  EC4A  F007         	call	i2_EUSART1_Read	;wreg free
  5019  000606                     L3:
  5020  000606  6E0A               	movwf	??i2_sendAX& (0+255),c
  5021  000608  500A               	movf	??i2_sendAX,w,c
  5022  00060A  6E13               	movwf	i2sendAX@r0,c
  5023  00060C  6A14               	clrf	i2sendAX@r0+1,c
  5024  00060E  2813               	incf	i2sendAX@r0,w,c
  5025  000610  1014               	iorwf	i2sendAX@r0+1,w,c
  5026  000612  A4D8               	btfss	status,2,c
  5027  000614  D7F6               	goto	i2l2165
  5028                           
  5029                           ;ax.c: 162: }
  5030                           ;ax.c: 163: result[0] = r0;
  5031  000616  C006  FFD9         	movff	i2sendAX@result,fsr2l
  5032  00061A  C007  FFDA         	movff	i2sendAX@result+1,fsr2h
  5033  00061E  C013  FFDF         	movff	i2sendAX@r0,indf2
  5034                           
  5035                           ;ax.c: 164: for (int i = 1; i < stop; i++) {
  5036  000622  0E00               	movlw	0
  5037  000624  6E16               	movwf	i2sendAX@i_1227+1,c
  5038  000626  0E01               	movlw	1
  5039  000628  6E15               	movwf	i2sendAX@i_1227,c
  5040  00062A  D00B               	goto	i2l2177
  5041  00062C                     i2l2173:
  5042                           
  5043                           ;ax.c: 165: result[i] = EUSART1_Read();
  5044  00062C  5015               	movf	i2sendAX@i_1227,w,c
  5045  00062E  2406               	addwf	i2sendAX@result,w,c
  5046  000630  6ED9               	movwf	fsr2l,c
  5047  000632  5016               	movf	i2sendAX@i_1227+1,w,c
  5048  000634  2007               	addwfc	i2sendAX@result+1,w,c
  5049  000636  6EDA               	movwf	fsr2h,c
  5050  000638  EC4A  F007         	call	i2_EUSART1_Read	;wreg free
  5051  00063C  6EDF               	movwf	indf2,c
  5052  00063E  4A15               	infsnz	i2sendAX@i_1227,f,c
  5053  000640  2A16               	incf	i2sendAX@i_1227+1,f,c
  5054  000642                     i2l2177:
  5055  000642  500B               	movf	i2sendAX@stop,w,c
  5056  000644  5C15               	subwf	i2sendAX@i_1227,w,c
  5057  000646  5016               	movf	i2sendAX@i_1227+1,w,c
  5058  000648  0A80               	xorlw	128
  5059  00064A  6E0A               	movwf	??i2_sendAX& (0+255),c
  5060  00064C  500C               	movf	i2sendAX@stop+1,w,c
  5061  00064E  0A80               	xorlw	128
  5062  000650  580A               	subwfb	??i2_sendAX& (0+255),w,c
  5063  000652  A0D8               	btfss	status,0,c
  5064  000654  D7EB               	goto	i2l2173
  5065                           
  5066                           ;ax.c: 166: }
  5067                           ;ax.c: 169: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5068  000656  0EC8               	movlw	200
  5069  000658                     i2u134_47:
  5070  000658  F000               	nop	
  5071  00065A  2EE8               	decfsz	wreg,f,c
  5072  00065C  D7FD               	goto	i2u134_47
  5073                           
  5074                           ;ax.c: 170: return result[4];
  5075  00065E  EE20 F004          	lfsr	2,4
  5076  000662  5006               	movf	i2sendAX@result,w,c
  5077  000664  26D9               	addwf	fsr2l,f,c
  5078  000666  5007               	movf	i2sendAX@result+1,w,c
  5079  000668  22DA               	addwfc	fsr2h,f,c
  5080  00066A  50DF               	movf	indf2,w,c
  5081  00066C  0012               	return	
  5082  00066E                     __end_ofi2_sendAX:
  5083                           	opt stack 0
  5084                           pclatu	equ	0xFFB
  5085                           pclath	equ	0xFFA
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           intcon	equ	0xFF2
  5093                           postinc0	equ	0xFEE
  5094                           fsr0h	equ	0xFEA
  5095                           fsr0l	equ	0xFE9
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105 ;; *************** function i2_EUSART1_Write *****************
  5106 ;; Defined at:
  5107 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;  txData          1    wreg     unsigned char 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  txData          1    0[COMRAM] unsigned char 
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      void 
  5114 ;; Registers used:
  5115 ;;		wreg
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5124 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5125 ;;Total ram usage:        1 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		i2_sendAX
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text29
  5135  000ED4                     __ptext29:
  5136                           	opt stack 0
  5137  000ED4                     i2_EUSART1_Write:
  5138                           	opt stack 21
  5139                           
  5140                           ;incstack = 0
  5141                           ;i2EUSART1_Write@txData stored from wreg
  5142  000ED4  6E01               	movwf	i2EUSART1_Write@txData,c
  5143  000ED6                     i2l122:
  5144  000ED6  A89E               	btfss	3998,4,c	;volatile
  5145  000ED8  D7FE               	goto	i2l122
  5146                           
  5147                           ;eusart1.c: 101: }
  5148                           ;eusart1.c: 103: TXREG1 = txData;
  5149  000EDA  C001  FFAD         	movff	i2EUSART1_Write@txData,4013	;volatile
  5150  000EDE  0012               	return		;funcret
  5151  000EE0                     __end_ofi2_EUSART1_Write:
  5152                           	opt stack 0
  5153                           pclatu	equ	0xFFB
  5154                           pclath	equ	0xFFA
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           postinc0	equ	0xFEE
  5163                           fsr0h	equ	0xFEA
  5164                           fsr0l	equ	0xFE9
  5165                           wreg	equ	0xFE8
  5166                           postdec1	equ	0xFE5
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function i2_EUSART1_Read *****************
  5175 ;; Defined at:
  5176 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      unsigned char 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; This function calls:
  5197 ;;		Nothing
  5198 ;; This function is called by:
  5199 ;;		i2_sendAX
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text30
  5204  000E94                     __ptext30:
  5205                           	opt stack 0
  5206  000E94                     i2_EUSART1_Read:
  5207                           	opt stack 21
  5208                           
  5209                           ;eusart1.c: 80: RCSTA1bits.SREN = 1;
  5210                           
  5211                           ;incstack = 0
  5212  000E94  8AAB               	bsf	4011,5,c	;volatile
  5213  000E96                     i2l115:
  5214  000E96  AA9E               	btfss	3998,5,c	;volatile
  5215  000E98  D7FE               	goto	i2l115
  5216                           
  5217                           ;eusart1.c: 83: }
  5218                           ;eusart1.c: 86: if(1 == RCSTA1bits.OERR)
  5219  000E9A  A2AB               	btfss	4011,1,c	;volatile
  5220  000E9C  D002               	goto	i2l2091
  5221                           
  5222                           ;eusart1.c: 87: {
  5223                           ;eusart1.c: 90: RCSTA1bits.SPEN = 0;
  5224  000E9E  9EAB               	bcf	4011,7,c	;volatile
  5225                           
  5226                           ;eusart1.c: 91: RCSTA1bits.SPEN = 1;
  5227  000EA0  8EAB               	bsf	4011,7,c	;volatile
  5228  000EA2                     i2l2091:
  5229                           
  5230                           ;eusart1.c: 92: }
  5231                           ;eusart1.c: 94: return RCREG1;
  5232  000EA2  50AE               	movf	4014,w,c	;volatile
  5233  000EA4  0012               	return	
  5234  000EA6                     __end_ofi2_EUSART1_Read:
  5235                           	opt stack 0
  5236                           pclatu	equ	0xFFB
  5237                           pclath	equ	0xFFA
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon	equ	0xFF2
  5245                           postinc0	equ	0xFEE
  5246                           fsr0h	equ	0xFEA
  5247                           fsr0l	equ	0xFE9
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1h	equ	0xFE2
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function _getAddressSize *****************
  5258 ;; Defined at:
  5259 ;;		line 22 in file "ax.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  address         2    0[COMRAM] int 
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  2    0[COMRAM] int 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5276 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5277 ;;Total ram usage:        4 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_readAXData
  5283 ;;		_writeAXData
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text31
  5288  000BAC                     __ptext31:
  5289                           	opt stack 0
  5290  000BAC                     _getAddressSize:
  5291                           	opt stack 22
  5292                           
  5293                           ;ax.c: 23: switch (address) {
  5294                           
  5295                           ;incstack = 0
  5296  000BAC  D00A               	goto	i2l2121
  5297  000BAE                     i2l2111:
  5298                           
  5299                           ;ax.c: 25: case 6:
  5300                           ;ax.c: 26: case 8:
  5301                           ;ax.c: 27: case 14:
  5302                           ;ax.c: 28: case 20:
  5303                           ;ax.c: 29: case 22:
  5304                           ;ax.c: 30: case 30:
  5305                           ;ax.c: 31: case 32:
  5306                           ;ax.c: 32: case 34:
  5307                           ;ax.c: 33: case 36:
  5308                           ;ax.c: 34: case 38:
  5309                           ;ax.c: 35: case 40:
  5310                           ;ax.c: 36: case 48:
  5311                           ;ax.c: 37: return 2;
  5312  000BAE  0E00               	movlw	0
  5313  000BB0  6E02               	movwf	?_getAddressSize+1,c
  5314  000BB2  0E02               	movlw	2
  5315  000BB4  6E01               	movwf	?_getAddressSize,c
  5316  000BB6  0012               	return	
  5317  000BB8                     i2l2115:
  5318                           
  5319                           ;ax.c: 39: return 1;
  5320  000BB8  0E00               	movlw	0
  5321  000BBA  6E02               	movwf	?_getAddressSize+1,c
  5322  000BBC  0E01               	movlw	1
  5323  000BBE  6E01               	movwf	?_getAddressSize,c
  5324                           
  5325                           ;ax.c: 40: }
  5326  000BC0  0012               	return	
  5327  000BC2                     i2l2121:
  5328  000BC2  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  5329  000BC6  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  5330                           
  5331                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5332                           ; Switch size 1, requested type "space"
  5333                           ; Number of cases is 1, Range of values is 0 to 0
  5334                           ; switch strategies available:
  5335                           ; Name         Instructions Cycles
  5336                           ; simple_byte            4     3 (average)
  5337                           ;	Chosen strategy is simple_byte
  5338  000BCA  5004               	movf	??_getAddressSize+1,w,c
  5339  000BCC  0A00               	xorlw	0	; case 0
  5340  000BCE  A4D8               	btfss	status,2,c
  5341  000BD0  D7F3               	goto	i2l2115
  5342                           
  5343                           ; Switch size 1, requested type "space"
  5344                           ; Number of cases is 13, Range of values is 0 to 48
  5345                           ; switch strategies available:
  5346                           ; Name         Instructions Cycles
  5347                           ; simple_byte           40    21 (average)
  5348                           ;	Chosen strategy is simple_byte
  5349  000BD2  5003               	movf	??_getAddressSize,w,c
  5350  000BD4  0A00               	xorlw	0	; case 0
  5351  000BD6  B4D8               	btfsc	status,2,c
  5352  000BD8  D7EA               	goto	i2l2111
  5353  000BDA  0A06               	xorlw	6	; case 6
  5354  000BDC  B4D8               	btfsc	status,2,c
  5355  000BDE  D7E7               	goto	i2l2111
  5356  000BE0  0A0E               	xorlw	14	; case 8
  5357  000BE2  B4D8               	btfsc	status,2,c
  5358  000BE4  D7E4               	goto	i2l2111
  5359  000BE6  0A06               	xorlw	6	; case 14
  5360  000BE8  B4D8               	btfsc	status,2,c
  5361  000BEA  D7E1               	goto	i2l2111
  5362  000BEC  0A1A               	xorlw	26	; case 20
  5363  000BEE  B4D8               	btfsc	status,2,c
  5364  000BF0  D7DE               	goto	i2l2111
  5365  000BF2  0A02               	xorlw	2	; case 22
  5366  000BF4  B4D8               	btfsc	status,2,c
  5367  000BF6  D7DB               	goto	i2l2111
  5368  000BF8  0A08               	xorlw	8	; case 30
  5369  000BFA  B4D8               	btfsc	status,2,c
  5370  000BFC  D7D8               	goto	i2l2111
  5371  000BFE  0A3E               	xorlw	62	; case 32
  5372  000C00  B4D8               	btfsc	status,2,c
  5373  000C02  D7D5               	goto	i2l2111
  5374  000C04  0A02               	xorlw	2	; case 34
  5375  000C06  B4D8               	btfsc	status,2,c
  5376  000C08  D7D2               	goto	i2l2111
  5377  000C0A  0A06               	xorlw	6	; case 36
  5378  000C0C  B4D8               	btfsc	status,2,c
  5379  000C0E  D7CF               	goto	i2l2111
  5380  000C10  0A02               	xorlw	2	; case 38
  5381  000C12  B4D8               	btfsc	status,2,c
  5382  000C14  D7CC               	goto	i2l2111
  5383  000C16  0A0E               	xorlw	14	; case 40
  5384  000C18  B4D8               	btfsc	status,2,c
  5385  000C1A  D7C9               	goto	i2l2111
  5386  000C1C  0A18               	xorlw	24	; case 48
  5387  000C1E  B4D8               	btfsc	status,2,c
  5388  000C20  D7C6               	goto	i2l2111
  5389  000C22  D7CA               	goto	i2l2115
  5390  000C24                     __end_of_getAddressSize:
  5391                           	opt stack 0
  5392                           pclatu	equ	0xFFB
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           postinc0	equ	0xFEE
  5402                           fsr0h	equ	0xFEA
  5403                           fsr0l	equ	0xFE9
  5404                           wreg	equ	0xFE8
  5405                           postdec1	equ	0xFE5
  5406                           fsr1h	equ	0xFE2
  5407                           fsr1l	equ	0xFE1
  5408                           indf2	equ	0xFDF
  5409                           fsr2h	equ	0xFDA
  5410                           fsr2l	equ	0xFD9
  5411                           status	equ	0xFD8
  5412                           
  5413 ;; *************** function _getADC *****************
  5414 ;; Defined at:
  5415 ;;		line 119 in file "ax.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  adc             2    5[COMRAM] int 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;		None
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  2    5[COMRAM] int 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5433 ;;Total ram usage:        2 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    1
  5436 ;; This function calls:
  5437 ;;		_ADC_GetConversion
  5438 ;; This function is called by:
  5439 ;;		_getByteToSend
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text32
  5444  000EB6                     __ptext32:
  5445                           	opt stack 0
  5446  000EB6                     _getADC:
  5447                           	opt stack 22
  5448                           
  5449                           ;ax.c: 120: return ADC_GetConversion(adc);
  5450                           
  5451                           ;incstack = 0
  5452  000EB6  5006               	movf	getADC@adc,w,c
  5453  000EB8  ECDF  F006         	call	_ADC_GetConversion
  5454  000EBC  C001  F006         	movff	?_ADC_GetConversion,?_getADC
  5455  000EC0  C002  F007         	movff	?_ADC_GetConversion+1,?_getADC+1
  5456  000EC4  0012               	return	
  5457  000EC6                     __end_of_getADC:
  5458                           	opt stack 0
  5459                           pclatu	equ	0xFFB
  5460                           pclath	equ	0xFFA
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           postinc0	equ	0xFEE
  5469                           fsr0h	equ	0xFEA
  5470                           fsr0l	equ	0xFE9
  5471                           wreg	equ	0xFE8
  5472                           postdec1	equ	0xFE5
  5473                           fsr1h	equ	0xFE2
  5474                           fsr1l	equ	0xFE1
  5475                           indf2	equ	0xFDF
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _ADC_GetConversion *****************
  5481 ;; Defined at:
  5482 ;;		line 104 in file "mcc_generated_files/adc.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  channel         1    wreg     enum E18216
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  channel         1    4[COMRAM] enum E18216
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  2    0[COMRAM] unsigned int 
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5496 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5497 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5499 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;Total ram usage:        5 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_getADC
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text33
  5510  000DBE                     __ptext33:
  5511                           	opt stack 0
  5512  000DBE                     _ADC_GetConversion:
  5513                           	opt stack 22
  5514                           
  5515                           ;incstack = 0
  5516                           ;ADC_GetConversion@channel stored from wreg
  5517  000DBE  6E05               	movwf	ADC_GetConversion@channel,c
  5518                           
  5519                           ;adc.c: 107: ADCON0bits.CHS = channel;
  5520  000DC0  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  5521  000DC4  4603               	rlncf	??_ADC_GetConversion,f,c
  5522  000DC6  4603               	rlncf	??_ADC_GetConversion,f,c
  5523  000DC8  50C2               	movf	4034,w,c	;volatile
  5524  000DCA  1803               	xorwf	??_ADC_GetConversion,w,c
  5525  000DCC  0B83               	andlw	-125
  5526  000DCE  1803               	xorwf	??_ADC_GetConversion,w,c
  5527  000DD0  6EC2               	movwf	4034,c	;volatile
  5528                           
  5529                           ;adc.c: 110: ADCON0bits.ADON = 1;
  5530  000DD2  80C2               	bsf	4034,0,c	;volatile
  5531                           
  5532                           ;adc.c: 114: ADCON0bits.GO_nDONE = 1;
  5533  000DD4  82C2               	bsf	4034,1,c	;volatile
  5534  000DD6                     i2l315:
  5535  000DD6  B2C2               	btfsc	4034,1,c	;volatile
  5536  000DD8  D7FE               	goto	i2l315
  5537                           
  5538                           ;adc.c: 119: }
  5539                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
  5540  000DDA  50C4               	movf	4036,w,c	;volatile
  5541  000DDC  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  5542  000DDE  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  5543  000DE0  50C3               	movf	4035,w,c	;volatile
  5544  000DE2  2403               	addwf	??_ADC_GetConversion,w,c
  5545  000DE4  6E01               	movwf	?_ADC_GetConversion,c
  5546  000DE6  0E00               	movlw	0
  5547  000DE8  2004               	addwfc	??_ADC_GetConversion+1,w,c
  5548  000DEA  6E02               	movwf	?_ADC_GetConversion+1,c
  5549  000DEC  0012               	return	
  5550  000DEE                     __end_of_ADC_GetConversion:
  5551                           	opt stack 0
  5552  0000                     pclatu	equ	0xFFB
  5553                           pclath	equ	0xFFA
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           postinc0	equ	0xFEE
  5562                           fsr0h	equ	0xFEA
  5563                           fsr0l	equ	0xFE9
  5564                           wreg	equ	0xFE8
  5565                           postdec1	equ	0xFE5
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           pclatu	equ	0xFFB
  5573                           pclath	equ	0xFFA
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           postinc0	equ	0xFEE
  5582                           fsr0h	equ	0xFEA
  5583                           fsr0l	equ	0xFE9
  5584                           wreg	equ	0xFE8
  5585                           postdec1	equ	0xFE5
  5586                           fsr1h	equ	0xFE2
  5587                           fsr1l	equ	0xFE1
  5588                           indf2	equ	0xFDF
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593                           	psect	rparam
  5594  0000                     pclatu	equ	0xFFB
  5595                           pclath	equ	0xFFA
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           postinc0	equ	0xFEE
  5604                           fsr0h	equ	0xFEA
  5605                           fsr0l	equ	0xFE9
  5606                           wreg	equ	0xFE8
  5607                           postdec1	equ	0xFE5
  5608                           fsr1h	equ	0xFE2
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615                           	psect	temp
  5616  00005F                     btemp:
  5617                           	opt stack 0
  5618  00005F                     	ds	1
  5619  0000                     int$flags	set	btemp
  5620                           pclatu	equ	0xFFB
  5621                           pclath	equ	0xFFA
  5622                           tblptru	equ	0xFF8
  5623                           tblptrh	equ	0xFF7
  5624                           tblptrl	equ	0xFF6
  5625                           tablat	equ	0xFF5
  5626                           prodh	equ	0xFF4
  5627                           prodl	equ	0xFF3
  5628                           intcon	equ	0xFF2
  5629                           postinc0	equ	0xFEE
  5630                           fsr0h	equ	0xFEA
  5631                           fsr0l	equ	0xFE9
  5632                           wreg	equ	0xFE8
  5633                           postdec1	equ	0xFE5
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        130
    BSS         45
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     91     140
    BANK1           256      4     132
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(BANK0[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(BANK0[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_StatusCallback->_getByteToSend
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_writeAXData
    i2_pingAX->i2_sendAX
    _writeAXData->i2_sendAX
    _readAXData->i2_sendAX
    i2_sendAX->i2_EUSART1_Write
    _getADC->_ADC_GetConversion

Critical Paths under _main in BANK0

    _main->_pingAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_StatusCallback

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4851
                                              0 BANK1      4     4      0
                  _SYSTEM_Initialize
                           _delay_ms
                             _pingAX
 ---------------------------------------------------------------------------------
 (1) _pingAX                                              51    49      2    2167
                                             40 BANK0     51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (2) _sendAX                                              22    14      8    1430
                                             18 BANK0     22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    2272
                                             25 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             17 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                   _ECCP1_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             17 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ECCP1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    5219
                                              3 BANK0     14    14      0
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              1     1      0    5219
                                              2 BANK0      1     1      0
                 _I2C_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_StatusCallback                                   2     2      0    5195
                                              0 BANK0      2     2      0
                      _getByteToSend
                 _handleByteReceived
 ---------------------------------------------------------------------------------
 (7) _handleByteReceived                                   3     3      0     328
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (8) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _getByteToSend                                       14    14      0    4799
                                             80 COMRAM    14    14      0
                             _getADC
                         _readAXData
                        _writeAXData
                           i2_pingAX
 ---------------------------------------------------------------------------------
 (8) i2_pingAX                                            51    49      2    1127
                                             23 COMRAM    51    49      2
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (8) _writeAXData                                         57    51      6    1722
                                             23 COMRAM    57    51      6
                     _getAddressSize
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (8) _readAXData                                          56    52      4    1591
                                             23 COMRAM    56    52      4
                     _getAddressSize
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (9) i2_sendAX                                            22    14      8     854
                                              1 COMRAM    22    14      8
                     i2_EUSART1_Read
                    i2_EUSART1_Write
 ---------------------------------------------------------------------------------
 (10) i2_EUSART1_Write                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2_EUSART1_Read                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _getADC                                               2     0      2     108
                                              5 COMRAM     2     0      2
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _ECCP1_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _pingAX
     _sendAX
       _EUSART1_Read
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_ISR
     _I2C_StatusCallback
       _getByteToSend
         _getADC
           _ADC_GetConversion
         _readAXData
           _getAddressSize
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
         _writeAXData
           _getAddressSize
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
         i2_pingAX
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
       _handleByteReceived
         _setLedOff
         _setLedOn

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      4      84       8       51.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5B      8C       5       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16E       6        0.0%
DATA                 0      0     16E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Apr 17 12:06:43 2017

                                  _c 00DD                          _SSPSTATbits 000FC7  
                       ___awdiv@sign 0076                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l122 0ECA                                  l115 0E72  
                                l401 0322                                  l411 0346  
                                l361 026E                                  l460 0992  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
         __end_of_handleByteReceived 0740                      __end_of_I2C_ISR 0D18  
                    _timer1ReloadVal 00E8                                  wreg 000FE8  
                   i2sendAX@checksum 0017                                 l3003 07E0  
                               l3007 07F4                                 l3031 0940  
                               l3103 0258                                 l3033 0952  
                               l3037 097C                                 l3151 0324  
                               l2911 00A0                                 l2923 00F2  
                               l2915 00C0                                 l2943 0182  
                               l2927 0112                                 l2955 01DE  
                               l2947 01A8                                 l2939 0164  
                               l2981 0772                                 l2869 0E7E  
                               l2991 07A2                                 l2975 075C  
                               l2959 01FE                                 l2987 0790  
                               l2989 079C                                 l2999 07D2  
                               u1307 0220                                 u1317 0948  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1327 0984                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u1297 013C                                 _IPEN 007E87  
                               _WPUB 000F5B                        _EUSART1_Write 0EC6  
                               _main 0238                        ?_EUSART1_Read 0001  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 005F  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 008A  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                     readAXData@size 004E                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                          _writeAXData 0896  
           __size_ofi2_EUSART1_Write 000C                   writeAXData@address 001A  
            __size_of_getAddressSize 0078       __size_of_OSCILLATOR_Initialize 0012  
      __end_of_OSCILLATOR_Initialize 0E94                                ?_main 0001  
                    __end_of___awdiv 07FE                      _TMR1_StartTimer 0EE6  
                    ___awdiv@divisor 0073                                _T1CON 000FCD  
                              _LATB0 007C50                                _LATC0 007C58  
                              _LATB2 007C52                                _LATC1 007C59  
                              _LATB3 007C53                                _LATD0 007C60  
                              _LATC2 007C5A                                _LATD1 007C61  
                              _LATD2 007C62                                _LATD3 007C63  
                              _LATD4 007C64                                i2l122 0ED6  
                              i2l115 0E96                                i2l222 004E  
                              i2l161 0CFE                                i2l315 0DD6  
                              i2l500 0ACA                                i2l165 0D0A  
                              i2l503 0ACE                                i2l512 0ADA  
                              i2l522 0B34                                i2l506 0AD2  
                              i2l515 0ADE                                i2l532 0B40  
                              i2l541 0B4C                                i2l509 0AD6  
                              i2l621 073E                                i2l550 0B58  
                              i2l526 0B38                                i2l198 0D1E  
                              i2l535 0B44                                i2l544 0B50  
                              i2l529 0B3C                                i2l538 0B48  
                              i2l547 0B54                                i2l491 0ABE  
                              i2l494 0AC2                                i2l487 0ABA  
                              i2l497 0AC6                                i2l588 08E8  
                    ___awdiv@counter 0075                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                    getByteToSend@xlow 0056  
                         i2pingAX@id 0018                           i2sendAX@r0 0013  
                   ??i2_EUSART1_Read 0001                                main@i 0180  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 0D8E  
                              tablat 000FF5               readAXData@nbParameters 0048  
                     ??_EUSART1_Read 0071                                status 000FD8  
                   __end_ofi2_pingAX 0C86                     __end_ofi2_sendAX 066E  
                    readAXData@error 0032                      __initialization 0C86  
         __end_of_EUSART1_Initialize 0E5A                         __end_of_main 03D2  
                          ??_I2C_ISR 005F          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 00BB                        __activetblptr 000002  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 0E44  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBD  
                             _CCPR1L 000FBC                     ___awdiv@dividend 0071  
                             _T1GCON 000FAA               I2C_StatusCallback@data 0061  
                             i2l2111 0BAE                      __CFG_BBSIZ$BB2K 000000  
                             i2l2121 0BC2                               i2l2115 0BB8  
                             i2l2141 0584                               i2l2133 0562  
                             i2l2161 05E8                               i2l2145 059A  
                             i2l2129 054E                               i2l2313 068E  
                             i2l2091 0EA2                               i2l2323 06B4  
                             i2l2173 062C                               i2l2165 0602  
                             i2l2157 05D4                               i2l2341 070A  
                             i2l2317 069E                               i2l2239 0882  
                             i2l2335 06EA                               i2l2177 0642  
                             i2l2441 04F8                               i2l2409 0486  
                             i2l2433 04DE                               i2l2361 03FC  
                             i2l2427 04C8                               i2l2347 0724  
                             i2l2269 08F0                               i2l2453 053C  
                             i2l2365 0404                               i2l2189 0AE2  
                     __CFG_WDTEN$OFF 000000                               i2l2199 0B5C  
                             i2l2393 044E                               i2l2369 040A  
                             i2l2633 0CF6                               i2l2493 0D2C  
                             i2l2639 0D14                               i2l2497 0D3A  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                               _SSPADD 000FC8  
                             _TRISC0 007CA0                               _TRISC1 007CA1  
                             _SSPBUF 000FC9                               _TXREG1 000FAD  
                             _TXREG2 000F79                               _TXSTA1 000FAC  
                             _TXSTA2 000FBA                     __end_of_delay_ms 09B4  
                     __CFG_XINST$OFF 000000                       sendAX@checksum 0087  
            __end_of_TMR1_StartTimer 0EEA                               _getADC 0EB6  
                          ??___awdiv 0075                       __CFG_STVREN$ON 000000  
                 getByteToSend@error 0052                   getByteToSend@value 005B  
                 getByteToSend@xhigh 0057                               _pingAX 09B4  
                             _sendAX 008E                               clear_0 0CC4  
                i2pingAX@instruction 0047                     ___awdiv@quotient 0077  
                 _I2C_StatusCallback 0D18              __size_of_I2C_Initialize 001A  
                   __end_of_setLedOn 0B32                    ??i2_EUSART1_Write 0001  
                ?_I2C_StatusCallback 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0005                   i2sendAX@packetSize 0004  
                    ??_EUSART1_Write 0071                    ?_ECCP1_Initialize 0001  
      __size_of_INTERRUPT_Initialize 0006                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 0DEE                   ??_ECCP1_Initialize 0071  
                         __accesstop 0060              __end_of__initialization 0CCA  
                   readAXData@packet 0034                     readAXData@length 004A  
                 ?_SYSTEM_Initialize 0001                          pingAX@error 00B9  
                      ___rparam_used 000001                     readAXData@result 001E  
               ??_I2C_StatusCallback 005F                         readAXData@id 0018  
                     __pcstackCOMRAM 0001                         __pidataBANK0 0EEA  
                       __pidataBANK1 0A38                readAXData@instruction 004C  
                ??_SYSTEM_Initialize 0073                __end_of_getByteToSend 0540  
                     _getAddressSize 0BAC                 __end_of_EUSART1_Read 0E82  
                          ?i2_pingAX 0018                            ?i2_sendAX 0002  
              i2EUSART1_Write@txData 0001            __end_of_SYSTEM_Initialize 0E14  
                         _dataToSend 00BB                           __pbssBANK0 00BB  
             sendAX@parametersToRead 0078                      __CFG_PLLCFG$OFF 000000  
                 _handleByteReceived 066E                          setLedOn@led 0001  
                ?_handleByteReceived 0001               __end_of_getAddressSize 0C24  
                       ?_writeAXData 0018                   __size_of_setLedOff 007A  
                            ?_getADC 0006                     ?_TMR1_StartTimer 0001  
                            _CCP1CON 000FBB                              _I2C_ISR 0CD8  
                            ?_pingAX 0088                              ?_sendAX 0072  
            __size_of_ADC_Initialize 0016                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                           ??i2_pingAX 001A  
                         ??i2_sendAX 000A                              _OSCCON2 000FD2  
                          ?_delay_ms 0079                 ??_handleByteReceived 0005  
                            _OSCTUNE 000F9B                              _SPBRGH1 000F7D  
                            _SPBRGH2 000F7C                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                    writeAXData@data 001C               getByteToSend@xlow_1282 0058  
                    writeAXData@size 004F                           _readAXData 07FE  
                          ?_setLedOn 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                getAddressSize@address 0001  
                            __Lparam 0000                      ?_getAddressSize 0001  
                            ___awdiv 0740                      __size_of_getADC 0010  
                            __pcinit 0C86                       _I2C_Initialize 0E14  
                    __size_of_pingAX 0084                              __ramtop 0F00  
                    __size_of_sendAX 01AA                              __ptext0 0238  
                            __ptext1 09B4                              __ptext2 008E  
                            __ptext3 0EC6                              __ptext4 0E70  
                            __ptext5 092A                              __ptext6 0740  
                            __ptext7 0DEE                              __ptext8 0D54  
                            __ptext9 0EE6                           _parameter1 00E5  
                         _parameter2 00E6                           _parameter3 00E7  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 0E82  
                 _EUSART1_Initialize 0E44             ??_PIN_MANAGER_Initialize 0071  
                  __CFG_MSSPMSK$MSK7 000000                           ??_delay_ms 007B  
                  __end_of_setLedOff 0BAC           __size_of_SYSTEM_Initialize 0026  
                       i2sendAX@stop 000B                           delay_ms@ms 0079  
               end_of_initialization 0CCA                  ?_EUSART1_Initialize 0001  
             handleByteReceived@data 0007   I2C_StatusCallbackOld@EEPROM_Buffer 0100  
                      __Lmediumconst 0000                              sendAX@i 007D  
                         ??_setLedOn 0003                   _EUSART2_Initialize 0E2E  
                    i2_EUSART1_Write 0ED4                              postdec1 000FE5  
                            postinc0 000FEE                __size_of_EUSART1_Read 0012  
             __end_of_I2C_Initialize 0E2E                 ??_EUSART1_Initialize 0071  
                ?_EUSART2_Initialize 0001                            _PORTCbits 000F82  
                  readAXData@address 001A                  EUSART1_Write@txData 0071  
               ??_EUSART2_Initialize 0071                       getByteToSend@d 005A  
                       pingAX@packet 009F                         pingAX@length 00B5  
                  pingAX@instruction 00B7                         pingAX@result 008B  
             writeAXData@instruction 004B                         _EUSART1_Read 0E70  
                        ?_readAXData 0018              __size_ofi2_EUSART1_Read 0012  
          __size_of_ECCP1_Initialize 0010                         sendAX@i_1221 007F  
                       sendAX@i_1224 0081                         sendAX@i_1227 0085  
       __end_of_INTERRUPT_Initialize 0EE6                      ?_I2C_Initialize 0001  
                  writeAXData@packet 0033                    writeAXData@length 0049  
                     __end_of_getADC 0EC6                 __size_of_writeAXData 0094  
                  writeAXData@result 001F                       _ADC_Initialize 0E5A  
             ?_OSCILLATOR_Initialize 0001                         sendAX@buffer 0072  
                     __end_of_pingAX 0A38                       __end_of_sendAX 0238  
                          i2sendAX@i 000D                  handleByteReceived@i 0005  
                       sendAX@result 0076                  start_initialization 0C86  
    __size_of_PIN_MANAGER_Initialize 0030                    __size_ofi2_pingAX 0062  
                  __size_ofi2_sendAX 012E                __end_of_EUSART1_Write 0ED4  
            __end_ofi2_EUSART1_Write 0EE0          __size_of_I2C_StatusCallback 003C  
                     _currentCommand 00EB             __size_of_TMR1_Initialize 003A  
                 pingAX@nbParameters 00B3                             ??_getADC 0008  
                        _CCPTMRSbits 000F99               __end_of_ADC_Initialize 0E70  
                        __pdataBANK0 00EA                          __pdataBANK1 0100  
            writeAXData@nbParameters 0047                             ?_I2C_ISR 0001  
                           ??_pingAX 008A                             ??_sendAX 007A  
                __size_of_readAXData 0098                        __pcstackBANK0 0060  
                      __pcstackBANK1 0180                         setLedOff@led 0001  
                         sendAX@stop 007B                    __size_of_delay_ms 008A  
             __size_of_getByteToSend 016E                     ??_getAddressSize 0003  
            getByteToSend@error_1278 0054                            __pnvBANK0 00E8  
             _PIN_MANAGER_Initialize 0D8E                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 0071  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0063  
                          getADC@adc 0006                             _BAUDCON1 000FA7  
                           _BAUDCON2 000FB9             __size_of_TMR1_StartTimer 0004  
                      _nbBytesToSend 00DF          __size_of_handleByteReceived 00D2  
 I2C_StatusCallbackOld@eepromAddress 00E3             i2sendAX@parametersToRead 0008  
                          _readIndex 00E1                            _bytesSent 00DB  
               _INTERRUPT_Initialize 0EE0              getByteToSend@value_1280 005D  
                          _setLedOff 0B32                     ?i2_EUSART1_Write 0001  
                          delay_ms@i 007E                            delay_ms@n 007C  
                     i2pingAX@packet 002F                       i2pingAX@length 0045  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                     i2pingAX@result 001B                             i2u133_47 05B6  
                           i2u134_47 0658  __size_of_INTERRUPT_InterruptManager 0082  
                     i2_EUSART1_Read 0E94                             _PIR1bits 000F9E  
                           _PIR3bits 000FA4                     _ECCP1_Initialize 0EA6  
                      _getByteToSend 03D2              getByteToSend@xhigh_1283 0059  
                     i2sendAX@i_1221 000F                       i2sendAX@i_1224 0011  
                     i2sendAX@i_1227 0015                     __size_of_I2C_ISR 0040  
                  ??_TMR1_Initialize 0071                           _ADCON0bits 000FC2  
                   __CFG_SOSCSEL$DIG 000000                            main@delay 0182  
                     i2sendAX@buffer 0002                             i2_pingAX 0C24  
                           i2_sendAX 0540                       i2sendAX@result 0006  
                   writeAXData@error 004D                            copy_data0 0C9A  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                       ??_readAXData 001C               __end_ofi2_EUSART1_Read 0EA6  
                   ??_I2C_Initialize 0071                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 0DBE  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 0071                   ?_ADC_GetConversion 0001  
                    I2C_ISR@i2c_data 0062                     __size_of___awdiv 00BE  
        __size_of_EUSART1_Initialize 0016                  ??_ADC_GetConversion 0003  
                           _delay_ms 092A                   __end_of_readAXData 0896  
                           __ptext10 0D8E                             __ptext11 0E82  
                           __ptext20 0D18                             __ptext12 0EE0  
                           __ptext21 066E                             __ptext13 0E14  
                         _T1GCONbits 000FAA                             __ptext30 0E94  
                           __ptext22 0AB8                             __ptext14 0E2E  
                           __ptext31 0BAC                             __ptext23 0B32  
                           __ptext15 0E44                             __ptext32 0EB6  
                           __ptext24 03D2                             __ptext16 0EA6  
                           __ptext33 0DBE                             __ptext25 0C24  
                           __ptext17 0E5A                             __ptext26 0896  
                           __ptext27 07FE                             __ptext19 0CD8  
                           __ptext28 0540                             __ptext29 0ED4  
                  ??_TMR1_StartTimer 0071                        writeAXData@id 0018  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 019A  
I2C_StatusCallbackOld@slaveWriteType 00E4                      ?i2_EUSART1_Read 0001  
                           _setLedOn 0AB8            __end_of_ADC_GetConversion 0DEE  
                      i2pingAX@error 0049                        ??_writeAXData 001E  
                           int$flags 005F   __end_of_INTERRUPT_InterruptManager 008A  
         _INTERRUPT_InterruptManager 0008                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0074                   _I2C_slaveWriteData 00EA  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 0071  
                           pingAX@id 0088                             sendAX@r0 0083  
                           intlevel2 0000                          ??_setLedOff 0003  
            ?_PIN_MANAGER_Initialize 0001           __end_of_I2C_StatusCallback 0D54  
                         _RCSTA1bits 000FAB                           _RCSTA2bits 000FA6  
    I2C_StatusCallback@i2c_bus_state 0060                     ??_ADC_Initialize 0071  
                    ??_getByteToSend 0051                   __CFG_WDTPS$1048576 000000  
             __size_of_EUSART1_Write 000E                  __end_of_writeAXData 092A  
                        _SSPCON1bits 000FC6             __end_of_ECCP1_Initialize 0EB6  
     __end_of_PIN_MANAGER_Initialize 0DBE                  __CFG_BORPWR$ZPBORMV 000000  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 0D54  
               i2pingAX@nbParameters 0043  
