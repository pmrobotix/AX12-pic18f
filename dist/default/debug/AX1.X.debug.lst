

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Apr 24 00:20:55 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataBANK0
    48  000D96                     __pidataBANK0:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _I2C_slaveWriteData
    52  000D96  55                 	db	85
    53                           
    54                           ;initializer for _currentCommand
    55  000D97  FF                 	db	255
    56                           
    57                           	psect	idataBANK1
    58  0008BC                     __pidataBANK1:
    59                           	opt stack 0
    60                           
    61                           ;initializer for I2C_StatusCallbackOld@EEPROM_Buffer
    62  0008BC  00                 	db	0
    63  0008BD  01                 	db	1
    64  0008BE  02                 	db	2
    65  0008BF  03                 	db	3
    66  0008C0  04                 	db	4
    67  0008C1  05                 	db	5
    68  0008C2  06                 	db	6
    69  0008C3  07                 	db	7
    70  0008C4  08                 	db	8
    71  0008C5  09                 	db	9
    72  0008C6  0A                 	db	10
    73  0008C7  0B                 	db	11
    74  0008C8  0C                 	db	12
    75  0008C9  0D                 	db	13
    76  0008CA  0E                 	db	14
    77  0008CB  0F                 	db	15
    78  0008CC  10                 	db	16
    79  0008CD  11                 	db	17
    80  0008CE  12                 	db	18
    81  0008CF  13                 	db	19
    82  0008D0  14                 	db	20
    83  0008D1  15                 	db	21
    84  0008D2  16                 	db	22
    85  0008D3  17                 	db	23
    86  0008D4  18                 	db	24
    87  0008D5  19                 	db	25
    88  0008D6  1A                 	db	26
    89  0008D7  1B                 	db	27
    90  0008D8  1C                 	db	28
    91  0008D9  1D                 	db	29
    92  0008DA  1E                 	db	30
    93  0008DB  1F                 	db	31
    94  0008DC  20                 	db	32
    95  0008DD  21                 	db	33
    96  0008DE  22                 	db	34
    97  0008DF  23                 	db	35
    98  0008E0  24                 	db	36
    99  0008E1  25                 	db	37
   100  0008E2  26                 	db	38
   101  0008E3  27                 	db	39
   102  0008E4  28                 	db	40
   103  0008E5  29                 	db	41
   104  0008E6  2A                 	db	42
   105  0008E7  2B                 	db	43
   106  0008E8  2C                 	db	44
   107  0008E9  2D                 	db	45
   108  0008EA  2E                 	db	46
   109  0008EB  2F                 	db	47
   110  0008EC  30                 	db	48
   111  0008ED  31                 	db	49
   112  0008EE  32                 	db	50
   113  0008EF  33                 	db	51
   114  0008F0  34                 	db	52
   115  0008F1  35                 	db	53
   116  0008F2  36                 	db	54
   117  0008F3  37                 	db	55
   118  0008F4  38                 	db	56
   119  0008F5  39                 	db	57
   120  0008F6  3A                 	db	58
   121  0008F7  3B                 	db	59
   122  0008F8  3C                 	db	60
   123  0008F9  3D                 	db	61
   124  0008FA  3E                 	db	62
   125  0008FB  3F                 	db	63
   126  0008FC  40                 	db	64
   127  0008FD  41                 	db	65
   128  0008FE  42                 	db	66
   129  0008FF  43                 	db	67
   130  000900  44                 	db	68
   131  000901  45                 	db	69
   132  000902  46                 	db	70
   133  000903  47                 	db	71
   134  000904  48                 	db	72
   135  000905  49                 	db	73
   136  000906  4A                 	db	74
   137  000907  4B                 	db	75
   138  000908  4C                 	db	76
   139  000909  4D                 	db	77
   140  00090A  4E                 	db	78
   141  00090B  4F                 	db	79
   142  00090C  50                 	db	80
   143  00090D  51                 	db	81
   144  00090E  52                 	db	82
   145  00090F  53                 	db	83
   146  000910  54                 	db	84
   147  000911  55                 	db	85
   148  000912  56                 	db	86
   149  000913  57                 	db	87
   150  000914  58                 	db	88
   151  000915  59                 	db	89
   152  000916  5A                 	db	90
   153  000917  5B                 	db	91
   154  000918  5C                 	db	92
   155  000919  5D                 	db	93
   156  00091A  5E                 	db	94
   157  00091B  5F                 	db	95
   158  00091C  60                 	db	96
   159  00091D  61                 	db	97
   160  00091E  62                 	db	98
   161  00091F  63                 	db	99
   162  000920  64                 	db	100
   163  000921  65                 	db	101
   164  000922  66                 	db	102
   165  000923  67                 	db	103
   166  000924  68                 	db	104
   167  000925  69                 	db	105
   168  000926  6A                 	db	106
   169  000927  6B                 	db	107
   170  000928  6C                 	db	108
   171  000929  6D                 	db	109
   172  00092A  6E                 	db	110
   173  00092B  6F                 	db	111
   174  00092C  70                 	db	112
   175  00092D  71                 	db	113
   176  00092E  72                 	db	114
   177  00092F  73                 	db	115
   178  000930  74                 	db	116
   179  000931  75                 	db	117
   180  000932  76                 	db	118
   181  000933  77                 	db	119
   182  000934  78                 	db	120
   183  000935  79                 	db	121
   184  000936  7A                 	db	122
   185  000937  7B                 	db	123
   186  000938  7C                 	db	124
   187  000939  7D                 	db	125
   188  00093A  7E                 	db	126
   189  00093B  7F                 	db	127
   190  0000                     _WPUB	set	3931
   191  0000                     _ADCON0	set	4034
   192  0000                     _ADCON0bits	set	4034
   193  0000                     _ADCON1	set	4033
   194  0000                     _ADCON2	set	4032
   195  0000                     _ADRESH	set	4036
   196  0000                     _ADRESL	set	4035
   197  0000                     _BAUDCON1	set	4007
   198  0000                     _BAUDCON2	set	4025
   199  0000                     _INTCONbits	set	4082
   200  0000                     _IPR1bits	set	3999
   201  0000                     _LATA	set	3977
   202  0000                     _LATB	set	3978
   203  0000                     _LATC	set	3979
   204  0000                     _LATD	set	3980
   205  0000                     _LATE	set	3981
   206  0000                     _OSCCON	set	4051
   207  0000                     _OSCCON2	set	4050
   208  0000                     _OSCTUNE	set	3995
   209  0000                     _PIE1bits	set	3997
   210  0000                     _PIR1bits	set	3998
   211  0000                     _PIR3bits	set	4004
   212  0000                     _PORTCbits	set	3970
   213  0000                     _RCREG1	set	4014
   214  0000                     _RCREG2	set	3962
   215  0000                     _RCSTA1	set	4011
   216  0000                     _RCSTA1bits	set	4011
   217  0000                     _RCSTA2	set	4006
   218  0000                     _RCSTA2bits	set	4006
   219  0000                     _REFOCON	set	3994
   220  0000                     _SPBRG1	set	4015
   221  0000                     _SPBRG2	set	3963
   222  0000                     _SPBRGH1	set	3965
   223  0000                     _SPBRGH2	set	3964
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON1bits	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _SSPSTATbits	set	4039
   231  0000                     _T1CON	set	4045
   232  0000                     _T1CONbits	set	4045
   233  0000                     _T1GCON	set	4010
   234  0000                     _T1GCONbits	set	4010
   235  0000                     _TMR1H	set	4047
   236  0000                     _TMR1L	set	4046
   237  0000                     _TRISA	set	3986
   238  0000                     _TRISB	set	3987
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISD	set	3989
   241  0000                     _TRISE	set	3990
   242  0000                     _TXREG1	set	4013
   243  0000                     _TXREG2	set	3961
   244  0000                     _TXSTA1	set	4012
   245  0000                     _TXSTA2	set	4026
   246  0000                     _IPEN	set	32391
   247  0000                     _LATB0	set	31824
   248  0000                     _LATB2	set	31826
   249  0000                     _LATB3	set	31827
   250  0000                     _LATC0	set	31832
   251  0000                     _LATC1	set	31833
   252  0000                     _LATC2	set	31834
   253  0000                     _LATD0	set	31840
   254  0000                     _LATD1	set	31841
   255  0000                     _LATD2	set	31842
   256  0000                     _LATD3	set	31843
   257  0000                     _LATD4	set	31844
   258                           
   259                           ; #config settings
   260  0000                     
   261                           	psect	cinit
   262  000B6A                     __pcinit:
   263                           	opt stack 0
   264  000B6A                     start_initialization:
   265                           	opt stack 0
   266  000B6A                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Initialize objects allocated to BANK1 (128 bytes)
   270                           ; load TBLPTR registers with __pidataBANK1
   271  000B6A  0EBC               	movlw	low __pidataBANK1
   272  000B6C  6EF6               	movwf	tblptrl,c
   273  000B6E  0E08               	movlw	high __pidataBANK1
   274  000B70  6EF7               	movwf	tblptrh,c
   275  000B72  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   276  000B74  6EF8               	movwf	tblptru,c
   277  000B76  EE01  F000         	lfsr	0,__pdataBANK1
   278  000B7A  EE10 F080          	lfsr	1,128
   279  000B7E                     copy_data0:
   280  000B7E  0009               	tblrd		*+
   281  000B80  CFF5 FFEE          	movff	tablat,postinc0
   282  000B84  50E5               	movf	postdec1,w,c
   283  000B86  50E1               	movf	fsr1l,w,c
   284  000B88  E1FA               	bnz	copy_data0
   285                           
   286                           ; Initialize objects allocated to BANK0 (2 bytes)
   287                           ; load TBLPTR registers with __pidataBANK0
   288  000B8A  0E96               	movlw	low __pidataBANK0
   289  000B8C  6EF6               	movwf	tblptrl,c
   290  000B8E  0E0D               	movlw	high __pidataBANK0
   291  000B90  6EF7               	movwf	tblptrh,c
   292  000B92  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   293  000B94  6EF8               	movwf	tblptru,c
   294  000B96  0009               	tblrd		*+	;fetch initializer
   295  000B98  CFF5 F0CF          	movff	tablat,__pdataBANK0
   296  000B9C  0009               	tblrd		*+	;fetch initializer
   297  000B9E  CFF5 F0D0          	movff	tablat,__pdataBANK0+1
   298                           
   299                           ; Clear objects allocated to BANK0 (70 bytes)
   300  000BA2  EE00  F060         	lfsr	0,__pbssBANK0
   301  000BA6  0E46               	movlw	70
   302  000BA8                     clear_0:
   303  000BA8  6AEE               	clrf	postinc0,c
   304  000BAA  06E8               	decf	wreg,f,c
   305  000BAC  E1FD               	bnz	clear_0
   306  000BAE                     end_of_initialization:
   307                           	opt stack 0
   308  000BAE                     __end_of__initialization:
   309                           	opt stack 0
   310  000BAE  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   311  000BB0  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   312  000BB2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   313  000BB4  6EF8               	movwf	tblptru,c
   314  000BB6  0100               	movlb	0
   315  000BB8  EF4D  F000         	goto	_main	;jump to C main() function
   316                           tblptru	equ	0xFF8
   317                           tblptrh	equ	0xFF7
   318                           tblptrl	equ	0xFF6
   319                           tablat	equ	0xFF5
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           postdec1	equ	0xFE5
   323                           fsr1l	equ	0xFE1
   324                           
   325                           	psect	bssBANK0
   326  000060                     __pbssBANK0:
   327                           	opt stack 0
   328  000060                     _dataToSend:
   329                           	opt stack 0
   330  000060                     	ds	32
   331  000080                     _adc_values:
   332                           	opt stack 0
   333  000080                     	ds	20
   334  000094                     _bytesSent:
   335                           	opt stack 0
   336  000094                     	ds	2
   337  000096                     _c:
   338                           	opt stack 0
   339  000096                     	ds	2
   340  000098                     _nbBytesToSend:
   341                           	opt stack 0
   342  000098                     	ds	2
   343  00009A                     _readIndex:
   344                           	opt stack 0
   345  00009A                     	ds	2
   346  00009C                     _timer1ReloadVal:
   347                           	opt stack 0
   348  00009C                     	ds	2
   349  00009E                     I2C_StatusCallbackOld@eepromAddress:
   350                           	opt stack 0
   351  00009E                     	ds	1
   352  00009F                     I2C_StatusCallbackOld@slaveWriteType:
   353                           	opt stack 0
   354  00009F                     	ds	1
   355  0000A0                     _parameter1:
   356                           	opt stack 0
   357  0000A0                     	ds	1
   358  0000A1                     _parameter2:
   359                           	opt stack 0
   360  0000A1                     	ds	1
   361  0000A2                     _parameter3:
   362                           	opt stack 0
   363  0000A2                     	ds	1
   364  0000A3                     _parameter4:
   365                           	opt stack 0
   366  0000A3                     	ds	1
   367  0000A4                     _parameter5:
   368                           	opt stack 0
   369  0000A4                     	ds	1
   370  0000A5                     _parameter6:
   371                           	opt stack 0
   372  0000A5                     	ds	1
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	dataBANK0
   383  0000CF                     __pdataBANK0:
   384                           	opt stack 0
   385  0000CF                     _I2C_slaveWriteData:
   386                           	opt stack 0
   387  0000CF                     	ds	1
   388  0000D0                     _currentCommand:
   389                           	opt stack 0
   390  0000D0                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1l	equ	0xFE1
   399                           
   400                           	psect	dataBANK1
   401  000100                     __pdataBANK1:
   402                           	opt stack 0
   403  000100                     I2C_StatusCallbackOld@EEPROM_Buffer:
   404                           	opt stack 0
   405  000100                     	ds	128
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           	psect	cstackBANK0
   416  0000A6                     __pcstackBANK0:
   417                           	opt stack 0
   418  0000A6                     I2C_StatusCallback@i2c_bus_state:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x0
   422  0000A6                     	ds	1
   423  0000A7                     I2C_StatusCallback@data:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x1
   427  0000A7                     	ds	1
   428  0000A8                     ??_INTERRUPT_InterruptManager:
   429                           
   430                           ; 1 bytes @ 0x2
   431  0000A8                     	ds	14
   432  0000B6                     ??_TMR1_Initialize:
   433  0000B6                     ?_ADC_GetConversion:
   434                           	opt stack 0
   435  0000B6                     ?___awdiv:
   436                           	opt stack 0
   437  0000B6                     ___awdiv@dividend:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x10
   441  0000B6                     	ds	2
   442  0000B8                     ??_ADC_GetConversion:
   443  0000B8                     ___awdiv@divisor:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x12
   447  0000B8                     	ds	2
   448  0000BA                     ADC_GetConversion@channel:
   449                           	opt stack 0
   450  0000BA                     ___awdiv@counter:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x14
   454  0000BA                     	ds	1
   455  0000BB                     ___awdiv@sign:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x15
   459  0000BB                     	ds	1
   460  0000BC                     ___awdiv@quotient:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x16
   464  0000BC                     	ds	2
   465  0000BE                     delay_ms@ms:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x18
   469  0000BE                     	ds	2
   470  0000C0                     ??_delay_ms:
   471                           
   472                           ; 1 bytes @ 0x1A
   473  0000C0                     	ds	1
   474  0000C1                     delay_ms@n:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x1B
   478  0000C1                     	ds	2
   479  0000C3                     delay_ms@i:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x1D
   483  0000C3                     	ds	2
   484  0000C5                     main@i:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x1F
   488  0000C5                     	ds	2
   489  0000C7                     main@i_1008:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x21
   493  0000C7                     	ds	2
   494  0000C9                     main@adc:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x23
   498  0000C9                     	ds	2
   499  0000CB                     main@adc_1009:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x25
   503  0000CB                     	ds	2
   504  0000CD                     main@delay:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x27
   508  0000CD                     	ds	2
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	cstackCOMRAM
   519  000001                     __pcstackCOMRAM:
   520                           	opt stack 0
   521  000001                     ?_getAddressSize:
   522                           	opt stack 0
   523  000001                     EUSART1_Write@txData:
   524                           	opt stack 0
   525  000001                     getAddressSize@address:
   526                           	opt stack 0
   527  000001                     setLedOn@led:
   528                           	opt stack 0
   529  000001                     setLedOff@led:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x0
   533  000001                     	ds	1
   534  000002                     sendAX@buffer:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1
   538  000002                     	ds	1
   539  000003                     ??_getAddressSize:
   540  000003                     ??_setLedOn:
   541  000003                     ??_setLedOff:
   542                           
   543                           ; 1 bytes @ 0x2
   544  000003                     	ds	1
   545  000004                     sendAX@packetSize:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x3
   549  000004                     	ds	1
   550  000005                     handleByteReceived@i:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x4
   554  000005                     	ds	1
   555  000006                     sendAX@result:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x5
   559  000006                     	ds	1
   560  000007                     handleByteReceived@data:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x6
   564  000007                     	ds	1
   565  000008                     sendAX@parametersToRead:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x7
   569  000008                     	ds	2
   570  00000A                     ??_sendAX:
   571                           
   572                           ; 1 bytes @ 0x9
   573  00000A                     	ds	1
   574  00000B                     sendAX@stop:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0xA
   578  00000B                     	ds	2
   579  00000D                     sendAX@i:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0xC
   583  00000D                     	ds	2
   584  00000F                     sendAX@i_1066:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xE
   588  00000F                     	ds	2
   589  000011                     sendAX@i_1069:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x10
   593  000011                     	ds	2
   594  000013                     sendAX@r0:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x12
   598  000013                     	ds	2
   599  000015                     sendAX@i_1072:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x14
   603  000015                     	ds	2
   604  000017                     sendAX@checksum:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x16
   608  000017                     	ds	1
   609  000018                     ?_pingAX:
   610                           	opt stack 0
   611  000018                     ?_readAXData:
   612                           	opt stack 0
   613  000018                     ?_writeAXData:
   614                           	opt stack 0
   615  000018                     pingAX@id:
   616                           	opt stack 0
   617  000018                     readAXData@id:
   618                           	opt stack 0
   619  000018                     writeAXData@id:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x17
   623  000018                     	ds	2
   624  00001A                     ??_pingAX:
   625  00001A                     readAXData@address:
   626                           	opt stack 0
   627  00001A                     writeAXData@address:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x19
   631  00001A                     	ds	1
   632  00001B                     pingAX@result:
   633                           	opt stack 0
   634                           
   635                           ; 20 bytes @ 0x1A
   636  00001B                     	ds	1
   637  00001C                     ??_readAXData:
   638  00001C                     writeAXData@data:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x1B
   642  00001C                     	ds	2
   643  00001E                     ??_writeAXData:
   644  00001E                     readAXData@result:
   645                           	opt stack 0
   646                           
   647                           ; 20 bytes @ 0x1D
   648  00001E                     	ds	1
   649  00001F                     writeAXData@result:
   650                           	opt stack 0
   651                           
   652                           ; 20 bytes @ 0x1E
   653  00001F                     	ds	16
   654  00002F                     pingAX@packet:
   655                           	opt stack 0
   656                           
   657                           ; 20 bytes @ 0x2E
   658  00002F                     	ds	3
   659  000032                     readAXData@error:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x31
   663  000032                     	ds	1
   664  000033                     writeAXData@packet:
   665                           	opt stack 0
   666                           
   667                           ; 20 bytes @ 0x32
   668  000033                     	ds	1
   669  000034                     readAXData@packet:
   670                           	opt stack 0
   671                           
   672                           ; 20 bytes @ 0x33
   673  000034                     	ds	15
   674  000043                     pingAX@nbParameters:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x42
   678  000043                     	ds	2
   679  000045                     pingAX@length:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x44
   683  000045                     	ds	2
   684  000047                     pingAX@instruction:
   685                           	opt stack 0
   686  000047                     writeAXData@length:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x46
   690  000047                     	ds	1
   691  000048                     readAXData@nbParameters:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x47
   695  000048                     	ds	1
   696  000049                     pingAX@error:
   697                           	opt stack 0
   698  000049                     writeAXData@instruction:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x48
   702  000049                     	ds	1
   703  00004A                     readAXData@length:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x49
   707  00004A                     	ds	1
   708  00004B                     writeAXData@error:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x4A
   712  00004B                     	ds	1
   713  00004C                     readAXData@instruction:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x4B
   717  00004C                     	ds	1
   718  00004D                     writeAXData@size:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x4C
   722  00004D                     	ds	1
   723  00004E                     readAXData@size:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x4D
   727  00004E                     	ds	2
   728  000050                     ??_getByteToSend:
   729                           
   730                           ; 1 bytes @ 0x4F
   731  000050                     	ds	1
   732  000051                     getByteToSend@error:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x50
   736  000051                     	ds	2
   737  000053                     getByteToSend@error_1128:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x52
   741  000053                     	ds	2
   742  000055                     getByteToSend@xlow:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x54
   746  000055                     	ds	1
   747  000056                     getByteToSend@xhigh:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x55
   751  000056                     	ds	1
   752  000057                     getByteToSend@xlow_1131:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x56
   756  000057                     	ds	1
   757  000058                     getByteToSend@d:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x57
   761  000058                     	ds	1
   762  000059                     getByteToSend@value:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x58
   766  000059                     	ds	2
   767  00005B                     getByteToSend@value_1130:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x5A
   771  00005B                     	ds	2
   772  00005D                     getByteToSend@xhigh_1132:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x5C
   776  00005D                     	ds	1
   777  00005E                     I2C_ISR@i2c_data:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x5D
   781  00005E                     	ds	1
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           postdec1	equ	0xFE5
   789                           fsr1l	equ	0xFE1
   790                           
   791 ;;
   792 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   793 ;;
   794 ;; *************** function _main *****************
   795 ;; Defined at:
   796 ;;		line 52 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  adc             2   37[BANK0 ] int 
   801 ;;  i               2   33[BANK0 ] int 
   802 ;;  i               2   31[BANK0 ] int 
   803 ;;  adc             2   35[BANK0 ] int 
   804 ;;  delay           2   39[BANK0 ] int 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   815 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   817 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   818 ;;Total ram usage:       10 bytes
   819 ;; Hardware stack levels required when called:   10
   820 ;; This function calls:
   821 ;;		_ADC_GetConversion
   822 ;;		_SYSTEM_Initialize
   823 ;;		_delay_ms
   824 ;; This function is called by:
   825 ;;		Startup code after reset
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text0
   830  00009A                     __ptext0:
   831                           	opt stack 0
   832  00009A                     _main:
   833                           	opt stack 21
   834                           
   835                           ;main.c: 53: for (int adc = 0; adc < 10; adc++) {
   836                           
   837                           ;incstack = 0
   838  00009A  0E00               	movlw	0
   839  00009C  0100               	movlb	0	; () banked
   840  00009E  6FCA               	movwf	(main@adc+1)& (0+255),b
   841  0000A0  0E00               	movlw	0
   842  0000A2  6FC9               	movwf	main@adc& (0+255),b
   843  0000A4                     l2551:
   844                           
   845                           ; BSR set to: 0
   846  0000A4  0100               	movlb	0	; () banked
   847  0000A6  BFCA               	btfsc	(main@adc+1)& (0+255),7,b
   848  0000A8  D008               	goto	l2555
   849  0000AA  0100               	movlb	0	; () banked
   850  0000AC  51CA               	movf	(main@adc+1)& (0+255),w,b
   851  0000AE  E118               	bnz	l2561
   852  0000B0  0E0A               	movlw	10
   853  0000B2  0100               	movlb	0	; () banked
   854  0000B4  5DC9               	subwf	main@adc& (0+255),w,b
   855  0000B6  B0D8               	btfsc	status,0,c
   856  0000B8  D013               	goto	l2561
   857  0000BA                     l2555:
   858                           
   859                           ; BSR set to: 0
   860                           ;main.c: 54: adc_values[adc] = 0;
   861  0000BA  90D8               	bcf	status,0,c
   862  0000BC  0100               	movlb	0	; () banked
   863  0000BE  35C9               	rlcf	main@adc& (0+255),w,b
   864  0000C0  6ED9               	movwf	fsr2l,c
   865  0000C2  0100               	movlb	0	; () banked
   866  0000C4  35CA               	rlcf	(main@adc+1)& (0+255),w,b
   867  0000C6  6EDA               	movwf	fsr2h,c
   868  0000C8  0E80               	movlw	low _adc_values
   869  0000CA  26D9               	addwf	fsr2l,f,c
   870  0000CC  0E00               	movlw	high _adc_values
   871  0000CE  22DA               	addwfc	fsr2h,f,c
   872  0000D0  0E00               	movlw	0
   873  0000D2  6EDE               	movwf	postinc2,c
   874  0000D4  0E00               	movlw	0
   875  0000D6  6EDD               	movwf	postdec2,c
   876                           
   877                           ; BSR set to: 0
   878  0000D8  0100               	movlb	0	; () banked
   879  0000DA  4BC9               	infsnz	main@adc& (0+255),f,b
   880  0000DC  2BCA               	incf	(main@adc+1)& (0+255),f,b
   881  0000DE  D7E2               	goto	l2551
   882  0000E0                     l2561:
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 55: }
   886                           ;main.c: 58: SYSTEM_Initialize();
   887  0000E0  EC6B  F006         	call	_SYSTEM_Initialize	;wreg free
   888                           
   889                           ;main.c: 59: do { LATD3 = 1; } while(0);
   890  0000E4  868C               	bsf	3980,3,c	;volatile
   891                           
   892                           ;main.c: 77: (INTCONbits.GIE = 1);
   893  0000E6  8EF2               	bsf	intcon,7,c	;volatile
   894                           
   895                           ;main.c: 78: do { LATD2 = 1; } while(0);
   896  0000E8  848C               	bsf	3980,2,c	;volatile
   897                           
   898                           ;main.c: 80: (INTCONbits.PEIE = 1);
   899  0000EA  8CF2               	bsf	intcon,6,c	;volatile
   900                           
   901                           ;main.c: 91: int delay = 10;
   902  0000EC  0E00               	movlw	0
   903  0000EE  0100               	movlb	0	; () banked
   904  0000F0  6FCE               	movwf	(main@delay+1)& (0+255),b
   905  0000F2  0E0A               	movlw	10
   906  0000F4  6FCD               	movwf	main@delay& (0+255),b
   907                           
   908                           ; BSR set to: 0
   909                           
   910                           ; BSR set to: 0
   911                           
   912                           ;main.c: 92: do { LATD1 = 1; } while(0);
   913  0000F6  828C               	bsf	3980,1,c	;volatile
   914                           
   915                           ; BSR set to: 0
   916                           
   917                           ; BSR set to: 0
   918                           
   919                           ;main.c: 93: do { LATD0 = 1; } while(0);
   920                           
   921                           ; BSR set to: 0
   922  0000F8  808C               	bsf	3980,0,c	;volatile
   923                           
   924                           ; BSR set to: 0
   925                           ;main.c: 94: for (int i = 0; i < 2; i++) {
   926                           
   927                           ; BSR set to: 0
   928  0000FA  0E00               	movlw	0
   929  0000FC  0100               	movlb	0	; () banked
   930  0000FE  6FC6               	movwf	(main@i+1)& (0+255),b
   931  000100  0E00               	movlw	0
   932  000102  6FC5               	movwf	main@i& (0+255),b
   933  000104                     l2579:
   934                           
   935                           ; BSR set to: 0
   936  000104  0100               	movlb	0	; () banked
   937  000106  BFC6               	btfsc	(main@i+1)& (0+255),7,b
   938  000108  D008               	goto	l302
   939  00010A  0100               	movlb	0	; () banked
   940  00010C  51C6               	movf	(main@i+1)& (0+255),w,b
   941  00010E  E15F               	bnz	l342
   942  000110  0E02               	movlw	2
   943  000112  0100               	movlb	0	; () banked
   944  000114  5DC5               	subwf	main@i& (0+255),w,b
   945  000116  B0D8               	btfsc	status,0,c
   946  000118  D05A               	goto	l342
   947  00011A                     l302:
   948                           
   949                           ; BSR set to: 0
   950  00011A  868C               	bsf	3980,3,c	;volatile
   951                           
   952                           ; BSR set to: 0
   953                           ;main.c: 97: delay_ms(delay);
   954                           
   955                           ; BSR set to: 0
   956  00011C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
   957  000120  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
   958  000124  EC19  F004         	call	_delay_ms	;wreg free
   959                           
   960                           ;main.c: 98: do { LATD3 = 0; } while(0);
   961  000128  968C               	bcf	3980,3,c	;volatile
   962                           
   963                           ;main.c: 99: do { LATD2 = 1; } while(0);
   964  00012A  848C               	bsf	3980,2,c	;volatile
   965                           
   966                           ;main.c: 100: delay_ms(delay);
   967  00012C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
   968  000130  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
   969  000134  EC19  F004         	call	_delay_ms	;wreg free
   970                           
   971                           ;main.c: 101: do { LATD2 = 0; } while(0);
   972  000138  948C               	bcf	3980,2,c	;volatile
   973                           
   974                           ;main.c: 102: do { LATD1 = 1; } while(0);
   975  00013A  828C               	bsf	3980,1,c	;volatile
   976                           
   977                           ;main.c: 103: delay_ms(delay);
   978  00013C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
   979  000140  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
   980  000144  EC19  F004         	call	_delay_ms	;wreg free
   981                           
   982                           ;main.c: 104: do { LATD1 = 0; } while(0);
   983  000148  928C               	bcf	3980,1,c	;volatile
   984                           
   985                           ;main.c: 105: do { LATD0 = 1; } while(0);
   986  00014A  808C               	bsf	3980,0,c	;volatile
   987                           
   988                           ;main.c: 106: delay_ms(delay);
   989  00014C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
   990  000150  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
   991  000154  EC19  F004         	call	_delay_ms	;wreg free
   992                           
   993                           ;main.c: 107: do { LATD0 = 0; } while(0);
   994  000158  908C               	bcf	3980,0,c	;volatile
   995                           
   996                           ;main.c: 108: do { LATC2 = 1; } while(0);
   997  00015A  848B               	bsf	3979,2,c	;volatile
   998                           
   999                           ;main.c: 109: delay_ms(delay);
  1000  00015C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1001  000160  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1002  000164  EC19  F004         	call	_delay_ms	;wreg free
  1003                           
  1004                           ;main.c: 110: do { LATC2 = 0; } while(0);
  1005  000168  948B               	bcf	3979,2,c	;volatile
  1006                           
  1007                           ;main.c: 111: do { LATC1 = 1; } while(0);
  1008  00016A  828B               	bsf	3979,1,c	;volatile
  1009                           
  1010                           ;main.c: 112: delay_ms(delay);
  1011  00016C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1012  000170  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1013  000174  EC19  F004         	call	_delay_ms	;wreg free
  1014                           
  1015                           ;main.c: 113: do { LATC1 = 0; } while(0);
  1016  000178  928B               	bcf	3979,1,c	;volatile
  1017                           
  1018                           ;main.c: 114: do { LATC0 = 1; } while(0);
  1019  00017A  808B               	bsf	3979,0,c	;volatile
  1020                           
  1021                           ;main.c: 115: delay_ms(delay);
  1022  00017C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1023  000180  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1024  000184  EC19  F004         	call	_delay_ms	;wreg free
  1025                           
  1026                           ;main.c: 116: do { LATC0 = 0; } while(0);
  1027  000188  908B               	bcf	3979,0,c	;volatile
  1028                           
  1029                           ;main.c: 117: do { LATB0 = 1; } while(0);
  1030  00018A  808A               	bsf	3978,0,c	;volatile
  1031                           
  1032                           ;main.c: 118: delay_ms(delay);
  1033  00018C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1034  000190  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1035  000194  EC19  F004         	call	_delay_ms	;wreg free
  1036                           
  1037                           ;main.c: 119: do { LATB0 = 0; } while(0);
  1038  000198  908A               	bcf	3978,0,c	;volatile
  1039                           
  1040                           ;main.c: 120: do { LATB2 = 1; } while(0);
  1041  00019A  848A               	bsf	3978,2,c	;volatile
  1042                           
  1043                           ;main.c: 121: delay_ms(delay);
  1044  00019C  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1045  0001A0  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1046  0001A4  EC19  F004         	call	_delay_ms	;wreg free
  1047                           
  1048                           ;main.c: 122: do { LATB2 = 0; } while(0);
  1049  0001A8  948A               	bcf	3978,2,c	;volatile
  1050                           
  1051                           ;main.c: 123: do { LATB3 = 1; } while(0);
  1052  0001AA  868A               	bsf	3978,3,c	;volatile
  1053                           
  1054                           ;main.c: 124: delay_ms(delay);
  1055  0001AC  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1056  0001B0  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1057  0001B4  EC19  F004         	call	_delay_ms	;wreg free
  1058                           
  1059                           ;main.c: 125: do { LATB3 = 0; } while(0);
  1060  0001B8  968A               	bcf	3978,3,c	;volatile
  1061                           
  1062                           ;main.c: 126: delay_ms(delay);
  1063  0001BA  C0CD  F0BE         	movff	main@delay,delay_ms@ms
  1064  0001BE  C0CE  F0BF         	movff	main@delay+1,delay_ms@ms+1
  1065  0001C2  EC19  F004         	call	_delay_ms	;wreg free
  1066  0001C6  0100               	movlb	0	; () banked
  1067  0001C8  4BC5               	infsnz	main@i& (0+255),f,b
  1068  0001CA  2BC6               	incf	(main@i+1)& (0+255),f,b
  1069  0001CC  D79B               	goto	l2579
  1070  0001CE                     l342:
  1071                           
  1072                           ; BSR set to: 0
  1073  0001CE  988C               	bcf	3980,4,c	;volatile
  1074  0001D0                     l345:
  1075  0001D0  868A               	bsf	3978,3,c	;volatile
  1076                           
  1077                           ;main.c: 134: for (int i = 0; i < 50; i++) {
  1078  0001D2  0E00               	movlw	0
  1079  0001D4  0100               	movlb	0	; () banked
  1080  0001D6  6FC8               	movwf	(main@i_1008+1)& (0+255),b
  1081  0001D8  0E00               	movlw	0
  1082  0001DA  6FC7               	movwf	main@i_1008& (0+255),b
  1083  0001DC                     l2629:
  1084                           
  1085                           ; BSR set to: 0
  1086  0001DC  0100               	movlb	0	; () banked
  1087  0001DE  BFC8               	btfsc	(main@i_1008+1)& (0+255),7,b
  1088  0001E0  D008               	goto	l2633
  1089  0001E2  0100               	movlb	0	; () banked
  1090  0001E4  51C8               	movf	(main@i_1008+1)& (0+255),w,b
  1091  0001E6  E139               	bnz	l351
  1092  0001E8  0E32               	movlw	50
  1093  0001EA  0100               	movlb	0	; () banked
  1094  0001EC  5DC7               	subwf	main@i_1008& (0+255),w,b
  1095  0001EE  B0D8               	btfsc	status,0,c
  1096  0001F0  D034               	goto	l351
  1097  0001F2                     l2633:
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;main.c: 136: for (int adc = 0; adc < 10; adc++) {
  1101  0001F2  0E00               	movlw	0
  1102  0001F4  0100               	movlb	0	; () banked
  1103  0001F6  6FCC               	movwf	(main@adc_1009+1)& (0+255),b
  1104  0001F8  0E00               	movlw	0
  1105  0001FA  6FCB               	movwf	main@adc_1009& (0+255),b
  1106  0001FC                     l2635:
  1107                           
  1108                           ; BSR set to: 0
  1109  0001FC  0100               	movlb	0	; () banked
  1110  0001FE  BFCC               	btfsc	(main@adc_1009+1)& (0+255),7,b
  1111  000200  D008               	goto	l2639
  1112  000202  0100               	movlb	0	; () banked
  1113  000204  51CC               	movf	(main@adc_1009+1)& (0+255),w,b
  1114  000206  E11E               	bnz	l2645
  1115  000208  0E0A               	movlw	10
  1116  00020A  0100               	movlb	0	; () banked
  1117  00020C  5DCB               	subwf	main@adc_1009& (0+255),w,b
  1118  00020E  B0D8               	btfsc	status,0,c
  1119  000210  D019               	goto	l2645
  1120  000212                     l2639:
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main.c: 137: adc_values[adc] = ADC_GetConversion(adc);
  1124  000212  0100               	movlb	0	; () banked
  1125  000214  51CB               	movf	main@adc_1009& (0+255),w,b
  1126  000216  ECDE  F005         	call	_ADC_GetConversion
  1127  00021A  90D8               	bcf	status,0,c
  1128  00021C  0100               	movlb	0	; () banked
  1129  00021E  35CB               	rlcf	main@adc_1009& (0+255),w,b
  1130  000220  6ED9               	movwf	fsr2l,c
  1131  000222  0100               	movlb	0	; () banked
  1132  000224  35CC               	rlcf	(main@adc_1009+1)& (0+255),w,b
  1133  000226  6EDA               	movwf	fsr2h,c
  1134  000228  0E80               	movlw	low _adc_values
  1135  00022A  26D9               	addwf	fsr2l,f,c
  1136  00022C  0E00               	movlw	high _adc_values
  1137  00022E  22DA               	addwfc	fsr2h,f,c
  1138  000230  0100               	movlb	0	; () banked
  1139  000232  C0B6  FFDE         	movff	?_ADC_GetConversion,postinc2
  1140  000236  0100               	movlb	0	; () banked
  1141  000238  C0B7  FFDD         	movff	?_ADC_GetConversion+1,postdec2
  1142                           
  1143                           ; BSR set to: 0
  1144  00023C  0100               	movlb	0	; () banked
  1145  00023E  4BCB               	infsnz	main@adc_1009& (0+255),f,b
  1146  000240  2BCC               	incf	(main@adc_1009+1)& (0+255),f,b
  1147  000242  D7DC               	goto	l2635
  1148  000244                     l2645:
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;main.c: 138: }
  1152                           ;main.c: 139: delay_ms(10);
  1153  000244  0E00               	movlw	0
  1154  000246  0100               	movlb	0	; () banked
  1155  000248  6FBF               	movwf	(delay_ms@ms+1)& (0+255),b
  1156  00024A  0E0A               	movlw	10
  1157  00024C  6FBE               	movwf	delay_ms@ms& (0+255),b
  1158  00024E  EC19  F004         	call	_delay_ms	;wreg free
  1159  000252  0100               	movlb	0	; () banked
  1160  000254  4BC7               	infsnz	main@i_1008& (0+255),f,b
  1161  000256  2BC8               	incf	(main@i_1008+1)& (0+255),f,b
  1162  000258  D7C1               	goto	l2629
  1163  00025A                     l351:
  1164                           
  1165                           ; BSR set to: 0
  1166  00025A  968A               	bcf	3978,3,c	;volatile
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 143: delay_ms(500);
  1170                           
  1171                           ; BSR set to: 0
  1172  00025C  0E01               	movlw	1
  1173  00025E  0100               	movlb	0	; () banked
  1174  000260  6FBF               	movwf	(delay_ms@ms+1)& (0+255),b
  1175  000262  0EF4               	movlw	244
  1176  000264  6FBE               	movwf	delay_ms@ms& (0+255),b
  1177  000266  EC19  F004         	call	_delay_ms	;wreg free
  1178  00026A  D7B2               	goto	l345
  1179  00026C                     __end_of_main:
  1180                           	opt stack 0
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           intcon	equ	0xFF2
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           postinc2	equ	0xFDE
  1191                           postdec2	equ	0xFDD
  1192                           fsr2h	equ	0xFDA
  1193                           fsr2l	equ	0xFD9
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function _delay_ms *****************
  1197 ;; Defined at:
  1198 ;;		line 13 in file "ax.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  ms              2   24[BANK0 ] int 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  i               2   29[BANK0 ] int 
  1203 ;;  n               2   27[BANK0 ] int 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1214 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1216 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1217 ;;Total ram usage:        7 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    8
  1220 ;; This function calls:
  1221 ;;		___awdiv
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text1
  1228  000832                     __ptext1:
  1229                           	opt stack 0
  1230  000832                     _delay_ms:
  1231                           	opt stack 22
  1232                           
  1233                           ;ax.c: 14: if (ms < 10) {
  1234                           
  1235                           ;incstack = 0
  1236  000832  0100               	movlb	0	; () banked
  1237  000834  BFBF               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  1238  000836  D008               	goto	l2507
  1239  000838  0100               	movlb	0	; () banked
  1240  00083A  51BF               	movf	(delay_ms@ms+1)& (0+255),w,b
  1241  00083C  E10E               	bnz	l2509
  1242  00083E  0E0A               	movlw	10
  1243  000840  0100               	movlb	0	; () banked
  1244  000842  5DBE               	subwf	delay_ms@ms& (0+255),w,b
  1245  000844  B0D8               	btfsc	status,0,c
  1246  000846  D009               	goto	l2509
  1247  000848                     l2507:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  1251  000848  0ED0               	movlw	208
  1252  00084A  0100               	movlb	0	; () banked
  1253  00084C  6FC0               	movwf	??_delay_ms& (0+255),b
  1254  00084E  0ECA               	movlw	202
  1255  000850                     u1217:
  1256  000850  2EE8               	decfsz	wreg,f,c
  1257  000852  D7FE               	goto	u1217
  1258  000854  2FC0               	decfsz	??_delay_ms& (0+255),f,b
  1259  000856  D7FC               	goto	u1217
  1260                           
  1261                           ;ax.c: 16: } else {
  1262  000858  0012               	return	
  1263  00085A                     l2509:
  1264                           
  1265                           ;ax.c: 17: int n = ms / 10;
  1266  00085A  C0BE  F0B6         	movff	delay_ms@ms,___awdiv@dividend
  1267  00085E  C0BF  F0B7         	movff	delay_ms@ms+1,___awdiv@dividend+1
  1268  000862  0E00               	movlw	0
  1269  000864  0100               	movlb	0	; () banked
  1270  000866  6FB9               	movwf	(___awdiv@divisor+1)& (0+255),b
  1271  000868  0E0A               	movlw	10
  1272  00086A  6FB8               	movwf	___awdiv@divisor& (0+255),b
  1273  00086C  EC28  F003         	call	___awdiv	;wreg free
  1274  000870  C0B6  F0C1         	movff	?___awdiv,delay_ms@n
  1275  000874  C0B7  F0C2         	movff	?___awdiv+1,delay_ms@n+1
  1276                           
  1277                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  1278  000878  0E00               	movlw	0
  1279  00087A  0100               	movlb	0	; () banked
  1280  00087C  6FC4               	movwf	(delay_ms@i+1)& (0+255),b
  1281  00087E  0E00               	movlw	0
  1282  000880  6FC3               	movwf	delay_ms@i& (0+255),b
  1283  000882  D00B               	goto	l392
  1284  000884                     l2513:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  1288  000884  0ED0               	movlw	208
  1289  000886  0100               	movlb	0	; () banked
  1290  000888  6FC0               	movwf	??_delay_ms& (0+255),b
  1291  00088A  0ECA               	movlw	202
  1292  00088C                     u1227:
  1293  00088C  2EE8               	decfsz	wreg,f,c
  1294  00088E  D7FE               	goto	u1227
  1295  000890  2FC0               	decfsz	??_delay_ms& (0+255),f,b
  1296  000892  D7FC               	goto	u1227
  1297  000894  0100               	movlb	0	; () banked
  1298  000896  4BC3               	infsnz	delay_ms@i& (0+255),f,b
  1299  000898  2BC4               	incf	(delay_ms@i+1)& (0+255),f,b
  1300  00089A                     l392:
  1301                           
  1302                           ; BSR set to: 0
  1303  00089A  0100               	movlb	0	; () banked
  1304  00089C  51C1               	movf	delay_ms@n& (0+255),w,b
  1305  00089E  0100               	movlb	0	; () banked
  1306  0008A0  5DC3               	subwf	delay_ms@i& (0+255),w,b
  1307  0008A2  0100               	movlb	0	; () banked
  1308  0008A4  51C4               	movf	(delay_ms@i+1)& (0+255),w,b
  1309  0008A6  0A80               	xorlw	128
  1310  0008A8  0100               	movlb	0	; () banked
  1311  0008AA  6FC0               	movwf	??_delay_ms& (0+255),b
  1312  0008AC  0100               	movlb	0	; () banked
  1313  0008AE  51C2               	movf	(delay_ms@n+1)& (0+255),w,b
  1314  0008B0  0A80               	xorlw	128
  1315  0008B2  0100               	movlb	0	; () banked
  1316  0008B4  59C0               	subwfb	??_delay_ms& (0+255),w,b
  1317  0008B6  B0D8               	btfsc	status,0,c
  1318  0008B8  0012               	return	
  1319  0008BA  D7E4               	goto	l2513
  1320  0008BC                     __end_of_delay_ms:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           intcon	equ	0xFF2
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           postinc2	equ	0xFDE
  1332                           postdec2	equ	0xFDD
  1333                           fsr2h	equ	0xFDA
  1334                           fsr2l	equ	0xFD9
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function ___awdiv *****************
  1338 ;; Defined at:
  1339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  dividend        2   16[BANK0 ] int 
  1342 ;;  divisor         2   18[BANK0 ] int 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  quotient        2   22[BANK0 ] int 
  1345 ;;  sign            1   21[BANK0 ] unsigned char 
  1346 ;;  counter         1   20[BANK0 ] unsigned char 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  2   16[BANK0 ] int 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1357 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;Total ram usage:        8 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    7
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_delay_ms
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text2
  1371  000650                     __ptext2:
  1372                           	opt stack 0
  1373  000650                     ___awdiv:
  1374                           	opt stack 22
  1375                           
  1376                           ;incstack = 0
  1377  000650  0E00               	movlw	0
  1378  000652  0100               	movlb	0	; () banked
  1379  000654  6FBB               	movwf	___awdiv@sign& (0+255),b
  1380                           
  1381                           ; BSR set to: 0
  1382  000656  0100               	movlb	0	; () banked
  1383  000658  AFB9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1384  00065A  D008               	goto	l2427
  1385                           
  1386                           ; BSR set to: 0
  1387  00065C  0100               	movlb	0	; () banked
  1388  00065E  6DB8               	negf	___awdiv@divisor& (0+255),b
  1389  000660  1FB9               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1390  000662  B0D8               	btfsc	status,0,c
  1391  000664  2BB9               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1392                           
  1393                           ; BSR set to: 0
  1394  000666  0E01               	movlw	1
  1395  000668  0100               	movlb	0	; () banked
  1396  00066A  6FBB               	movwf	___awdiv@sign& (0+255),b
  1397  00066C                     l2427:
  1398                           
  1399                           ; BSR set to: 0
  1400  00066C  0100               	movlb	0	; () banked
  1401  00066E  AFB7               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1402  000670  D008               	goto	l2433
  1403                           
  1404                           ; BSR set to: 0
  1405  000672  0100               	movlb	0	; () banked
  1406  000674  6DB6               	negf	___awdiv@dividend& (0+255),b
  1407  000676  1FB7               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1408  000678  B0D8               	btfsc	status,0,c
  1409  00067A  2BB7               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1410                           
  1411                           ; BSR set to: 0
  1412  00067C  0E01               	movlw	1
  1413  00067E  0100               	movlb	0	; () banked
  1414  000680  1BBB               	xorwf	___awdiv@sign& (0+255),f,b
  1415  000682                     l2433:
  1416                           
  1417                           ; BSR set to: 0
  1418  000682  0E00               	movlw	0
  1419  000684  0100               	movlb	0	; () banked
  1420  000686  6FBD               	movwf	(___awdiv@quotient+1)& (0+255),b
  1421  000688  0E00               	movlw	0
  1422  00068A  6FBC               	movwf	___awdiv@quotient& (0+255),b
  1423                           
  1424                           ; BSR set to: 0
  1425  00068C  0100               	movlb	0	; () banked
  1426  00068E  51B8               	movf	___awdiv@divisor& (0+255),w,b
  1427  000690  0100               	movlb	0	; () banked
  1428  000692  11B9               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1429  000694  B4D8               	btfsc	status,2,c
  1430  000696  D02C               	goto	l2455
  1431                           
  1432                           ; BSR set to: 0
  1433  000698  0E01               	movlw	1
  1434  00069A  0100               	movlb	0	; () banked
  1435  00069C  6FBA               	movwf	___awdiv@counter& (0+255),b
  1436  00069E  D006               	goto	l2441
  1437  0006A0                     l2439:
  1438                           
  1439                           ; BSR set to: 0
  1440  0006A0  0100               	movlb	0	; () banked
  1441  0006A2  90D8               	bcf	status,0,c
  1442  0006A4  37B8               	rlcf	___awdiv@divisor& (0+255),f,b
  1443  0006A6  37B9               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1444  0006A8  0100               	movlb	0	; () banked
  1445  0006AA  2BBA               	incf	___awdiv@counter& (0+255),f,b
  1446  0006AC                     l2441:
  1447                           
  1448                           ; BSR set to: 0
  1449  0006AC  0100               	movlb	0	; () banked
  1450  0006AE  AFB9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1451  0006B0  D7F7               	goto	l2439
  1452  0006B2                     l2443:
  1453                           
  1454                           ; BSR set to: 0
  1455  0006B2  0100               	movlb	0	; () banked
  1456  0006B4  90D8               	bcf	status,0,c
  1457  0006B6  37BC               	rlcf	___awdiv@quotient& (0+255),f,b
  1458  0006B8  37BD               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461  0006BA  0100               	movlb	0	; () banked
  1462  0006BC  51B8               	movf	___awdiv@divisor& (0+255),w,b
  1463  0006BE  0100               	movlb	0	; () banked
  1464  0006C0  5DB6               	subwf	___awdiv@dividend& (0+255),w,b
  1465  0006C2  0100               	movlb	0	; () banked
  1466  0006C4  51B9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1467  0006C6  0100               	movlb	0	; () banked
  1468  0006C8  59B7               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1469  0006CA  A0D8               	btfss	status,0,c
  1470  0006CC  D00A               	goto	l2451
  1471                           
  1472                           ; BSR set to: 0
  1473  0006CE  0100               	movlb	0	; () banked
  1474  0006D0  51B8               	movf	___awdiv@divisor& (0+255),w,b
  1475  0006D2  0100               	movlb	0	; () banked
  1476  0006D4  5FB6               	subwf	___awdiv@dividend& (0+255),f,b
  1477  0006D6  0100               	movlb	0	; () banked
  1478  0006D8  51B9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1479  0006DA  0100               	movlb	0	; () banked
  1480  0006DC  5BB7               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1481                           
  1482                           ; BSR set to: 0
  1483  0006DE  0100               	movlb	0	; () banked
  1484  0006E0  81BC               	bsf	___awdiv@quotient& (0+255),0,b
  1485  0006E2                     l2451:
  1486                           
  1487                           ; BSR set to: 0
  1488  0006E2  0100               	movlb	0	; () banked
  1489  0006E4  90D8               	bcf	status,0,c
  1490  0006E6  33B9               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1491  0006E8  33B8               	rrcf	___awdiv@divisor& (0+255),f,b
  1492                           
  1493                           ; BSR set to: 0
  1494  0006EA  0100               	movlb	0	; () banked
  1495  0006EC  2FBA               	decfsz	___awdiv@counter& (0+255),f,b
  1496  0006EE  D7E1               	goto	l2443
  1497  0006F0                     l2455:
  1498                           
  1499                           ; BSR set to: 0
  1500  0006F0  0100               	movlb	0	; () banked
  1501  0006F2  51BB               	movf	___awdiv@sign& (0+255),w,b
  1502  0006F4  0100               	movlb	0	; () banked
  1503  0006F6  B4D8               	btfsc	status,2,c
  1504  0006F8  D005               	goto	l2459
  1505                           
  1506                           ; BSR set to: 0
  1507  0006FA  0100               	movlb	0	; () banked
  1508  0006FC  6DBC               	negf	___awdiv@quotient& (0+255),b
  1509  0006FE  1FBD               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1510  000700  B0D8               	btfsc	status,0,c
  1511  000702  2BBD               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1512  000704                     l2459:
  1513                           
  1514                           ; BSR set to: 0
  1515  000704  C0BC  F0B6         	movff	___awdiv@quotient,?___awdiv
  1516  000708  C0BD  F0B7         	movff	___awdiv@quotient+1,?___awdiv+1
  1517  00070C  0012               	return	
  1518  00070E                     __end_of___awdiv:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           intcon	equ	0xFF2
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1l	equ	0xFE1
  1529                           postinc2	equ	0xFDE
  1530                           postdec2	equ	0xFDD
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _SYSTEM_Initialize *****************
  1536 ;; Defined at:
  1537 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;Total ram usage:        0 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    9
  1558 ;; This function calls:
  1559 ;;		_ADC_Initialize
  1560 ;;		_EUSART1_Initialize
  1561 ;;		_EUSART2_Initialize
  1562 ;;		_I2C_Initialize
  1563 ;;		_INTERRUPT_Initialize
  1564 ;;		_OSCILLATOR_Initialize
  1565 ;;		_PIN_MANAGER_Initialize
  1566 ;;		_TMR1_Initialize
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text3
  1573  000CD6                     __ptext3:
  1574                           	opt stack 0
  1575  000CD6                     _SYSTEM_Initialize:
  1576                           	opt stack 21
  1577                           
  1578                           ;mcc.c: 114: INTERRUPT_Initialize();
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;incstack = 0
  1582  000CD6  ECC3  F006         	call	_INTERRUPT_Initialize	;wreg free
  1583                           
  1584                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1585  000CDA  EC53  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  1586                           
  1587                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1588  000CDE  ECAB  F006         	call	_OSCILLATOR_Initialize	;wreg free
  1589                           
  1590                           ;mcc.c: 117: I2C_Initialize();
  1591  000CE2  EC7C  F006         	call	_I2C_Initialize	;wreg free
  1592                           
  1593                           ;mcc.c: 118: ADC_Initialize();
  1594  000CE6  EC89  F006         	call	_ADC_Initialize	;wreg free
  1595                           
  1596                           ;mcc.c: 119: TMR1_Initialize();
  1597  000CEA  EC1D  F006         	call	_TMR1_Initialize	;wreg free
  1598                           
  1599                           ;mcc.c: 120: EUSART1_Initialize();
  1600  000CEE  ECA0  F006         	call	_EUSART1_Initialize	;wreg free
  1601                           
  1602                           ;mcc.c: 121: EUSART2_Initialize();
  1603  000CF2  EC95  F006         	call	_EUSART2_Initialize	;wreg free
  1604  000CF6  0012               	return		;funcret
  1605  000CF8                     __end_of_SYSTEM_Initialize:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           intcon	equ	0xFF2
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           postinc2	equ	0xFDE
  1617                           postdec2	equ	0xFDD
  1618                           fsr2h	equ	0xFDA
  1619                           fsr2l	equ	0xFD9
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _TMR1_Initialize *****************
  1623 ;; Defined at:
  1624 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1642 ;;Total ram usage:        2 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    8
  1645 ;; This function calls:
  1646 ;;		_TMR1_StartTimer
  1647 ;; This function is called by:
  1648 ;;		_SYSTEM_Initialize
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text4
  1653  000C3A                     __ptext4:
  1654                           	opt stack 0
  1655  000C3A                     _TMR1_Initialize:
  1656                           	opt stack 21
  1657                           
  1658                           ;tmr1.c: 67: T1CON = 0x30;
  1659                           
  1660                           ;incstack = 0
  1661  000C3A  0E30               	movlw	48
  1662  000C3C  6ECD               	movwf	4045,c	;volatile
  1663                           
  1664                           ;tmr1.c: 70: T1GCON = 0x00;
  1665  000C3E  0E00               	movlw	0
  1666  000C40  6EAA               	movwf	4010,c	;volatile
  1667                           
  1668                           ;tmr1.c: 73: TMR1H = 0xF8;
  1669  000C42  0EF8               	movlw	248
  1670  000C44  6ECF               	movwf	4047,c	;volatile
  1671                           
  1672                           ;tmr1.c: 76: TMR1L = 0x30;
  1673  000C46  0E30               	movlw	48
  1674  000C48  6ECE               	movwf	4046,c	;volatile
  1675                           
  1676                           ;tmr1.c: 79: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  1677  000C4A  50CE               	movf	4046,w,c	;volatile
  1678  000C4C  CFCF F0B6          	movff	4047,??_TMR1_Initialize	;volatile
  1679  000C50  0100               	movlb	0	; () banked
  1680  000C52  6BB7               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  1681  000C54  C0B6  F0B7         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  1682  000C58  0100               	movlb	0	; () banked
  1683  000C5A  6BB6               	clrf	??_TMR1_Initialize& (0+255),b
  1684  000C5C  0100               	movlb	0	; () banked
  1685  000C5E  11B6               	iorwf	??_TMR1_Initialize& (0+255),w,b
  1686  000C60  0100               	movlb	0	; () banked
  1687  000C62  6F9C               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  1688  000C64  0100               	movlb	0	; () banked
  1689  000C66  51B7               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  1690  000C68  0100               	movlb	0	; () banked
  1691  000C6A  6F9D               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  1695  000C6C  909E               	bcf	3998,0,c	;volatile
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;tmr1.c: 85: TMR1_StartTimer();
  1699  000C6E  ECC7  F006         	call	_TMR1_StartTimer	;wreg free
  1700  000C72  0012               	return		;funcret
  1701  000C74                     __end_of_TMR1_Initialize:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           intcon	equ	0xFF2
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           postdec1	equ	0xFE5
  1711                           fsr1l	equ	0xFE1
  1712                           postinc2	equ	0xFDE
  1713                           postdec2	equ	0xFDD
  1714                           fsr2h	equ	0xFDA
  1715                           fsr2l	equ	0xFD9
  1716                           status	equ	0xFD8
  1717                           
  1718 ;; *************** function _TMR1_StartTimer *****************
  1719 ;; Defined at:
  1720 ;;		line 88 in file "mcc_generated_files/tmr1.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		None
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    7
  1741 ;; This function calls:
  1742 ;;		Nothing
  1743 ;; This function is called by:
  1744 ;;		_TMR1_Initialize
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           	psect	text5
  1749  000D8E                     __ptext5:
  1750                           	opt stack 0
  1751  000D8E                     _TMR1_StartTimer:
  1752                           	opt stack 21
  1753                           
  1754                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
  1755                           
  1756                           ;incstack = 0
  1757  000D8E  80CD               	bsf	4045,0,c	;volatile
  1758  000D90  0012               	return		;funcret
  1759  000D92                     __end_of_TMR1_StartTimer:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           intcon	equ	0xFF2
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           postinc2	equ	0xFDE
  1771                           postdec2	equ	0xFDD
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _PIN_MANAGER_Initialize *****************
  1777 ;; Defined at:
  1778 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1796 ;;Total ram usage:        0 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    7
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_SYSTEM_Initialize
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  000CA6                     __ptext6:
  1808                           	opt stack 0
  1809  000CA6                     _PIN_MANAGER_Initialize:
  1810                           	opt stack 22
  1811                           
  1812                           ;pin_manager.c: 51: LATB = 0x0;
  1813                           
  1814                           ;incstack = 0
  1815  000CA6  0E00               	movlw	0
  1816  000CA8  6E8A               	movwf	3978,c	;volatile
  1817                           
  1818                           ;pin_manager.c: 52: LATA = 0x0;
  1819  000CAA  0E00               	movlw	0
  1820  000CAC  6E89               	movwf	3977,c	;volatile
  1821                           
  1822                           ;pin_manager.c: 53: LATE = 0x0;
  1823  000CAE  0E00               	movlw	0
  1824  000CB0  6E8D               	movwf	3981,c	;volatile
  1825                           
  1826                           ;pin_manager.c: 54: LATD = 0x0;
  1827  000CB2  0E00               	movlw	0
  1828  000CB4  6E8C               	movwf	3980,c	;volatile
  1829                           
  1830                           ;pin_manager.c: 55: LATC = 0x0;
  1831  000CB6  0E00               	movlw	0
  1832  000CB8  6E8B               	movwf	3979,c	;volatile
  1833                           
  1834                           ;pin_manager.c: 56: WPUB = 0xFE;
  1835  000CBA  0EFE               	movlw	254
  1836  000CBC  010F               	movlb	15	; () banked
  1837  000CBE  6F5B               	movwf	91,b	;volatile
  1838                           
  1839                           ;pin_manager.c: 57: TRISD = 0xA0;
  1840  000CC0  0EA0               	movlw	160
  1841  000CC2  6E95               	movwf	3989,c	;volatile
  1842                           
  1843                           ;pin_manager.c: 58: TRISE = 0x7;
  1844  000CC4  0E07               	movlw	7
  1845  000CC6  6E96               	movwf	3990,c	;volatile
  1846                           
  1847                           ;pin_manager.c: 59: TRISB = 0xF2;
  1848  000CC8  0EF2               	movlw	242
  1849  000CCA  6E93               	movwf	3987,c	;volatile
  1850                           
  1851                           ;pin_manager.c: 60: TRISC = 0xB8;
  1852  000CCC  0EB8               	movlw	184
  1853  000CCE  6E94               	movwf	3988,c	;volatile
  1854                           
  1855                           ;pin_manager.c: 61: TRISA = 0xEF;
  1856  000CD0  0EEF               	movlw	239
  1857  000CD2  6E92               	movwf	3986,c	;volatile
  1858                           
  1859                           ; BSR set to: 15
  1860  000CD4  0012               	return		;funcret
  1861  000CD6                     __end_of_PIN_MANAGER_Initialize:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           intcon	equ	0xFF2
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           fsr2h	equ	0xFDA
  1875                           fsr2l	equ	0xFD9
  1876                           status	equ	0xFD8
  1877                           
  1878 ;; *************** function _OSCILLATOR_Initialize *****************
  1879 ;; Defined at:
  1880 ;;		line 124 in file "mcc_generated_files/mcc.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    7
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_SYSTEM_Initialize
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text7
  1909  000D56                     __ptext7:
  1910                           	opt stack 0
  1911  000D56                     _OSCILLATOR_Initialize:
  1912                           	opt stack 22
  1913                           
  1914                           ;mcc.c: 127: OSCCON = 0x60;
  1915                           
  1916                           ; BSR set to: 15
  1917                           ;incstack = 0
  1918  000D56  0E60               	movlw	96
  1919  000D58  6ED3               	movwf	4051,c	;volatile
  1920                           
  1921                           ;mcc.c: 129: OSCCON2 = 0x00;
  1922  000D5A  0E00               	movlw	0
  1923  000D5C  6ED2               	movwf	4050,c	;volatile
  1924                           
  1925                           ;mcc.c: 131: OSCTUNE = 0x00;
  1926  000D5E  0E00               	movlw	0
  1927  000D60  6E9B               	movwf	3995,c	;volatile
  1928                           
  1929                           ;mcc.c: 133: REFOCON = 0x00;
  1930  000D62  0E00               	movlw	0
  1931  000D64  6E9A               	movwf	3994,c	;volatile
  1932  000D66  0012               	return		;funcret
  1933  000D68                     __end_of_OSCILLATOR_Initialize:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           intcon	equ	0xFF2
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _INTERRUPT_Initialize *****************
  1951 ;; Defined at:
  1952 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		None
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    7
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_SYSTEM_Initialize
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text8
  1981  000D86                     __ptext8:
  1982                           	opt stack 0
  1983  000D86                     _INTERRUPT_Initialize:
  1984                           	opt stack 22
  1985                           
  1986                           ;interrupt_manager.c: 54: IPEN = 0;
  1987                           
  1988                           ;incstack = 0
  1989  000D86  9ED0               	bcf	4048,7,c	;volatile
  1990                           
  1991                           ;interrupt_manager.c: 59: IPR1bits.ADIP = 0;
  1992  000D88  9C9F               	bcf	3999,6,c	;volatile
  1993                           
  1994                           ;interrupt_manager.c: 62: IPR1bits.SSPIP = 0;
  1995  000D8A  969F               	bcf	3999,3,c	;volatile
  1996  000D8C  0012               	return		;funcret
  1997  000D8E                     __end_of_INTERRUPT_Initialize:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           intcon	equ	0xFF2
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           postdec1	equ	0xFE5
  2007                           fsr1l	equ	0xFE1
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _I2C_Initialize *****************
  2015 ;; Defined at:
  2016 ;;		line 79 in file "mcc_generated_files/i2c.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    7
  2037 ;; This function calls:
  2038 ;;		Nothing
  2039 ;; This function is called by:
  2040 ;;		_SYSTEM_Initialize
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text9
  2045  000CF8                     __ptext9:
  2046                           	opt stack 0
  2047  000CF8                     _I2C_Initialize:
  2048                           	opt stack 22
  2049                           
  2050                           ;i2c.c: 82: SSPSTAT = 0x00;
  2051                           
  2052                           ;incstack = 0
  2053  000CF8  0E00               	movlw	0
  2054  000CFA  6EC7               	movwf	4039,c	;volatile
  2055                           
  2056                           ;i2c.c: 84: SSPCON1 = 0x3E;
  2057  000CFC  0E3E               	movlw	62
  2058  000CFE  6EC6               	movwf	4038,c	;volatile
  2059                           
  2060                           ;i2c.c: 86: SSPCON2 = 0x01;
  2061  000D00  0E01               	movlw	1
  2062  000D02  6EC5               	movwf	4037,c	;volatile
  2063                           
  2064                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  2065  000D04  0EFE               	movlw	254
  2066  000D06  6EC8               	movwf	4040,c	;volatile
  2067                           
  2068                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  2069  000D08  0E10               	movlw	16
  2070  000D0A  6EC8               	movwf	4040,c	;volatile
  2071                           
  2072                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  2073  000D0C  969E               	bcf	3998,3,c	;volatile
  2074                           
  2075                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  2076  000D0E  869D               	bsf	3997,3,c	;volatile
  2077  000D10  0012               	return		;funcret
  2078  000D12                     __end_of_I2C_Initialize:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon	equ	0xFF2
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1l	equ	0xFE1
  2089                           postinc2	equ	0xFDE
  2090                           postdec2	equ	0xFDD
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _EUSART2_Initialize *****************
  2096 ;; Defined at:
  2097 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, status,2
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2115 ;;Total ram usage:        0 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    7
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_SYSTEM_Initialize
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text10
  2126  000D2A                     __ptext10:
  2127                           	opt stack 0
  2128  000D2A                     _EUSART2_Initialize:
  2129                           	opt stack 22
  2130                           
  2131                           ;eusart2.c: 60: BAUDCON2 = 0x08;
  2132                           
  2133                           ;incstack = 0
  2134  000D2A  0E08               	movlw	8
  2135  000D2C  6EB9               	movwf	4025,c	;volatile
  2136                           
  2137                           ;eusart2.c: 63: RCSTA2 = 0x90;
  2138  000D2E  0E90               	movlw	144
  2139  000D30  6EA6               	movwf	4006,c	;volatile
  2140                           
  2141                           ;eusart2.c: 66: TXSTA2 = 0x26;
  2142  000D32  0E26               	movlw	38
  2143  000D34  6EBA               	movwf	4026,c	;volatile
  2144                           
  2145                           ;eusart2.c: 69: SPBRG2 = 0x82;
  2146  000D36  0E82               	movlw	130
  2147  000D38  6E7B               	movwf	3963,c	;volatile
  2148                           
  2149                           ;eusart2.c: 72: SPBRGH2 = 0x06;
  2150  000D3A  0E06               	movlw	6
  2151  000D3C  6E7C               	movwf	3964,c	;volatile
  2152  000D3E  0012               	return		;funcret
  2153  000D40                     __end_of_EUSART2_Initialize:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           intcon	equ	0xFF2
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           postdec1	equ	0xFE5
  2163                           fsr1l	equ	0xFE1
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _EUSART1_Initialize *****************
  2171 ;; Defined at:
  2172 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    7
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_SYSTEM_Initialize
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text11
  2201  000D40                     __ptext11:
  2202                           	opt stack 0
  2203  000D40                     _EUSART1_Initialize:
  2204                           	opt stack 22
  2205                           
  2206                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2207                           
  2208                           ;incstack = 0
  2209  000D40  0E08               	movlw	8
  2210  000D42  6EA7               	movwf	4007,c	;volatile
  2211                           
  2212                           ;eusart1.c: 63: RCSTA1 = 0x90;
  2213  000D44  0E90               	movlw	144
  2214  000D46  6EAB               	movwf	4011,c	;volatile
  2215                           
  2216                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  2217  000D48  0EA4               	movlw	164
  2218  000D4A  6EAC               	movwf	4012,c	;volatile
  2219                           
  2220                           ;eusart1.c: 69: SPBRG1 = 0x0F;
  2221  000D4C  0E0F               	movlw	15
  2222  000D4E  6EAF               	movwf	4015,c	;volatile
  2223                           
  2224                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  2225  000D50  0E00               	movlw	0
  2226  000D52  6E7D               	movwf	3965,c	;volatile
  2227  000D54  0012               	return		;funcret
  2228  000D56                     __end_of_EUSART1_Initialize:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           intcon	equ	0xFF2
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1l	equ	0xFE1
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _ADC_Initialize *****************
  2246 ;; Defined at:
  2247 ;;		line 58 in file "mcc_generated_files/adc.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;		None
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;		None
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2265 ;;Total ram usage:        0 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    7
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_SYSTEM_Initialize
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text12
  2276  000D12                     __ptext12:
  2277                           	opt stack 0
  2278  000D12                     _ADC_Initialize:
  2279                           	opt stack 22
  2280                           
  2281                           ;adc.c: 63: ADCON0 = 0x01;
  2282                           
  2283                           ;incstack = 0
  2284  000D12  0E01               	movlw	1
  2285  000D14  6EC2               	movwf	4034,c	;volatile
  2286                           
  2287                           ;adc.c: 66: ADCON1 = 0x80;
  2288  000D16  0E80               	movlw	128
  2289  000D18  6EC1               	movwf	4033,c	;volatile
  2290                           
  2291                           ;adc.c: 69: ADCON2 = 0x16;
  2292  000D1A  0E16               	movlw	22
  2293  000D1C  6EC0               	movwf	4032,c	;volatile
  2294                           
  2295                           ;adc.c: 72: ADRESH = 0x00;
  2296  000D1E  0E00               	movlw	0
  2297  000D20  6EC4               	movwf	4036,c	;volatile
  2298                           
  2299                           ;adc.c: 75: ADRESL = 0x00;
  2300  000D22  0E00               	movlw	0
  2301  000D24  6EC3               	movwf	4035,c	;volatile
  2302                           
  2303                           ;adc.c: 78: PIE1bits.ADIE = 1;
  2304  000D26  8C9D               	bsf	3997,6,c	;volatile
  2305  000D28  0012               	return		;funcret
  2306  000D2A                     __end_of_ADC_Initialize:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           intcon	equ	0xFF2
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _ADC_GetConversion *****************
  2324 ;; Defined at:
  2325 ;;		line 106 in file "mcc_generated_files/adc.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  channel         1    wreg     enum E18216
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  channel         1   20[BANK0 ] enum E18216
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  2   16[BANK0 ] unsigned int 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2339 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2342 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2343 ;;Total ram usage:        5 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    7
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;;		_getADC
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text13
  2355  000BBC                     __ptext13:
  2356                           	opt stack 0
  2357  000BBC                     _ADC_GetConversion:
  2358                           	opt stack 23
  2359                           
  2360                           ;incstack = 0
  2361                           ;ADC_GetConversion@channel stored from wreg
  2362  000BBC  0100               	movlb	0	; () banked
  2363  000BBE  6FBA               	movwf	ADC_GetConversion@channel& (0+255),b
  2364                           
  2365                           ;adc.c: 109: ADCON0bits.CHS = channel;
  2366  000BC0  C0BA  F0B8         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  2367  000BC4  0100               	movlb	0	; () banked
  2368  000BC6  47B8               	rlncf	??_ADC_GetConversion& (0+255),f,b
  2369  000BC8  47B8               	rlncf	??_ADC_GetConversion& (0+255),f,b
  2370  000BCA  50C2               	movf	4034,w,c	;volatile
  2371  000BCC  0100               	movlb	0	; () banked
  2372  000BCE  19B8               	xorwf	??_ADC_GetConversion& (0+255),w,b
  2373  000BD0  0B83               	andlw	-125
  2374  000BD2  19B8               	xorwf	??_ADC_GetConversion& (0+255),w,b
  2375  000BD4  6EC2               	movwf	4034,c	;volatile
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;adc.c: 112: ADCON0bits.ADON = 1;
  2379  000BD6  80C2               	bsf	4034,0,c	;volatile
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;adc.c: 116: ADCON0bits.GO_nDONE = 1;
  2383  000BD8  82C2               	bsf	4034,1,c	;volatile
  2384  000BDA                     l249:
  2385  000BDA  B2C2               	btfsc	4034,1,c	;volatile
  2386  000BDC  D7FE               	goto	l249
  2387                           
  2388                           ;adc.c: 121: }
  2389                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  2390  000BDE  50C4               	movf	4036,w,c	;volatile
  2391  000BE0  0100               	movlb	0	; () banked
  2392  000BE2  6FB9               	movwf	(??_ADC_GetConversion+1)& (0+255),b
  2393  000BE4  6BB8               	clrf	??_ADC_GetConversion& (0+255),b
  2394  000BE6  50C3               	movf	4035,w,c	;volatile
  2395  000BE8  0100               	movlb	0	; () banked
  2396  000BEA  25B8               	addwf	??_ADC_GetConversion& (0+255),w,b
  2397  000BEC  0100               	movlb	0	; () banked
  2398  000BEE  6FB6               	movwf	?_ADC_GetConversion& (0+255),b
  2399  000BF0  0E00               	movlw	0
  2400  000BF2  0100               	movlb	0	; () banked
  2401  000BF4  21B9               	addwfc	(??_ADC_GetConversion+1)& (0+255),w,b
  2402  000BF6  0100               	movlb	0	; () banked
  2403  000BF8  6FB7               	movwf	(?_ADC_GetConversion+1)& (0+255),b
  2404  000BFA  0012               	return	
  2405  000BFC                     __end_of_ADC_GetConversion:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           intcon	equ	0xFF2
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _INTERRUPT_InterruptManager *****************
  2423 ;; Defined at:
  2424 ;;		line 66 in file "mcc_generated_files/interrupt_manager.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2440 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2441 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;Total ram usage:       14 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    6
  2445 ;; This function calls:
  2446 ;;		_ADC_ISR
  2447 ;;		_I2C_ISR
  2448 ;; This function is called by:
  2449 ;;		Interrupt level 2
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	intcode
  2454  000008                     __pintcode:
  2455                           	opt stack 0
  2456  000008                     _INTERRUPT_InterruptManager:
  2457                           	opt stack 21
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;incstack = 0
  2461  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2462  00000A  CFFA F0A8          	movff	pclath,??_INTERRUPT_InterruptManager
  2463  00000E  CFFB F0A9          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2464  000012  CFE9 F0AA          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2465  000016  CFEA F0AB          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2466  00001A  CFE1 F0AC          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2467  00001E  CFE2 F0AD          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2468  000022  CFD9 F0AE          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2469  000026  CFDA F0AF          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2470  00002A  CFF3 F0B0          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2471  00002E  CFF4 F0B1          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2472  000032  CFF6 F0B2          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2473  000036  CFF7 F0B3          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2474  00003A  CFF8 F0B4          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2475  00003E  CFF5 F0B5          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2476                           
  2477                           ;interrupt_manager.c: 69: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  2478  000042  BCF2               	btfsc	intcon,6,c	;volatile
  2479  000044  AC9D               	btfss	3997,6,c	;volatile
  2480  000046  D003               	goto	i2l2665
  2481  000048  BC9E               	btfsc	3998,6,c	;volatile
  2482                           
  2483                           ;interrupt_manager.c: 70: {
  2484                           ;interrupt_manager.c: 71: ADC_ISR();
  2485  00004A  ECC9  F006         	call	_ADC_ISR	;wreg free
  2486  00004E                     i2l2665:
  2487                           
  2488                           ;interrupt_manager.c: 72: }
  2489                           ;interrupt_manager.c: 73: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  2490  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  2491  000050  A69D               	btfss	3997,3,c	;volatile
  2492  000052  D003               	goto	i2l633
  2493  000054  B69E               	btfsc	3998,3,c	;volatile
  2494                           
  2495                           ;interrupt_manager.c: 74: {
  2496                           ;interrupt_manager.c: 75: I2C_ISR();
  2497  000056  EC3A  F006         	call	_I2C_ISR	;wreg free
  2498  00005A                     i2l633:
  2499  00005A  C0B5  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2500  00005E  C0B4  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2501  000062  C0B3  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2502  000066  C0B2  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2503  00006A  C0B1  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2504  00006E  C0B0  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2505  000072  C0AF  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2506  000076  C0AE  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2507  00007A  C0AD  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2508  00007E  C0AC  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2509  000082  C0AB  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2510  000086  C0AA  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2511  00008A  C0A9  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2512  00008E  C0A8  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2513  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2514  000094  0011               	retfie		f
  2515  000096                     __end_of_INTERRUPT_InterruptManager:
  2516                           	opt stack 0
  2517                           pclatu	equ	0xFFB
  2518                           pclath	equ	0xFFA
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           prodh	equ	0xFF4
  2524                           prodl	equ	0xFF3
  2525                           intcon	equ	0xFF2
  2526                           postinc0	equ	0xFEE
  2527                           fsr0h	equ	0xFEA
  2528                           fsr0l	equ	0xFE9
  2529                           wreg	equ	0xFE8
  2530                           postdec1	equ	0xFE5
  2531                           fsr1h	equ	0xFE2
  2532                           fsr1l	equ	0xFE1
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function _I2C_ISR *****************
  2540 ;; Defined at:
  2541 ;;		line 99 in file "mcc_generated_files/i2c.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  i2c_data        1   93[COMRAM] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;Total ram usage:        1 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    5
  2562 ;; This function calls:
  2563 ;;		_I2C_StatusCallback
  2564 ;;		_handleByteReceived
  2565 ;; This function is called by:
  2566 ;;		_INTERRUPT_InterruptManager
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text15
  2571  000C74                     __ptext15:
  2572                           	opt stack 0
  2573  000C74                     _I2C_ISR:
  2574                           	opt stack 21
  2575                           
  2576                           ;i2c.c: 105: if (SSPSTATbits.BF == 0) {
  2577                           
  2578                           ;incstack = 0
  2579  000C74  A0C7               	btfss	4039,0,c	;volatile
  2580  000C76  0012               	return	
  2581                           
  2582                           ;i2c.c: 107: }
  2583                           ;i2c.c: 108: PIR1bits.SSPIF = 0;
  2584                           
  2585                           ;i2c.c: 106: return;
  2586  000C78  969E               	bcf	3998,3,c	;volatile
  2587                           
  2588                           ;i2c.c: 109: uint8_t i2c_data = SSPBUF;
  2589  000C7A  CFC9 F05E          	movff	4041,I2C_ISR@i2c_data	;volatile
  2590                           
  2591                           ;i2c.c: 110: if (1 == SSPSTATbits.R_nW) {
  2592  000C7E  A4C7               	btfss	4039,2,c	;volatile
  2593  000C80  D00B               	goto	i2l131
  2594                           
  2595                           ;i2c.c: 111: if ((1 == SSPSTATbits.D_nA) && (1 == PORTCbits.RC4)) {
  2596  000C82  BAC7               	btfsc	4039,5,c	;volatile
  2597  000C84  A882               	btfss	3970,4,c	;volatile
  2598  000C86  D004               	goto	i2l2473
  2599                           
  2600                           ;i2c.c: 113: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
  2601  000C88  0E03               	movlw	3
  2602  000C8A  EC85  F005         	call	_I2C_StatusCallback
  2603                           
  2604                           ;i2c.c: 114: } else {
  2605  000C8E  D009               	goto	i2l2477
  2606  000C90                     i2l2473:
  2607                           
  2608                           ;i2c.c: 116: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
  2609  000C90  0E01               	movlw	1
  2610  000C92  EC85  F005         	call	_I2C_StatusCallback
  2611                           
  2612                           ;i2c.c: 117: }
  2613                           ;i2c.c: 118: } else if (1 == SSPSTATbits.D_nA) {
  2614  000C96  D005               	goto	i2l2477
  2615  000C98                     i2l131:
  2616  000C98  AAC7               	btfss	4039,5,c	;volatile
  2617  000C9A  D003               	goto	i2l2477
  2618                           
  2619                           ;i2c.c: 120: handleByteReceived(i2c_data);
  2620  000C9C  505E               	movf	I2C_ISR@i2c_data,w,c
  2621  000C9E  EC8E  F002         	call	_handleByteReceived
  2622  000CA2                     i2l2477:
  2623                           
  2624                           ;i2c.c: 122: }
  2625                           ;i2c.c: 124: SSPCON1bits.CKP = 1;
  2626  000CA2  88C6               	bsf	4038,4,c	;volatile
  2627  000CA4  0012               	return		;funcret
  2628  000CA6                     __end_of_I2C_ISR:
  2629                           	opt stack 0
  2630                           pclatu	equ	0xFFB
  2631                           pclath	equ	0xFFA
  2632                           tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           intcon	equ	0xFF2
  2639                           postinc0	equ	0xFEE
  2640                           fsr0h	equ	0xFEA
  2641                           fsr0l	equ	0xFE9
  2642                           wreg	equ	0xFE8
  2643                           postdec1	equ	0xFE5
  2644                           fsr1h	equ	0xFE2
  2645                           fsr1l	equ	0xFE1
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _I2C_StatusCallback *****************
  2653 ;; Defined at:
  2654 ;;		line 209 in file "mcc_generated_files/i2c.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  i2c_bus_stat    1    wreg     enum E18217
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  i2c_bus_stat    1    0[BANK0 ] enum E18217
  2659 ;;  data            1    1[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2673 ;;Total ram usage:        2 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    4
  2676 ;; This function calls:
  2677 ;;		_getByteToSend
  2678 ;;		_handleByteReceived
  2679 ;; This function is called by:
  2680 ;;		_I2C_ISR
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text16
  2685  000B0A                     __ptext16:
  2686                           	opt stack 0
  2687  000B0A                     _I2C_StatusCallback:
  2688                           	opt stack 21
  2689                           
  2690                           ;incstack = 0
  2691                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
  2692  000B0A  0100               	movlb	0	; () banked
  2693  000B0C  6FA6               	movwf	I2C_StatusCallback@i2c_bus_state& (0+255),b
  2694                           
  2695                           ;i2c.c: 210: uint8_t data;
  2696                           ;i2c.c: 211: switch (i2c_bus_state) {
  2697  000B0E  D020               	goto	i2l2401
  2698  000B10                     i2l2389:
  2699                           
  2700                           ;i2c.c: 215: c = 2;
  2701  000B10  0E00               	movlw	0
  2702  000B12  0100               	movlb	0	; () banked
  2703  000B14  6F97               	movwf	(_c+1)& (0+255),b
  2704  000B16  0E02               	movlw	2
  2705  000B18  6F96               	movwf	_c& (0+255),b
  2706                           
  2707                           ;i2c.c: 216: break;
  2708  000B1A  0012               	return	
  2709  000B1C                     i2l166:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;i2c.c: 220: data = I2C_slaveWriteData;
  2713  000B1C  C0CF  F0A7         	movff	_I2C_slaveWriteData,I2C_StatusCallback@data	;volatile
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;i2c.c: 222: if (c == 2) {
  2717  000B20  0E02               	movlw	2
  2718  000B22  0100               	movlb	0	; () banked
  2719  000B24  1996               	xorwf	_c& (0+255),w,b
  2720  000B26  0100               	movlb	0	; () banked
  2721  000B28  1197               	iorwf	(_c+1)& (0+255),w,b
  2722  000B2A  A4D8               	btfss	status,2,c
  2723  000B2C  0012               	return	
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;i2c.c: 223: handleByteReceived(data);
  2727  000B2E  0100               	movlb	0	; () banked
  2728  000B30  51A7               	movf	I2C_StatusCallback@data& (0+255),w,b
  2729  000B32  EC8E  F002         	call	_handleByteReceived
  2730                           
  2731                           ;i2c.c: 224: c = 0;
  2732  000B36  0E00               	movlw	0
  2733  000B38  0100               	movlb	0	; () banked
  2734  000B3A  6F97               	movwf	(_c+1)& (0+255),b
  2735  000B3C  0E00               	movlw	0
  2736  000B3E  6F96               	movwf	_c& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;i2c.c: 225: }
  2740                           ;i2c.c: 227: break;
  2741  000B40  0012               	return	
  2742  000B42                     i2l2397:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;i2c.c: 231: data = getByteToSend();
  2746  000B42  EC36  F001         	call	_getByteToSend	;wreg free
  2747  000B46  0100               	movlb	0	; () banked
  2748  000B48  6FA7               	movwf	I2C_StatusCallback@data& (0+255),b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;i2c.c: 233: SSPBUF = data;
  2752  000B4A  C0A7  FFC9         	movff	I2C_StatusCallback@data,4041	;volatile
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;i2c.c: 239: }
  2756                           
  2757                           ;i2c.c: 237: default:;
  2758                           
  2759                           ; BSR set to: 0
  2760                           
  2761                           ;i2c.c: 236: case I2C_SLAVE_READ_COMPLETED:
  2762                           
  2763                           ;i2c.c: 234: break;
  2764  000B4E  0012               	return	
  2765  000B50                     i2l2401:
  2766  000B50  0100               	movlb	0	; () banked
  2767  000B52  51A6               	movf	I2C_StatusCallback@i2c_bus_state& (0+255),w,b
  2768                           
  2769                           ; Switch size 1, requested type "space"
  2770                           ; Number of cases is 4, Range of values is 0 to 3
  2771                           ; switch strategies available:
  2772                           ; Name         Instructions Cycles
  2773                           ; simple_byte           13     7 (average)
  2774                           ;	Chosen strategy is simple_byte
  2775  000B54  0A00               	xorlw	0	; case 0
  2776  000B56  B4D8               	btfsc	status,2,c
  2777  000B58  D7DB               	goto	i2l2389
  2778  000B5A  0A01               	xorlw	1	; case 1
  2779  000B5C  B4D8               	btfsc	status,2,c
  2780  000B5E  D7F1               	goto	i2l2397
  2781  000B60  0A03               	xorlw	3	; case 2
  2782  000B62  B4D8               	btfsc	status,2,c
  2783  000B64  D7DB               	goto	i2l166
  2784  000B66  0A01               	xorlw	1	; case 3
  2785  000B68  0012               	return	
  2786  000B6A                     __end_of_I2C_StatusCallback:
  2787                           	opt stack 0
  2788                           pclatu	equ	0xFFB
  2789                           pclath	equ	0xFFA
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon	equ	0xFF2
  2797                           postinc0	equ	0xFEE
  2798                           fsr0h	equ	0xFEA
  2799                           fsr0l	equ	0xFE9
  2800                           wreg	equ	0xFE8
  2801                           postdec1	equ	0xFE5
  2802                           fsr1h	equ	0xFE2
  2803                           fsr1l	equ	0xFE1
  2804                           postinc2	equ	0xFDE
  2805                           postdec2	equ	0xFDD
  2806                           fsr2h	equ	0xFDA
  2807                           fsr2l	equ	0xFD9
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _handleByteReceived *****************
  2811 ;; Defined at:
  2812 ;;		line 265 in file "ax.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  data            1    wreg     unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  data            1    6[COMRAM] unsigned char 
  2817 ;;  i               2    4[COMRAM] int 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2828 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2831 ;;Total ram usage:        3 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    1
  2834 ;; This function calls:
  2835 ;;		_setLedOff
  2836 ;;		_setLedOn
  2837 ;; This function is called by:
  2838 ;;		_I2C_ISR
  2839 ;;		_I2C_StatusCallback
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text17
  2844  00051C                     __ptext17:
  2845                           	opt stack 0
  2846  00051C                     _handleByteReceived:
  2847                           	opt stack 24
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;incstack = 0
  2851                           ;handleByteReceived@data stored from wreg
  2852  00051C  6E07               	movwf	handleByteReceived@data,c
  2853                           
  2854                           ;ax.c: 266: if (readIndex == 0) {
  2855  00051E  0100               	movlb	0	; () banked
  2856  000520  519A               	movf	_readIndex& (0+255),w,b	;volatile
  2857  000522  0100               	movlb	0	; () banked
  2858  000524  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  2859  000526  A4D8               	btfss	status,2,c
  2860  000528  D023               	goto	i2l2231
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ax.c: 267: currentCommand = data;
  2864  00052A  C007  F0D0         	movff	handleByteReceived@data,_currentCommand	;volatile
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;ax.c: 268: readIndex++;
  2868  00052E  0100               	movlb	0	; () banked
  2869  000530  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  2870  000532  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;ax.c: 270: for (int i = 0; i < 32; i++) {
  2874  000534  0E00               	movlw	0
  2875  000536  6E06               	movwf	handleByteReceived@i+1,c
  2876  000538  0E00               	movlw	0
  2877  00053A  6E05               	movwf	handleByteReceived@i,c
  2878                           
  2879                           ; BSR set to: 0
  2880  00053C  BE06               	btfsc	handleByteReceived@i+1,7,c
  2881  00053E  D008               	goto	i2l2225
  2882  000540  5006               	movf	handleByteReceived@i+1,w,c
  2883  000542  E105               	bnz	i2u74_40
  2884  000544  0E20               	movlw	32
  2885  000546  5C05               	subwf	handleByteReceived@i,w,c
  2886  000548  B0D8               	btfsc	status,0,c
  2887  00054A  0012               	return	
  2888  00054C  D001               	goto	i2l2225
  2889  00054E                     i2u74_40:
  2890                           
  2891                           ; BSR set to: 0
  2892  00054E  0012               	return	
  2893  000550                     i2l2225:
  2894                           
  2895                           ;ax.c: 271: dataToSend[i] = 66;
  2896  000550  0E60               	movlw	low _dataToSend
  2897  000552  2405               	addwf	handleByteReceived@i,w,c
  2898  000554  6ED9               	movwf	fsr2l,c
  2899  000556  0E00               	movlw	high _dataToSend
  2900  000558  2006               	addwfc	handleByteReceived@i+1,w,c
  2901  00055A  6EDA               	movwf	fsr2h,c
  2902  00055C  0E42               	movlw	66
  2903  00055E  6EDF               	movwf	indf2,c
  2904  000560  4A05               	infsnz	handleByteReceived@i,f,c
  2905  000562  2A06               	incf	handleByteReceived@i+1,f,c
  2906  000564  BE06               	btfsc	handleByteReceived@i+1,7,c
  2907  000566  D7F4               	goto	i2l2225
  2908  000568  5006               	movf	handleByteReceived@i+1,w,c
  2909  00056A  E101               	bnz	i2u75_40
  2910  00056C  D7EB               	goto	L2
  2911  00056E                     i2u75_40:
  2912                           
  2913                           ;ax.c: 272: }
  2914                           ;ax.c: 273: } else if (readIndex == 1) {
  2915  00056E  0012               	return	
  2916  000570                     i2l2231:
  2917  000570  0100               	movlb	0	; () banked
  2918  000572  059A               	decf	_readIndex& (0+255),w,b	;volatile
  2919  000574  0100               	movlb	0	; () banked
  2920  000576  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  2921  000578  A4D8               	btfss	status,2,c
  2922  00057A  D025               	goto	i2l2249
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;ax.c: 274: parameter1 = data;
  2926  00057C  C007  F0A0         	movff	handleByteReceived@data,_parameter1	;volatile
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;ax.c: 275: readIndex++;
  2930  000580  0100               	movlb	0	; () banked
  2931  000582  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  2932  000584  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;ax.c: 276: if (currentCommand == 10) {
  2936  000586  0E0A               	movlw	10
  2937  000588  0100               	movlb	0	; () banked
  2938  00058A  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  2939  00058C  A4D8               	btfss	status,2,c
  2940  00058E  D00B               	goto	i2l2243
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;ax.c: 277: setLedOn(parameter1);
  2944  000590  C0A0  F001         	movff	_parameter1,setLedOn@led	;volatile
  2945  000594  6A02               	clrf	setLedOn@led+1,c
  2946  000596  EC9E  F004         	call	_setLedOn	;wreg free
  2947                           
  2948                           ;ax.c: 278: readIndex = 0;
  2949  00059A  0E00               	movlw	0
  2950  00059C  0100               	movlb	0	; () banked
  2951  00059E  6F9B               	movwf	(_readIndex+1)& (0+255),b	;volatile
  2952  0005A0  0E00               	movlw	0
  2953  0005A2  6F9A               	movwf	_readIndex& (0+255),b	;volatile
  2954                           
  2955                           ;ax.c: 279: } else if (currentCommand == 11) {
  2956  0005A4  0012               	return	
  2957  0005A6                     i2l2243:
  2958                           
  2959                           ; BSR set to: 0
  2960  0005A6  0E0B               	movlw	11
  2961  0005A8  0100               	movlb	0	; () banked
  2962  0005AA  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  2963  0005AC  A4D8               	btfss	status,2,c
  2964  0005AE  0012               	return	
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;ax.c: 280: setLedOff(parameter1);
  2968  0005B0  C0A0  F001         	movff	_parameter1,setLedOff@led	;volatile
  2969  0005B4  6A02               	clrf	setLedOff@led+1,c
  2970  0005B6  ECDB  F004         	call	_setLedOff	;wreg free
  2971                           
  2972                           ;ax.c: 281: readIndex = 0;
  2973  0005BA  0E00               	movlw	0
  2974  0005BC  0100               	movlb	0	; () banked
  2975  0005BE  6F9B               	movwf	(_readIndex+1)& (0+255),b	;volatile
  2976  0005C0  0E00               	movlw	0
  2977  0005C2  6F9A               	movwf	_readIndex& (0+255),b	;volatile
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;ax.c: 282: }
  2981                           ;ax.c: 284: } else if (readIndex == 2) {
  2982                           
  2983                           ; BSR set to: 0
  2984  0005C4  0012               	return	
  2985  0005C6                     i2l2249:
  2986                           
  2987                           ; BSR set to: 0
  2988  0005C6  0E02               	movlw	2
  2989  0005C8  0100               	movlb	0	; () banked
  2990  0005CA  199A               	xorwf	_readIndex& (0+255),w,b	;volatile
  2991  0005CC  0100               	movlb	0	; () banked
  2992  0005CE  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  2993  0005D0  A4D8               	btfss	status,2,c
  2994  0005D2  D006               	goto	i2l2255
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;ax.c: 285: parameter2 = data;
  2998  0005D4  C007  F0A1         	movff	handleByteReceived@data,_parameter2	;volatile
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;ax.c: 286: readIndex++;
  3002  0005D8  0100               	movlb	0	; () banked
  3003  0005DA  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3004  0005DC  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3005                           
  3006                           ;ax.c: 287: } else if (readIndex == 3) {
  3007  0005DE  0012               	return	
  3008  0005E0                     i2l2255:
  3009                           
  3010                           ; BSR set to: 0
  3011  0005E0  0E03               	movlw	3
  3012  0005E2  0100               	movlb	0	; () banked
  3013  0005E4  199A               	xorwf	_readIndex& (0+255),w,b	;volatile
  3014  0005E6  0100               	movlb	0	; () banked
  3015  0005E8  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  3016  0005EA  A4D8               	btfss	status,2,c
  3017  0005EC  D006               	goto	i2l2261
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;ax.c: 288: parameter3 = data;
  3021  0005EE  C007  F0A2         	movff	handleByteReceived@data,_parameter3	;volatile
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;ax.c: 289: readIndex++;
  3025  0005F2  0100               	movlb	0	; () banked
  3026  0005F4  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3027  0005F6  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3028                           
  3029                           ;ax.c: 290: } else if (readIndex == 4) {
  3030  0005F8  0012               	return	
  3031  0005FA                     i2l2261:
  3032                           
  3033                           ; BSR set to: 0
  3034  0005FA  0E04               	movlw	4
  3035  0005FC  0100               	movlb	0	; () banked
  3036  0005FE  199A               	xorwf	_readIndex& (0+255),w,b	;volatile
  3037  000600  0100               	movlb	0	; () banked
  3038  000602  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  3039  000604  A4D8               	btfss	status,2,c
  3040  000606  D006               	goto	i2l2267
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;ax.c: 291: parameter4 = data;
  3044  000608  C007  F0A3         	movff	handleByteReceived@data,_parameter4	;volatile
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;ax.c: 292: readIndex++;
  3048  00060C  0100               	movlb	0	; () banked
  3049  00060E  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3050  000610  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3051                           
  3052                           ;ax.c: 293: } else if (readIndex == 5) {
  3053  000612  0012               	return	
  3054  000614                     i2l2267:
  3055                           
  3056                           ; BSR set to: 0
  3057  000614  0E05               	movlw	5
  3058  000616  0100               	movlb	0	; () banked
  3059  000618  199A               	xorwf	_readIndex& (0+255),w,b	;volatile
  3060  00061A  0100               	movlb	0	; () banked
  3061  00061C  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  3062  00061E  A4D8               	btfss	status,2,c
  3063  000620  D006               	goto	i2l2273
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;ax.c: 294: parameter5 = data;
  3067  000622  C007  F0A4         	movff	handleByteReceived@data,_parameter5	;volatile
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;ax.c: 295: readIndex++;
  3071  000626  0100               	movlb	0	; () banked
  3072  000628  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3073  00062A  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3074                           
  3075                           ;ax.c: 296: } else if (readIndex == 6) {
  3076  00062C  0012               	return	
  3077  00062E                     i2l2273:
  3078                           
  3079                           ; BSR set to: 0
  3080  00062E  0E06               	movlw	6
  3081  000630  0100               	movlb	0	; () banked
  3082  000632  199A               	xorwf	_readIndex& (0+255),w,b	;volatile
  3083  000634  0100               	movlb	0	; () banked
  3084  000636  119B               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  3085  000638  A4D8               	btfss	status,2,c
  3086  00063A  D006               	goto	i2l2279
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;ax.c: 297: parameter6 = data;
  3090  00063C  C007  F0A5         	movff	handleByteReceived@data,_parameter6	;volatile
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;ax.c: 298: readIndex++;
  3094  000640  0100               	movlb	0	; () banked
  3095  000642  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3096  000644  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3097                           
  3098                           ;ax.c: 299: } else {
  3099  000646  0012               	return	
  3100  000648                     i2l2279:
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;ax.c: 300: readIndex++;
  3104  000648  0100               	movlb	0	; () banked
  3105  00064A  4B9A               	infsnz	_readIndex& (0+255),f,b	;volatile
  3106  00064C  2B9B               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  3107                           
  3108                           ; BSR set to: 0
  3109                           
  3110                           ; BSR set to: 0
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ; BSR set to: 0
  3115                           
  3116                           ; BSR set to: 0
  3117                           
  3118                           ; BSR set to: 0
  3119  00064E  0012               	return	
  3120  000650                     __end_of_handleByteReceived:
  3121                           	opt stack 0
  3122                           pclatu	equ	0xFFB
  3123                           pclath	equ	0xFFA
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           prodh	equ	0xFF4
  3129                           prodl	equ	0xFF3
  3130                           intcon	equ	0xFF2
  3131                           postinc0	equ	0xFEE
  3132                           fsr0h	equ	0xFEA
  3133                           fsr0l	equ	0xFE9
  3134                           wreg	equ	0xFE8
  3135                           postdec1	equ	0xFE5
  3136                           fsr1h	equ	0xFE2
  3137                           fsr1l	equ	0xFE1
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _setLedOn *****************
  3146 ;; Defined at:
  3147 ;;		line 45 in file "ax.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  led             2    0[COMRAM] int 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3164 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3165 ;;Total ram usage:        4 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_handleByteReceived
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text18
  3175  00093C                     __ptext18:
  3176                           	opt stack 0
  3177  00093C                     _setLedOn:
  3178                           	opt stack 24
  3179                           
  3180                           ;ax.c: 46: switch (led) {
  3181                           
  3182                           ;incstack = 0
  3183  00093C  D014               	goto	i2l2111
  3184  00093E                     i2l419:
  3185  00093E  868C               	bsf	3980,3,c	;volatile
  3186                           
  3187                           ;ax.c: 49: break;
  3188  000940  0012               	return	
  3189  000942                     i2l423:
  3190  000942  848C               	bsf	3980,2,c	;volatile
  3191                           
  3192                           ;ax.c: 52: break;
  3193  000944  0012               	return	
  3194  000946                     i2l426:
  3195  000946  828C               	bsf	3980,1,c	;volatile
  3196                           
  3197                           ;ax.c: 55: break;
  3198  000948  0012               	return	
  3199  00094A                     i2l429:
  3200  00094A  808C               	bsf	3980,0,c	;volatile
  3201                           
  3202                           ;ax.c: 58: break;
  3203  00094C  0012               	return	
  3204  00094E                     i2l432:
  3205  00094E  848B               	bsf	3979,2,c	;volatile
  3206                           
  3207                           ;ax.c: 61: break;
  3208  000950  0012               	return	
  3209  000952                     i2l435:
  3210  000952  828B               	bsf	3979,1,c	;volatile
  3211                           
  3212                           ;ax.c: 64: break;
  3213  000954  0012               	return	
  3214  000956                     i2l438:
  3215  000956  808B               	bsf	3979,0,c	;volatile
  3216                           
  3217                           ;ax.c: 67: break;
  3218  000958  0012               	return	
  3219  00095A                     i2l441:
  3220  00095A  808A               	bsf	3978,0,c	;volatile
  3221                           
  3222                           ;ax.c: 70: break;
  3223  00095C  0012               	return	
  3224  00095E                     i2l444:
  3225  00095E  848A               	bsf	3978,2,c	;volatile
  3226                           
  3227                           ;ax.c: 73: break;
  3228  000960  0012               	return	
  3229  000962                     i2l447:
  3230  000962  868A               	bsf	3978,3,c	;volatile
  3231                           
  3232                           ;ax.c: 77: }
  3233                           
  3234                           ;ax.c: 76: break;
  3235  000964  0012               	return	
  3236  000966                     i2l2111:
  3237  000966  C001  F003         	movff	setLedOn@led,??_setLedOn
  3238  00096A  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  3239                           
  3240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3241                           ; Switch size 1, requested type "space"
  3242                           ; Number of cases is 1, Range of values is 0 to 0
  3243                           ; switch strategies available:
  3244                           ; Name         Instructions Cycles
  3245                           ; simple_byte            4     3 (average)
  3246                           ;	Chosen strategy is simple_byte
  3247  00096E  5004               	movf	??_setLedOn+1,w,c
  3248  000970  0A00               	xorlw	0	; case 0
  3249  000972  A4D8               	btfss	status,2,c
  3250  000974  0012               	return	
  3251                           
  3252                           ; Switch size 1, requested type "space"
  3253                           ; Number of cases is 10, Range of values is 1 to 10
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           31    16 (average)
  3257                           ;	Chosen strategy is simple_byte
  3258  000976  5003               	movf	??_setLedOn,w,c
  3259  000978  0A01               	xorlw	1	; case 1
  3260  00097A  B4D8               	btfsc	status,2,c
  3261  00097C  D7E0               	goto	i2l419
  3262  00097E  0A03               	xorlw	3	; case 2
  3263  000980  B4D8               	btfsc	status,2,c
  3264  000982  D7DF               	goto	i2l423
  3265  000984  0A01               	xorlw	1	; case 3
  3266  000986  B4D8               	btfsc	status,2,c
  3267  000988  D7DE               	goto	i2l426
  3268  00098A  0A07               	xorlw	7	; case 4
  3269  00098C  B4D8               	btfsc	status,2,c
  3270  00098E  D7DD               	goto	i2l429
  3271  000990  0A01               	xorlw	1	; case 5
  3272  000992  B4D8               	btfsc	status,2,c
  3273  000994  D7DC               	goto	i2l432
  3274  000996  0A03               	xorlw	3	; case 6
  3275  000998  B4D8               	btfsc	status,2,c
  3276  00099A  D7DB               	goto	i2l435
  3277  00099C  0A01               	xorlw	1	; case 7
  3278  00099E  B4D8               	btfsc	status,2,c
  3279  0009A0  D7DA               	goto	i2l438
  3280  0009A2  0A0F               	xorlw	15	; case 8
  3281  0009A4  B4D8               	btfsc	status,2,c
  3282  0009A6  D7D9               	goto	i2l441
  3283  0009A8  0A01               	xorlw	1	; case 9
  3284  0009AA  B4D8               	btfsc	status,2,c
  3285  0009AC  D7D8               	goto	i2l444
  3286  0009AE  0A03               	xorlw	3	; case 10
  3287  0009B0  A4D8               	btfss	status,2,c
  3288  0009B2  0012               	return	
  3289  0009B4  D7D6               	goto	i2l447
  3290  0009B6                     __end_of_setLedOn:
  3291                           	opt stack 0
  3292                           pclatu	equ	0xFFB
  3293                           pclath	equ	0xFFA
  3294                           tblptru	equ	0xFF8
  3295                           tblptrh	equ	0xFF7
  3296                           tblptrl	equ	0xFF6
  3297                           tablat	equ	0xFF5
  3298                           prodh	equ	0xFF4
  3299                           prodl	equ	0xFF3
  3300                           intcon	equ	0xFF2
  3301                           postinc0	equ	0xFEE
  3302                           fsr0h	equ	0xFEA
  3303                           fsr0l	equ	0xFE9
  3304                           wreg	equ	0xFE8
  3305                           postdec1	equ	0xFE5
  3306                           fsr1h	equ	0xFE2
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _setLedOff *****************
  3316 ;; Defined at:
  3317 ;;		line 80 in file "ax.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  led             2    0[COMRAM] int 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3331 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;Total ram usage:        4 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_handleByteReceived
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           	psect	text19
  3345  0009B6                     __ptext19:
  3346                           	opt stack 0
  3347  0009B6                     _setLedOff:
  3348                           	opt stack 24
  3349                           
  3350                           ;ax.c: 81: switch (led) {
  3351                           
  3352                           ;incstack = 0
  3353  0009B6  D014               	goto	i2l2121
  3354  0009B8                     i2l454:
  3355  0009B8  968C               	bcf	3980,3,c	;volatile
  3356                           
  3357                           ;ax.c: 84: break;
  3358  0009BA  0012               	return	
  3359  0009BC                     i2l458:
  3360  0009BC  948C               	bcf	3980,2,c	;volatile
  3361                           
  3362                           ;ax.c: 87: break;
  3363  0009BE  0012               	return	
  3364  0009C0                     i2l461:
  3365  0009C0  928C               	bcf	3980,1,c	;volatile
  3366                           
  3367                           ;ax.c: 90: break;
  3368  0009C2  0012               	return	
  3369  0009C4                     i2l464:
  3370  0009C4  908C               	bcf	3980,0,c	;volatile
  3371                           
  3372                           ;ax.c: 93: break;
  3373  0009C6  0012               	return	
  3374  0009C8                     i2l467:
  3375  0009C8  948B               	bcf	3979,2,c	;volatile
  3376                           
  3377                           ;ax.c: 96: break;
  3378  0009CA  0012               	return	
  3379  0009CC                     i2l470:
  3380  0009CC  928B               	bcf	3979,1,c	;volatile
  3381                           
  3382                           ;ax.c: 99: break;
  3383  0009CE  0012               	return	
  3384  0009D0                     i2l473:
  3385  0009D0  908B               	bcf	3979,0,c	;volatile
  3386                           
  3387                           ;ax.c: 102: break;
  3388  0009D2  0012               	return	
  3389  0009D4                     i2l476:
  3390  0009D4  908A               	bcf	3978,0,c	;volatile
  3391                           
  3392                           ;ax.c: 105: break;
  3393  0009D6  0012               	return	
  3394  0009D8                     i2l479:
  3395  0009D8  948A               	bcf	3978,2,c	;volatile
  3396                           
  3397                           ;ax.c: 108: break;
  3398  0009DA  0012               	return	
  3399  0009DC                     i2l482:
  3400  0009DC  968A               	bcf	3978,3,c	;volatile
  3401                           
  3402                           ;ax.c: 112: }
  3403                           
  3404                           ;ax.c: 111: break;
  3405  0009DE  0012               	return	
  3406  0009E0                     i2l2121:
  3407  0009E0  C001  F003         	movff	setLedOff@led,??_setLedOff
  3408  0009E4  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  3409                           
  3410                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 1, Range of values is 0 to 0
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; simple_byte            4     3 (average)
  3416                           ;	Chosen strategy is simple_byte
  3417  0009E8  5004               	movf	??_setLedOff+1,w,c
  3418  0009EA  0A00               	xorlw	0	; case 0
  3419  0009EC  A4D8               	btfss	status,2,c
  3420  0009EE  0012               	return	
  3421                           
  3422                           ; Switch size 1, requested type "space"
  3423                           ; Number of cases is 10, Range of values is 1 to 10
  3424                           ; switch strategies available:
  3425                           ; Name         Instructions Cycles
  3426                           ; simple_byte           31    16 (average)
  3427                           ;	Chosen strategy is simple_byte
  3428  0009F0  5003               	movf	??_setLedOff,w,c
  3429  0009F2  0A01               	xorlw	1	; case 1
  3430  0009F4  B4D8               	btfsc	status,2,c
  3431  0009F6  D7E0               	goto	i2l454
  3432  0009F8  0A03               	xorlw	3	; case 2
  3433  0009FA  B4D8               	btfsc	status,2,c
  3434  0009FC  D7DF               	goto	i2l458
  3435  0009FE  0A01               	xorlw	1	; case 3
  3436  000A00  B4D8               	btfsc	status,2,c
  3437  000A02  D7DE               	goto	i2l461
  3438  000A04  0A07               	xorlw	7	; case 4
  3439  000A06  B4D8               	btfsc	status,2,c
  3440  000A08  D7DD               	goto	i2l464
  3441  000A0A  0A01               	xorlw	1	; case 5
  3442  000A0C  B4D8               	btfsc	status,2,c
  3443  000A0E  D7DC               	goto	i2l467
  3444  000A10  0A03               	xorlw	3	; case 6
  3445  000A12  B4D8               	btfsc	status,2,c
  3446  000A14  D7DB               	goto	i2l470
  3447  000A16  0A01               	xorlw	1	; case 7
  3448  000A18  B4D8               	btfsc	status,2,c
  3449  000A1A  D7DA               	goto	i2l473
  3450  000A1C  0A0F               	xorlw	15	; case 8
  3451  000A1E  B4D8               	btfsc	status,2,c
  3452  000A20  D7D9               	goto	i2l476
  3453  000A22  0A01               	xorlw	1	; case 9
  3454  000A24  B4D8               	btfsc	status,2,c
  3455  000A26  D7D8               	goto	i2l479
  3456  000A28  0A03               	xorlw	3	; case 10
  3457  000A2A  A4D8               	btfss	status,2,c
  3458  000A2C  0012               	return	
  3459  000A2E  D7D6               	goto	i2l482
  3460  000A30                     __end_of_setLedOff:
  3461                           	opt stack 0
  3462                           pclatu	equ	0xFFB
  3463                           pclath	equ	0xFFA
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           postinc0	equ	0xFEE
  3472                           fsr0h	equ	0xFEA
  3473                           fsr0l	equ	0xFE9
  3474                           wreg	equ	0xFE8
  3475                           postdec1	equ	0xFE5
  3476                           fsr1h	equ	0xFE2
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _getByteToSend *****************
  3486 ;; Defined at:
  3487 ;;		line 319 in file "ax.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  value           2   90[COMRAM] int 
  3492 ;;  xhigh           1   92[COMRAM] unsigned char 
  3493 ;;  xlow            1   86[COMRAM] unsigned char 
  3494 ;;  error           2   82[COMRAM] int 
  3495 ;;  value           2   88[COMRAM] int 
  3496 ;;  xhigh           1   85[COMRAM] unsigned char 
  3497 ;;  xlow            1   84[COMRAM] unsigned char 
  3498 ;;  error           2   80[COMRAM] int 
  3499 ;;  d               1   87[COMRAM] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      unsigned char 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3510 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3512 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3513 ;;Total ram usage:       14 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    3
  3516 ;; This function calls:
  3517 ;;		_clearState
  3518 ;;		_pingAX
  3519 ;;		_readAXData
  3520 ;;		_writeAXData
  3521 ;; This function is called by:
  3522 ;;		_I2C_StatusCallback
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text20
  3527  00026C                     __ptext20:
  3528                           	opt stack 0
  3529  00026C                     _getByteToSend:
  3530                           	opt stack 21
  3531                           
  3532                           ;ax.c: 322: if (currentCommand == 20) {
  3533                           
  3534                           ;incstack = 0
  3535  00026C  0E14               	movlw	20
  3536  00026E  0100               	movlb	0	; () banked
  3537  000270  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  3538  000272  A4D8               	btfss	status,2,c
  3539  000274  D016               	goto	i2l2293
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;ax.c: 323: int error = pingAX(parameter1);
  3543  000276  C0A0  F018         	movff	_parameter1,pingAX@id	;volatile
  3544  00027A  6A19               	clrf	pingAX@id+1,c
  3545  00027C  EC54  F005         	call	_pingAX	;wreg free
  3546  000280  C018  F051         	movff	?_pingAX,getByteToSend@error
  3547  000284  C019  F052         	movff	?_pingAX+1,getByteToSend@error+1
  3548                           
  3549                           ;ax.c: 325: nbBytesToSend = 2;
  3550  000288  0E00               	movlw	0
  3551  00028A  0100               	movlb	0	; () banked
  3552  00028C  6F99               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3553  00028E  0E02               	movlw	2
  3554  000290  6F98               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;ax.c: 326: dataToSend[0] = error;
  3558  000292  C051  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;ax.c: 327: dataToSend[1] = 0;
  3562  000296  0E00               	movlw	0
  3563  000298  0100               	movlb	0	; () banked
  3564  00029A  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;ax.c: 329: clearState();
  3568  00029C  ECFE  F005         	call	_clearState	;wreg free
  3569                           
  3570                           ;ax.c: 330: } else if (currentCommand == 21) {
  3571  0002A0  D074               	goto	i2l2349
  3572  0002A2                     i2l2293:
  3573  0002A2  0E15               	movlw	21
  3574  0002A4  0100               	movlb	0	; () banked
  3575  0002A6  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  3576  0002A8  A4D8               	btfss	status,2,c
  3577  0002AA  D022               	goto	i2l2313
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;ax.c: 331: int value = readAXData(parameter1, parameter2);
  3581  0002AC  C0A0  F018         	movff	_parameter1,readAXData@id	;volatile
  3582  0002B0  6A19               	clrf	readAXData@id+1,c
  3583  0002B2  C0A1  F01A         	movff	_parameter2,readAXData@address	;volatile
  3584  0002B6  6A1B               	clrf	readAXData@address+1,c
  3585  0002B8  EC87  F003         	call	_readAXData	;wreg free
  3586  0002BC  C018  F059         	movff	?_readAXData,getByteToSend@value
  3587  0002C0  C019  F05A         	movff	?_readAXData+1,getByteToSend@value+1
  3588                           
  3589                           ;ax.c: 333: nbBytesToSend = 4;
  3590  0002C4  0E00               	movlw	0
  3591  0002C6  0100               	movlb	0	; () banked
  3592  0002C8  6F99               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3593  0002CA  0E04               	movlw	4
  3594  0002CC  6F98               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;ax.c: 334: uint8_t xlow = value & 0xff;
  3598  0002CE  C059  F055         	movff	getByteToSend@value,getByteToSend@xlow
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;ax.c: 335: uint8_t xhigh = (value >> 8);
  3602  0002D2  505A               	movf	getByteToSend@value+1,w,c
  3603  0002D4  6E56               	movwf	getByteToSend@xhigh,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;ax.c: 336: dataToSend[0] = xlow;
  3607  0002D6  C055  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;ax.c: 337: dataToSend[1] = 0;
  3611  0002DA  0E00               	movlw	0
  3612  0002DC  0100               	movlb	0	; () banked
  3613  0002DE  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;ax.c: 338: dataToSend[2] = xhigh;
  3617  0002E0  C056  F062         	movff	getByteToSend@xhigh,_dataToSend+2	;volatile
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;ax.c: 339: dataToSend[3] = 0;
  3621  0002E4  0E00               	movlw	0
  3622  0002E6  0100               	movlb	0	; () banked
  3623  0002E8  6F63               	movwf	(_dataToSend+3)& (0+255),b	;volatile
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;ax.c: 341: clearState();
  3627  0002EA  ECFE  F005         	call	_clearState	;wreg free
  3628                           
  3629                           ;ax.c: 342: } else if (currentCommand == 22) {
  3630  0002EE  D04D               	goto	i2l2349
  3631  0002F0                     i2l2313:
  3632  0002F0  0E16               	movlw	22
  3633  0002F2  0100               	movlb	0	; () banked
  3634  0002F4  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  3635  0002F6  A4D8               	btfss	status,2,c
  3636  0002F8  D01C               	goto	i2l2325
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;ax.c: 343: int error = writeAXData(parameter1, parameter2, parameter3);
  3640  0002FA  C0A0  F018         	movff	_parameter1,writeAXData@id	;volatile
  3641  0002FE  6A19               	clrf	writeAXData@id+1,c
  3642  000300  C0A1  F01A         	movff	_parameter2,writeAXData@address	;volatile
  3643  000304  6A1B               	clrf	writeAXData@address+1,c
  3644  000306  C0A2  F01C         	movff	_parameter3,writeAXData@data	;volatile
  3645  00030A  6A1D               	clrf	writeAXData@data+1,c
  3646  00030C  ECD3  F003         	call	_writeAXData	;wreg free
  3647  000310  C018  F053         	movff	?_writeAXData,getByteToSend@error_1128
  3648  000314  C019  F054         	movff	?_writeAXData+1,getByteToSend@error_1128+1
  3649                           
  3650                           ;ax.c: 345: nbBytesToSend = 2;
  3651  000318  0E00               	movlw	0
  3652  00031A  0100               	movlb	0	; () banked
  3653  00031C  6F99               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3654  00031E  0E02               	movlw	2
  3655  000320  6F98               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;ax.c: 346: dataToSend[0] = error;
  3659  000322  C053  F060         	movff	getByteToSend@error_1128,_dataToSend	;volatile
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;ax.c: 347: dataToSend[1] = 0;
  3663  000326  0E00               	movlw	0
  3664  000328  0100               	movlb	0	; () banked
  3665  00032A  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;ax.c: 349: clearState();
  3669  00032C  ECFE  F005         	call	_clearState	;wreg free
  3670                           
  3671                           ;ax.c: 350: } else if (currentCommand == 12) {
  3672  000330  D02C               	goto	i2l2349
  3673  000332                     i2l2325:
  3674  000332  0E0C               	movlw	12
  3675  000334  0100               	movlb	0	; () banked
  3676  000336  19D0               	xorwf	_currentCommand& (0+255),w,b	;volatile
  3677  000338  A4D8               	btfss	status,2,c
  3678  00033A  D027               	goto	i2l2349
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;ax.c: 351: int value = adc_values[parameter3];
  3682  00033C  0100               	movlb	0	; () banked
  3683  00033E  51A2               	movf	_parameter3& (0+255),w,b	;volatile
  3684  000340  0D02               	mullw	2
  3685  000342  0E80               	movlw	low _adc_values
  3686  000344  24F3               	addwf	prodl,w,c
  3687  000346  6ED9               	movwf	fsr2l,c
  3688  000348  0E00               	movlw	high _adc_values
  3689  00034A  20F4               	addwfc	prodh,w,c
  3690  00034C  6EDA               	movwf	fsr2h,c
  3691  00034E  CFDE F05B          	movff	postinc2,getByteToSend@value_1130
  3692  000352  CFDD F05C          	movff	postdec2,getByteToSend@value_1130+1
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;ax.c: 353: nbBytesToSend = 6;
  3696  000356  0E00               	movlw	0
  3697  000358  0100               	movlb	0	; () banked
  3698  00035A  6F99               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3699  00035C  0E06               	movlw	6
  3700  00035E  6F98               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;ax.c: 354: uint8_t xlow = value & 0xff;
  3704  000360  C05B  F057         	movff	getByteToSend@value_1130,getByteToSend@xlow_1131
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;ax.c: 355: uint8_t xhigh = (value >> 8);
  3708  000364  505C               	movf	getByteToSend@value_1130+1,w,c
  3709  000366  6E5D               	movwf	getByteToSend@xhigh_1132,c
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;ax.c: 356: dataToSend[0] = xlow;
  3713  000368  C057  F060         	movff	getByteToSend@xlow_1131,_dataToSend	;volatile
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;ax.c: 357: dataToSend[1] = 1;
  3717  00036C  0E01               	movlw	1
  3718  00036E  0100               	movlb	0	; () banked
  3719  000370  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;ax.c: 358: dataToSend[2] = 2;
  3723  000372  0E02               	movlw	2
  3724  000374  0100               	movlb	0	; () banked
  3725  000376  6F62               	movwf	(_dataToSend+2)& (0+255),b	;volatile
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;ax.c: 359: dataToSend[3] = xhigh;
  3729  000378  C05D  F063         	movff	getByteToSend@xhigh_1132,_dataToSend+3	;volatile
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;ax.c: 360: dataToSend[4] = xhigh;
  3733  00037C  C05D  F064         	movff	getByteToSend@xhigh_1132,_dataToSend+4	;volatile
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;ax.c: 361: dataToSend[5] = 5;
  3737  000380  0E05               	movlw	5
  3738  000382  0100               	movlb	0	; () banked
  3739  000384  6F65               	movwf	(_dataToSend+5)& (0+255),b	;volatile
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;ax.c: 364: clearState();
  3743  000386  ECFE  F005         	call	_clearState	;wreg free
  3744  00038A                     i2l2349:
  3745                           
  3746                           ;ax.c: 365: }
  3747                           ;ax.c: 366: if (nbBytesToSend == 0) {
  3748  00038A  0100               	movlb	0	; () banked
  3749  00038C  5198               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  3750  00038E  0100               	movlb	0	; () banked
  3751  000390  1199               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  3752  000392  A4D8               	btfss	status,2,c
  3753  000394  D004               	goto	i2l2357
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;ax.c: 368: clearState();
  3757  000396  ECFE  F005         	call	_clearState	;wreg free
  3758                           
  3759                           ;ax.c: 369: return 0;
  3760  00039A  0E00               	movlw	0
  3761  00039C  0012               	return	
  3762  00039E                     i2l2357:
  3763                           
  3764                           ;ax.c: 370: }
  3765                           ;ax.c: 371: uint8_t d = dataToSend[bytesSent];
  3766  00039E  0E60               	movlw	low _dataToSend
  3767  0003A0  0100               	movlb	0	; () banked
  3768  0003A2  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  3769  0003A4  6ED9               	movwf	fsr2l,c
  3770  0003A6  0E00               	movlw	high _dataToSend
  3771  0003A8  0100               	movlb	0	; () banked
  3772  0003AA  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  3773  0003AC  6EDA               	movwf	fsr2h,c
  3774  0003AE  50DF               	movf	indf2,w,c
  3775  0003B0  6E58               	movwf	getByteToSend@d,c
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;ax.c: 372: bytesSent++;
  3779  0003B2  0100               	movlb	0	; () banked
  3780  0003B4  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  3781  0003B6  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;ax.c: 374: if (bytesSent > nbBytesToSend) {
  3785  0003B8  0100               	movlb	0	; () banked
  3786  0003BA  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  3787  0003BC  0100               	movlb	0	; () banked
  3788  0003BE  5D98               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  3789  0003C0  0100               	movlb	0	; () banked
  3790  0003C2  5199               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  3791  0003C4  0A80               	xorlw	128
  3792  0003C6  6E50               	movwf	??_getByteToSend& (0+255),c
  3793  0003C8  0100               	movlb	0	; () banked
  3794  0003CA  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  3795  0003CC  0A80               	xorlw	128
  3796  0003CE  5850               	subwfb	??_getByteToSend& (0+255),w,c
  3797  0003D0  B0D8               	btfsc	status,0,c
  3798  0003D2  D004               	goto	i2l2369
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;ax.c: 376: clearState();
  3802  0003D4  ECFE  F005         	call	_clearState	;wreg free
  3803                           
  3804                           ;ax.c: 377: return 111;
  3805  0003D8  0E6F               	movlw	111
  3806  0003DA  0012               	return	
  3807  0003DC                     i2l2369:
  3808                           
  3809                           ;ax.c: 378: }
  3810                           ;ax.c: 380: return d;
  3811  0003DC  5058               	movf	getByteToSend@d,w,c
  3812  0003DE  0012               	return	
  3813  0003E0                     __end_of_getByteToSend:
  3814                           	opt stack 0
  3815                           pclatu	equ	0xFFB
  3816                           pclath	equ	0xFFA
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           postinc0	equ	0xFEE
  3825                           fsr0h	equ	0xFEA
  3826                           fsr0l	equ	0xFE9
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _writeAXData *****************
  3839 ;; Defined at:
  3840 ;;		line 226 in file "ax.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  id              2   23[COMRAM] int 
  3843 ;;  address         2   25[COMRAM] int 
  3844 ;;  data            2   27[COMRAM] int 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  packet         20   50[COMRAM] unsigned char [20]
  3847 ;;  result         20   30[COMRAM] unsigned char [20]
  3848 ;;  size            2   76[COMRAM] int 
  3849 ;;  error           2   74[COMRAM] int 
  3850 ;;  instruction     2   72[COMRAM] int 
  3851 ;;  length          2   70[COMRAM] int 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  2   23[COMRAM] int 
  3854 ;; Registers used:
  3855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3861 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3862 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3864 ;;      Totals:        55       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3865 ;;Total ram usage:       55 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    2
  3868 ;; This function calls:
  3869 ;;		_getAddressSize
  3870 ;;		_sendAX
  3871 ;; This function is called by:
  3872 ;;		_getByteToSend
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text21
  3877  0007A6                     __ptext21:
  3878                           	opt stack 0
  3879  0007A6                     _writeAXData:
  3880                           	opt stack 21
  3881                           
  3882                           ;ax.c: 227: int size = getAddressSize(address);
  3883                           
  3884                           ;incstack = 0
  3885  0007A6  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  3886  0007AA  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  3887  0007AE  EC18  F005         	call	_getAddressSize	;wreg free
  3888  0007B2  C001  F04D         	movff	?_getAddressSize,writeAXData@size
  3889  0007B6  C002  F04E         	movff	?_getAddressSize+1,writeAXData@size+1
  3890                           
  3891                           ;ax.c: 229: uint8_t packet[20];
  3892                           ;ax.c: 230: uint8_t result[20];
  3893                           ;ax.c: 231: packet[0] = 0xFF;
  3894  0007BA  6833               	setf	writeAXData@packet,c
  3895                           
  3896                           ;ax.c: 232: packet[1] = 0xFF;
  3897  0007BC  6834               	setf	writeAXData@packet+1,c
  3898                           
  3899                           ;ax.c: 233: packet[2] = id;
  3900  0007BE  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  3901                           
  3902                           ;ax.c: 234: int length = size + 3;
  3903  0007C2  0E03               	movlw	3
  3904  0007C4  244D               	addwf	writeAXData@size,w,c
  3905  0007C6  6E47               	movwf	writeAXData@length,c
  3906  0007C8  0E00               	movlw	0
  3907  0007CA  204E               	addwfc	writeAXData@size+1,w,c
  3908  0007CC  6E48               	movwf	writeAXData@length+1,c
  3909                           
  3910                           ;ax.c: 235: packet[3] = length;
  3911  0007CE  C047  F036         	movff	writeAXData@length,writeAXData@packet+3
  3912                           
  3913                           ;ax.c: 236: int instruction = 0x03;
  3914  0007D2  0E00               	movlw	0
  3915  0007D4  6E4A               	movwf	writeAXData@instruction+1,c
  3916  0007D6  0E03               	movlw	3
  3917  0007D8  6E49               	movwf	writeAXData@instruction,c
  3918                           
  3919                           ;ax.c: 237: packet[4] = instruction;
  3920  0007DA  C049  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  3921                           
  3922                           ;ax.c: 238: packet[5] = address;
  3923  0007DE  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  3924                           
  3925                           ;ax.c: 239: if (size == 1) {
  3926  0007E2  044D               	decf	writeAXData@size,w,c
  3927  0007E4  104E               	iorwf	writeAXData@size+1,w,c
  3928  0007E6  A4D8               	btfss	status,2,c
  3929  0007E8  D003               	goto	i2l520
  3930                           
  3931                           ;ax.c: 240: packet[6] = data;
  3932  0007EA  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  3933                           
  3934                           ;ax.c: 241: } else {
  3935  0007EE  D004               	goto	i2l2203
  3936  0007F0                     i2l520:
  3937                           
  3938                           ;ax.c: 242: packet[6] = data & 0xff;
  3939  0007F0  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  3940                           
  3941                           ;ax.c: 243: packet[7] = (data >> 8);
  3942  0007F4  501D               	movf	writeAXData@data+1,w,c
  3943  0007F6  6E3A               	movwf	writeAXData@packet+7,c
  3944  0007F8                     i2l2203:
  3945                           
  3946                           ;ax.c: 244: }
  3947                           ;ax.c: 247: int error = sendAX(packet, 6 + size, result, 0);
  3948  0007F8  0E33               	movlw	low writeAXData@packet
  3949  0007FA  6E02               	movwf	sendAX@buffer,c
  3950  0007FC  0E00               	movlw	high writeAXData@packet
  3951  0007FE  6E03               	movwf	sendAX@buffer+1,c
  3952  000800  0E06               	movlw	6
  3953  000802  244D               	addwf	writeAXData@size,w,c
  3954  000804  6E04               	movwf	sendAX@packetSize,c
  3955  000806  0E00               	movlw	0
  3956  000808  204E               	addwfc	writeAXData@size+1,w,c
  3957  00080A  6E05               	movwf	sendAX@packetSize+1,c
  3958  00080C  0E1F               	movlw	low writeAXData@result
  3959  00080E  6E06               	movwf	sendAX@result,c
  3960  000810  0E00               	movlw	high writeAXData@result
  3961  000812  6E07               	movwf	sendAX@result+1,c
  3962  000814  0E00               	movlw	0
  3963  000816  6E09               	movwf	sendAX@parametersToRead+1,c
  3964  000818  0E00               	movlw	0
  3965  00081A  6E08               	movwf	sendAX@parametersToRead,c
  3966  00081C  ECF0  F001         	call	_sendAX	;wreg free
  3967  000820  6E1E               	movwf	??_writeAXData& (0+255),c
  3968  000822  501E               	movf	??_writeAXData,w,c
  3969  000824  6E4B               	movwf	writeAXData@error,c
  3970  000826  6A4C               	clrf	writeAXData@error+1,c
  3971                           
  3972                           ;ax.c: 248: return error;
  3973  000828  C04B  F018         	movff	writeAXData@error,?_writeAXData
  3974  00082C  C04C  F019         	movff	writeAXData@error+1,?_writeAXData+1
  3975  000830  0012               	return	
  3976  000832                     __end_of_writeAXData:
  3977                           	opt stack 0
  3978                           pclatu	equ	0xFFB
  3979                           pclath	equ	0xFFA
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           postinc0	equ	0xFEE
  3988                           fsr0h	equ	0xFEA
  3989                           fsr0l	equ	0xFE9
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           fsr1h	equ	0xFE2
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _readAXData *****************
  4002 ;; Defined at:
  4003 ;;		line 199 in file "ax.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  id              2   23[COMRAM] int 
  4006 ;;  address         2   25[COMRAM] int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  packet         20   51[COMRAM] unsigned char [20]
  4009 ;;  result         20   29[COMRAM] unsigned char [20]
  4010 ;;  size            2   77[COMRAM] int 
  4011 ;;  instruction     2   75[COMRAM] int 
  4012 ;;  length          2   73[COMRAM] int 
  4013 ;;  nbParameters    2   71[COMRAM] int 
  4014 ;;  error           2   49[COMRAM] int 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  2   23[COMRAM] int 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4025 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4027 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;Total ram usage:       56 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    2
  4031 ;; This function calls:
  4032 ;;		_getAddressSize
  4033 ;;		_sendAX
  4034 ;; This function is called by:
  4035 ;;		_getByteToSend
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text22
  4040  00070E                     __ptext22:
  4041                           	opt stack 0
  4042  00070E                     _readAXData:
  4043                           	opt stack 21
  4044                           
  4045                           ;ax.c: 200: int size = getAddressSize(address);
  4046                           
  4047                           ;incstack = 0
  4048  00070E  C01A  F001         	movff	readAXData@address,getAddressSize@address
  4049  000712  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  4050  000716  EC18  F005         	call	_getAddressSize	;wreg free
  4051  00071A  C001  F04E         	movff	?_getAddressSize,readAXData@size
  4052  00071E  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  4053                           
  4054                           ;ax.c: 202: uint8_t packet[20];
  4055                           ;ax.c: 203: uint8_t result[20];
  4056                           ;ax.c: 204: packet[0] = 0xFF;
  4057  000722  6834               	setf	readAXData@packet,c
  4058                           
  4059                           ;ax.c: 205: packet[1] = 0xFF;
  4060  000724  6835               	setf	readAXData@packet+1,c
  4061                           
  4062                           ;ax.c: 206: packet[2] = id;
  4063  000726  C018  F036         	movff	readAXData@id,readAXData@packet+2
  4064                           
  4065                           ;ax.c: 207: int nbParameters = 2;
  4066  00072A  0E00               	movlw	0
  4067  00072C  6E49               	movwf	readAXData@nbParameters+1,c
  4068  00072E  0E02               	movlw	2
  4069  000730  6E48               	movwf	readAXData@nbParameters,c
  4070                           
  4071                           ;ax.c: 208: int length = nbParameters + 2;
  4072  000732  0E02               	movlw	2
  4073  000734  2448               	addwf	readAXData@nbParameters,w,c
  4074  000736  6E4A               	movwf	readAXData@length,c
  4075  000738  0E00               	movlw	0
  4076  00073A  2049               	addwfc	readAXData@nbParameters+1,w,c
  4077  00073C  6E4B               	movwf	readAXData@length+1,c
  4078                           
  4079                           ;ax.c: 209: packet[3] = length;
  4080  00073E  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  4081                           
  4082                           ;ax.c: 210: int instruction = 0x02;
  4083  000742  0E00               	movlw	0
  4084  000744  6E4D               	movwf	readAXData@instruction+1,c
  4085  000746  0E02               	movlw	2
  4086  000748  6E4C               	movwf	readAXData@instruction,c
  4087                           
  4088                           ;ax.c: 211: packet[4] = instruction;
  4089  00074A  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  4090                           
  4091                           ;ax.c: 212: packet[5] = address;
  4092  00074E  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  4093                           
  4094                           ;ax.c: 213: packet[6] = size;
  4095  000752  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  4096                           
  4097                           ;ax.c: 216: int error = sendAX(packet, 7, result, 1);
  4098  000756  0E34               	movlw	low readAXData@packet
  4099  000758  6E02               	movwf	sendAX@buffer,c
  4100  00075A  0E00               	movlw	high readAXData@packet
  4101  00075C  6E03               	movwf	sendAX@buffer+1,c
  4102  00075E  0E00               	movlw	0
  4103  000760  6E05               	movwf	sendAX@packetSize+1,c
  4104  000762  0E07               	movlw	7
  4105  000764  6E04               	movwf	sendAX@packetSize,c
  4106  000766  0E1E               	movlw	low readAXData@result
  4107  000768  6E06               	movwf	sendAX@result,c
  4108  00076A  0E00               	movlw	high readAXData@result
  4109  00076C  6E07               	movwf	sendAX@result+1,c
  4110  00076E  0E00               	movlw	0
  4111  000770  6E09               	movwf	sendAX@parametersToRead+1,c
  4112  000772  0E01               	movlw	1
  4113  000774  6E08               	movwf	sendAX@parametersToRead,c
  4114  000776  ECF0  F001         	call	_sendAX	;wreg free
  4115  00077A  6E1C               	movwf	??_readAXData& (0+255),c
  4116  00077C  501C               	movf	??_readAXData,w,c
  4117  00077E  6E32               	movwf	readAXData@error,c
  4118  000780  6A33               	clrf	readAXData@error+1,c
  4119                           
  4120                           ;ax.c: 217: if (size == 1) {
  4121  000782  044E               	decf	readAXData@size,w,c
  4122  000784  104F               	iorwf	readAXData@size+1,w,c
  4123  000786  A4D8               	btfss	status,2,c
  4124  000788  D004               	goto	i2l2175
  4125                           
  4126                           ;ax.c: 219: return result[5];
  4127  00078A  C023  F018         	movff	readAXData@result+5,?_readAXData
  4128  00078E  6A19               	clrf	?_readAXData+1,c
  4129                           
  4130                           ;ax.c: 220: } else {
  4131  000790  0012               	return	
  4132  000792                     i2l2175:
  4133                           
  4134                           ;ax.c: 222: return result[5] + result[6]*256;
  4135  000792  5024               	movf	readAXData@result+6,w,c
  4136  000794  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  4137  000796  6A1C               	clrf	??_readAXData& (0+255),c
  4138  000798  5023               	movf	readAXData@result+5,w,c
  4139  00079A  241C               	addwf	??_readAXData,w,c
  4140  00079C  6E18               	movwf	?_readAXData,c
  4141  00079E  0E00               	movlw	0
  4142  0007A0  201D               	addwfc	??_readAXData+1,w,c
  4143  0007A2  6E19               	movwf	?_readAXData+1,c
  4144  0007A4  0012               	return	
  4145  0007A6                     __end_of_readAXData:
  4146                           	opt stack 0
  4147                           pclatu	equ	0xFFB
  4148                           pclath	equ	0xFFA
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           postinc0	equ	0xFEE
  4157                           fsr0h	equ	0xFEA
  4158                           fsr0l	equ	0xFE9
  4159                           wreg	equ	0xFE8
  4160                           postdec1	equ	0xFE5
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _getAddressSize *****************
  4171 ;; Defined at:
  4172 ;;		line 24 in file "ax.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;  address         2    0[COMRAM] int 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  2    0[COMRAM] int 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4189 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4190 ;;Total ram usage:        4 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_readAXData
  4196 ;;		_writeAXData
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text23
  4201  000A30                     __ptext23:
  4202                           	opt stack 0
  4203  000A30                     _getAddressSize:
  4204                           	opt stack 22
  4205                           
  4206                           ;ax.c: 25: switch (address) {
  4207                           
  4208                           ;incstack = 0
  4209  000A30  D00A               	goto	i2l2043
  4210  000A32                     i2l2033:
  4211                           
  4212                           ;ax.c: 27: case 6:
  4213                           ;ax.c: 28: case 8:
  4214                           ;ax.c: 29: case 14:
  4215                           ;ax.c: 30: case 20:
  4216                           ;ax.c: 31: case 22:
  4217                           ;ax.c: 32: case 30:
  4218                           ;ax.c: 33: case 32:
  4219                           ;ax.c: 34: case 34:
  4220                           ;ax.c: 35: case 36:
  4221                           ;ax.c: 36: case 38:
  4222                           ;ax.c: 37: case 40:
  4223                           ;ax.c: 38: case 48:
  4224                           ;ax.c: 39: return 2;
  4225  000A32  0E00               	movlw	0
  4226  000A34  6E02               	movwf	?_getAddressSize+1,c
  4227  000A36  0E02               	movlw	2
  4228  000A38  6E01               	movwf	?_getAddressSize,c
  4229  000A3A  0012               	return	
  4230  000A3C                     i2l2037:
  4231                           
  4232                           ;ax.c: 41: return 1;
  4233  000A3C  0E00               	movlw	0
  4234  000A3E  6E02               	movwf	?_getAddressSize+1,c
  4235  000A40  0E01               	movlw	1
  4236  000A42  6E01               	movwf	?_getAddressSize,c
  4237                           
  4238                           ;ax.c: 42: }
  4239  000A44  0012               	return	
  4240  000A46                     i2l2043:
  4241  000A46  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  4242  000A4A  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  4243                           
  4244                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4245                           ; Switch size 1, requested type "space"
  4246                           ; Number of cases is 1, Range of values is 0 to 0
  4247                           ; switch strategies available:
  4248                           ; Name         Instructions Cycles
  4249                           ; simple_byte            4     3 (average)
  4250                           ;	Chosen strategy is simple_byte
  4251  000A4E  5004               	movf	??_getAddressSize+1,w,c
  4252  000A50  0A00               	xorlw	0	; case 0
  4253  000A52  A4D8               	btfss	status,2,c
  4254  000A54  D7F3               	goto	i2l2037
  4255                           
  4256                           ; Switch size 1, requested type "space"
  4257                           ; Number of cases is 13, Range of values is 0 to 48
  4258                           ; switch strategies available:
  4259                           ; Name         Instructions Cycles
  4260                           ; simple_byte           40    21 (average)
  4261                           ;	Chosen strategy is simple_byte
  4262  000A56  5003               	movf	??_getAddressSize,w,c
  4263  000A58  0A00               	xorlw	0	; case 0
  4264  000A5A  B4D8               	btfsc	status,2,c
  4265  000A5C  D7EA               	goto	i2l2033
  4266  000A5E  0A06               	xorlw	6	; case 6
  4267  000A60  B4D8               	btfsc	status,2,c
  4268  000A62  D7E7               	goto	i2l2033
  4269  000A64  0A0E               	xorlw	14	; case 8
  4270  000A66  B4D8               	btfsc	status,2,c
  4271  000A68  D7E4               	goto	i2l2033
  4272  000A6A  0A06               	xorlw	6	; case 14
  4273  000A6C  B4D8               	btfsc	status,2,c
  4274  000A6E  D7E1               	goto	i2l2033
  4275  000A70  0A1A               	xorlw	26	; case 20
  4276  000A72  B4D8               	btfsc	status,2,c
  4277  000A74  D7DE               	goto	i2l2033
  4278  000A76  0A02               	xorlw	2	; case 22
  4279  000A78  B4D8               	btfsc	status,2,c
  4280  000A7A  D7DB               	goto	i2l2033
  4281  000A7C  0A08               	xorlw	8	; case 30
  4282  000A7E  B4D8               	btfsc	status,2,c
  4283  000A80  D7D8               	goto	i2l2033
  4284  000A82  0A3E               	xorlw	62	; case 32
  4285  000A84  B4D8               	btfsc	status,2,c
  4286  000A86  D7D5               	goto	i2l2033
  4287  000A88  0A02               	xorlw	2	; case 34
  4288  000A8A  B4D8               	btfsc	status,2,c
  4289  000A8C  D7D2               	goto	i2l2033
  4290  000A8E  0A06               	xorlw	6	; case 36
  4291  000A90  B4D8               	btfsc	status,2,c
  4292  000A92  D7CF               	goto	i2l2033
  4293  000A94  0A02               	xorlw	2	; case 38
  4294  000A96  B4D8               	btfsc	status,2,c
  4295  000A98  D7CC               	goto	i2l2033
  4296  000A9A  0A0E               	xorlw	14	; case 40
  4297  000A9C  B4D8               	btfsc	status,2,c
  4298  000A9E  D7C9               	goto	i2l2033
  4299  000AA0  0A18               	xorlw	24	; case 48
  4300  000AA2  B4D8               	btfsc	status,2,c
  4301  000AA4  D7C6               	goto	i2l2033
  4302  000AA6  D7CA               	goto	i2l2037
  4303  000AA8                     __end_of_getAddressSize:
  4304                           	opt stack 0
  4305                           pclatu	equ	0xFFB
  4306                           pclath	equ	0xFFA
  4307                           tblptru	equ	0xFF8
  4308                           tblptrh	equ	0xFF7
  4309                           tblptrl	equ	0xFF6
  4310                           tablat	equ	0xFF5
  4311                           prodh	equ	0xFF4
  4312                           prodl	equ	0xFF3
  4313                           intcon	equ	0xFF2
  4314                           postinc0	equ	0xFEE
  4315                           fsr0h	equ	0xFEA
  4316                           fsr0l	equ	0xFE9
  4317                           wreg	equ	0xFE8
  4318                           postdec1	equ	0xFE5
  4319                           fsr1h	equ	0xFE2
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _pingAX *****************
  4329 ;; Defined at:
  4330 ;;		line 182 in file "ax.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  id              2   23[COMRAM] int 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  packet         20   46[COMRAM] unsigned char [20]
  4335 ;;  result         20   26[COMRAM] unsigned char [20]
  4336 ;;  error           2   72[COMRAM] int 
  4337 ;;  instruction     2   70[COMRAM] int 
  4338 ;;  length          2   68[COMRAM] int 
  4339 ;;  nbParameters    2   66[COMRAM] int 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2   23[COMRAM] int 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4353 ;;Total ram usage:       51 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    2
  4356 ;; This function calls:
  4357 ;;		_sendAX
  4358 ;; This function is called by:
  4359 ;;		_getByteToSend
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text24
  4364  000AA8                     __ptext24:
  4365                           	opt stack 0
  4366  000AA8                     _pingAX:
  4367                           	opt stack 21
  4368                           
  4369                           ;ax.c: 183: uint8_t packet[20];
  4370                           ;ax.c: 184: uint8_t result[20];
  4371                           ;ax.c: 185: packet[0] = 0xFF;
  4372                           
  4373                           ;incstack = 0
  4374  000AA8  682F               	setf	pingAX@packet,c
  4375                           
  4376                           ;ax.c: 186: packet[1] = 0xFF;
  4377  000AAA  6830               	setf	pingAX@packet+1,c
  4378                           
  4379                           ;ax.c: 187: packet[2] = id;
  4380  000AAC  C018  F031         	movff	pingAX@id,pingAX@packet+2
  4381                           
  4382                           ;ax.c: 188: int nbParameters = 0;
  4383  000AB0  0E00               	movlw	0
  4384  000AB2  6E44               	movwf	pingAX@nbParameters+1,c
  4385  000AB4  0E00               	movlw	0
  4386  000AB6  6E43               	movwf	pingAX@nbParameters,c
  4387                           
  4388                           ;ax.c: 189: int length = nbParameters + 2;
  4389  000AB8  0E02               	movlw	2
  4390  000ABA  2443               	addwf	pingAX@nbParameters,w,c
  4391  000ABC  6E45               	movwf	pingAX@length,c
  4392  000ABE  0E00               	movlw	0
  4393  000AC0  2044               	addwfc	pingAX@nbParameters+1,w,c
  4394  000AC2  6E46               	movwf	pingAX@length+1,c
  4395                           
  4396                           ;ax.c: 190: packet[3] = length;
  4397  000AC4  C045  F032         	movff	pingAX@length,pingAX@packet+3
  4398                           
  4399                           ;ax.c: 191: int instruction = 0x01;
  4400  000AC8  0E00               	movlw	0
  4401  000ACA  6E48               	movwf	pingAX@instruction+1,c
  4402  000ACC  0E01               	movlw	1
  4403  000ACE  6E47               	movwf	pingAX@instruction,c
  4404                           
  4405                           ;ax.c: 192: packet[4] = instruction;
  4406  000AD0  C047  F033         	movff	pingAX@instruction,pingAX@packet+4
  4407                           
  4408                           ;ax.c: 195: int error = sendAX(packet, 5, result, 0);
  4409  000AD4  0E2F               	movlw	low pingAX@packet
  4410  000AD6  6E02               	movwf	sendAX@buffer,c
  4411  000AD8  0E00               	movlw	high pingAX@packet
  4412  000ADA  6E03               	movwf	sendAX@buffer+1,c
  4413  000ADC  0E00               	movlw	0
  4414  000ADE  6E05               	movwf	sendAX@packetSize+1,c
  4415  000AE0  0E05               	movlw	5
  4416  000AE2  6E04               	movwf	sendAX@packetSize,c
  4417  000AE4  0E1B               	movlw	low pingAX@result
  4418  000AE6  6E06               	movwf	sendAX@result,c
  4419  000AE8  0E00               	movlw	high pingAX@result
  4420  000AEA  6E07               	movwf	sendAX@result+1,c
  4421  000AEC  0E00               	movlw	0
  4422  000AEE  6E09               	movwf	sendAX@parametersToRead+1,c
  4423  000AF0  0E00               	movlw	0
  4424  000AF2  6E08               	movwf	sendAX@parametersToRead,c
  4425  000AF4  ECF0  F001         	call	_sendAX	;wreg free
  4426  000AF8  6E1A               	movwf	??_pingAX& (0+255),c
  4427  000AFA  501A               	movf	??_pingAX,w,c
  4428  000AFC  6E49               	movwf	pingAX@error,c
  4429  000AFE  6A4A               	clrf	pingAX@error+1,c
  4430                           
  4431                           ;ax.c: 196: return error;
  4432  000B00  C049  F018         	movff	pingAX@error,?_pingAX
  4433  000B04  C04A  F019         	movff	pingAX@error+1,?_pingAX+1
  4434  000B08  0012               	return	
  4435  000B0A                     __end_of_pingAX:
  4436                           	opt stack 0
  4437                           pclatu	equ	0xFFB
  4438                           pclath	equ	0xFFA
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           intcon	equ	0xFF2
  4446                           postinc0	equ	0xFEE
  4447                           fsr0h	equ	0xFEA
  4448                           fsr0l	equ	0xFE9
  4449                           wreg	equ	0xFE8
  4450                           postdec1	equ	0xFE5
  4451                           fsr1h	equ	0xFE2
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _sendAX *****************
  4461 ;; Defined at:
  4462 ;;		line 131 in file "ax.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  4465 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  4466 ;;  packetSize      2    3[COMRAM] int 
  4467 ;;  result          2    5[COMRAM] PTR unsigned char 
  4468 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  4469 ;;  parametersTo    2    7[COMRAM] int 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  i               2   20[COMRAM] int 
  4472 ;;  i               2   16[COMRAM] int 
  4473 ;;  i               2   14[COMRAM] int 
  4474 ;;  i               2   12[COMRAM] int 
  4475 ;;  r0              2   18[COMRAM] int 
  4476 ;;  stop            2   10[COMRAM] int 
  4477 ;;  checksum        1   22[COMRAM] unsigned char 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      unsigned char 
  4480 ;; Registers used:
  4481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4487 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4488 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4490 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4491 ;;Total ram usage:       22 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    1
  4494 ;; This function calls:
  4495 ;;		_EUSART1_Read
  4496 ;;		_EUSART1_Write
  4497 ;; This function is called by:
  4498 ;;		_pingAX
  4499 ;;		_readAXData
  4500 ;;		_writeAXData
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text25
  4505  0003E0                     __ptext25:
  4506                           	opt stack 0
  4507  0003E0                     _sendAX:
  4508                           	opt stack 21
  4509                           
  4510                           ;ax.c: 132: uint8_t checksum = 0;
  4511                           
  4512                           ;incstack = 0
  4513  0003E0  0E00               	movlw	0
  4514  0003E2  6E17               	movwf	sendAX@checksum,c
  4515                           
  4516                           ;ax.c: 134: for (int i = 2; i < packetSize; i++) {
  4517  0003E4  0E00               	movlw	0
  4518  0003E6  6E0E               	movwf	sendAX@i+1,c
  4519  0003E8  0E02               	movlw	2
  4520  0003EA  6E0D               	movwf	sendAX@i,c
  4521  0003EC  D00A               	goto	i2l2055
  4522  0003EE                     i2l2051:
  4523                           
  4524                           ;ax.c: 135: checksum += buffer[i];
  4525  0003EE  500D               	movf	sendAX@i,w,c
  4526  0003F0  2402               	addwf	sendAX@buffer,w,c
  4527  0003F2  6ED9               	movwf	fsr2l,c
  4528  0003F4  500E               	movf	sendAX@i+1,w,c
  4529  0003F6  2003               	addwfc	sendAX@buffer+1,w,c
  4530  0003F8  6EDA               	movwf	fsr2h,c
  4531  0003FA  50DF               	movf	indf2,w,c
  4532  0003FC  2617               	addwf	sendAX@checksum,f,c
  4533  0003FE  4A0D               	infsnz	sendAX@i,f,c
  4534  000400  2A0E               	incf	sendAX@i+1,f,c
  4535  000402                     i2l2055:
  4536  000402  5004               	movf	sendAX@packetSize,w,c
  4537  000404  5C0D               	subwf	sendAX@i,w,c
  4538  000406  500E               	movf	sendAX@i+1,w,c
  4539  000408  0A80               	xorlw	128
  4540  00040A  6E0A               	movwf	??_sendAX& (0+255),c
  4541  00040C  5005               	movf	sendAX@packetSize+1,w,c
  4542  00040E  0A80               	xorlw	128
  4543  000410  580A               	subwfb	??_sendAX& (0+255),w,c
  4544  000412  A0D8               	btfss	status,0,c
  4545  000414  D7EC               	goto	i2l2051
  4546                           
  4547                           ;ax.c: 136: }
  4548                           ;ax.c: 137: checksum = ~checksum;
  4549  000416  1E17               	comf	sendAX@checksum,f,c
  4550                           
  4551                           ;ax.c: 139: do { LATD4 = 1; } while(0);
  4552  000418  888C               	bsf	3980,4,c	;volatile
  4553                           
  4554                           ;ax.c: 140: for (int i = 0; i < packetSize; i++) {
  4555  00041A  0E00               	movlw	0
  4556  00041C  6E10               	movwf	sendAX@i_1066+1,c
  4557  00041E  0E00               	movlw	0
  4558  000420  6E0F               	movwf	sendAX@i_1066,c
  4559  000422  D00B               	goto	i2l2067
  4560  000424                     i2l2063:
  4561                           
  4562                           ;ax.c: 141: EUSART1_Write(buffer[i]);
  4563  000424  500F               	movf	sendAX@i_1066,w,c
  4564  000426  2402               	addwf	sendAX@buffer,w,c
  4565  000428  6ED9               	movwf	fsr2l,c
  4566  00042A  5010               	movf	sendAX@i_1066+1,w,c
  4567  00042C  2003               	addwfc	sendAX@buffer+1,w,c
  4568  00042E  6EDA               	movwf	fsr2h,c
  4569  000430  50DF               	movf	indf2,w,c
  4570  000432  ECBD  F006         	call	_EUSART1_Write
  4571  000436  4A0F               	infsnz	sendAX@i_1066,f,c
  4572  000438  2A10               	incf	sendAX@i_1066+1,f,c
  4573  00043A                     i2l2067:
  4574  00043A  5004               	movf	sendAX@packetSize,w,c
  4575  00043C  5C0F               	subwf	sendAX@i_1066,w,c
  4576  00043E  5010               	movf	sendAX@i_1066+1,w,c
  4577  000440  0A80               	xorlw	128
  4578  000442  6E0A               	movwf	??_sendAX& (0+255),c
  4579  000444  5005               	movf	sendAX@packetSize+1,w,c
  4580  000446  0A80               	xorlw	128
  4581  000448  580A               	subwfb	??_sendAX& (0+255),w,c
  4582  00044A  A0D8               	btfss	status,0,c
  4583  00044C  D7EB               	goto	i2l2063
  4584                           
  4585                           ;ax.c: 142: }
  4586                           ;ax.c: 143: EUSART1_Write(checksum);
  4587  00044E  5017               	movf	sendAX@checksum,w,c
  4588  000450  ECBD  F006         	call	_EUSART1_Write
  4589                           
  4590                           ;ax.c: 144: _delay((unsigned long)((100)*(64000000/4000000.0)));
  4591  000454  0EE4               	movlw	228
  4592  000456                     i2u123_47:
  4593  000456  D000               	nop2	
  4594  000458  D000               	nop2	
  4595  00045A  2EE8               	decfsz	wreg,f,c
  4596  00045C  D7FC               	goto	i2u123_47
  4597  00045E  D000               	nop2		;nop
  4598  000460  D000               	nop2		;nop
  4599                           
  4600                           ;ax.c: 145: do { LATD4 = 0; } while(0);
  4601  000462  988C               	bcf	3980,4,c	;volatile
  4602                           
  4603                           ;ax.c: 161: int stop = 6 + parametersToRead;
  4604  000464  0E06               	movlw	6
  4605  000466  2408               	addwf	sendAX@parametersToRead,w,c
  4606  000468  6E0B               	movwf	sendAX@stop,c
  4607  00046A  0E00               	movlw	0
  4608  00046C  2009               	addwfc	sendAX@parametersToRead+1,w,c
  4609  00046E  6E0C               	movwf	sendAX@stop+1,c
  4610                           
  4611                           ;ax.c: 163: for (int i = 0; i < stop; i++) {
  4612  000470  0E00               	movlw	0
  4613  000472  6E12               	movwf	sendAX@i_1069+1,c
  4614  000474  0E00               	movlw	0
  4615  000476  6E11               	movwf	sendAX@i_1069,c
  4616  000478  D00A               	goto	i2l2083
  4617  00047A                     i2l2079:
  4618                           
  4619                           ;ax.c: 164: result[i] = 122;
  4620  00047A  5011               	movf	sendAX@i_1069,w,c
  4621  00047C  2406               	addwf	sendAX@result,w,c
  4622  00047E  6ED9               	movwf	fsr2l,c
  4623  000480  5012               	movf	sendAX@i_1069+1,w,c
  4624  000482  2007               	addwfc	sendAX@result+1,w,c
  4625  000484  6EDA               	movwf	fsr2h,c
  4626  000486  0E7A               	movlw	122
  4627  000488  6EDF               	movwf	indf2,c
  4628  00048A  4A11               	infsnz	sendAX@i_1069,f,c
  4629  00048C  2A12               	incf	sendAX@i_1069+1,f,c
  4630  00048E                     i2l2083:
  4631  00048E  500B               	movf	sendAX@stop,w,c
  4632  000490  5C11               	subwf	sendAX@i_1069,w,c
  4633  000492  5012               	movf	sendAX@i_1069+1,w,c
  4634  000494  0A80               	xorlw	128
  4635  000496  6E0A               	movwf	??_sendAX& (0+255),c
  4636  000498  500C               	movf	sendAX@stop+1,w,c
  4637  00049A  0A80               	xorlw	128
  4638  00049C  580A               	subwfb	??_sendAX& (0+255),w,c
  4639  00049E  A0D8               	btfss	status,0,c
  4640  0004A0  D7EC               	goto	i2l2079
  4641                           
  4642                           ;ax.c: 165: }
  4643                           ;ax.c: 167: int r0 = EUSART1_Read();
  4644  0004A2  ECB4  F006         	call	_EUSART1_Read	;wreg free
  4645  0004A6  D002               	goto	L3
  4646  0004A8                     i2l2087:
  4647                           
  4648                           ;ax.c: 169: r0 = EUSART1_Read();
  4649  0004A8  ECB4  F006         	call	_EUSART1_Read	;wreg free
  4650  0004AC                     L3:
  4651  0004AC  6E0A               	movwf	??_sendAX& (0+255),c
  4652  0004AE  500A               	movf	??_sendAX,w,c
  4653  0004B0  6E13               	movwf	sendAX@r0,c
  4654  0004B2  6A14               	clrf	sendAX@r0+1,c
  4655  0004B4  2813               	incf	sendAX@r0,w,c
  4656  0004B6  1014               	iorwf	sendAX@r0+1,w,c
  4657  0004B8  A4D8               	btfss	status,2,c
  4658  0004BA  D7F6               	goto	i2l2087
  4659                           
  4660                           ;ax.c: 170: }
  4661                           ;ax.c: 171: result[0] = r0;
  4662  0004BC  C006  FFD9         	movff	sendAX@result,fsr2l
  4663  0004C0  C007  FFDA         	movff	sendAX@result+1,fsr2h
  4664  0004C4  C013  FFDF         	movff	sendAX@r0,indf2
  4665                           
  4666                           ;ax.c: 172: for (int i = 1; i < stop; i++) {
  4667  0004C8  0E00               	movlw	0
  4668  0004CA  6E16               	movwf	sendAX@i_1072+1,c
  4669  0004CC  0E01               	movlw	1
  4670  0004CE  6E15               	movwf	sendAX@i_1072,c
  4671  0004D0  D00B               	goto	i2l2099
  4672  0004D2                     i2l2095:
  4673                           
  4674                           ;ax.c: 173: result[i] = EUSART1_Read();
  4675  0004D2  5015               	movf	sendAX@i_1072,w,c
  4676  0004D4  2406               	addwf	sendAX@result,w,c
  4677  0004D6  6ED9               	movwf	fsr2l,c
  4678  0004D8  5016               	movf	sendAX@i_1072+1,w,c
  4679  0004DA  2007               	addwfc	sendAX@result+1,w,c
  4680  0004DC  6EDA               	movwf	fsr2h,c
  4681  0004DE  ECB4  F006         	call	_EUSART1_Read	;wreg free
  4682  0004E2  6EDF               	movwf	indf2,c
  4683  0004E4  4A15               	infsnz	sendAX@i_1072,f,c
  4684  0004E6  2A16               	incf	sendAX@i_1072+1,f,c
  4685  0004E8                     i2l2099:
  4686  0004E8  500B               	movf	sendAX@stop,w,c
  4687  0004EA  5C15               	subwf	sendAX@i_1072,w,c
  4688  0004EC  5016               	movf	sendAX@i_1072+1,w,c
  4689  0004EE  0A80               	xorlw	128
  4690  0004F0  6E0A               	movwf	??_sendAX& (0+255),c
  4691  0004F2  500C               	movf	sendAX@stop+1,w,c
  4692  0004F4  0A80               	xorlw	128
  4693  0004F6  580A               	subwfb	??_sendAX& (0+255),w,c
  4694  0004F8  A0D8               	btfss	status,0,c
  4695  0004FA  D7EB               	goto	i2l2095
  4696                           
  4697                           ;ax.c: 174: }
  4698                           ;ax.c: 177: _delay((unsigned long)((200)*(64000000/4000000.0)));
  4699  0004FC  0E05               	movlw	5
  4700  0004FE  6E0A               	movwf	??_sendAX& (0+255),c
  4701  000500  0E26               	movlw	38
  4702  000502                     i2u124_47:
  4703  000502  2EE8               	decfsz	wreg,f,c
  4704  000504  D7FE               	goto	i2u124_47
  4705  000506  2E0A               	decfsz	??_sendAX& (0+255),f,c
  4706  000508  D7FC               	goto	i2u124_47
  4707  00050A  D000               	nop2	
  4708                           
  4709                           ;ax.c: 178: return result[4];
  4710  00050C  EE20 F004          	lfsr	2,4
  4711  000510  5006               	movf	sendAX@result,w,c
  4712  000512  26D9               	addwf	fsr2l,f,c
  4713  000514  5007               	movf	sendAX@result+1,w,c
  4714  000516  22DA               	addwfc	fsr2h,f,c
  4715  000518  50DF               	movf	indf2,w,c
  4716  00051A  0012               	return	
  4717  00051C                     __end_of_sendAX:
  4718                           	opt stack 0
  4719                           pclatu	equ	0xFFB
  4720                           pclath	equ	0xFFA
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           postinc0	equ	0xFEE
  4729                           fsr0h	equ	0xFEA
  4730                           fsr0l	equ	0xFE9
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function _EUSART1_Write *****************
  4743 ;; Defined at:
  4744 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  txData          1    wreg     unsigned char 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  txData          1    0[COMRAM] unsigned char 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;Total ram usage:        1 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_sendAX
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text26
  4772  000D7A                     __ptext26:
  4773                           	opt stack 0
  4774  000D7A                     _EUSART1_Write:
  4775                           	opt stack 21
  4776                           
  4777                           ;incstack = 0
  4778                           ;EUSART1_Write@txData stored from wreg
  4779  000D7A  6E01               	movwf	EUSART1_Write@txData,c
  4780  000D7C                     i2l90:
  4781  000D7C  A89E               	btfss	3998,4,c	;volatile
  4782  000D7E  D7FE               	goto	i2l90
  4783                           
  4784                           ;eusart1.c: 101: }
  4785                           ;eusart1.c: 103: TXREG1 = txData;
  4786  000D80  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  4787  000D84  0012               	return		;funcret
  4788  000D86                     __end_of_EUSART1_Write:
  4789                           	opt stack 0
  4790                           pclatu	equ	0xFFB
  4791                           pclath	equ	0xFFA
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           postinc0	equ	0xFEE
  4800                           fsr0h	equ	0xFEA
  4801                           fsr0l	equ	0xFE9
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           indf2	equ	0xFDF
  4807                           postinc2	equ	0xFDE
  4808                           postdec2	equ	0xFDD
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _EUSART1_Read *****************
  4814 ;; Defined at:
  4815 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      unsigned char 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_sendAX
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text27
  4843  000D68                     __ptext27:
  4844                           	opt stack 0
  4845  000D68                     _EUSART1_Read:
  4846                           	opt stack 21
  4847                           
  4848                           ;eusart1.c: 80: RCSTA1bits.SREN = 1;
  4849                           
  4850                           ;incstack = 0
  4851  000D68  8AAB               	bsf	4011,5,c	;volatile
  4852  000D6A                     i2l83:
  4853  000D6A  AA9E               	btfss	3998,5,c	;volatile
  4854  000D6C  D7FE               	goto	i2l83
  4855                           
  4856                           ;eusart1.c: 83: }
  4857                           ;eusart1.c: 86: if(1 == RCSTA1bits.OERR)
  4858  000D6E  A2AB               	btfss	4011,1,c	;volatile
  4859  000D70  D002               	goto	i2l2023
  4860                           
  4861                           ;eusart1.c: 87: {
  4862                           ;eusart1.c: 90: RCSTA1bits.SPEN = 0;
  4863  000D72  9EAB               	bcf	4011,7,c	;volatile
  4864                           
  4865                           ;eusart1.c: 91: RCSTA1bits.SPEN = 1;
  4866  000D74  8EAB               	bsf	4011,7,c	;volatile
  4867  000D76                     i2l2023:
  4868                           
  4869                           ;eusart1.c: 92: }
  4870                           ;eusart1.c: 94: return RCREG1;
  4871  000D76  50AE               	movf	4014,w,c	;volatile
  4872  000D78  0012               	return	
  4873  000D7A                     __end_of_EUSART1_Read:
  4874                           	opt stack 0
  4875                           pclatu	equ	0xFFB
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           postinc0	equ	0xFEE
  4885                           fsr0h	equ	0xFEA
  4886                           fsr0l	equ	0xFE9
  4887                           wreg	equ	0xFE8
  4888                           postdec1	equ	0xFE5
  4889                           fsr1h	equ	0xFE2
  4890                           fsr1l	equ	0xFE1
  4891                           indf2	equ	0xFDF
  4892                           postinc2	equ	0xFDE
  4893                           postdec2	equ	0xFDD
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _clearState *****************
  4899 ;; Defined at:
  4900 ;;		line 307 in file "ax.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, status,2
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_getByteToSend
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text28
  4928  000BFC                     __ptext28:
  4929                           	opt stack 0
  4930  000BFC                     _clearState:
  4931                           	opt stack 23
  4932                           
  4933                           ;ax.c: 308: bytesSent = 0;
  4934                           
  4935                           ;incstack = 0
  4936  000BFC  0E00               	movlw	0
  4937  000BFE  0100               	movlb	0	; () banked
  4938  000C00  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  4939  000C02  0E00               	movlw	0
  4940  000C04  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;ax.c: 309: currentCommand = -1;
  4944  000C06  0100               	movlb	0	; () banked
  4945  000C08  69D0               	setf	_currentCommand& (0+255),b	;volatile
  4946                           
  4947                           ;ax.c: 310: parameter1 = 0;
  4948  000C0A  0E00               	movlw	0
  4949  000C0C  0100               	movlb	0	; () banked
  4950  000C0E  6FA0               	movwf	_parameter1& (0+255),b	;volatile
  4951                           
  4952                           ;ax.c: 311: parameter2 = 0;
  4953  000C10  0E00               	movlw	0
  4954  000C12  0100               	movlb	0	; () banked
  4955  000C14  6FA1               	movwf	_parameter2& (0+255),b	;volatile
  4956                           
  4957                           ;ax.c: 312: parameter3 = 0;
  4958  000C16  0E00               	movlw	0
  4959  000C18  0100               	movlb	0	; () banked
  4960  000C1A  6FA2               	movwf	_parameter3& (0+255),b	;volatile
  4961                           
  4962                           ;ax.c: 313: parameter4 = 0;
  4963  000C1C  0E00               	movlw	0
  4964  000C1E  0100               	movlb	0	; () banked
  4965  000C20  6FA3               	movwf	_parameter4& (0+255),b	;volatile
  4966                           
  4967                           ;ax.c: 314: parameter5 = 0;
  4968  000C22  0E00               	movlw	0
  4969  000C24  0100               	movlb	0	; () banked
  4970  000C26  6FA4               	movwf	_parameter5& (0+255),b	;volatile
  4971                           
  4972                           ;ax.c: 315: parameter6 = 0;
  4973  000C28  0E00               	movlw	0
  4974  000C2A  0100               	movlb	0	; () banked
  4975  000C2C  6FA5               	movwf	_parameter6& (0+255),b	;volatile
  4976                           
  4977                           ;ax.c: 316: readIndex = 0;
  4978  000C2E  0E00               	movlw	0
  4979  000C30  0100               	movlb	0	; () banked
  4980  000C32  6F9B               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4981  000C34  0E00               	movlw	0
  4982  000C36  6F9A               	movwf	_readIndex& (0+255),b	;volatile
  4983                           
  4984                           ; BSR set to: 0
  4985  000C38  0012               	return		;funcret
  4986  000C3A                     __end_of_clearState:
  4987                           	opt stack 0
  4988                           pclatu	equ	0xFFB
  4989                           pclath	equ	0xFFA
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           postinc0	equ	0xFEE
  4998                           fsr0h	equ	0xFEA
  4999                           fsr0l	equ	0xFE9
  5000                           wreg	equ	0xFE8
  5001                           postdec1	equ	0xFE5
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _ADC_ISR *****************
  5012 ;; Defined at:
  5013 ;;		line 127 in file "mcc_generated_files/adc.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		None
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_INTERRUPT_InterruptManager
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text29
  5041  000D92                     __ptext29:
  5042                           	opt stack 0
  5043  000D92                     _ADC_ISR:
  5044                           	opt stack 26
  5045                           
  5046                           ;adc.c: 130: PIR1bits.ADIF = 0;
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;incstack = 0
  5050  000D92  9C9E               	bcf	3998,6,c	;volatile
  5051  000D94  0012               	return		;funcret
  5052  000D96                     __end_of_ADC_ISR:
  5053                           	opt stack 0
  5054  0000                     pclatu	equ	0xFFB
  5055                           pclath	equ	0xFFA
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           postinc0	equ	0xFEE
  5064                           fsr0h	equ	0xFEA
  5065                           fsr0l	equ	0xFE9
  5066                           wreg	equ	0xFE8
  5067                           postdec1	equ	0xFE5
  5068                           fsr1h	equ	0xFE2
  5069                           fsr1l	equ	0xFE1
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           pclatu	equ	0xFFB
  5077                           pclath	equ	0xFFA
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           intcon	equ	0xFF2
  5085                           postinc0	equ	0xFEE
  5086                           fsr0h	equ	0xFEA
  5087                           fsr0l	equ	0xFE9
  5088                           wreg	equ	0xFE8
  5089                           postdec1	equ	0xFE5
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099                           	psect	rparam
  5100  0000                     pclatu	equ	0xFFB
  5101                           pclath	equ	0xFFA
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           intcon	equ	0xFF2
  5109                           postinc0	equ	0xFEE
  5110                           fsr0h	equ	0xFEA
  5111                           fsr0l	equ	0xFE9
  5112                           wreg	equ	0xFE8
  5113                           postdec1	equ	0xFE5
  5114                           fsr1h	equ	0xFE2
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123                           	psect	temp
  5124  00005F                     btemp:
  5125                           	opt stack 0
  5126  00005F                     	ds	1
  5127  0000                     int$flags	set	btemp
  5128                           pclatu	equ	0xFFB
  5129                           pclath	equ	0xFFA
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           postinc0	equ	0xFEE
  5138                           fsr0h	equ	0xFEA
  5139                           fsr0l	equ	0xFE9
  5140                           wreg	equ	0xFE8
  5141                           postdec1	equ	0xFE5
  5142                           fsr1h	equ	0xFE2
  5143                           fsr1l	equ	0xFE1
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        130
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     41     113
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(COMRAM[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_StatusCallback->_getByteToSend
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_readAXData
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write

Critical Paths under _main in BANK0

    _main->_delay_ms
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _I2C_ISR->_I2C_StatusCallback

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    1866
                                             31 BANK0     10    10      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1351
                                             24 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             16 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             16 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             16 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    6995
                                              2 BANK0     14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              1     1      0    6995
                                             93 COMRAM     1     1      0
                 _I2C_StatusCallback
                 _handleByteReceived
 ---------------------------------------------------------------------------------
 (6) _I2C_StatusCallback                                   2     2      0    6578
                                              0 BANK0      2     2      0
                      _getByteToSend
                 _handleByteReceived
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0     394
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _getByteToSend                                       14    14      0    6116
                                             79 COMRAM    14    14      0
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
 ---------------------------------------------------------------------------------
 (8) _writeAXData                                         55    49      6    2167
                                             23 COMRAM    55    49      6
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _readAXData                                          56    52      4    2037
                                             23 COMRAM    56    52      4
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (9) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _pingAX                                              51    49      2    1639
                                             23 COMRAM    51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (9) _sendAX                                              22    14      8    1310
                                              1 COMRAM    22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Write                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Read                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _I2C_StatusCallback
       _getByteToSend
         _clearState
         _pingAX
           _sendAX
             _EUSART1_Read
             _EUSART1_Write
         _readAXData
           _getAddressSize
           _sendAX
             _EUSART1_Read
             _EUSART1_Write
         _writeAXData
           _getAddressSize
           _sendAX
             _EUSART1_Read
             _EUSART1_Write
       _handleByteReceived
         _setLedOff
         _setLedOn
     _handleByteReceived
       _setLedOff
       _setLedOn

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      80       8       50.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     29      71       5       70.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F       6        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Apr 24 00:20:55 2017

                                  _c 0096                          _SSPSTATbits 000FC7  
                       ___awdiv@sign 00BB                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l302 011A                                  l342 01CE  
                                l351 025A                                  l249 0BDA  
                                l345 01D0                                  l392 089A  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
         __end_of_handleByteReceived 0650                      __end_of_I2C_ISR 0CA6  
                    _timer1ReloadVal 009C                      __end_of_ADC_ISR 0D96  
                                prod 000FF3                                  wreg 000FE8  
                               l2441 06AC                                 l2433 0682  
                               l2513 0884                                 l2451 06E2  
                               l2443 06B2                                 l2427 066C  
                               l2507 0848                                 l2509 085A  
                               l2439 06A0                                 l2455 06F0  
                               l2551 00A4                                 l2633 01F2  
                               l2561 00E0                                 l2459 0704  
                               l2635 01FC                                 l2555 00BA  
                               l2645 0244                                 l2629 01DC  
                               l2639 0212                                 l2579 0104  
                               u1217 0850                                 u1227 088C  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 _IPEN 007E87  
                               i2l90 0D7C                                 i2l83 0D6A  
                       main@adc_1009 00CB                                 _WPUB 000F5B  
                      _EUSART1_Write 0D7A                                 _main 009A  
                      ?_EUSART1_Read 0001                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 005F                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0096                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC$HS2 000000                       readAXData@size 004E  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
                        _writeAXData 07A6                   writeAXData@address 001A  
            __size_of_getAddressSize 0078       __size_of_OSCILLATOR_Initialize 0012  
      __end_of_OSCILLATOR_Initialize 0D68                                ?_main 0001  
                    __end_of___awdiv 070E                      _TMR1_StartTimer 0D8E  
                    ___awdiv@divisor 00B8                                _T1CON 000FCD  
                              _LATB0 007C50                                _LATC0 007C58  
                              _LATB2 007C52                                _LATC1 007C59  
                              _LATB3 007C53                                _LATD0 007C60  
                              _LATC2 007C5A                                _LATD1 007C61  
                              _LATD2 007C62                                _LATD3 007C63  
                              _LATD4 007C64                                i2l131 0C98  
                              i2l166 0B1C                                i2l423 0942  
                              i2l520 07F0                                i2l432 094E  
                              i2l441 095A                                i2l426 0946  
                              i2l435 0952                                i2l419 093E  
                              i2l444 095E                                i2l461 09C0  
                              i2l429 094A                                i2l470 09CC  
                              i2l454 09B8                                i2l438 0956  
                              i2l447 0962                                i2l464 09C4  
                              i2l473 09D0                                i2l633 005A  
                              i2l482 09DC                                i2l458 09BC  
                              i2l467 09C8                                i2l476 09D4  
                              i2l479 09D8                      ___awdiv@counter 00BA  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                  getByteToSend@xlow 0055                                main@i 00C5  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 0C74  
                              tablat 000FF5               readAXData@nbParameters 0048  
                     ??_EUSART1_Read 0001                                status 000FD8  
                    readAXData@error 0032                      __initialization 0B6A  
         __end_of_EUSART1_Initialize 0D56                         __end_of_main 026C  
                          ??_I2C_ISR 005E                            ??_ADC_ISR 0001  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 00C5  
                      __activetblptr 000002                       __CFG_PLLCFG$ON 000000  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 0D40  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 00B6  
                             _T1GCON 000FAA               I2C_StatusCallback@data 00A7  
                             i2l2023 0D76                               i2l2111 0966  
                    __CFG_BBSIZ$BB2K 000000                               i2l2033 0A32  
                             i2l2121 09E0                               i2l2051 03EE  
                             i2l2043 0A46                               i2l2203 07F8  
                             i2l2037 0A3C                               i2l2063 0424  
                             i2l2055 0402                               i2l2231 0570  
                             i2l2313 02F0                               i2l2225 0550  
                             i2l2401 0B50                               i2l2083 048E  
                             i2l2067 043A                               i2l2243 05A6  
                             i2l2325 0332                               i2l2261 05FA  
                             i2l2095 04D2                               i2l2087 04A8  
                             i2l2079 047A                               i2l2175 0792  
                             i2l2255 05E0                               i2l2273 062E  
                             i2l2249 05C6                               i2l2099 04E8  
                             i2l2267 0614                               i2l2357 039E  
                             i2l2349 038A                               i2l2293 02A2  
                     __CFG_WDTEN$OFF 000000                               i2l2279 0648  
                             i2l2369 03DC                               i2l2473 0C90  
                             i2l2397 0B42                               i2l2389 0B10  
                             i2l2477 0CA2                               i2l2665 004E  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                               _TXREG1 000FAD  
                             _TXREG2 000F79                               _TXSTA1 000FAC  
                             _TXSTA2 000FBA                     __end_of_delay_ms 08BC  
                     __CFG_XINST$OFF 000000                       sendAX@checksum 0017  
            __end_of_TMR1_StartTimer 0D92                            ??___awdiv 00BA  
                     __CFG_STVREN$ON 000000                   getByteToSend@error 0051  
                 getByteToSend@value 0059                   getByteToSend@xhigh 0056  
                             _pingAX 0AA8                               _sendAX 03E0  
                             clear_0 0BA8                     ___awdiv@quotient 00BC  
                 _I2C_StatusCallback 0B0A              __size_of_I2C_Initialize 001A  
                   __end_of_setLedOn 09B6                  ?_I2C_StatusCallback 0001  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 00BA  
                    ??_EUSART1_Write 0001        __size_of_INTERRUPT_Initialize 0008  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 0CD6  
                         __accesstop 0060              __end_of__initialization 0BAE  
                   readAXData@packet 0034                     readAXData@length 004A  
                 ?_SYSTEM_Initialize 0001                          pingAX@error 0049  
                      ___rparam_used 000001                     readAXData@result 001E  
               ??_I2C_StatusCallback 005E                         readAXData@id 0018  
                     __pcstackCOMRAM 0001                         __pidataBANK0 0D96  
                       __pidataBANK1 08BC                readAXData@instruction 004C  
                ??_SYSTEM_Initialize 00B8                __end_of_getByteToSend 03E0  
                     _getAddressSize 0A30                           _adc_values 0080  
               __end_of_EUSART1_Read 0D7A            __end_of_SYSTEM_Initialize 0CF8  
                         _dataToSend 0060                           __pbssBANK0 0060  
             sendAX@parametersToRead 0008                   _handleByteReceived 051C  
                        setLedOn@led 0001                           _clearState 0BFC  
                ?_handleByteReceived 0001               __end_of_getAddressSize 0AA8  
                       ?_writeAXData 0018                   __size_of_setLedOff 007A  
                   ?_TMR1_StartTimer 0001                              _I2C_ISR 0C74  
                            _ADC_ISR 0D92                              ?_pingAX 0018  
                            ?_sendAX 0002              __size_of_ADC_Initialize 0018  
                   __CFG_CANMX$PORTB 000000                              _REFOCON 000F9A  
                            _OSCCON2 000FD2                            ?_delay_ms 00BE  
               ??_handleByteReceived 0005                              _OSCTUNE 000F9B  
                            i2u74_40 054E                              i2u75_40 056E  
                            _SPBRGH1 000F7D                              _SPBRGH2 000F7C  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                      writeAXData@data 001C  
             getByteToSend@xlow_1131 0057                      writeAXData@size 004D  
                         _readAXData 070E                            ?_setLedOn 0001  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
              getAddressSize@address 0001                              __Lparam 0000  
                    ?_getAddressSize 0001                              ___awdiv 0650  
                            __pcinit 0B6A                       _I2C_Initialize 0CF8  
                    __size_of_pingAX 0062                              __ramtop 0F00  
                    __size_of_sendAX 013C                              __ptext0 009A  
                            __ptext1 0832                              __ptext2 0650  
                            __ptext3 0CD6                              __ptext4 0C3A  
                            __ptext5 0D8E                              __ptext6 0CA6  
                            __ptext7 0D56                              __ptext8 0D86  
                            __ptext9 0CF8                           _parameter1 00A0  
                         _parameter2 00A1                           _parameter3 00A2  
                         _parameter4 00A3                           _parameter5 00A4  
                         _parameter6 00A5                            _T1CONbits 000FCD  
              _OSCILLATOR_Initialize 0D56                   _EUSART1_Initialize 0D40  
           ??_PIN_MANAGER_Initialize 00B6                    __CFG_MSSPMSK$MSK7 000000  
                         ??_delay_ms 00C0                              main@adc 00C9  
                  __end_of_setLedOff 0A30           __size_of_SYSTEM_Initialize 0022  
                         delay_ms@ms 00BE                 end_of_initialization 0BAE  
                ?_EUSART1_Initialize 0001               handleByteReceived@data 0007  
 I2C_StatusCallbackOld@EEPROM_Buffer 0100                        __Lmediumconst 0000  
                            sendAX@i 000D                           ??_setLedOn 0003  
                        ?_clearState 0001                   _EUSART2_Initialize 0D2A  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0012               __end_of_I2C_Initialize 0D12  
               ??_EUSART1_Initialize 00B6                  ?_EUSART2_Initialize 0001  
                          _PORTCbits 000F82                    readAXData@address 001A  
                         main@i_1008 00C7                  EUSART1_Write@txData 0001  
               ??_EUSART2_Initialize 00B6                       getByteToSend@d 0058  
                       pingAX@packet 002F                         pingAX@length 0045  
                  pingAX@instruction 0047                         pingAX@result 001B  
             writeAXData@instruction 0049                         _EUSART1_Read 0D68  
                        ?_readAXData 0018                         sendAX@i_1072 0015  
                       sendAX@i_1066 000F                         sendAX@i_1069 0011  
       __end_of_INTERRUPT_Initialize 0D8E                      ?_I2C_Initialize 0001  
                  writeAXData@packet 0033                    writeAXData@length 0047  
               __size_of_writeAXData 008C                    writeAXData@result 001F  
                     _ADC_Initialize 0D12               ?_OSCILLATOR_Initialize 0001  
                       sendAX@buffer 0002                       __end_of_pingAX 0B0A  
                     __end_of_sendAX 051C                  handleByteReceived@i 0005  
                       sendAX@result 0006                  start_initialization 0B6A  
    __size_of_PIN_MANAGER_Initialize 0030                  __size_of_clearState 003E  
              __end_of_EUSART1_Write 0D86          __size_of_I2C_StatusCallback 0060  
                     _currentCommand 00D0             __size_of_TMR1_Initialize 003A  
                 pingAX@nbParameters 0043               __end_of_ADC_Initialize 0D2A  
                        __pdataBANK0 00CF                          __pdataBANK1 0100  
                           ?_I2C_ISR 0001                             ?_ADC_ISR 0001  
                           ??_pingAX 001A                             ??_sendAX 000A  
                __size_of_readAXData 0098                        __pcstackBANK0 00A6  
                       setLedOff@led 0001                           sendAX@stop 000B  
                  __size_of_delay_ms 008A               __size_of_getByteToSend 0174  
                   ??_getAddressSize 0003              getByteToSend@error_1128 0053  
             _PIN_MANAGER_Initialize 0CA6                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 00B6  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 00A8  
                           _BAUDCON1 000FA7                             _BAUDCON2 000FB9  
           __size_of_TMR1_StartTimer 0004                        _nbBytesToSend 0098  
        __size_of_handleByteReceived 0134   I2C_StatusCallbackOld@eepromAddress 009E  
                          _readIndex 009A                            _bytesSent 0094  
               _INTERRUPT_Initialize 0D86              getByteToSend@value_1130 005B  
                          _setLedOff 09B6                            delay_ms@i 00C3  
                          delay_ms@n 00C1                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                         ??_clearState 0001  
                           i2u123_47 0456                             i2u124_47 0502  
__size_of_INTERRUPT_InterruptManager 008E                             _PIR1bits 000F9E  
                           _PIR3bits 000FA4              getByteToSend@xhigh_1132 005D  
                      _getByteToSend 026C                     __size_of_I2C_ISR 0032  
                  ??_TMR1_Initialize 00B6                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                     __CFG_SOSCSEL$DIG 000000  
                          main@delay 00CD                   __end_of_clearState 0C3A  
                   writeAXData@error 004B                            copy_data0 0B7E  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                       ??_readAXData 001C                     ??_I2C_Initialize 00B6  
                           __Hrparam 0000                             __Lrparam 0000  
                  _ADC_GetConversion 0BBC                   __CFG_BOREN$SBORDIS 000000  
                     ?_getByteToSend 0001              ??_OSCILLATOR_Initialize 00B6  
                 ?_ADC_GetConversion 00B6                      I2C_ISR@i2c_data 005E  
                   __size_of___awdiv 00BE          __size_of_EUSART1_Initialize 0016  
                ??_ADC_GetConversion 00B8                             _delay_ms 0832  
                 __end_of_readAXData 07A6                             __ptext10 0D2A  
                           __ptext11 0D40                             __ptext20 026C  
                           __ptext12 0D12                             __ptext21 07A6  
                           __ptext13 0BBC                           _T1GCONbits 000FAA  
                           __ptext22 070E                             __ptext23 0A30  
                           __ptext15 0C74                             __ptext24 0AA8  
                           __ptext16 0B0A                             __ptext25 03E0  
                           __ptext17 051C                             __ptext26 0D7A  
                           __ptext18 093C                             __ptext27 0D68  
                           __ptext19 09B6                             __ptext28 0BFC  
                           __ptext29 0D92                    ??_TMR1_StartTimer 00B6  
                      writeAXData@id 0018          __size_of_EUSART2_Initialize 0016  
                      __size_of_main 01D2  I2C_StatusCallbackOld@slaveWriteType 009F  
                           _setLedOn 093C            __end_of_ADC_GetConversion 0BFC  
                      ??_writeAXData 001E                             int$flags 005F  
 __end_of_INTERRUPT_InterruptManager 0096           _INTERRUPT_InterruptManager 0008  
                __CFG_INTOSCSEL$HIGH 000000                     sendAX@packetSize 0004  
                 _I2C_slaveWriteData 00CF                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 00B6                             pingAX@id 0018  
                           sendAX@r0 0013                             intlevel2 0000  
                        ??_setLedOff 0003              ?_PIN_MANAGER_Initialize 0001  
         __end_of_I2C_StatusCallback 0B6A                           _RCSTA1bits 000FAB  
                         _RCSTA2bits 000FA6      I2C_StatusCallback@i2c_bus_state 00A6  
                   ??_ADC_Initialize 00B6                      ??_getByteToSend 0050  
                 __CFG_WDTPS$1048576 000000               __size_of_EUSART1_Write 000C  
                __end_of_writeAXData 0832                          _SSPCON1bits 000FC6  
     __end_of_PIN_MANAGER_Initialize 0CD6                  __CFG_BORPWR$ZPBORMV 000000  
         __size_of_ADC_GetConversion 0040                      _TMR1_Initialize 0C3A  
