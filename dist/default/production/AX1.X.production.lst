

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 01 23:18:51 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F46K80 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataBANK0
    92  0023A2                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _currentCommand
    96  0023A2  FF                 	db	255
    97                           
    98                           ;initializer for _first
    99  0023A3  01                 	db	1
   100                           
   101                           ;initializer for _I2C_slaveWriteData
   102  0023A4  55                 	db	85
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _dpowers:
   109                           	opt stack 0
   110  000F01  0001               	dw	1
   111  000F03  0000               	dw	0
   112  000F05  000A               	dw	10
   113  000F07  0000               	dw	0
   114  000F09  0064               	dw	100
   115  000F0B  0000               	dw	0
   116  000F0D  03E8               	dw	1000
   117  000F0F  0000               	dw	0
   118  000F11  2710               	dw	10000
   119  000F13  0000               	dw	0
   120  000F15  86A0               	dw	34464
   121  000F17  0001               	dw	1
   122  000F19  4240               	dw	16960
   123  000F1B  000F               	dw	15
   124  000F1D  9680               	dw	38528
   125  000F1F  0098               	dw	152
   126  000F21  E100               	dw	57600
   127  000F23  05F5               	dw	1525
   128  000F25  CA00               	dw	51712
   129  000F27  3B9A               	dw	15258
   130  000F29                     __end_of_dpowers:
   131                           	opt stack 0
   132  0000                     _WPUB	set	3931
   133  0000                     _ANCON1	set	3932
   134  0000                     _ANCON0	set	3933
   135  0000                     _LATBbits	set	3978
   136  0000                     _LATCbits	set	3979
   137  0000                     _LATDbits	set	3980
   138  0000                     _INTCONbits	set	4082
   139  0000                     _RCONbits	set	4048
   140  0000                     _REFOCON	set	3994
   141  0000                     _OSCTUNE	set	3995
   142  0000                     _OSCCON2	set	4050
   143  0000                     _OSCCON	set	4051
   144  0000                     _ADCON0bits	set	4034
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADCON2	set	4032
   148  0000                     _ADCON1	set	4033
   149  0000                     _ADCON0	set	4034
   150  0000                     _T1GCONbits	set	4010
   151  0000                     _T1CONbits	set	4045
   152  0000                     _TMR1L	set	4046
   153  0000                     _TMR1H	set	4047
   154  0000                     _T1GCON	set	4010
   155  0000                     _T1CON	set	4045
   156  0000                     _PORTCbits	set	3970
   157  0000                     _SSPCON1bits	set	4038
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPSTATbits	set	4039
   160  0000                     _PIE1bits	set	3997
   161  0000                     _SSPADD	set	4040
   162  0000                     _SSPCON2	set	4037
   163  0000                     _SSPCON1	set	4038
   164  0000                     _SSPSTAT	set	4039
   165  0000                     _TXREG1	set	4013
   166  0000                     _RCREG1	set	4014
   167  0000                     _RCSTA1bits	set	4011
   168  0000                     _PIR1bits	set	3998
   169  0000                     _SPBRGH1	set	3965
   170  0000                     _SPBRG1	set	4015
   171  0000                     _TXSTA1	set	4012
   172  0000                     _RCSTA1	set	4011
   173  0000                     _BAUDCON1	set	4007
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISC	set	3988
   176  0000                     _TRISB	set	3987
   177  0000                     _TRISA	set	3986
   178  0000                     _TRISE	set	3990
   179  0000                     _LATC	set	3979
   180  0000                     _LATB	set	3978
   181  0000                     _LATA	set	3977
   182  0000                     _LATD	set	3980
   183  0000                     _LATE	set	3981
   184  0000                     _TXREG2	set	3961
   185  0000                     _RCREG2	set	3962
   186  0000                     _RCSTA2bits	set	4006
   187  0000                     _PIR3bits	set	4004
   188  0000                     _SPBRGH2	set	3964
   189  0000                     _SPBRG2	set	3963
   190  0000                     _TXSTA2	set	4026
   191  0000                     _RCSTA2	set	4006
   192  0000                     _BAUDCON2	set	4025
   193  0000                     _BCLIF	set	32011
   194  0000                     _SSPIF	set	31987
   195  000F29                     STR_7:
   196  000F29  67                 	db	103	;'g'
   197  000F2A  65                 	db	101	;'e'
   198  000F2B  74                 	db	116	;'t'
   199  000F2C  42                 	db	66	;'B'
   200  000F2D  79                 	db	121	;'y'
   201  000F2E  74                 	db	116	;'t'
   202  000F2F  65                 	db	101	;'e'
   203  000F30  54                 	db	84	;'T'
   204  000F31  6F                 	db	111	;'o'
   205  000F32  53                 	db	83	;'S'
   206  000F33  65                 	db	101	;'e'
   207  000F34  6E                 	db	110	;'n'
   208  000F35  64                 	db	100	;'d'
   209  000F36  20                 	db	32
   210  000F37  62                 	db	98	;'b'
   211  000F38  79                 	db	121	;'y'
   212  000F39  74                 	db	116	;'t'
   213  000F3A  65                 	db	101	;'e'
   214  000F3B  73                 	db	115	;'s'
   215  000F3C  53                 	db	83	;'S'
   216  000F3D  65                 	db	101	;'e'
   217  000F3E  6E                 	db	110	;'n'
   218  000F3F  74                 	db	116	;'t'
   219  000F40  3A                 	db	58	;':'
   220  000F41  25                 	db	37
   221  000F42  64                 	db	100	;'d'
   222  000F43  20                 	db	32
   223  000F44  64                 	db	100	;'d'
   224  000F45  61                 	db	97	;'a'
   225  000F46  74                 	db	116	;'t'
   226  000F47  61                 	db	97	;'a'
   227  000F48  5F                 	db	95	;'_'
   228  000F49  72                 	db	114	;'r'
   229  000F4A  65                 	db	101	;'e'
   230  000F4B  63                 	db	99	;'c'
   231  000F4C  65                 	db	101	;'e'
   232  000F4D  69                 	db	105	;'i'
   233  000F4E  76                 	db	118	;'v'
   234  000F4F  65                 	db	101	;'e'
   235  000F50  64                 	db	100	;'d'
   236  000F51  3A                 	db	58	;':'
   237  000F52  25                 	db	37
   238  000F53  64                 	db	100	;'d'
   239  000F54  20                 	db	32
   240  000F55  0D                 	db	13
   241  000F56  0A                 	db	10
   242  000F57  00                 	db	0
   243  000F58                     STR_6:
   244  000F58  68                 	db	104	;'h'
   245  000F59  61                 	db	97	;'a'
   246  000F5A  6E                 	db	110	;'n'
   247  000F5B  64                 	db	100	;'d'
   248  000F5C  6C                 	db	108	;'l'
   249  000F5D  65                 	db	101	;'e'
   250  000F5E  42                 	db	66	;'B'
   251  000F5F  79                 	db	121	;'y'
   252  000F60  74                 	db	116	;'t'
   253  000F61  65                 	db	101	;'e'
   254  000F62  52                 	db	82	;'R'
   255  000F63  65                 	db	101	;'e'
   256  000F64  63                 	db	99	;'c'
   257  000F65  65                 	db	101	;'e'
   258  000F66  69                 	db	105	;'i'
   259  000F67  76                 	db	118	;'v'
   260  000F68  65                 	db	101	;'e'
   261  000F69  64                 	db	100	;'d'
   262  000F6A  20                 	db	32
   263  000F6B  72                 	db	114	;'r'
   264  000F6C  65                 	db	101	;'e'
   265  000F6D  61                 	db	97	;'a'
   266  000F6E  64                 	db	100	;'d'
   267  000F6F  49                 	db	73	;'I'
   268  000F70  6E                 	db	110	;'n'
   269  000F71  64                 	db	100	;'d'
   270  000F72  65                 	db	101	;'e'
   271  000F73  78                 	db	120	;'x'
   272  000F74  3A                 	db	58	;':'
   273  000F75  25                 	db	37
   274  000F76  64                 	db	100	;'d'
   275  000F77  20                 	db	32
   276  000F78  2D                 	db	45
   277  000F79  3E                 	db	62	;'>'
   278  000F7A  20                 	db	32
   279  000F7B  25                 	db	37
   280  000F7C  64                 	db	100	;'d'
   281  000F7D  0D                 	db	13
   282  000F7E  0A                 	db	10
   283  000F7F  00                 	db	0
   284  000F80                     STR_4:
   285  000F80  52                 	db	82	;'R'
   286  000F81  65                 	db	101	;'e'
   287  000F82  61                 	db	97	;'a'
   288  000F83  64                 	db	100	;'d'
   289  000F84  69                 	db	105	;'i'
   290  000F85  6E                 	db	110	;'n'
   291  000F86  67                 	db	103	;'g'
   292  000F87  20                 	db	32
   293  000F88  61                 	db	97	;'a'
   294  000F89  6C                 	db	108	;'l'
   295  000F8A  6C                 	db	108	;'l'
   296  000F8B  20                 	db	32
   297  000F8C  41                 	db	65	;'A'
   298  000F8D  44                 	db	68	;'D'
   299  000F8E  43                 	db	67	;'C'
   300  000F8F  0D                 	db	13
   301  000F90  0A                 	db	10
   302  000F91  00                 	db	0
   303  000F92                     STR_3:
   304  000F92  49                 	db	73	;'I'
   305  000F93  6E                 	db	110	;'n'
   306  000F94  69                 	db	105	;'i'
   307  000F95  74                 	db	116	;'t'
   308  000F96  20                 	db	32
   309  000F97  63                 	db	99	;'c'
   310  000F98  6F                 	db	111	;'o'
   311  000F99  6D                 	db	109	;'m'
   312  000F9A  70                 	db	112	;'p'
   313  000F9B  6C                 	db	108	;'l'
   314  000F9C  65                 	db	101	;'e'
   315  000F9D  74                 	db	116	;'t'
   316  000F9E  65                 	db	101	;'e'
   317  000F9F  64                 	db	100	;'d'
   318  000FA0  0D                 	db	13
   319  000FA1  0A                 	db	10
   320  000FA2  00                 	db	0
   321  000FA3                     STR_5:
   322  000FA3  41                 	db	65	;'A'
   323  000FA4  44                 	db	68	;'D'
   324  000FA5  43                 	db	67	;'C'
   325  000FA6  20                 	db	32
   326  000FA7  25                 	db	37
   327  000FA8  64                 	db	100	;'d'
   328  000FA9  20                 	db	32
   329  000FAA  3A                 	db	58	;':'
   330  000FAB  20                 	db	32
   331  000FAC  25                 	db	37
   332  000FAD  6C                 	db	108	;'l'
   333  000FAE  64                 	db	100	;'d'
   334  000FAF  0D                 	db	13
   335  000FB0  0A                 	db	10
   336  000FB1  00                 	db	0
   337  000FB2                     STR_2:
   338  000FB2  50                 	db	80	;'P'
   339  000FB3  4D                 	db	77	;'M'
   340  000FB4  20                 	db	32
   341  000FB5  52                 	db	82	;'R'
   342  000FB6  6F                 	db	111	;'o'
   343  000FB7  62                 	db	98	;'b'
   344  000FB8  6F                 	db	111	;'o'
   345  000FB9  74                 	db	116	;'t'
   346  000FBA  69                 	db	105	;'i'
   347  000FBB  78                 	db	120	;'x'
   348  000FBC  0D                 	db	13
   349  000FBD  0A                 	db	10
   350  000FBE  00                 	db	0
   351  000FBF                     STR_1:
   352  000FBF  63                 	db	99	;'c'
   353  000FC0  6F                 	db	111	;'o'
   354  000FC1  6C                 	db	108	;'l'
   355  000FC2  6C                 	db	108	;'l'
   356  000FC3  69                 	db	105	;'i'
   357  000FC4  64                 	db	100	;'d'
   358  000FC5  65                 	db	101	;'e'
   359  000FC6  0D                 	db	13
   360  000FC7  0A                 	db	10
   361  000FC8  00                 	db	0
   362  0000                     
   363                           ; #config settings
   364  000FC9  00                 	db	0	; dummy byte at the end
   365  0000                     
   366                           	psect	cinit
   367  002252                     __pcinit:
   368                           	opt stack 0
   369  002252                     start_initialization:
   370                           	opt stack 0
   371  002252                     __initialization:
   372                           	opt stack 0
   373                           
   374                           ; Initialize objects allocated to BANK0 (3 bytes)
   375                           ; load TBLPTR registers with __pidataBANK0
   376  002252  0EA2               	movlw	low __pidataBANK0
   377  002254  6EF6               	movwf	tblptrl,c
   378  002256  0E23               	movlw	high __pidataBANK0
   379  002258  6EF7               	movwf	tblptrh,c
   380  00225A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   381  00225C  6EF8               	movwf	tblptru,c
   382  00225E  0009               	tblrd		*+	;fetch initializer
   383  002260  CFF5 F0E8          	movff	tablat,__pdataBANK0
   384  002264  0009               	tblrd		*+	;fetch initializer
   385  002266  CFF5 F0E9          	movff	tablat,__pdataBANK0+1
   386  00226A  0009               	tblrd		*+	;fetch initializer
   387  00226C  CFF5 F0EA          	movff	tablat,__pdataBANK0+2
   388                           
   389                           ; Clear objects allocated to BANK0 (71 bytes)
   390  002270  EE00  F060         	lfsr	0,__pbssBANK0
   391  002274  0E47               	movlw	71
   392  002276                     clear_0:
   393  002276  6AEE               	clrf	postinc0,c
   394  002278  06E8               	decf	wreg,f,c
   395  00227A  E1FD               	bnz	clear_0
   396  00227C                     end_of_initialization:
   397                           	opt stack 0
   398  00227C                     __end_of__initialization:
   399                           	opt stack 0
   400  00227C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   401  00227E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   402  002280  0100               	movlb	0
   403  002282  EFE5  F007         	goto	_main	;jump to C main() function
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt stack 0
   414  000060                     _dataToSend:
   415                           	opt stack 0
   416  000060                     	ds	32
   417  000080                     _adc_values:
   418                           	opt stack 0
   419  000080                     	ds	20
   420  000094                     _bytesSent:
   421                           	opt stack 0
   422  000094                     	ds	2
   423  000096                     _nbBytesToSend:
   424                           	opt stack 0
   425  000096                     	ds	2
   426  000098                     _readIndex:
   427                           	opt stack 0
   428  000098                     	ds	2
   429  00009A                     _TMR1_InterruptHandler:
   430                           	opt stack 0
   431  00009A                     	ds	2
   432  00009C                     _timer1ReloadVal:
   433                           	opt stack 0
   434  00009C                     	ds	2
   435  00009E                     _index_i2c:
   436                           	opt stack 0
   437  00009E                     	ds	2
   438  0000A0                     _parameter6:
   439                           	opt stack 0
   440  0000A0                     	ds	1
   441  0000A1                     _parameter5:
   442                           	opt stack 0
   443  0000A1                     	ds	1
   444  0000A2                     _parameter4:
   445                           	opt stack 0
   446  0000A2                     	ds	1
   447  0000A3                     _parameter3:
   448                           	opt stack 0
   449  0000A3                     	ds	1
   450  0000A4                     _parameter2:
   451                           	opt stack 0
   452  0000A4                     	ds	1
   453  0000A5                     _parameter1:
   454                           	opt stack 0
   455  0000A5                     	ds	1
   456  0000A6                     _junk:
   457                           	opt stack 0
   458  0000A6                     	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           
   466                           	psect	dataBANK0
   467  0000E8                     __pdataBANK0:
   468                           	opt stack 0
   469  0000E8                     _currentCommand:
   470                           	opt stack 0
   471  0000E8                     	ds	1
   472  0000E9                     _first:
   473                           	opt stack 0
   474  0000E9                     	ds	1
   475  0000EA                     _I2C_slaveWriteData:
   476                           	opt stack 0
   477  0000EA                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           
   485                           	psect	cstackBANK0
   486  0000A7                     __pcstackBANK0:
   487                           	opt stack 0
   488  0000A7                     ??_INTERRUPT_InterruptManager:
   489                           
   490                           ; 1 bytes @ 0x0
   491  0000A7                     	ds	14
   492  0000B5                     ??_TMR1_Initialize:
   493  0000B5                     ?_ADC_GetConversion:
   494                           	opt stack 0
   495  0000B5                     ?___awdiv:
   496                           	opt stack 0
   497  0000B5                     ?___lldiv:
   498                           	opt stack 0
   499  0000B5                     EUSART2_Write@txData:
   500                           	opt stack 0
   501  0000B5                     ___awdiv@dividend:
   502                           	opt stack 0
   503  0000B5                     ___lldiv@dividend:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0xE
   507  0000B5                     	ds	1
   508  0000B6                     putch@txData:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xF
   512  0000B6                     	ds	1
   513  0000B7                     ??_ADC_GetConversion:
   514  0000B7                     ___awdiv@divisor:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x10
   518  0000B7                     	ds	2
   519  0000B9                     ADC_GetConversion@channel:
   520                           	opt stack 0
   521  0000B9                     ___awdiv@counter:
   522                           	opt stack 0
   523  0000B9                     ___lldiv@divisor:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x12
   527  0000B9                     	ds	1
   528  0000BA                     ___awdiv@sign:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x13
   532  0000BA                     	ds	1
   533  0000BB                     ___awdiv@quotient:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x14
   537  0000BB                     	ds	2
   538  0000BD                     delay_ms@ms:
   539                           	opt stack 0
   540  0000BD                     ___lldiv@quotient:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x16
   544  0000BD                     	ds	2
   545  0000BF                     ??_delay_ms:
   546                           
   547                           ; 1 bytes @ 0x18
   548  0000BF                     	ds	1
   549  0000C0                     delay_ms@n:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x19
   553  0000C0                     	ds	1
   554  0000C1                     ___lldiv@counter:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1A
   558  0000C1                     	ds	1
   559  0000C2                     ?___llmod:
   560                           	opt stack 0
   561  0000C2                     delay_ms@i:
   562                           	opt stack 0
   563  0000C2                     ___llmod@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x1B
   567  0000C2                     	ds	4
   568  0000C6                     ___llmod@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x1F
   572  0000C6                     	ds	4
   573  0000CA                     ___llmod@counter:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x23
   577  0000CA                     	ds	1
   578  0000CB                     ?_printf:
   579                           	opt stack 0
   580  0000CB                     printf@f:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x24
   584  0000CB                     	ds	6
   585  0000D1                     ??_printf:
   586                           
   587                           ; 1 bytes @ 0x2A
   588  0000D1                     	ds	2
   589  0000D3                     printf@prec:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x2C
   593  0000D3                     	ds	2
   594  0000D5                     printf@ap:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x2E
   598  0000D5                     	ds	2
   599  0000D7                     printf@flag:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x30
   603  0000D7                     	ds	1
   604  0000D8                     printf@val:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x31
   608  0000D8                     	ds	4
   609  0000DC                     printf@c:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x35
   613  0000DC                     	ds	1
   614  0000DD                     ??_main:
   615                           
   616                           ; 1 bytes @ 0x36
   617  0000DD                     	ds	1
   618  0000DE                     main@i:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x37
   622  0000DE                     	ds	2
   623  0000E0                     main@i_1270:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x39
   627  0000E0                     	ds	2
   628  0000E2                     main@adc:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x3B
   632  0000E2                     	ds	2
   633  0000E4                     main@adc_1272:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x3D
   637  0000E4                     	ds	2
   638  0000E6                     main@delay:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x3F
   642  0000E6                     	ds	2
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           
   650                           	psect	cstackCOMRAM
   651  000001                     __pcstackCOMRAM:
   652                           	opt stack 0
   653  000001                     ?_getAddressSize:
   654                           	opt stack 0
   655  000001                     ?i2_ADC_GetConversion:
   656                           	opt stack 0
   657  000001                     ?i2___lldiv:
   658                           	opt stack 0
   659  000001                     EUSART1_Write@txData:
   660                           	opt stack 0
   661  000001                     i2EUSART2_Write@txData:
   662                           	opt stack 0
   663  000001                     getAddressSize@address:
   664                           	opt stack 0
   665  000001                     setLedOn@led:
   666                           	opt stack 0
   667  000001                     setLedOff@led:
   668                           	opt stack 0
   669  000001                     i2___lldiv@dividend:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x0
   673  000001                     	ds	1
   674  000002                     i2putch@txData:
   675                           	opt stack 0
   676  000002                     sendAX@buffer:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x1
   680  000002                     	ds	1
   681  000003                     ??_getAddressSize:
   682  000003                     ??_setLedOn:
   683  000003                     ??_setLedOff:
   684  000003                     ??i2_ADC_GetConversion:
   685                           
   686                           ; 1 bytes @ 0x2
   687  000003                     	ds	1
   688  000004                     sendAX@packetSize:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x3
   692  000004                     	ds	1
   693  000005                     i2ADC_GetConversion@channel:
   694                           	opt stack 0
   695  000005                     i2___lldiv@divisor:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x4
   699  000005                     	ds	1
   700  000006                     sendAX@result:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x5
   704  000006                     	ds	2
   705  000008                     sendAX@parametersToRead:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x7
   709  000008                     	ds	1
   710  000009                     i2___lldiv@quotient:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x8
   714  000009                     	ds	1
   715  00000A                     ??_sendAX:
   716                           
   717                           ; 1 bytes @ 0x9
   718  00000A                     	ds	1
   719  00000B                     sendAX@stop:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0xA
   723  00000B                     	ds	2
   724  00000D                     i2___lldiv@counter:
   725                           	opt stack 0
   726  00000D                     sendAX@i:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0xC
   730  00000D                     	ds	1
   731  00000E                     ?i2___llmod:
   732                           	opt stack 0
   733  00000E                     i2___llmod@dividend:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0xD
   737  00000E                     	ds	1
   738  00000F                     sendAX@i_1376:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0xE
   742  00000F                     	ds	2
   743  000011                     sendAX@i_1379:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x10
   747  000011                     	ds	1
   748  000012                     i2___llmod@divisor:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x11
   752  000012                     	ds	1
   753  000013                     sendAX@r0:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x12
   757  000013                     	ds	2
   758  000015                     sendAX@i_1382:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x14
   762  000015                     	ds	1
   763  000016                     i2___llmod@counter:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x15
   767  000016                     	ds	1
   768  000017                     ?i2_printf:
   769                           	opt stack 0
   770  000017                     sendAX@checksum:
   771                           	opt stack 0
   772  000017                     i2printf@f:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x16
   776  000017                     	ds	1
   777  000018                     ?_pingAX:
   778                           	opt stack 0
   779  000018                     ?_readAXData:
   780                           	opt stack 0
   781  000018                     ?_writeAXData:
   782                           	opt stack 0
   783  000018                     pingAX@id:
   784                           	opt stack 0
   785  000018                     readAXData@id:
   786                           	opt stack 0
   787  000018                     writeAXData@id:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x17
   791  000018                     	ds	2
   792  00001A                     ??_pingAX:
   793  00001A                     readAXData@address:
   794                           	opt stack 0
   795  00001A                     writeAXData@address:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x19
   799  00001A                     	ds	1
   800  00001B                     pingAX@result:
   801                           	opt stack 0
   802                           
   803                           ; 20 bytes @ 0x1A
   804  00001B                     	ds	1
   805  00001C                     ??_readAXData:
   806  00001C                     writeAXData@data:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x1B
   810  00001C                     	ds	1
   811  00001D                     ??i2_printf:
   812                           
   813                           ; 1 bytes @ 0x1C
   814  00001D                     	ds	1
   815  00001E                     ??_writeAXData:
   816  00001E                     readAXData@result:
   817                           	opt stack 0
   818                           
   819                           ; 20 bytes @ 0x1D
   820  00001E                     	ds	1
   821  00001F                     i2printf@prec:
   822                           	opt stack 0
   823  00001F                     writeAXData@result:
   824                           	opt stack 0
   825                           
   826                           ; 20 bytes @ 0x1E
   827  00001F                     	ds	2
   828  000021                     i2printf@ap:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x20
   832  000021                     	ds	2
   833  000023                     i2printf@flag:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x22
   837  000023                     	ds	1
   838  000024                     i2printf@val:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x23
   842  000024                     	ds	4
   843  000028                     i2printf@c:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x27
   847  000028                     	ds	1
   848  000029                     handleByteReceived@i:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x28
   852  000029                     	ds	2
   853  00002B                     handleByteReceived@data:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x2A
   857  00002B                     	ds	4
   858  00002F                     pingAX@packet:
   859                           	opt stack 0
   860                           
   861                           ; 20 bytes @ 0x2E
   862  00002F                     	ds	3
   863  000032                     readAXData@error:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x31
   867  000032                     	ds	1
   868  000033                     writeAXData@packet:
   869                           	opt stack 0
   870                           
   871                           ; 20 bytes @ 0x32
   872  000033                     	ds	1
   873  000034                     readAXData@packet:
   874                           	opt stack 0
   875                           
   876                           ; 20 bytes @ 0x33
   877  000034                     	ds	15
   878  000043                     pingAX@nbParameters:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x42
   882  000043                     	ds	2
   883  000045                     pingAX@length:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x44
   887  000045                     	ds	2
   888  000047                     pingAX@instruction:
   889                           	opt stack 0
   890  000047                     writeAXData@length:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x46
   894  000047                     	ds	1
   895  000048                     readAXData@nbParameters:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x47
   899  000048                     	ds	1
   900  000049                     pingAX@error:
   901                           	opt stack 0
   902  000049                     writeAXData@instruction:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x48
   906  000049                     	ds	1
   907  00004A                     readAXData@length:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x49
   911  00004A                     	ds	1
   912  00004B                     writeAXData@error:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x4A
   916  00004B                     	ds	1
   917  00004C                     readAXData@instruction:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x4B
   921  00004C                     	ds	1
   922  00004D                     writeAXData@size:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x4C
   926  00004D                     	ds	1
   927  00004E                     readAXData@size:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x4D
   931  00004E                     	ds	2
   932  000050                     ??_getByteToSend:
   933                           
   934                           ; 1 bytes @ 0x4F
   935  000050                     	ds	1
   936  000051                     getByteToSend@error:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x50
   940  000051                     	ds	2
   941  000053                     getByteToSend@error_1441:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x52
   945  000053                     	ds	2
   946  000055                     getByteToSend@i2c_data_received:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x54
   950  000055                     	ds	1
   951  000056                     getByteToSend@xlow:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x55
   955  000056                     	ds	1
   956  000057                     getByteToSend@xhigh:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x56
   960  000057                     	ds	1
   961  000058                     getByteToSend@xlow_1445:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x57
   965  000058                     	ds	1
   966  000059                     getByteToSend@xhigh_1446:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x58
   970  000059                     	ds	1
   971  00005A                     getByteToSend@d:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x59
   975  00005A                     	ds	1
   976  00005B                     getByteToSend@value:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x5A
   980  00005B                     	ds	2
   981  00005D                     getByteToSend@value_1444:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x5C
   985  00005D                     	ds	2
   986  00005F                     tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           
   993                           ; 1 bytes @ 0x5E
   994 ;;
   995 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   996 ;;
   997 ;; *************** function _main *****************
   998 ;; Defined at:
   999 ;;		line 52 in file "main.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  adc             2   61[BANK0 ] int 
  1004 ;;  i               2   57[BANK0 ] int 
  1005 ;;  i               2   55[BANK0 ] int 
  1006 ;;  adc             2   59[BANK0 ] int 
  1007 ;;  delay           2   63[BANK0 ] int 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1018 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1019 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1020 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1021 ;;Total ram usage:       11 bytes
  1022 ;; Hardware stack levels required when called:    9
  1023 ;; This function calls:
  1024 ;;		_ADC_GetConversion
  1025 ;;		_SYSTEM_Initialize
  1026 ;;		_delay_ms
  1027 ;;		_printf
  1028 ;; This function is called by:
  1029 ;;		Startup code after reset
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text0
  1034  000FCA                     __ptext0:
  1035                           	opt stack 0
  1036  000FCA                     _main:
  1037                           	opt stack 22
  1038                           
  1039                           ;main.c: 54: for (int adc = 0; adc < 10; adc++) {
  1040                           
  1041                           ;incstack = 0
  1042  000FCA  0E00               	movlw	0
  1043  000FCC  0100               	movlb	0	; () banked
  1044  000FCE  6FE3               	movwf	(main@adc+1)& (0+255),b
  1045  000FD0  0E00               	movlw	0
  1046  000FD2  6FE2               	movwf	main@adc& (0+255),b
  1047  000FD4                     l3058:
  1048                           
  1049                           ; BSR set to: 0
  1050  000FD4  0100               	movlb	0	; () banked
  1051  000FD6  BFE3               	btfsc	(main@adc+1)& (0+255),7,b
  1052  000FD8  D008               	goto	l3062
  1053  000FDA  0100               	movlb	0	; () banked
  1054  000FDC  51E3               	movf	(main@adc+1)& (0+255),w,b
  1055  000FDE  E118               	bnz	l3068
  1056  000FE0  0E0A               	movlw	10
  1057  000FE2  0100               	movlb	0	; () banked
  1058  000FE4  5DE2               	subwf	main@adc& (0+255),w,b
  1059  000FE6  B0D8               	btfsc	status,0,c
  1060  000FE8  D013               	goto	l3068
  1061  000FEA                     l3062:
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;main.c: 55: adc_values[adc] = 0;
  1065  000FEA  90D8               	bcf	status,0,c
  1066  000FEC  0100               	movlb	0	; () banked
  1067  000FEE  35E2               	rlcf	main@adc& (0+255),w,b
  1068  000FF0  6ED9               	movwf	fsr2l,c
  1069  000FF2  0100               	movlb	0	; () banked
  1070  000FF4  35E3               	rlcf	(main@adc+1)& (0+255),w,b
  1071  000FF6  6EDA               	movwf	fsr2h,c
  1072  000FF8  0E80               	movlw	low _adc_values
  1073  000FFA  26D9               	addwf	fsr2l,f,c
  1074  000FFC  0E00               	movlw	high _adc_values
  1075  000FFE  22DA               	addwfc	fsr2h,f,c
  1076  001000  0E00               	movlw	0
  1077  001002  6EDE               	movwf	postinc2,c
  1078  001004  0E00               	movlw	0
  1079  001006  6EDD               	movwf	postdec2,c
  1080                           
  1081                           ; BSR set to: 0
  1082  001008  0100               	movlb	0	; () banked
  1083  00100A  4BE2               	infsnz	main@adc& (0+255),f,b
  1084  00100C  2BE3               	incf	(main@adc+1)& (0+255),f,b
  1085  00100E  D7E2               	goto	l3058
  1086  001010                     l3068:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main.c: 56: }
  1090                           ;main.c: 59: SYSTEM_Initialize();
  1091  001010  EC5B  F011         	call	_SYSTEM_Initialize	;wreg free
  1092                           
  1093                           ;main.c: 60: do { LATDbits.LATD3 = 1; } while(0);
  1094  001014  868C               	bsf	3980,3,c	;volatile
  1095                           
  1096                           ;main.c: 78: (INTCONbits.GIE = 1);
  1097  001016  8EF2               	bsf	intcon,7,c	;volatile
  1098                           
  1099                           ;main.c: 79: do { LATDbits.LATD2 = 1; } while(0);
  1100  001018  848C               	bsf	3980,2,c	;volatile
  1101                           
  1102                           ;main.c: 81: (INTCONbits.PEIE = 1);
  1103  00101A  8CF2               	bsf	intcon,6,c	;volatile
  1104                           
  1105                           ;main.c: 88: printf("PM Robotix\r\n");
  1106  00101C  0EB2               	movlw	low STR_2
  1107  00101E  0100               	movlb	0	; () banked
  1108  001020  6FCB               	movwf	printf@f& (0+255),b
  1109  001022  0E0F               	movlw	high STR_2
  1110  001024  0100               	movlb	0	; () banked
  1111  001026  6FCC               	movwf	(printf@f+1)& (0+255),b
  1112  001028  EC0D  F009         	call	_printf	;wreg free
  1113                           
  1114                           ;main.c: 89: printf("Init completed\r\n");
  1115  00102C  0E92               	movlw	low STR_3
  1116  00102E  0100               	movlb	0	; () banked
  1117  001030  6FCB               	movwf	printf@f& (0+255),b
  1118  001032  0E0F               	movlw	high STR_3
  1119  001034  0100               	movlb	0	; () banked
  1120  001036  6FCC               	movwf	(printf@f+1)& (0+255),b
  1121  001038  EC0D  F009         	call	_printf	;wreg free
  1122                           
  1123                           ;main.c: 91: int delay = 10;
  1124  00103C  0E00               	movlw	0
  1125  00103E  0100               	movlb	0	; () banked
  1126  001040  6FE7               	movwf	(main@delay+1)& (0+255),b
  1127  001042  0E0A               	movlw	10
  1128  001044  6FE6               	movwf	main@delay& (0+255),b
  1129                           
  1130                           ; BSR set to: 0
  1131                           
  1132                           ; BSR set to: 0
  1133                           
  1134                           ;main.c: 92: do { LATDbits.LATD1 = 1; } while(0);
  1135  001046  828C               	bsf	3980,1,c	;volatile
  1136                           
  1137                           ; BSR set to: 0
  1138                           
  1139                           ; BSR set to: 0
  1140                           
  1141                           ;main.c: 93: do { LATDbits.LATD0 = 1; } while(0);
  1142                           
  1143                           ; BSR set to: 0
  1144  001048  808C               	bsf	3980,0,c	;volatile
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 94: for (int i = 0; i < 2; i++) {
  1148                           
  1149                           ; BSR set to: 0
  1150  00104A  0E00               	movlw	0
  1151  00104C  0100               	movlb	0	; () banked
  1152  00104E  6FDF               	movwf	(main@i+1)& (0+255),b
  1153  001050  0E00               	movlw	0
  1154  001052  6FDE               	movwf	main@i& (0+255),b
  1155  001054                     l3090:
  1156                           
  1157                           ; BSR set to: 0
  1158  001054  0100               	movlb	0	; () banked
  1159  001056  BFDF               	btfsc	(main@i+1)& (0+255),7,b
  1160  001058  D008               	goto	l342
  1161  00105A  0100               	movlb	0	; () banked
  1162  00105C  51DF               	movf	(main@i+1)& (0+255),w,b
  1163  00105E  E15F               	bnz	l382
  1164  001060  0E02               	movlw	2
  1165  001062  0100               	movlb	0	; () banked
  1166  001064  5DDE               	subwf	main@i& (0+255),w,b
  1167  001066  B0D8               	btfsc	status,0,c
  1168  001068  D05A               	goto	l382
  1169  00106A                     l342:
  1170                           
  1171                           ; BSR set to: 0
  1172  00106A  868C               	bsf	3980,3,c	;volatile
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;main.c: 97: delay_ms(delay);
  1176                           
  1177                           ; BSR set to: 0
  1178  00106C  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1179  001070  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1180  001074  ECC8  F00E         	call	_delay_ms	;wreg free
  1181                           
  1182                           ;main.c: 98: do { LATDbits.LATD3 = 0; } while(0);
  1183  001078  968C               	bcf	3980,3,c	;volatile
  1184                           
  1185                           ;main.c: 99: do { LATDbits.LATD2 = 1; } while(0);
  1186  00107A  848C               	bsf	3980,2,c	;volatile
  1187                           
  1188                           ;main.c: 100: delay_ms(delay);
  1189  00107C  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1190  001080  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1191  001084  ECC8  F00E         	call	_delay_ms	;wreg free
  1192                           
  1193                           ;main.c: 101: do { LATDbits.LATD2 = 0; } while(0);
  1194  001088  948C               	bcf	3980,2,c	;volatile
  1195                           
  1196                           ;main.c: 102: do { LATDbits.LATD1 = 1; } while(0);
  1197  00108A  828C               	bsf	3980,1,c	;volatile
  1198                           
  1199                           ;main.c: 103: delay_ms(delay);
  1200  00108C  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1201  001090  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1202  001094  ECC8  F00E         	call	_delay_ms	;wreg free
  1203                           
  1204                           ;main.c: 104: do { LATDbits.LATD1 = 0; } while(0);
  1205  001098  928C               	bcf	3980,1,c	;volatile
  1206                           
  1207                           ;main.c: 105: do { LATDbits.LATD0 = 1; } while(0);
  1208  00109A  808C               	bsf	3980,0,c	;volatile
  1209                           
  1210                           ;main.c: 106: delay_ms(delay);
  1211  00109C  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1212  0010A0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1213  0010A4  ECC8  F00E         	call	_delay_ms	;wreg free
  1214                           
  1215                           ;main.c: 107: do { LATDbits.LATD0 = 0; } while(0);
  1216  0010A8  908C               	bcf	3980,0,c	;volatile
  1217                           
  1218                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  1219  0010AA  848B               	bsf	3979,2,c	;volatile
  1220                           
  1221                           ;main.c: 109: delay_ms(delay);
  1222  0010AC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1223  0010B0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1224  0010B4  ECC8  F00E         	call	_delay_ms	;wreg free
  1225                           
  1226                           ;main.c: 110: do { LATCbits.LATC2 = 0; } while(0);
  1227  0010B8  948B               	bcf	3979,2,c	;volatile
  1228                           
  1229                           ;main.c: 111: do { LATCbits.LATC1 = 1; } while(0);
  1230  0010BA  828B               	bsf	3979,1,c	;volatile
  1231                           
  1232                           ;main.c: 112: delay_ms(delay);
  1233  0010BC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1234  0010C0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1235  0010C4  ECC8  F00E         	call	_delay_ms	;wreg free
  1236                           
  1237                           ;main.c: 113: do { LATCbits.LATC1 = 0; } while(0);
  1238  0010C8  928B               	bcf	3979,1,c	;volatile
  1239                           
  1240                           ;main.c: 114: do { LATCbits.LATC0 = 1; } while(0);
  1241  0010CA  808B               	bsf	3979,0,c	;volatile
  1242                           
  1243                           ;main.c: 115: delay_ms(delay);
  1244  0010CC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1245  0010D0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1246  0010D4  ECC8  F00E         	call	_delay_ms	;wreg free
  1247                           
  1248                           ;main.c: 116: do { LATCbits.LATC0 = 0; } while(0);
  1249  0010D8  908B               	bcf	3979,0,c	;volatile
  1250                           
  1251                           ;main.c: 117: do { LATBbits.LATB0 = 1; } while(0);
  1252  0010DA  808A               	bsf	3978,0,c	;volatile
  1253                           
  1254                           ;main.c: 118: delay_ms(delay);
  1255  0010DC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1256  0010E0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1257  0010E4  ECC8  F00E         	call	_delay_ms	;wreg free
  1258                           
  1259                           ;main.c: 119: do { LATBbits.LATB0 = 0; } while(0);
  1260  0010E8  908A               	bcf	3978,0,c	;volatile
  1261                           
  1262                           ;main.c: 120: do { LATBbits.LATB2 = 1; } while(0);
  1263  0010EA  848A               	bsf	3978,2,c	;volatile
  1264                           
  1265                           ;main.c: 121: delay_ms(delay);
  1266  0010EC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1267  0010F0  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1268  0010F4  ECC8  F00E         	call	_delay_ms	;wreg free
  1269                           
  1270                           ;main.c: 122: do { LATBbits.LATB2 = 0; } while(0);
  1271  0010F8  948A               	bcf	3978,2,c	;volatile
  1272                           
  1273                           ;main.c: 123: do { LATBbits.LATB3 = 1; } while(0);
  1274  0010FA  868A               	bsf	3978,3,c	;volatile
  1275                           
  1276                           ;main.c: 124: delay_ms(delay);
  1277  0010FC  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1278  001100  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1279  001104  ECC8  F00E         	call	_delay_ms	;wreg free
  1280                           
  1281                           ;main.c: 125: do { LATBbits.LATB3 = 0; } while(0);
  1282  001108  968A               	bcf	3978,3,c	;volatile
  1283                           
  1284                           ;main.c: 126: delay_ms(delay);
  1285  00110A  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1286  00110E  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1287  001112  ECC8  F00E         	call	_delay_ms	;wreg free
  1288  001116  0100               	movlb	0	; () banked
  1289  001118  4BDE               	infsnz	main@i& (0+255),f,b
  1290  00111A  2BDF               	incf	(main@i+1)& (0+255),f,b
  1291  00111C  D79B               	goto	l3090
  1292  00111E                     l382:
  1293                           
  1294                           ; BSR set to: 0
  1295  00111E  988C               	bcf	3980,4,c	;volatile
  1296  001120                     l385:
  1297  001120  868A               	bsf	3978,3,c	;volatile
  1298                           
  1299                           ;main.c: 134: if(0){
  1300  001122  D06B               	goto	l3166
  1301  001124                     l3140:
  1302                           
  1303                           ; BSR set to: 0
  1304  001124  0100               	movlb	0	; () banked
  1305  001126  BFE1               	btfsc	(main@i_1270+1)& (0+255),7,b
  1306  001128  D007               	goto	l3144
  1307  00112A  0100               	movlb	0	; () banked
  1308  00112C  51E1               	movf	(main@i_1270+1)& (0+255),w,b
  1309  00112E  E165               	bnz	l3166
  1310  001130  0100               	movlb	0	; () banked
  1311  001132  05E0               	decf	main@i_1270& (0+255),w,b
  1312  001134  B0D8               	btfsc	status,0,c
  1313  001136  D061               	goto	l3166
  1314  001138                     l3144:
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 137: printf("Reading all ADC\r\n");
  1318  001138  0E80               	movlw	low STR_4
  1319  00113A  0100               	movlb	0	; () banked
  1320  00113C  6FCB               	movwf	printf@f& (0+255),b
  1321  00113E  0E0F               	movlw	high STR_4
  1322  001140  0100               	movlb	0	; () banked
  1323  001142  6FCC               	movwf	(printf@f+1)& (0+255),b
  1324  001144  EC0D  F009         	call	_printf	;wreg free
  1325                           
  1326                           ;main.c: 138: for (int adc = 0; adc < 10; adc++) {
  1327  001148  0E00               	movlw	0
  1328  00114A  0100               	movlb	0	; () banked
  1329  00114C  6FE5               	movwf	(main@adc_1272+1)& (0+255),b
  1330  00114E  0E00               	movlw	0
  1331  001150  6FE4               	movwf	main@adc_1272& (0+255),b
  1332  001152                     l3148:
  1333                           
  1334                           ; BSR set to: 0
  1335  001152  0100               	movlb	0	; () banked
  1336  001154  BFE5               	btfsc	(main@adc_1272+1)& (0+255),7,b
  1337  001156  D008               	goto	l3152
  1338  001158  0100               	movlb	0	; () banked
  1339  00115A  51E5               	movf	(main@adc_1272+1)& (0+255),w,b
  1340  00115C  E143               	bnz	l3160
  1341  00115E  0E0A               	movlw	10
  1342  001160  0100               	movlb	0	; () banked
  1343  001162  5DE4               	subwf	main@adc_1272& (0+255),w,b
  1344  001164  B0D8               	btfsc	status,0,c
  1345  001166  D03E               	goto	l3160
  1346  001168                     l3152:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 139: adc_values[adc] = ADC_GetConversion(adc) / 16;
  1350  001168  0100               	movlb	0	; () banked
  1351  00116A  51E4               	movf	main@adc_1272& (0+255),w,b
  1352  00116C  ECB0  F010         	call	_ADC_GetConversion
  1353  001170  0E04               	movlw	4
  1354  001172  0100               	movlb	0	; () banked
  1355  001174  6FDD               	movwf	??_main& (0+255),b
  1356  001176                     u2055:
  1357  001176  0100               	movlb	0	; () banked
  1358  001178  90D8               	bcf	status,0,c
  1359  00117A  33B6               	rrcf	(?_ADC_GetConversion+1)& (0+255),f,b
  1360  00117C  33B5               	rrcf	?_ADC_GetConversion& (0+255),f,b
  1361  00117E  0100               	movlb	0	; () banked
  1362  001180  2FDD               	decfsz	??_main& (0+255),f,b
  1363  001182  D7F9               	goto	u2055
  1364  001184  90D8               	bcf	status,0,c
  1365  001186  0100               	movlb	0	; () banked
  1366  001188  35E4               	rlcf	main@adc_1272& (0+255),w,b
  1367  00118A  6ED9               	movwf	fsr2l,c
  1368  00118C  0100               	movlb	0	; () banked
  1369  00118E  35E5               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1370  001190  6EDA               	movwf	fsr2h,c
  1371  001192  0E80               	movlw	low _adc_values
  1372  001194  26D9               	addwf	fsr2l,f,c
  1373  001196  0E00               	movlw	high _adc_values
  1374  001198  22DA               	addwfc	fsr2h,f,c
  1375  00119A  0100               	movlb	0	; () banked
  1376  00119C  C0B5  FFDE         	movff	?_ADC_GetConversion,postinc2
  1377  0011A0  0100               	movlb	0	; () banked
  1378  0011A2  C0B6  FFDD         	movff	?_ADC_GetConversion+1,postdec2
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 140: printf("ADC %d : %ld\r\n", adc, adc_values[adc]);
  1382  0011A6  0EA3               	movlw	low STR_5
  1383  0011A8  0100               	movlb	0	; () banked
  1384  0011AA  6FCB               	movwf	printf@f& (0+255),b
  1385  0011AC  0E0F               	movlw	high STR_5
  1386  0011AE  0100               	movlb	0	; () banked
  1387  0011B0  6FCC               	movwf	(printf@f+1)& (0+255),b
  1388  0011B2  C0E4  F0CD         	movff	main@adc_1272,?_printf+2
  1389  0011B6  C0E5  F0CE         	movff	main@adc_1272+1,?_printf+3
  1390  0011BA  90D8               	bcf	status,0,c
  1391  0011BC  0100               	movlb	0	; () banked
  1392  0011BE  35E4               	rlcf	main@adc_1272& (0+255),w,b
  1393  0011C0  6ED9               	movwf	fsr2l,c
  1394  0011C2  0100               	movlb	0	; () banked
  1395  0011C4  35E5               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1396  0011C6  6EDA               	movwf	fsr2h,c
  1397  0011C8  0E80               	movlw	low _adc_values
  1398  0011CA  26D9               	addwf	fsr2l,f,c
  1399  0011CC  0E00               	movlw	high _adc_values
  1400  0011CE  22DA               	addwfc	fsr2h,f,c
  1401  0011D0  CFDE F0CF          	movff	postinc2,?_printf+4
  1402  0011D4  CFDD F0D0          	movff	postdec2,?_printf+5
  1403  0011D8  EC0D  F009         	call	_printf	;wreg free
  1404  0011DC  0100               	movlb	0	; () banked
  1405  0011DE  4BE4               	infsnz	main@adc_1272& (0+255),f,b
  1406  0011E0  2BE5               	incf	(main@adc_1272+1)& (0+255),f,b
  1407  0011E2  D7B7               	goto	l3148
  1408  0011E4                     l3160:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;main.c: 141: }
  1412                           ;main.c: 142: delay_ms(50);
  1413  0011E4  0E00               	movlw	0
  1414  0011E6  0100               	movlb	0	; () banked
  1415  0011E8  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1416  0011EA  0E32               	movlw	50
  1417  0011EC  6FBD               	movwf	delay_ms@ms& (0+255),b
  1418  0011EE  ECC8  F00E         	call	_delay_ms	;wreg free
  1419  0011F2  0100               	movlb	0	; () banked
  1420  0011F4  4BE0               	infsnz	main@i_1270& (0+255),f,b
  1421  0011F6  2BE1               	incf	(main@i_1270+1)& (0+255),f,b
  1422  0011F8  D795               	goto	l3140
  1423  0011FA                     l3166:
  1424                           
  1425                           ;main.c: 143: }}
  1426                           ;main.c: 144: delay_ms(500);
  1427  0011FA  0E01               	movlw	1
  1428  0011FC  0100               	movlb	0	; () banked
  1429  0011FE  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1430  001200  0EF4               	movlw	244
  1431  001202  6FBD               	movwf	delay_ms@ms& (0+255),b
  1432  001204  ECC8  F00E         	call	_delay_ms	;wreg free
  1433                           
  1434                           ;main.c: 145: do { LATBbits.LATB3 = 0; } while(0);
  1435  001208  968A               	bcf	3978,3,c	;volatile
  1436                           
  1437                           ;main.c: 146: delay_ms(500);
  1438  00120A  0E01               	movlw	1
  1439  00120C  0100               	movlb	0	; () banked
  1440  00120E  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1441  001210  0EF4               	movlw	244
  1442  001212  6FBD               	movwf	delay_ms@ms& (0+255),b
  1443  001214  ECC8  F00E         	call	_delay_ms	;wreg free
  1444  001218  D783               	goto	l385
  1445  00121A                     __end_of_main:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           intcon	equ	0xFF2
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postinc2	equ	0xFDE
  1455                           postdec2	equ	0xFDD
  1456                           fsr2h	equ	0xFDA
  1457                           fsr2l	equ	0xFD9
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _printf *****************
  1461 ;; Defined at:
  1462 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1465 ;;		 -> STR_8(15), STR_7(47), STR_6(40), STR_5(15), 
  1466 ;;		 -> STR_4(18), STR_3(17), STR_2(13), STR_1(10), 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  val             4   49[BANK0 ] unsigned long 
  1469 ;;  tmpval          4    0        struct .
  1470 ;;  cp              3    0        PTR const unsigned char 
  1471 ;;  ap              2   46[BANK0 ] PTR void [1]
  1472 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1473 ;;  prec            2   44[BANK0 ] int 
  1474 ;;  len             2    0        unsigned int 
  1475 ;;  c               1   53[BANK0 ] char 
  1476 ;;  flag            1   48[BANK0 ] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  2   36[BANK0 ] int 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1486 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1487 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1489 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1490 ;;Total ram usage:       18 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    8
  1493 ;; This function calls:
  1494 ;;		___lldiv
  1495 ;;		___llmod
  1496 ;;		_putch
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text1
  1503  00121A                     __ptext1:
  1504                           	opt stack 0
  1505  00121A                     _printf:
  1506                           	opt stack 22
  1507                           
  1508                           ;doprnt.c: 466: va_list ap;
  1509                           ;doprnt.c: 499: signed char c;
  1510                           ;doprnt.c: 504: int prec;
  1511                           ;doprnt.c: 508: unsigned char flag;
  1512                           ;doprnt.c: 523: union {
  1513                           ;doprnt.c: 524: unsigned long vd;
  1514                           ;doprnt.c: 525: double integ;
  1515                           ;doprnt.c: 526: } tmpval;
  1516                           ;doprnt.c: 528: unsigned long val;
  1517                           ;doprnt.c: 529: unsigned len;
  1518                           ;doprnt.c: 530: const char * cp;
  1519                           ;doprnt.c: 533: *ap = __va_start();
  1520                           
  1521                           ;incstack = 0
  1522  00121A  0ECD               	movlw	low (?_printf+2)
  1523  00121C  0100               	movlb	0	; () banked
  1524  00121E  6FD5               	movwf	printf@ap& (0+255),b
  1525  001220  0E00               	movlw	high (?_printf+2)
  1526  001222  0100               	movlb	0	; () banked
  1527  001224  6FD6               	movwf	(printf@ap+1)& (0+255),b
  1528                           
  1529                           ;doprnt.c: 536: while(c = *f++) {
  1530  001226  D0EB               	goto	l2978
  1531  001228                     l2926:
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 538: if(c != '%')
  1535  001228  0E25               	movlw	37
  1536  00122A  0100               	movlb	0	; () banked
  1537  00122C  19DC               	xorwf	printf@c& (0+255),w,b
  1538  00122E  B4D8               	btfsc	status,2,c
  1539  001230  D005               	goto	l2930
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 540: {
  1543                           ;doprnt.c: 541: (putch(c) );
  1544  001232  0100               	movlb	0	; () banked
  1545  001234  51DC               	movf	printf@c& (0+255),w,b
  1546  001236  ECAC  F011         	call	_putch
  1547                           
  1548                           ;doprnt.c: 542: continue;
  1549  00123A  D0E1               	goto	l2978
  1550  00123C                     l2930:
  1551                           
  1552                           ;doprnt.c: 543: }
  1553                           ;doprnt.c: 548: flag = 0;
  1554  00123C  0E00               	movlw	0
  1555  00123E  0100               	movlb	0	; () banked
  1556  001240  6FD7               	movwf	printf@flag& (0+255),b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;doprnt.c: 635: switch(c = *f++) {
  1560                           
  1561                           ;doprnt.c: 633: loop:
  1562  001242  D002               	goto	l2936
  1563  001244                     l2932:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 643: flag |= 0x10;
  1567  001244  0100               	movlb	0	; () banked
  1568  001246  89D7               	bsf	printf@flag& (0+255),4,b
  1569  001248                     l2936:
  1570                           
  1571                           ; BSR set to: 0
  1572  001248  C0CB  FFF6         	movff	printf@f,tblptrl
  1573  00124C  C0CC  FFF7         	movff	printf@f+1,tblptrh
  1574  001250  0100               	movlb	0	; () banked
  1575  001252  4BCB               	infsnz	printf@f& (0+255),f,b
  1576  001254  2BCC               	incf	(printf@f+1)& (0+255),f,b
  1577  001256                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1578  001256  6AF8               	clrf	tblptru,c
  1579  001258                     	endif
  1580  001258                     	if	0	;tblptru may be non-zero
  1581  001258                     	endif
  1582  001258  0008               	tblrd		*
  1583  00125A  CFF5 F0DC          	movff	tablat,printf@c
  1584  00125E  0100               	movlb	0	; () banked
  1585  001260  51DC               	movf	printf@c& (0+255),w,b
  1586                           
  1587                           ; Switch size 1, requested type "space"
  1588                           ; Number of cases is 4, Range of values is 0 to 108
  1589                           ; switch strategies available:
  1590                           ; Name         Instructions Cycles
  1591                           ; simple_byte           13     7 (average)
  1592                           ;	Chosen strategy is simple_byte
  1593  001262  0A00               	xorlw	0	; case 0
  1594  001264  B4D8               	btfsc	status,2,c
  1595  001266  0012               	return	
  1596  001268  0A64               	xorlw	100	; case 100
  1597  00126A  B4D8               	btfsc	status,2,c
  1598  00126C  D007               	goto	l629
  1599  00126E  0A0D               	xorlw	13	; case 105
  1600  001270  B4D8               	btfsc	status,2,c
  1601  001272  D004               	goto	l629
  1602  001274  0A05               	xorlw	5	; case 108
  1603  001276  B4D8               	btfsc	status,2,c
  1604  001278  D7E5               	goto	l2932
  1605  00127A  D0C1               	goto	l2978
  1606  00127C                     l629:
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;doprnt.c: 1253: {
  1610                           ;doprnt.c: 1255: if(flag & 0x10)
  1611  00127C  0100               	movlb	0	; () banked
  1612  00127E  A9D7               	btfss	printf@flag& (0+255),4,b
  1613  001280  D00E               	goto	l2942
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1617  001282  C0D5  FFD9         	movff	printf@ap,fsr2l
  1618  001286  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  1619  00128A  CFDE F0D8          	movff	postinc2,printf@val
  1620  00128E  CFDE F0D9          	movff	postinc2,printf@val+1
  1621  001292  CFDE F0DA          	movff	postinc2,printf@val+2
  1622  001296  CFDE F0DB          	movff	postinc2,printf@val+3
  1623                           
  1624                           ; BSR set to: 0
  1625  00129A  0E04               	movlw	4
  1626  00129C  D00F               	goto	L3
  1627  00129E                     l2942:
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;doprnt.c: 1257: else
  1631                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1632  00129E  C0D5  FFD9         	movff	printf@ap,fsr2l
  1633  0012A2  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  1634  0012A6  CFDE F0D8          	movff	postinc2,printf@val
  1635  0012AA  CFDD F0D9          	movff	postdec2,printf@val+1
  1636  0012AE  0100               	movlb	0	; () banked
  1637  0012B0  0E00               	movlw	0
  1638  0012B2  BFD9               	btfsc	(printf@val+1)& (0+255),7,b
  1639  0012B4  0EFF               	movlw	-1
  1640  0012B6  6FDA               	movwf	(printf@val+2)& (0+255),b
  1641  0012B8  6FDB               	movwf	(printf@val+3)& (0+255),b
  1642                           
  1643                           ; BSR set to: 0
  1644  0012BA  0E02               	movlw	2
  1645  0012BC                     L3:
  1646  0012BC  0100               	movlb	0	; () banked
  1647  0012BE  27D5               	addwf	printf@ap& (0+255),f,b
  1648  0012C0  0E00               	movlw	0
  1649  0012C2  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 1261: if((long)val < 0) {
  1653                           
  1654                           ; BSR set to: 0
  1655  0012C4  0100               	movlb	0	; () banked
  1656  0012C6  AFDB               	btfss	(printf@val+3)& (0+255),7,b
  1657  0012C8  D00C               	goto	l2952
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;doprnt.c: 1262: flag |= 0x03;
  1661  0012CA  0E03               	movlw	3
  1662  0012CC  0100               	movlb	0	; () banked
  1663  0012CE  13D7               	iorwf	printf@flag& (0+255),f,b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;doprnt.c: 1263: val = -val;
  1667  0012D0  0100               	movlb	0	; () banked
  1668  0012D2  1FDB               	comf	(printf@val+3)& (0+255),f,b
  1669  0012D4  1FDA               	comf	(printf@val+2)& (0+255),f,b
  1670  0012D6  1FD9               	comf	(printf@val+1)& (0+255),f,b
  1671  0012D8  6DD8               	negf	printf@val& (0+255),b
  1672  0012DA  0E00               	movlw	0
  1673  0012DC  23D9               	addwfc	(printf@val+1)& (0+255),f,b
  1674  0012DE  23DA               	addwfc	(printf@val+2)& (0+255),f,b
  1675  0012E0  23DB               	addwfc	(printf@val+3)& (0+255),f,b
  1676  0012E2                     l2952:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;doprnt.c: 1264: }
  1680                           ;doprnt.c: 1266: }
  1681                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1682  0012E2  0E01               	movlw	1
  1683  0012E4  0100               	movlb	0	; () banked
  1684  0012E6  6FDC               	movwf	printf@c& (0+255),b
  1685  0012E8                     l2954:
  1686                           
  1687                           ; BSR set to: 0
  1688  0012E8  0E0A               	movlw	10
  1689  0012EA  0100               	movlb	0	; () banked
  1690  0012EC  19DC               	xorwf	printf@c& (0+255),w,b
  1691  0012EE  B4D8               	btfsc	status,2,c
  1692  0012F0  D021               	goto	l2966
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;doprnt.c: 1306: if(val < dpowers[c])
  1696                           
  1697                           ; BSR set to: 0
  1698                           
  1699                           ; BSR set to: 0
  1700  0012F2  0100               	movlb	0	; () banked
  1701  0012F4  51DC               	movf	printf@c& (0+255),w,b
  1702  0012F6  0D04               	mullw	4
  1703  0012F8  0E01               	movlw	low _dpowers
  1704  0012FA  24F3               	addwf	prodl,w,c
  1705  0012FC  6EF6               	movwf	tblptrl,c
  1706  0012FE  0E0F               	movlw	high _dpowers
  1707  001300  20F4               	addwfc	prodh,w,c
  1708  001302  6EF7               	movwf	tblptrh,c
  1709  001304                     	if	1	;There are 3 active tblptr bytes
  1710  001304  6AF8               	clrf	tblptru,c
  1711  001306  0E00               	movlw	low (__mediumconst shr (0+16))
  1712  001308  22F8               	addwfc	tblptru,f,c
  1713  00130A                     	endif
  1714  00130A  0009               	tblrd		*+
  1715  00130C  50F5               	movf	tablat,w,c
  1716  00130E  0100               	movlb	0	; () banked
  1717  001310  5DD8               	subwf	printf@val& (0+255),w,b
  1718  001312  0009               	tblrd		*+
  1719  001314  50F5               	movf	tablat,w,c
  1720  001316  0100               	movlb	0	; () banked
  1721  001318  59D9               	subwfb	(printf@val+1)& (0+255),w,b
  1722  00131A  0009               	tblrd		*+
  1723  00131C  50F5               	movf	tablat,w,c
  1724  00131E  0100               	movlb	0	; () banked
  1725  001320  59DA               	subwfb	(printf@val+2)& (0+255),w,b
  1726  001322  0009               	tblrd		*+
  1727  001324  50F5               	movf	tablat,w,c
  1728  001326  0100               	movlb	0	; () banked
  1729  001328  59DB               	subwfb	(printf@val+3)& (0+255),w,b
  1730  00132A  A0D8               	btfss	status,0,c
  1731  00132C  D003               	goto	l2966
  1732                           
  1733                           ; BSR set to: 0
  1734                           
  1735                           ; BSR set to: 0
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 1307: break;
  1739  00132E  0100               	movlb	0	; () banked
  1740  001330  2BDC               	incf	printf@c& (0+255),f,b
  1741  001332  D7DA               	goto	l2954
  1742  001334                     l2966:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;doprnt.c: 1422: {
  1746                           ;doprnt.c: 1438: if(flag & 0x03)
  1747  001334  C0D7  F0D1         	movff	printf@flag,??_printf
  1748  001338  0E03               	movlw	3
  1749  00133A  0100               	movlb	0	; () banked
  1750  00133C  17D1               	andwf	??_printf& (0+255),f,b
  1751  00133E  B4D8               	btfsc	status,2,c
  1752  001340  D003               	goto	l2970
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;doprnt.c: 1439: (putch('-') );
  1756  001342  0E2D               	movlw	45
  1757  001344  ECAC  F011         	call	_putch
  1758  001348                     l2970:
  1759                           
  1760                           ;doprnt.c: 1469: }
  1761                           ;doprnt.c: 1472: prec = c;
  1762  001348  0100               	movlb	0	; () banked
  1763  00134A  51DC               	movf	printf@c& (0+255),w,b
  1764  00134C  0100               	movlb	0	; () banked
  1765  00134E  6FD3               	movwf	printf@prec& (0+255),b
  1766  001350  6BD4               	clrf	(printf@prec+1)& (0+255),b
  1767  001352  BFD3               	btfsc	printf@prec& (0+255),7,b
  1768  001354  07D4               	decf	(printf@prec+1)& (0+255),f,b
  1769                           
  1770                           ;doprnt.c: 1474: while(prec--) {
  1771  001356  D048               	goto	l2976
  1772  001358                     l2972:
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;doprnt.c: 1478: {
  1776                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1777  001358  C0D3  F0D1         	movff	printf@prec,??_printf
  1778  00135C  C0D4  F0D2         	movff	printf@prec+1,??_printf+1
  1779  001360  0100               	movlb	0	; () banked
  1780  001362  90D8               	bcf	status,0,c
  1781  001364  37D1               	rlcf	??_printf& (0+255),f,b
  1782  001366  37D2               	rlcf	(??_printf+1)& (0+255),f,b
  1783  001368  0100               	movlb	0	; () banked
  1784  00136A  90D8               	bcf	status,0,c
  1785  00136C  37D1               	rlcf	??_printf& (0+255),f,b
  1786  00136E  37D2               	rlcf	(??_printf+1)& (0+255),f,b
  1787  001370  0E01               	movlw	low _dpowers
  1788  001372  0100               	movlb	0	; () banked
  1789  001374  25D1               	addwf	??_printf& (0+255),w,b
  1790  001376  6EF6               	movwf	tblptrl,c
  1791  001378  0E0F               	movlw	high _dpowers
  1792  00137A  21D2               	addwfc	(??_printf+1)& (0+255),w,b
  1793  00137C  6EF7               	movwf	tblptrh,c
  1794  00137E                     	if	1	;There are 3 active tblptr bytes
  1795  00137E  6AF8               	clrf	tblptru,c
  1796  001380  0E00               	movlw	low (__mediumconst shr (0+16))
  1797  001382  22F8               	addwfc	tblptru,f,c
  1798  001384                     	endif
  1799  001384  0009               	tblrd		*+
  1800  001386  CFF5 F0B9          	movff	tablat,___lldiv@divisor
  1801  00138A  0009               	tblrd		*+
  1802  00138C  CFF5 F0BA          	movff	tablat,___lldiv@divisor+1
  1803  001390  0009               	tblrd		*+
  1804  001392  CFF5 F0BB          	movff	tablat,___lldiv@divisor+2
  1805  001396  000A               	tblrd		*-
  1806  001398  CFF5 F0BC          	movff	tablat,___lldiv@divisor+3
  1807  00139C  C0D8  F0B5         	movff	printf@val,___lldiv@dividend
  1808  0013A0  C0D9  F0B6         	movff	printf@val+1,___lldiv@dividend+1
  1809  0013A4  C0DA  F0B7         	movff	printf@val+2,___lldiv@dividend+2
  1810  0013A8  C0DB  F0B8         	movff	printf@val+3,___lldiv@dividend+3
  1811  0013AC  EC7B  F00D         	call	___lldiv	;wreg free
  1812  0013B0  C0B5  F0C2         	movff	?___lldiv,___llmod@dividend
  1813  0013B4  C0B6  F0C3         	movff	?___lldiv+1,___llmod@dividend+1
  1814  0013B8  C0B7  F0C4         	movff	?___lldiv+2,___llmod@dividend+2
  1815  0013BC  C0B8  F0C5         	movff	?___lldiv+3,___llmod@dividend+3
  1816  0013C0  0E0A               	movlw	10
  1817  0013C2  0100               	movlb	0	; () banked
  1818  0013C4  6FC6               	movwf	___llmod@divisor& (0+255),b
  1819  0013C6  0E00               	movlw	0
  1820  0013C8  6FC7               	movwf	(___llmod@divisor+1)& (0+255),b
  1821  0013CA  0E00               	movlw	0
  1822  0013CC  6FC8               	movwf	(___llmod@divisor+2)& (0+255),b
  1823  0013CE  0E00               	movlw	0
  1824  0013D0  6FC9               	movwf	(___llmod@divisor+3)& (0+255),b
  1825  0013D2  EC2F  F00E         	call	___llmod	;wreg free
  1826  0013D6  0100               	movlb	0	; () banked
  1827  0013D8  51C2               	movf	?___llmod& (0+255),w,b
  1828  0013DA  0F30               	addlw	48
  1829  0013DC  0100               	movlb	0	; () banked
  1830  0013DE  6FDC               	movwf	printf@c& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;doprnt.c: 1523: }
  1834                           ;doprnt.c: 1524: (putch(c) );
  1835  0013E0  0100               	movlb	0	; () banked
  1836  0013E2  51DC               	movf	printf@c& (0+255),w,b
  1837  0013E4  ECAC  F011         	call	_putch
  1838  0013E8                     l2976:
  1839  0013E8  0100               	movlb	0	; () banked
  1840  0013EA  07D3               	decf	printf@prec& (0+255),f,b
  1841  0013EC  A0D8               	btfss	status,0,c
  1842  0013EE  07D4               	decf	(printf@prec+1)& (0+255),f,b
  1843  0013F0  0100               	movlb	0	; () banked
  1844  0013F2  29D3               	incf	printf@prec& (0+255),w,b
  1845  0013F4  E1B1               	bnz	l2972
  1846  0013F6  0100               	movlb	0	; () banked
  1847  0013F8  29D4               	incf	(printf@prec+1)& (0+255),w,b
  1848  0013FA  A4D8               	btfss	status,2,c
  1849  0013FC  D7AD               	goto	l2972
  1850  0013FE                     l2978:
  1851  0013FE  C0CB  FFF6         	movff	printf@f,tblptrl
  1852  001402  C0CC  FFF7         	movff	printf@f+1,tblptrh
  1853  001406  0100               	movlb	0	; () banked
  1854  001408  4BCB               	infsnz	printf@f& (0+255),f,b
  1855  00140A  2BCC               	incf	(printf@f+1)& (0+255),f,b
  1856  00140C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1857  00140C  6AF8               	clrf	tblptru,c
  1858  00140E                     	endif
  1859  00140E                     	if	0	;tblptru may be non-zero
  1860  00140E                     	endif
  1861  00140E  0008               	tblrd		*
  1862  001410  CFF5 F0DC          	movff	tablat,printf@c
  1863  001414  0100               	movlb	0	; () banked
  1864  001416  51DC               	movf	printf@c& (0+255),w,b
  1865  001418  B4D8               	btfsc	status,2,c
  1866  00141A  0012               	return	
  1867  00141C  D705               	goto	l2926
  1868  00141E                     __end_of_printf:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           prodh	equ	0xFF4
  1875                           prodl	equ	0xFF3
  1876                           intcon	equ	0xFF2
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _putch *****************
  1886 ;; Defined at:
  1887 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  txData          1    wreg     unsigned char 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;  txData          1   15[BANK0 ] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1905 ;;Total ram usage:        1 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    7
  1908 ;; This function calls:
  1909 ;;		_EUSART2_Write
  1910 ;; This function is called by:
  1911 ;;		_printf
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text2
  1916  002358                     __ptext2:
  1917                           	opt stack 0
  1918  002358                     _putch:
  1919                           	opt stack 22
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;incstack = 0
  1923                           ;putch@txData stored from wreg
  1924  002358  0100               	movlb	0	; () banked
  1925  00235A  6FB6               	movwf	putch@txData& (0+255),b
  1926                           
  1927                           ;eusart2.c: 112: EUSART2_Write(txData);
  1928  00235C  0100               	movlb	0	; () banked
  1929  00235E  51B6               	movf	putch@txData& (0+255),w,b
  1930  002360  ECB3  F011         	call	_EUSART2_Write
  1931  002364  0012               	return		;funcret
  1932  002366                     __end_of_putch:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _EUSART2_Write *****************
  1950 ;; Defined at:
  1951 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  txData          1    wreg     unsigned char 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  txData          1   14[BANK0 ] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1969 ;;Total ram usage:        1 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    6
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_putch
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text3
  1980  002366                     __ptext3:
  1981                           	opt stack 0
  1982  002366                     _EUSART2_Write:
  1983                           	opt stack 22
  1984                           
  1985                           ;incstack = 0
  1986                           ;EUSART2_Write@txData stored from wreg
  1987  002366  0100               	movlb	0	; () banked
  1988  002368  6FB5               	movwf	EUSART2_Write@txData& (0+255),b
  1989  00236A                     l31:
  1990  00236A  A8A4               	btfss	4004,4,c	;volatile
  1991  00236C  D7FE               	goto	l31
  1992                           
  1993                           ;eusart2.c: 100: }
  1994                           ;eusart2.c: 102: TXREG2 = txData;
  1995  00236E  C0B5  FF79         	movff	EUSART2_Write@txData,3961	;volatile
  1996  002372  0012               	return		;funcret
  1997  002374                     __end_of_EUSART2_Write:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           intcon	equ	0xFF2
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function ___llmod *****************
  2015 ;; Defined at:
  2016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  dividend        4   27[BANK0 ] unsigned long 
  2019 ;;  divisor         4   31[BANK0 ] unsigned long 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  counter         1   35[BANK0 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  4   27[BANK0 ] unsigned long 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2, status,0
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2031 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2034 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2035 ;;Total ram usage:        9 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    6
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_printf
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text4
  2046  001C5E                     __ptext4:
  2047                           	opt stack 0
  2048  001C5E                     ___llmod:
  2049                           	opt stack 23
  2050                           
  2051                           ;incstack = 0
  2052  001C5E  0100               	movlb	0	; () banked
  2053  001C60  51C6               	movf	___llmod@divisor& (0+255),w,b
  2054  001C62  0100               	movlb	0	; () banked
  2055  001C64  11C7               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2056  001C66  0100               	movlb	0	; () banked
  2057  001C68  11C8               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2058  001C6A  0100               	movlb	0	; () banked
  2059  001C6C  11C9               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2060  001C6E  B4D8               	btfsc	status,2,c
  2061  001C70  D03A               	goto	l1002
  2062                           
  2063                           ; BSR set to: 0
  2064  001C72  0E01               	movlw	1
  2065  001C74  0100               	movlb	0	; () banked
  2066  001C76  6FCA               	movwf	___llmod@counter& (0+255),b
  2067  001C78  D008               	goto	l2848
  2068  001C7A                     l2846:
  2069                           
  2070                           ; BSR set to: 0
  2071  001C7A  0100               	movlb	0	; () banked
  2072  001C7C  90D8               	bcf	status,0,c
  2073  001C7E  37C6               	rlcf	___llmod@divisor& (0+255),f,b
  2074  001C80  37C7               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2075  001C82  37C8               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2076  001C84  37C9               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2077  001C86  0100               	movlb	0	; () banked
  2078  001C88  2BCA               	incf	___llmod@counter& (0+255),f,b
  2079  001C8A                     l2848:
  2080                           
  2081                           ; BSR set to: 0
  2082  001C8A  0100               	movlb	0	; () banked
  2083  001C8C  AFC9               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2084  001C8E  D7F5               	goto	l2846
  2085  001C90                     l2850:
  2086                           
  2087                           ; BSR set to: 0
  2088  001C90  0100               	movlb	0	; () banked
  2089  001C92  51C6               	movf	___llmod@divisor& (0+255),w,b
  2090  001C94  0100               	movlb	0	; () banked
  2091  001C96  5DC2               	subwf	___llmod@dividend& (0+255),w,b
  2092  001C98  0100               	movlb	0	; () banked
  2093  001C9A  51C7               	movf	(___llmod@divisor+1)& (0+255),w,b
  2094  001C9C  0100               	movlb	0	; () banked
  2095  001C9E  59C3               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2096  001CA0  0100               	movlb	0	; () banked
  2097  001CA2  51C8               	movf	(___llmod@divisor+2)& (0+255),w,b
  2098  001CA4  0100               	movlb	0	; () banked
  2099  001CA6  59C4               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2100  001CA8  0100               	movlb	0	; () banked
  2101  001CAA  51C9               	movf	(___llmod@divisor+3)& (0+255),w,b
  2102  001CAC  0100               	movlb	0	; () banked
  2103  001CAE  59C5               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2104  001CB0  A0D8               	btfss	status,0,c
  2105  001CB2  D010               	goto	l2854
  2106                           
  2107                           ; BSR set to: 0
  2108  001CB4  0100               	movlb	0	; () banked
  2109  001CB6  51C6               	movf	___llmod@divisor& (0+255),w,b
  2110  001CB8  0100               	movlb	0	; () banked
  2111  001CBA  5FC2               	subwf	___llmod@dividend& (0+255),f,b
  2112  001CBC  0100               	movlb	0	; () banked
  2113  001CBE  51C7               	movf	(___llmod@divisor+1)& (0+255),w,b
  2114  001CC0  0100               	movlb	0	; () banked
  2115  001CC2  5BC3               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2116  001CC4  0100               	movlb	0	; () banked
  2117  001CC6  51C8               	movf	(___llmod@divisor+2)& (0+255),w,b
  2118  001CC8  0100               	movlb	0	; () banked
  2119  001CCA  5BC4               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2120  001CCC  0100               	movlb	0	; () banked
  2121  001CCE  51C9               	movf	(___llmod@divisor+3)& (0+255),w,b
  2122  001CD0  0100               	movlb	0	; () banked
  2123  001CD2  5BC5               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2124  001CD4                     l2854:
  2125                           
  2126                           ; BSR set to: 0
  2127  001CD4  0100               	movlb	0	; () banked
  2128  001CD6  90D8               	bcf	status,0,c
  2129  001CD8  33C9               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2130  001CDA  33C8               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2131  001CDC  33C7               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2132  001CDE  33C6               	rrcf	___llmod@divisor& (0+255),f,b
  2133                           
  2134                           ; BSR set to: 0
  2135  001CE0  0100               	movlb	0	; () banked
  2136  001CE2  2FCA               	decfsz	___llmod@counter& (0+255),f,b
  2137  001CE4  D7D5               	goto	l2850
  2138  001CE6                     l1002:
  2139                           
  2140                           ; BSR set to: 0
  2141  001CE6  C0C2  F0C2         	movff	___llmod@dividend,?___llmod
  2142  001CEA  C0C3  F0C3         	movff	___llmod@dividend+1,?___llmod+1
  2143  001CEE  C0C4  F0C4         	movff	___llmod@dividend+2,?___llmod+2
  2144  001CF2  C0C5  F0C5         	movff	___llmod@dividend+3,?___llmod+3
  2145                           
  2146                           ; BSR set to: 0
  2147  001CF6  0012               	return		;funcret
  2148  001CF8                     __end_of___llmod:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postinc2	equ	0xFDE
  2160                           postdec2	equ	0xFDD
  2161                           fsr2h	equ	0xFDA
  2162                           fsr2l	equ	0xFD9
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function ___lldiv *****************
  2166 ;; Defined at:
  2167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  dividend        4   14[BANK0 ] unsigned long 
  2170 ;;  divisor         4   18[BANK0 ] unsigned long 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  quotient        4   22[BANK0 ] unsigned long 
  2173 ;;  counter         1   26[BANK0 ] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  4   14[BANK0 ] unsigned long 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2183 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2184 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2186 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2187 ;;Total ram usage:       13 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    6
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_printf
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text5
  2198  001AF6                     __ptext5:
  2199                           	opt stack 0
  2200  001AF6                     ___lldiv:
  2201                           	opt stack 23
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;incstack = 0
  2205  001AF6  0E00               	movlw	0
  2206  001AF8  0100               	movlb	0	; () banked
  2207  001AFA  6FBD               	movwf	___lldiv@quotient& (0+255),b
  2208  001AFC  0E00               	movlw	0
  2209  001AFE  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
  2210  001B00  0E00               	movlw	0
  2211  001B02  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
  2212  001B04  0E00               	movlw	0
  2213  001B06  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
  2214                           
  2215                           ; BSR set to: 0
  2216  001B08  0100               	movlb	0	; () banked
  2217  001B0A  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2218  001B0C  0100               	movlb	0	; () banked
  2219  001B0E  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2220  001B10  0100               	movlb	0	; () banked
  2221  001B12  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2222  001B14  0100               	movlb	0	; () banked
  2223  001B16  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2224  001B18  B4D8               	btfsc	status,2,c
  2225  001B1A  D042               	goto	l992
  2226                           
  2227                           ; BSR set to: 0
  2228  001B1C  0E01               	movlw	1
  2229  001B1E  0100               	movlb	0	; () banked
  2230  001B20  6FC1               	movwf	___lldiv@counter& (0+255),b
  2231  001B22  D008               	goto	l2828
  2232  001B24                     l2826:
  2233                           
  2234                           ; BSR set to: 0
  2235  001B24  0100               	movlb	0	; () banked
  2236  001B26  90D8               	bcf	status,0,c
  2237  001B28  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
  2238  001B2A  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2239  001B2C  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2240  001B2E  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2241  001B30  0100               	movlb	0	; () banked
  2242  001B32  2BC1               	incf	___lldiv@counter& (0+255),f,b
  2243  001B34                     l2828:
  2244                           
  2245                           ; BSR set to: 0
  2246  001B34  0100               	movlb	0	; () banked
  2247  001B36  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2248  001B38  D7F5               	goto	l2826
  2249  001B3A                     l2830:
  2250                           
  2251                           ; BSR set to: 0
  2252  001B3A  0100               	movlb	0	; () banked
  2253  001B3C  90D8               	bcf	status,0,c
  2254  001B3E  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
  2255  001B40  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2256  001B42  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2257  001B44  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2258                           
  2259                           ; BSR set to: 0
  2260  001B46  0100               	movlb	0	; () banked
  2261  001B48  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2262  001B4A  0100               	movlb	0	; () banked
  2263  001B4C  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
  2264  001B4E  0100               	movlb	0	; () banked
  2265  001B50  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2266  001B52  0100               	movlb	0	; () banked
  2267  001B54  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2268  001B56  0100               	movlb	0	; () banked
  2269  001B58  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2270  001B5A  0100               	movlb	0	; () banked
  2271  001B5C  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2272  001B5E  0100               	movlb	0	; () banked
  2273  001B60  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2274  001B62  0100               	movlb	0	; () banked
  2275  001B64  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2276  001B66  A0D8               	btfss	status,0,c
  2277  001B68  D012               	goto	l2838
  2278                           
  2279                           ; BSR set to: 0
  2280  001B6A  0100               	movlb	0	; () banked
  2281  001B6C  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2282  001B6E  0100               	movlb	0	; () banked
  2283  001B70  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
  2284  001B72  0100               	movlb	0	; () banked
  2285  001B74  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2286  001B76  0100               	movlb	0	; () banked
  2287  001B78  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2288  001B7A  0100               	movlb	0	; () banked
  2289  001B7C  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2290  001B7E  0100               	movlb	0	; () banked
  2291  001B80  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2292  001B82  0100               	movlb	0	; () banked
  2293  001B84  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2294  001B86  0100               	movlb	0	; () banked
  2295  001B88  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2296                           
  2297                           ; BSR set to: 0
  2298  001B8A  0100               	movlb	0	; () banked
  2299  001B8C  81BD               	bsf	___lldiv@quotient& (0+255),0,b
  2300  001B8E                     l2838:
  2301                           
  2302                           ; BSR set to: 0
  2303  001B8E  0100               	movlb	0	; () banked
  2304  001B90  90D8               	bcf	status,0,c
  2305  001B92  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2306  001B94  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2307  001B96  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2308  001B98  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
  2309                           
  2310                           ; BSR set to: 0
  2311  001B9A  0100               	movlb	0	; () banked
  2312  001B9C  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
  2313  001B9E  D7CD               	goto	l2830
  2314  001BA0                     l992:
  2315                           
  2316                           ; BSR set to: 0
  2317  001BA0  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
  2318  001BA4  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
  2319  001BA8  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
  2320  001BAC  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
  2321                           
  2322                           ; BSR set to: 0
  2323  001BB0  0012               	return		;funcret
  2324  001BB2                     __end_of___lldiv:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           intcon	equ	0xFF2
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function _delay_ms *****************
  2342 ;; Defined at:
  2343 ;;		line 13 in file "ax.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  ms              2   22[BANK0 ] int 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  i               2   27[BANK0 ] int 
  2348 ;;  n               2   25[BANK0 ] int 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2359 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2361 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2362 ;;Total ram usage:        7 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    7
  2365 ;; This function calls:
  2366 ;;		___awdiv
  2367 ;; This function is called by:
  2368 ;;		_main
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           	psect	text6
  2373  001D90                     __ptext6:
  2374                           	opt stack 0
  2375  001D90                     _delay_ms:
  2376                           	opt stack 23
  2377                           
  2378                           ;ax.c: 14: if (ms < 10) {
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;incstack = 0
  2382  001D90  0100               	movlb	0	; () banked
  2383  001D92  BFBE               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  2384  001D94  D008               	goto	l3008
  2385  001D96  0100               	movlb	0	; () banked
  2386  001D98  51BE               	movf	(delay_ms@ms+1)& (0+255),w,b
  2387  001D9A  E10F               	bnz	l3010
  2388  001D9C  0E0A               	movlw	10
  2389  001D9E  0100               	movlb	0	; () banked
  2390  001DA0  5DBD               	subwf	delay_ms@ms& (0+255),w,b
  2391  001DA2  B0D8               	btfsc	status,0,c
  2392  001DA4  D00A               	goto	l3010
  2393  001DA6                     l3008:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  2397  001DA6  0ED0               	movlw	208
  2398  001DA8  0100               	movlb	0	; () banked
  2399  001DAA  6FBF               	movwf	??_delay_ms& (0+255),b
  2400  001DAC  0EC9               	movlw	201
  2401  001DAE                     u2087:
  2402  001DAE  2EE8               	decfsz	wreg,f,c
  2403  001DB0  D7FE               	bra	u2087
  2404  001DB2  2FBF               	decfsz	??_delay_ms& (0+255),f,b
  2405  001DB4  D7FC               	bra	u2087
  2406  001DB6  D000               	nop2	
  2407                           
  2408                           ;ax.c: 16: } else {
  2409  001DB8  0012               	return	
  2410  001DBA                     l3010:
  2411                           
  2412                           ;ax.c: 17: int n = ms / 10;
  2413  001DBA  C0BD  F0B5         	movff	delay_ms@ms,___awdiv@dividend
  2414  001DBE  C0BE  F0B6         	movff	delay_ms@ms+1,___awdiv@dividend+1
  2415  001DC2  0E00               	movlw	0
  2416  001DC4  0100               	movlb	0	; () banked
  2417  001DC6  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  2418  001DC8  0E0A               	movlw	10
  2419  001DCA  6FB7               	movwf	___awdiv@divisor& (0+255),b
  2420  001DCC  EC1C  F00D         	call	___awdiv	;wreg free
  2421  001DD0  C0B5  F0C0         	movff	?___awdiv,delay_ms@n
  2422  001DD4  C0B6  F0C1         	movff	?___awdiv+1,delay_ms@n+1
  2423                           
  2424                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  2425  001DD8  0E00               	movlw	0
  2426  001DDA  0100               	movlb	0	; () banked
  2427  001DDC  6FC3               	movwf	(delay_ms@i+1)& (0+255),b
  2428  001DDE  0E00               	movlw	0
  2429  001DE0  6FC2               	movwf	delay_ms@i& (0+255),b
  2430  001DE2  D00C               	goto	l419
  2431  001DE4                     l3014:
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  2435  001DE4  0ED0               	movlw	208
  2436  001DE6  0100               	movlb	0	; () banked
  2437  001DE8  6FBF               	movwf	??_delay_ms& (0+255),b
  2438  001DEA  0EC9               	movlw	201
  2439  001DEC                     u2097:
  2440  001DEC  2EE8               	decfsz	wreg,f,c
  2441  001DEE  D7FE               	bra	u2097
  2442  001DF0  2FBF               	decfsz	??_delay_ms& (0+255),f,b
  2443  001DF2  D7FC               	bra	u2097
  2444  001DF4  D000               	nop2	
  2445  001DF6  0100               	movlb	0	; () banked
  2446  001DF8  4BC2               	infsnz	delay_ms@i& (0+255),f,b
  2447  001DFA  2BC3               	incf	(delay_ms@i+1)& (0+255),f,b
  2448  001DFC                     l419:
  2449                           
  2450                           ; BSR set to: 0
  2451  001DFC  0100               	movlb	0	; () banked
  2452  001DFE  51C0               	movf	delay_ms@n& (0+255),w,b
  2453  001E00  0100               	movlb	0	; () banked
  2454  001E02  5DC2               	subwf	delay_ms@i& (0+255),w,b
  2455  001E04  0100               	movlb	0	; () banked
  2456  001E06  51C3               	movf	(delay_ms@i+1)& (0+255),w,b
  2457  001E08  0A80               	xorlw	128
  2458  001E0A  0100               	movlb	0	; () banked
  2459  001E0C  6FBF               	movwf	??_delay_ms& (0+255),b
  2460  001E0E  0100               	movlb	0	; () banked
  2461  001E10  51C1               	movf	(delay_ms@n+1)& (0+255),w,b
  2462  001E12  0A80               	xorlw	128
  2463  001E14  0100               	movlb	0	; () banked
  2464  001E16  59BF               	subwfb	??_delay_ms& (0+255),w,b
  2465  001E18  B0D8               	btfsc	status,0,c
  2466  001E1A  0012               	return	
  2467  001E1C  D7E3               	goto	l3014
  2468  001E1E                     __end_of_delay_ms:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           prodh	equ	0xFF4
  2475                           prodl	equ	0xFF3
  2476                           intcon	equ	0xFF2
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           postinc2	equ	0xFDE
  2480                           postdec2	equ	0xFDD
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function ___awdiv *****************
  2486 ;; Defined at:
  2487 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  dividend        2   14[BANK0 ] int 
  2490 ;;  divisor         2   16[BANK0 ] int 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  quotient        2   20[BANK0 ] int 
  2493 ;;  sign            1   19[BANK0 ] unsigned char 
  2494 ;;  counter         1   18[BANK0 ] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2   14[BANK0 ] int 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2505 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2507 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2508 ;;Total ram usage:        8 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    6
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_delay_ms
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text7
  2519  001A38                     __ptext7:
  2520                           	opt stack 0
  2521  001A38                     ___awdiv:
  2522                           	opt stack 23
  2523                           
  2524                           ;incstack = 0
  2525  001A38  0E00               	movlw	0
  2526  001A3A  0100               	movlb	0	; () banked
  2527  001A3C  6FBA               	movwf	___awdiv@sign& (0+255),b
  2528                           
  2529                           ; BSR set to: 0
  2530  001A3E  0100               	movlb	0	; () banked
  2531  001A40  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2532  001A42  D008               	goto	l2784
  2533                           
  2534                           ; BSR set to: 0
  2535  001A44  0100               	movlb	0	; () banked
  2536  001A46  6DB7               	negf	___awdiv@divisor& (0+255),b
  2537  001A48  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2538  001A4A  B0D8               	btfsc	status,0,c
  2539  001A4C  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 0
  2542  001A4E  0E01               	movlw	1
  2543  001A50  0100               	movlb	0	; () banked
  2544  001A52  6FBA               	movwf	___awdiv@sign& (0+255),b
  2545  001A54                     l2784:
  2546                           
  2547                           ; BSR set to: 0
  2548  001A54  0100               	movlb	0	; () banked
  2549  001A56  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2550  001A58  D008               	goto	l2790
  2551                           
  2552                           ; BSR set to: 0
  2553  001A5A  0100               	movlb	0	; () banked
  2554  001A5C  6DB5               	negf	___awdiv@dividend& (0+255),b
  2555  001A5E  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2556  001A60  B0D8               	btfsc	status,0,c
  2557  001A62  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2558                           
  2559                           ; BSR set to: 0
  2560  001A64  0E01               	movlw	1
  2561  001A66  0100               	movlb	0	; () banked
  2562  001A68  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  2563  001A6A                     l2790:
  2564                           
  2565                           ; BSR set to: 0
  2566  001A6A  0E00               	movlw	0
  2567  001A6C  0100               	movlb	0	; () banked
  2568  001A6E  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  2569  001A70  0E00               	movlw	0
  2570  001A72  6FBB               	movwf	___awdiv@quotient& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573  001A74  0100               	movlb	0	; () banked
  2574  001A76  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2575  001A78  0100               	movlb	0	; () banked
  2576  001A7A  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2577  001A7C  B4D8               	btfsc	status,2,c
  2578  001A7E  D02C               	goto	l2812
  2579                           
  2580                           ; BSR set to: 0
  2581  001A80  0E01               	movlw	1
  2582  001A82  0100               	movlb	0	; () banked
  2583  001A84  6FB9               	movwf	___awdiv@counter& (0+255),b
  2584  001A86  D006               	goto	l2798
  2585  001A88                     l2796:
  2586                           
  2587                           ; BSR set to: 0
  2588  001A88  0100               	movlb	0	; () banked
  2589  001A8A  90D8               	bcf	status,0,c
  2590  001A8C  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  2591  001A8E  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2592  001A90  0100               	movlb	0	; () banked
  2593  001A92  2BB9               	incf	___awdiv@counter& (0+255),f,b
  2594  001A94                     l2798:
  2595                           
  2596                           ; BSR set to: 0
  2597  001A94  0100               	movlb	0	; () banked
  2598  001A96  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2599  001A98  D7F7               	goto	l2796
  2600  001A9A                     l2800:
  2601                           
  2602                           ; BSR set to: 0
  2603  001A9A  0100               	movlb	0	; () banked
  2604  001A9C  90D8               	bcf	status,0,c
  2605  001A9E  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  2606  001AA0  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2607                           
  2608                           ; BSR set to: 0
  2609  001AA2  0100               	movlb	0	; () banked
  2610  001AA4  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2611  001AA6  0100               	movlb	0	; () banked
  2612  001AA8  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  2613  001AAA  0100               	movlb	0	; () banked
  2614  001AAC  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2615  001AAE  0100               	movlb	0	; () banked
  2616  001AB0  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2617  001AB2  A0D8               	btfss	status,0,c
  2618  001AB4  D00A               	goto	l2808
  2619                           
  2620                           ; BSR set to: 0
  2621  001AB6  0100               	movlb	0	; () banked
  2622  001AB8  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2623  001ABA  0100               	movlb	0	; () banked
  2624  001ABC  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  2625  001ABE  0100               	movlb	0	; () banked
  2626  001AC0  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2627  001AC2  0100               	movlb	0	; () banked
  2628  001AC4  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2629                           
  2630                           ; BSR set to: 0
  2631  001AC6  0100               	movlb	0	; () banked
  2632  001AC8  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  2633  001ACA                     l2808:
  2634                           
  2635                           ; BSR set to: 0
  2636  001ACA  0100               	movlb	0	; () banked
  2637  001ACC  90D8               	bcf	status,0,c
  2638  001ACE  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2639  001AD0  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  2640                           
  2641                           ; BSR set to: 0
  2642  001AD2  0100               	movlb	0	; () banked
  2643  001AD4  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  2644  001AD6  D7E1               	goto	l2800
  2645  001AD8                     l2812:
  2646                           
  2647                           ; BSR set to: 0
  2648  001AD8  0100               	movlb	0	; () banked
  2649  001ADA  51BA               	movf	___awdiv@sign& (0+255),w,b
  2650  001ADC  0100               	movlb	0	; () banked
  2651  001ADE  B4D8               	btfsc	status,2,c
  2652  001AE0  D005               	goto	l2816
  2653                           
  2654                           ; BSR set to: 0
  2655  001AE2  0100               	movlb	0	; () banked
  2656  001AE4  6DBB               	negf	___awdiv@quotient& (0+255),b
  2657  001AE6  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2658  001AE8  B0D8               	btfsc	status,0,c
  2659  001AEA  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2660  001AEC                     l2816:
  2661                           
  2662                           ; BSR set to: 0
  2663  001AEC  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  2664  001AF0  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  2665  001AF4  0012               	return	
  2666  001AF6                     __end_of___awdiv:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           prodh	equ	0xFF4
  2673                           prodl	equ	0xFF3
  2674                           intcon	equ	0xFF2
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           fsr2h	equ	0xFDA
  2680                           fsr2l	equ	0xFD9
  2681                           status	equ	0xFD8
  2682                           
  2683 ;; *************** function _SYSTEM_Initialize *****************
  2684 ;; Defined at:
  2685 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, status,0, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    8
  2706 ;; This function calls:
  2707 ;;		_ADC_Initialize
  2708 ;;		_EUSART1_Initialize
  2709 ;;		_EUSART2_Initialize
  2710 ;;		_I2C_Initialize
  2711 ;;		_INTERRUPT_Initialize
  2712 ;;		_OSCILLATOR_Initialize
  2713 ;;		_PIN_MANAGER_Initialize
  2714 ;;		_TMR1_Initialize
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text8
  2721  0022B6                     __ptext8:
  2722                           	opt stack 0
  2723  0022B6                     _SYSTEM_Initialize:
  2724                           	opt stack 22
  2725                           
  2726                           ;mcc.c: 114: INTERRUPT_Initialize();
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;incstack = 0
  2730  0022B6  ECCD  F011         	call	_INTERRUPT_Initialize	;wreg free
  2731                           
  2732                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2733  0022BA  EC0C  F011         	call	_PIN_MANAGER_Initialize	;wreg free
  2734                           
  2735                           ;mcc.c: 116: OSCILLATOR_Initialize();
  2736  0022BE  EC9B  F011         	call	_OSCILLATOR_Initialize	;wreg free
  2737                           
  2738                           ;mcc.c: 117: I2C_Initialize();
  2739  0022C2  EC6C  F011         	call	_I2C_Initialize	;wreg free
  2740                           
  2741                           ;mcc.c: 118: ADC_Initialize();
  2742  0022C6  EC79  F011         	call	_ADC_Initialize	;wreg free
  2743                           
  2744                           ;mcc.c: 119: TMR1_Initialize();
  2745  0022CA  ECEF  F010         	call	_TMR1_Initialize	;wreg free
  2746                           
  2747                           ;mcc.c: 120: EUSART1_Initialize();
  2748  0022CE  EC90  F011         	call	_EUSART1_Initialize	;wreg free
  2749                           
  2750                           ;mcc.c: 121: EUSART2_Initialize();
  2751  0022D2  EC85  F011         	call	_EUSART2_Initialize	;wreg free
  2752  0022D6  0012               	return		;funcret
  2753  0022D8                     __end_of_SYSTEM_Initialize:
  2754                           	opt stack 0
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           prodh	equ	0xFF4
  2760                           prodl	equ	0xFF3
  2761                           intcon	equ	0xFF2
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           fsr2h	equ	0xFDA
  2767                           fsr2l	equ	0xFD9
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function _TMR1_Initialize *****************
  2771 ;; Defined at:
  2772 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2788 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2790 ;;Total ram usage:        2 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    7
  2793 ;; This function calls:
  2794 ;;		_TMR1_StartTimer
  2795 ;; This function is called by:
  2796 ;;		_SYSTEM_Initialize
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text9
  2801  0021DE                     __ptext9:
  2802                           	opt stack 0
  2803  0021DE                     _TMR1_Initialize:
  2804                           	opt stack 22
  2805                           
  2806                           ;tmr1.c: 68: T1CON = 0x30;
  2807                           
  2808                           ;incstack = 0
  2809  0021DE  0E30               	movlw	48
  2810  0021E0  6ECD               	movwf	4045,c	;volatile
  2811                           
  2812                           ;tmr1.c: 71: T1GCON = 0x00;
  2813  0021E2  0E00               	movlw	0
  2814  0021E4  6EAA               	movwf	4010,c	;volatile
  2815                           
  2816                           ;tmr1.c: 74: TMR1H = 0xF8;
  2817  0021E6  0EF8               	movlw	248
  2818  0021E8  6ECF               	movwf	4047,c	;volatile
  2819                           
  2820                           ;tmr1.c: 77: TMR1L = 0x30;
  2821  0021EA  0E30               	movlw	48
  2822  0021EC  6ECE               	movwf	4046,c	;volatile
  2823                           
  2824                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2825  0021EE  50CE               	movf	4046,w,c	;volatile
  2826  0021F0  CFCF F0B5          	movff	4047,??_TMR1_Initialize	;volatile
  2827  0021F4  0100               	movlb	0	; () banked
  2828  0021F6  6BB6               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  2829  0021F8  C0B5  F0B6         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  2830  0021FC  0100               	movlb	0	; () banked
  2831  0021FE  6BB5               	clrf	??_TMR1_Initialize& (0+255),b
  2832  002200  0100               	movlb	0	; () banked
  2833  002202  11B5               	iorwf	??_TMR1_Initialize& (0+255),w,b
  2834  002204  0100               	movlb	0	; () banked
  2835  002206  6F9C               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  2836  002208  0100               	movlb	0	; () banked
  2837  00220A  51B6               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  2838  00220C  0100               	movlb	0	; () banked
  2839  00220E  6F9D               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  2843  002210  909E               	bcf	3998,0,c	;volatile
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;tmr1.c: 86: TMR1_StartTimer();
  2847  002212  ECCB  F011         	call	_TMR1_StartTimer	;wreg free
  2848  002216  0012               	return		;funcret
  2849  002218                     __end_of_TMR1_Initialize:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           intcon	equ	0xFF2
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _TMR1_StartTimer *****************
  2867 ;; Defined at:
  2868 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		None
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    6
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_TMR1_Initialize
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text10
  2897  002396                     __ptext10:
  2898                           	opt stack 0
  2899  002396                     _TMR1_StartTimer:
  2900                           	opt stack 22
  2901                           
  2902                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  2903                           
  2904                           ;incstack = 0
  2905  002396  80CD               	bsf	4045,0,c	;volatile
  2906  002398  0012               	return		;funcret
  2907  00239A                     __end_of_TMR1_StartTimer:
  2908                           	opt stack 0
  2909                           tblptru	equ	0xFF8
  2910                           tblptrh	equ	0xFF7
  2911                           tblptrl	equ	0xFF6
  2912                           tablat	equ	0xFF5
  2913                           prodh	equ	0xFF4
  2914                           prodl	equ	0xFF3
  2915                           intcon	equ	0xFF2
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           postinc2	equ	0xFDE
  2919                           postdec2	equ	0xFDD
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _PIN_MANAGER_Initialize *****************
  2925 ;; Defined at:
  2926 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;Total ram usage:        0 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    6
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_SYSTEM_Initialize
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text11
  2955  002218                     __ptext11:
  2956                           	opt stack 0
  2957  002218                     _PIN_MANAGER_Initialize:
  2958                           	opt stack 23
  2959                           
  2960                           ;pin_manager.c: 56: LATE = 0x00;
  2961                           
  2962                           ;incstack = 0
  2963  002218  0E00               	movlw	0
  2964  00221A  6E8D               	movwf	3981,c	;volatile
  2965                           
  2966                           ;pin_manager.c: 57: LATD = 0x00;
  2967  00221C  0E00               	movlw	0
  2968  00221E  6E8C               	movwf	3980,c	;volatile
  2969                           
  2970                           ;pin_manager.c: 58: LATA = 0x00;
  2971  002220  0E00               	movlw	0
  2972  002222  6E89               	movwf	3977,c	;volatile
  2973                           
  2974                           ;pin_manager.c: 59: LATB = 0x00;
  2975  002224  0E00               	movlw	0
  2976  002226  6E8A               	movwf	3978,c	;volatile
  2977                           
  2978                           ;pin_manager.c: 60: LATC = 0x00;
  2979  002228  0E00               	movlw	0
  2980  00222A  6E8B               	movwf	3979,c	;volatile
  2981                           
  2982                           ;pin_manager.c: 65: TRISE = 0x07;
  2983  00222C  0E07               	movlw	7
  2984  00222E  6E96               	movwf	3990,c	;volatile
  2985                           
  2986                           ;pin_manager.c: 66: TRISA = 0xEF;
  2987  002230  0EEF               	movlw	239
  2988  002232  6E92               	movwf	3986,c	;volatile
  2989                           
  2990                           ;pin_manager.c: 67: TRISB = 0xF2;
  2991  002234  0EF2               	movlw	242
  2992  002236  6E93               	movwf	3987,c	;volatile
  2993                           
  2994                           ;pin_manager.c: 68: TRISC = 0xB8;
  2995  002238  0EB8               	movlw	184
  2996  00223A  6E94               	movwf	3988,c	;volatile
  2997                           
  2998                           ;pin_manager.c: 69: TRISD = 0xA0;
  2999  00223C  0EA0               	movlw	160
  3000  00223E  6E95               	movwf	3989,c	;volatile
  3001                           
  3002                           ;pin_manager.c: 74: ANCON0 = 0xFF;
  3003  002240  010F               	movlb	15	; () banked
  3004  002242  695D               	setf	93,b	;volatile
  3005                           
  3006                           ;pin_manager.c: 75: ANCON1 = 0x7B;
  3007  002244  0E7B               	movlw	123
  3008  002246  010F               	movlb	15	; () banked
  3009  002248  6F5C               	movwf	92,b	;volatile
  3010                           
  3011                           ;pin_manager.c: 80: WPUB = 0xFE;
  3012  00224A  0EFE               	movlw	254
  3013  00224C  010F               	movlb	15	; () banked
  3014  00224E  6F5B               	movwf	91,b	;volatile
  3015                           
  3016                           ; BSR set to: 15
  3017  002250  0012               	return		;funcret
  3018  002252                     __end_of_PIN_MANAGER_Initialize:
  3019                           	opt stack 0
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postinc2	equ	0xFDE
  3030                           postdec2	equ	0xFDD
  3031                           fsr2h	equ	0xFDA
  3032                           fsr2l	equ	0xFD9
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function _OSCILLATOR_Initialize *****************
  3036 ;; Defined at:
  3037 ;;		line 124 in file "mcc_generated_files/mcc.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    6
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_SYSTEM_Initialize
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text12
  3066  002336                     __ptext12:
  3067                           	opt stack 0
  3068  002336                     _OSCILLATOR_Initialize:
  3069                           	opt stack 23
  3070                           
  3071                           ;mcc.c: 127: OSCCON = 0x60;
  3072                           
  3073                           ; BSR set to: 15
  3074                           ;incstack = 0
  3075  002336  0E60               	movlw	96
  3076  002338  6ED3               	movwf	4051,c	;volatile
  3077                           
  3078                           ;mcc.c: 129: OSCCON2 = 0x00;
  3079  00233A  0E00               	movlw	0
  3080  00233C  6ED2               	movwf	4050,c	;volatile
  3081                           
  3082                           ;mcc.c: 131: OSCTUNE = 0x00;
  3083  00233E  0E00               	movlw	0
  3084  002340  6E9B               	movwf	3995,c	;volatile
  3085                           
  3086                           ;mcc.c: 133: REFOCON = 0x00;
  3087  002342  0E00               	movlw	0
  3088  002344  6E9A               	movwf	3994,c	;volatile
  3089  002346  0012               	return		;funcret
  3090  002348                     __end_of_OSCILLATOR_Initialize:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _INTERRUPT_Initialize *****************
  3108 ;; Defined at:
  3109 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;		None
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		None
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3127 ;;Total ram usage:        0 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    6
  3130 ;; This function calls:
  3131 ;;		Nothing
  3132 ;; This function is called by:
  3133 ;;		_SYSTEM_Initialize
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text13
  3138  00239A                     __ptext13:
  3139                           	opt stack 0
  3140  00239A                     _INTERRUPT_Initialize:
  3141                           	opt stack 23
  3142                           
  3143                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3144                           
  3145                           ;incstack = 0
  3146  00239A  9ED0               	bcf	4048,7,c	;volatile
  3147  00239C  0012               	return		;funcret
  3148  00239E                     __end_of_INTERRUPT_Initialize:
  3149                           	opt stack 0
  3150                           tblptru	equ	0xFF8
  3151                           tblptrh	equ	0xFF7
  3152                           tblptrl	equ	0xFF6
  3153                           tablat	equ	0xFF5
  3154                           prodh	equ	0xFF4
  3155                           prodl	equ	0xFF3
  3156                           intcon	equ	0xFF2
  3157                           postinc0	equ	0xFEE
  3158                           wreg	equ	0xFE8
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _I2C_Initialize *****************
  3166 ;; Defined at:
  3167 ;;		line 79 in file "mcc_generated_files/i2c.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3185 ;;Total ram usage:        0 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    6
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_SYSTEM_Initialize
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text14
  3196  0022D8                     __ptext14:
  3197                           	opt stack 0
  3198  0022D8                     _I2C_Initialize:
  3199                           	opt stack 23
  3200                           
  3201                           ;i2c.c: 82: SSPSTAT = 0x00;
  3202                           
  3203                           ;incstack = 0
  3204  0022D8  0E00               	movlw	0
  3205  0022DA  6EC7               	movwf	4039,c	;volatile
  3206                           
  3207                           ;i2c.c: 84: SSPCON1 = 0x3E;
  3208  0022DC  0E3E               	movlw	62
  3209  0022DE  6EC6               	movwf	4038,c	;volatile
  3210                           
  3211                           ;i2c.c: 86: SSPCON2 = 0x01;
  3212  0022E0  0E01               	movlw	1
  3213  0022E2  6EC5               	movwf	4037,c	;volatile
  3214                           
  3215                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  3216  0022E4  0EFE               	movlw	254
  3217  0022E6  6EC8               	movwf	4040,c	;volatile
  3218                           
  3219                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  3220  0022E8  0E10               	movlw	16
  3221  0022EA  6EC8               	movwf	4040,c	;volatile
  3222                           
  3223                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  3224  0022EC  969E               	bcf	3998,3,c	;volatile
  3225                           
  3226                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  3227  0022EE  869D               	bsf	3997,3,c	;volatile
  3228  0022F0  0012               	return		;funcret
  3229  0022F2                     __end_of_I2C_Initialize:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           prodh	equ	0xFF4
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _EUSART2_Initialize *****************
  3247 ;; Defined at:
  3248 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;		None
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;		None
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3266 ;;Total ram usage:        0 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    6
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_SYSTEM_Initialize
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text15
  3277  00230A                     __ptext15:
  3278                           	opt stack 0
  3279  00230A                     _EUSART2_Initialize:
  3280                           	opt stack 23
  3281                           
  3282                           ;eusart2.c: 60: BAUDCON2 = 0x18;
  3283                           
  3284                           ;incstack = 0
  3285  00230A  0E18               	movlw	24
  3286  00230C  6EB9               	movwf	4025,c	;volatile
  3287                           
  3288                           ;eusart2.c: 63: RCSTA2 = 0x90;
  3289  00230E  0E90               	movlw	144
  3290  002310  6EA6               	movwf	4006,c	;volatile
  3291                           
  3292                           ;eusart2.c: 66: TXSTA2 = 0xA6;
  3293  002312  0EA6               	movlw	166
  3294  002314  6EBA               	movwf	4026,c	;volatile
  3295                           
  3296                           ;eusart2.c: 69: SPBRG2 = 0x8A;
  3297  002316  0E8A               	movlw	138
  3298  002318  6E7B               	movwf	3963,c	;volatile
  3299                           
  3300                           ;eusart2.c: 72: SPBRGH2 = 0x00;
  3301  00231A  0E00               	movlw	0
  3302  00231C  6E7C               	movwf	3964,c	;volatile
  3303  00231E  0012               	return		;funcret
  3304  002320                     __end_of_EUSART2_Initialize:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           intcon	equ	0xFF2
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _EUSART1_Initialize *****************
  3322 ;; Defined at:
  3323 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    6
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_SYSTEM_Initialize
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text16
  3352  002320                     __ptext16:
  3353                           	opt stack 0
  3354  002320                     _EUSART1_Initialize:
  3355                           	opt stack 23
  3356                           
  3357                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  3358                           
  3359                           ;incstack = 0
  3360  002320  0E08               	movlw	8
  3361  002322  6EA7               	movwf	4007,c	;volatile
  3362                           
  3363                           ;eusart1.c: 63: RCSTA1 = 0x90;
  3364  002324  0E90               	movlw	144
  3365  002326  6EAB               	movwf	4011,c	;volatile
  3366                           
  3367                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  3368  002328  0EA4               	movlw	164
  3369  00232A  6EAC               	movwf	4012,c	;volatile
  3370                           
  3371                           ;eusart1.c: 69: SPBRG1 = 0x0F;
  3372  00232C  0E0F               	movlw	15
  3373  00232E  6EAF               	movwf	4015,c	;volatile
  3374                           
  3375                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  3376  002330  0E00               	movlw	0
  3377  002332  6E7D               	movwf	3965,c	;volatile
  3378  002334  0012               	return		;funcret
  3379  002336                     __end_of_EUSART1_Initialize:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           intcon	equ	0xFF2
  3388                           postinc0	equ	0xFEE
  3389                           wreg	equ	0xFE8
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _ADC_Initialize *****************
  3397 ;; Defined at:
  3398 ;;		line 58 in file "mcc_generated_files/adc.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    6
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_SYSTEM_Initialize
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text17
  3427  0022F2                     __ptext17:
  3428                           	opt stack 0
  3429  0022F2                     _ADC_Initialize:
  3430                           	opt stack 23
  3431                           
  3432                           ;adc.c: 63: ADCON0 = 0x01;
  3433                           
  3434                           ;incstack = 0
  3435  0022F2  0E01               	movlw	1
  3436  0022F4  6EC2               	movwf	4034,c	;volatile
  3437                           
  3438                           ;adc.c: 66: ADCON1 = 0x80;
  3439  0022F6  0E80               	movlw	128
  3440  0022F8  6EC1               	movwf	4033,c	;volatile
  3441                           
  3442                           ;adc.c: 69: ADCON2 = 0x16;
  3443  0022FA  0E16               	movlw	22
  3444  0022FC  6EC0               	movwf	4032,c	;volatile
  3445                           
  3446                           ;adc.c: 72: ADRESH = 0x00;
  3447  0022FE  0E00               	movlw	0
  3448  002300  6EC4               	movwf	4036,c	;volatile
  3449                           
  3450                           ;adc.c: 75: ADRESL = 0x00;
  3451  002302  0E00               	movlw	0
  3452  002304  6EC3               	movwf	4035,c	;volatile
  3453                           
  3454                           ;adc.c: 78: PIE1bits.ADIE = 1;
  3455  002306  8C9D               	bsf	3997,6,c	;volatile
  3456  002308  0012               	return		;funcret
  3457  00230A                     __end_of_ADC_Initialize:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           intcon	equ	0xFF2
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postinc2	equ	0xFDE
  3469                           postdec2	equ	0xFDD
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _ADC_GetConversion *****************
  3475 ;; Defined at:
  3476 ;;		line 106 in file "mcc_generated_files/adc.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  channel         1    wreg     enum E15092
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  channel         1   18[BANK0 ] enum E15092
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  2   14[BANK0 ] unsigned int 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3490 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;Total ram usage:        5 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    6
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;;		_getADC
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text18
  3506  002160                     __ptext18:
  3507                           	opt stack 0
  3508  002160                     _ADC_GetConversion:
  3509                           	opt stack 24
  3510                           
  3511                           ;incstack = 0
  3512                           ;ADC_GetConversion@channel stored from wreg
  3513  002160  0100               	movlb	0	; () banked
  3514  002162  6FB9               	movwf	ADC_GetConversion@channel& (0+255),b
  3515                           
  3516                           ;adc.c: 109: ADCON0bits.CHS = channel;
  3517  002164  C0B9  F0B7         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3518  002168  0100               	movlb	0	; () banked
  3519  00216A  47B7               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3520  00216C  47B7               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3521  00216E  50C2               	movf	4034,w,c	;volatile
  3522  002170  0100               	movlb	0	; () banked
  3523  002172  19B7               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3524  002174  0B83               	andlw	-125
  3525  002176  19B7               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3526  002178  6EC2               	movwf	4034,c	;volatile
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;adc.c: 112: ADCON0bits.ADON = 1;
  3530  00217A  80C2               	bsf	4034,0,c	;volatile
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;adc.c: 116: ADCON0bits.GO_nDONE = 1;
  3534  00217C  82C2               	bsf	4034,1,c	;volatile
  3535  00217E                     l253:
  3536  00217E  B2C2               	btfsc	4034,1,c	;volatile
  3537  002180  D7FE               	goto	l253
  3538                           
  3539                           ;adc.c: 121: }
  3540                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  3541  002182  50C4               	movf	4036,w,c	;volatile
  3542  002184  0100               	movlb	0	; () banked
  3543  002186  6FB8               	movwf	(??_ADC_GetConversion+1)& (0+255),b
  3544  002188  6BB7               	clrf	??_ADC_GetConversion& (0+255),b
  3545  00218A  50C3               	movf	4035,w,c	;volatile
  3546  00218C  0100               	movlb	0	; () banked
  3547  00218E  25B7               	addwf	??_ADC_GetConversion& (0+255),w,b
  3548  002190  0100               	movlb	0	; () banked
  3549  002192  6FB5               	movwf	?_ADC_GetConversion& (0+255),b
  3550  002194  0E00               	movlw	0
  3551  002196  0100               	movlb	0	; () banked
  3552  002198  21B8               	addwfc	(??_ADC_GetConversion+1)& (0+255),w,b
  3553  00219A  0100               	movlb	0	; () banked
  3554  00219C  6FB6               	movwf	(?_ADC_GetConversion+1)& (0+255),b
  3555  00219E  0012               	return	
  3556  0021A0                     __end_of_ADC_GetConversion:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           postinc0	equ	0xFEE
  3566                           wreg	equ	0xFE8
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _INTERRUPT_InterruptManager *****************
  3574 ;; Defined at:
  3575 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3591 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3592 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3593 ;;Total ram usage:       14 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    5
  3596 ;; This function calls:
  3597 ;;		_ADC_ISR
  3598 ;;		_I2C_ISR
  3599 ;; This function is called by:
  3600 ;;		Interrupt level 2
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	intcode
  3605  000008                     __pintcode:
  3606                           	opt stack 0
  3607  000008                     _INTERRUPT_InterruptManager:
  3608                           	opt stack 22
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;incstack = 0
  3612  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3613  00000A  CFFA F0A7          	movff	pclath,??_INTERRUPT_InterruptManager
  3614  00000E  CFFB F0A8          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3615  000012  CFE9 F0A9          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3616  000016  CFEA F0AA          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3617  00001A  CFE1 F0AB          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3618  00001E  CFE2 F0AC          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3619  000022  CFD9 F0AD          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3620  000026  CFDA F0AE          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3621  00002A  CFF3 F0AF          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3622  00002E  CFF4 F0B0          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3623  000032  CFF6 F0B1          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3624  000036  CFF7 F0B2          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3625  00003A  CFF8 F0B3          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3626  00003E  CFF5 F0B4          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3627                           
  3628                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  3629  000042  BCF2               	btfsc	intcon,6,c	;volatile
  3630  000044  AC9D               	btfss	3997,6,c	;volatile
  3631  000046  D003               	goto	i2l3048
  3632  000048  BC9E               	btfsc	3998,6,c	;volatile
  3633                           
  3634                           ;interrupt_manager.c: 61: {
  3635                           ;interrupt_manager.c: 62: ADC_ISR();
  3636  00004A  ECCF  F011         	call	_ADC_ISR	;wreg free
  3637  00004E                     i2l3048:
  3638                           
  3639                           ;interrupt_manager.c: 63: }
  3640                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  3641  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  3642  000050  A69D               	btfss	3997,3,c	;volatile
  3643  000052  D003               	goto	i2l309
  3644  000054  B69E               	btfsc	3998,3,c	;volatile
  3645                           
  3646                           ;interrupt_manager.c: 65: {
  3647                           ;interrupt_manager.c: 66: I2C_ISR();
  3648  000056  ECD9  F00D         	call	_I2C_ISR	;wreg free
  3649  00005A                     i2l309:
  3650  00005A  C0B4  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3651  00005E  C0B3  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3652  000062  C0B2  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3653  000066  C0B1  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3654  00006A  C0B0  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3655  00006E  C0AF  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3656  000072  C0AE  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3657  000076  C0AD  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3658  00007A  C0AC  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3659  00007E  C0AB  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3660  000082  C0AA  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3661  000086  C0A9  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3662  00008A  C0A8  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3663  00008E  C0A7  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3664  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3665  000094  0011               	retfie		f
  3666  000096                     __end_of_INTERRUPT_InterruptManager:
  3667                           	opt stack 0
  3668                           pclatu	equ	0xFFB
  3669                           pclath	equ	0xFFA
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           postinc0	equ	0xFEE
  3678                           fsr0h	equ	0xFEA
  3679                           fsr0l	equ	0xFE9
  3680                           wreg	equ	0xFE8
  3681                           fsr1h	equ	0xFE2
  3682                           fsr1l	equ	0xFE1
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _I2C_ISR *****************
  3690 ;; Defined at:
  3691 ;;		line 102 in file "mcc_generated_files/i2c.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3709 ;;Total ram usage:        0 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    4
  3712 ;; This function calls:
  3713 ;;		_getByteToSend
  3714 ;;		_handleByteReceived
  3715 ;;		i2_printf
  3716 ;; This function is called by:
  3717 ;;		_INTERRUPT_InterruptManager
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text20
  3722  001BB2                     __ptext20:
  3723                           	opt stack 0
  3724  001BB2                     _I2C_ISR:
  3725                           	opt stack 22
  3726                           
  3727                           ;i2c.c: 103: if (SSPSTATbits.BF == 0 && SSPSTATbits.BF == 0) {
  3728                           
  3729                           ;incstack = 0
  3730  001BB2  A0C7               	btfss	4039,0,c	;volatile
  3731  001BB4  B0C7               	btfsc	4039,0,c	;volatile
  3732  001BB6  D002               	goto	i2l152
  3733                           
  3734                           ;i2c.c: 105: SSPIF = 0;
  3735  001BB8  969E               	bcf	3998,3,c	;volatile
  3736                           
  3737                           ;i2c.c: 106: return;
  3738  001BBA  0012               	return	
  3739  001BBC                     i2l152:
  3740                           
  3741                           ;i2c.c: 107: }
  3742                           ;i2c.c: 109: if (SSPIF)
  3743  001BBC  A69E               	btfss	3998,3,c	;volatile
  3744  001BBE  D041               	goto	i2l2912
  3745                           
  3746                           ;i2c.c: 110: {
  3747                           ;i2c.c: 111: if (SSPSTATbits.R_nW)
  3748  001BC0  A4C7               	btfss	4039,2,c	;volatile
  3749  001BC2  D016               	goto	i2l2882
  3750                           
  3751                           ;i2c.c: 112: {
  3752                           ;i2c.c: 113: if (!SSPSTATbits.D_nA)
  3753  001BC4  BAC7               	btfsc	4039,5,c	;volatile
  3754  001BC6  D009               	goto	i2l2874
  3755                           
  3756                           ;i2c.c: 114: {
  3757                           ;i2c.c: 115: SSPBUF = getByteToSend(index_i2c);
  3758  001BC8  0100               	movlb	0	; () banked
  3759  001BCA  519E               	movf	_index_i2c& (0+255),w,b
  3760  001BCC  EC0F  F00A         	call	_getByteToSend
  3761  001BD0  6EC9               	movwf	4041,c	;volatile
  3762                           
  3763                           ;i2c.c: 116: index_i2c++;
  3764  001BD2  0100               	movlb	0	; () banked
  3765  001BD4  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3766  001BD6  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;i2c.c: 117: SSPCON1bits.CKP = 1;
  3770  001BD8  88C6               	bsf	4038,4,c	;volatile
  3771  001BDA                     i2l2874:
  3772                           
  3773                           ;i2c.c: 118: }
  3774                           ;i2c.c: 119: if (SSPSTATbits.D_nA)
  3775  001BDA  AAC7               	btfss	4039,5,c	;volatile
  3776  001BDC  D009               	goto	i2l2882
  3777                           
  3778                           ;i2c.c: 120: {
  3779                           ;i2c.c: 121: SSPBUF = getByteToSend(index_i2c);
  3780  001BDE  0100               	movlb	0	; () banked
  3781  001BE0  519E               	movf	_index_i2c& (0+255),w,b
  3782  001BE2  EC0F  F00A         	call	_getByteToSend
  3783  001BE6  6EC9               	movwf	4041,c	;volatile
  3784                           
  3785                           ;i2c.c: 122: index_i2c++;
  3786  001BE8  0100               	movlb	0	; () banked
  3787  001BEA  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3788  001BEC  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;i2c.c: 123: SSPCON1bits.CKP = 1;
  3792  001BEE  88C6               	bsf	4038,4,c	;volatile
  3793  001BF0                     i2l2882:
  3794                           
  3795                           ;i2c.c: 124: }
  3796                           ;i2c.c: 126: }
  3797                           ;i2c.c: 127: if (!SSPSTATbits.R_nW)
  3798  001BF0  B4C7               	btfsc	4039,2,c	;volatile
  3799  001BF2  D027               	goto	i2l2912
  3800                           
  3801                           ;i2c.c: 128: {
  3802                           ;i2c.c: 129: if (!SSPSTATbits.D_nA)
  3803  001BF4  BAC7               	btfsc	4039,5,c	;volatile
  3804  001BF6  D006               	goto	i2l2892
  3805                           
  3806                           ;i2c.c: 130: {
  3807                           ;i2c.c: 131: first = 1;
  3808  001BF8  0E01               	movlw	1
  3809  001BFA  0100               	movlb	0	; () banked
  3810  001BFC  6FE9               	movwf	_first& (0+255),b
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;i2c.c: 132: junk = SSPBUF;
  3814  001BFE  CFC9 F0A6          	movff	4041,_junk	;volatile
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;i2c.c: 134: SSPCON1bits.CKP = 1;
  3818  001C02  88C6               	bsf	4038,4,c	;volatile
  3819  001C04                     i2l2892:
  3820                           
  3821                           ;i2c.c: 135: }
  3822                           ;i2c.c: 136: if (SSPSTATbits.D_nA)
  3823  001C04  AAC7               	btfss	4039,5,c	;volatile
  3824  001C06  D01D               	goto	i2l2912
  3825                           
  3826                           ;i2c.c: 137: {
  3827                           ;i2c.c: 138: if (first) {
  3828  001C08  0100               	movlb	0	; () banked
  3829  001C0A  51E9               	movf	_first& (0+255),w,b
  3830  001C0C  B4D8               	btfsc	status,2,c
  3831  001C0E  D00C               	goto	i2l2902
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;i2c.c: 139: index_i2c = SSPBUF;
  3835  001C10  CFC9 F09E          	movff	4041,_index_i2c	;volatile
  3836  001C14  0100               	movlb	0	; () banked
  3837  001C16  6B9F               	clrf	(_index_i2c+1)& (0+255),b
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;i2c.c: 140: handleByteReceived(index_i2c);
  3841  001C18  0100               	movlb	0	; () banked
  3842  001C1A  519E               	movf	_index_i2c& (0+255),w,b
  3843  001C1C  ECD7  F00B         	call	_handleByteReceived
  3844                           
  3845                           ;i2c.c: 141: first = 0;
  3846  001C20  0E00               	movlw	0
  3847  001C22  0100               	movlb	0	; () banked
  3848  001C24  6FE9               	movwf	_first& (0+255),b
  3849                           
  3850                           ;i2c.c: 142: }
  3851  001C26  D003               	goto	i2l2904
  3852  001C28                     i2l2902:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;i2c.c: 144: else {
  3856                           ;i2c.c: 146: handleByteReceived(SSPBUF);
  3857  001C28  50C9               	movf	4041,w,c	;volatile
  3858  001C2A  ECD7  F00B         	call	_handleByteReceived
  3859  001C2E                     i2l2904:
  3860                           
  3861                           ;i2c.c: 148: }
  3862                           ;i2c.c: 149: if (SSPCON1bits.WCOL)
  3863  001C2E  AEC6               	btfss	4038,7,c	;volatile
  3864  001C30  D007               	goto	i2l2910
  3865                           
  3866                           ;i2c.c: 150: {
  3867                           ;i2c.c: 151: SSPCON1bits.WCOL = 0;
  3868  001C32  9EC6               	bcf	4038,7,c	;volatile
  3869                           
  3870                           ;i2c.c: 152: junk = SSPBUF;
  3871  001C34  CFC9 F0A6          	movff	4041,_junk	;volatile
  3872                           
  3873                           ;i2c.c: 153: handleByteReceived(junk);
  3874  001C38  0100               	movlb	0	; () banked
  3875  001C3A  51A6               	movf	_junk& (0+255),w,b
  3876  001C3C  ECD7  F00B         	call	_handleByteReceived
  3877  001C40                     i2l2910:
  3878                           
  3879                           ;i2c.c: 154: }
  3880                           ;i2c.c: 155: SSPCON1bits.CKP = 1;
  3881  001C40  88C6               	bsf	4038,4,c	;volatile
  3882  001C42                     i2l2912:
  3883                           
  3884                           ;i2c.c: 156: }
  3885                           ;i2c.c: 157: }
  3886                           ;i2c.c: 158: }
  3887                           ;i2c.c: 159: if (BCLIF)
  3888  001C42  A6A1               	btfss	4001,3,c	;volatile
  3889  001C44  D00A               	goto	i2l2922
  3890                           
  3891                           ;i2c.c: 160: {
  3892                           ;i2c.c: 161: printf("collide\r\n");
  3893  001C46  0EBF               	movlw	low STR_1
  3894  001C48  6E17               	movwf	i2printf@f,c
  3895  001C4A  0E0F               	movlw	high STR_1
  3896  001C4C  6E18               	movwf	i2printf@f+1,c
  3897  001C4E  ECFA  F00A         	call	i2_printf	;wreg free
  3898                           
  3899                           ;i2c.c: 162: junk = SSPBUF;
  3900  001C52  CFC9 F0A6          	movff	4041,_junk	;volatile
  3901                           
  3902                           ;i2c.c: 163: BCLIF = 0;
  3903  001C56  96A1               	bcf	4001,3,c	;volatile
  3904                           
  3905                           ;i2c.c: 164: SSPCON1bits.CKP = 1;
  3906  001C58  88C6               	bsf	4038,4,c	;volatile
  3907  001C5A                     i2l2922:
  3908                           
  3909                           ;i2c.c: 165: }
  3910                           ;i2c.c: 166: SSPIF = 0;
  3911  001C5A  969E               	bcf	3998,3,c	;volatile
  3912  001C5C  0012               	return		;funcret
  3913  001C5E                     __end_of_I2C_ISR:
  3914                           	opt stack 0
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           postinc0	equ	0xFEE
  3925                           fsr0h	equ	0xFEA
  3926                           fsr0l	equ	0xFE9
  3927                           wreg	equ	0xFE8
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _handleByteReceived *****************
  3937 ;; Defined at:
  3938 ;;		line 265 in file "ax.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  data            1    wreg     unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  data            1   42[COMRAM] unsigned char 
  3943 ;;  i               2   40[COMRAM] int 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3954 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3956 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;Total ram usage:        3 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    3
  3960 ;; This function calls:
  3961 ;;		_setLedOff
  3962 ;;		_setLedOn
  3963 ;;		i2_printf
  3964 ;; This function is called by:
  3965 ;;		_I2C_ISR
  3966 ;;		_I2C_ISR_bad
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text21
  3971  0017AE                     __ptext21:
  3972                           	opt stack 0
  3973  0017AE                     _handleByteReceived:
  3974                           	opt stack 22
  3975                           
  3976                           ;incstack = 0
  3977                           ;handleByteReceived@data stored from wreg
  3978  0017AE  6E2B               	movwf	handleByteReceived@data,c
  3979                           
  3980                           ;ax.c: 266: printf("handleByteReceived readIndex:%d -> %d\r\n", readIndex, data);
  3981  0017B0  0E58               	movlw	low STR_6
  3982  0017B2  6E17               	movwf	i2printf@f,c
  3983  0017B4  0E0F               	movlw	high STR_6
  3984  0017B6  6E18               	movwf	i2printf@f+1,c
  3985  0017B8  C098  F019         	movff	_readIndex,?i2_printf+2	;volatile
  3986  0017BC  C099  F01A         	movff	_readIndex+1,?i2_printf+3	;volatile
  3987  0017C0  C02B  F01B         	movff	handleByteReceived@data,?i2_printf+4
  3988  0017C4  6A1C               	clrf	?i2_printf+5,c
  3989  0017C6  ECFA  F00A         	call	i2_printf	;wreg free
  3990                           
  3991                           ;ax.c: 267: if (readIndex == 0) {
  3992  0017CA  0100               	movlb	0	; () banked
  3993  0017CC  5198               	movf	_readIndex& (0+255),w,b	;volatile
  3994  0017CE  0100               	movlb	0	; () banked
  3995  0017D0  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  3996  0017D2  A4D8               	btfss	status,2,c
  3997  0017D4  D023               	goto	i2l2710
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;ax.c: 268: currentCommand = data;
  4001  0017D6  C02B  F0E8         	movff	handleByteReceived@data,_currentCommand	;volatile
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;ax.c: 269: readIndex++;
  4005  0017DA  0100               	movlb	0	; () banked
  4006  0017DC  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4007  0017DE  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;ax.c: 271: for (int i = 0; i < 32; i++) {
  4011  0017E0  0E00               	movlw	0
  4012  0017E2  6E2A               	movwf	handleByteReceived@i+1,c
  4013  0017E4  0E00               	movlw	0
  4014  0017E6  6E29               	movwf	handleByteReceived@i,c
  4015                           
  4016                           ; BSR set to: 0
  4017  0017E8  BE2A               	btfsc	handleByteReceived@i+1,7,c
  4018  0017EA  D008               	goto	i2l2704
  4019  0017EC  502A               	movf	handleByteReceived@i+1,w,c
  4020  0017EE  E105               	bnz	i2u142_40
  4021  0017F0  0E20               	movlw	32
  4022  0017F2  5C29               	subwf	handleByteReceived@i,w,c
  4023  0017F4  B0D8               	btfsc	status,0,c
  4024  0017F6  0012               	return	
  4025  0017F8  D001               	goto	i2l2704
  4026  0017FA                     i2u142_40:
  4027                           
  4028                           ; BSR set to: 0
  4029  0017FA  0012               	return	
  4030  0017FC                     i2l2704:
  4031                           
  4032                           ;ax.c: 272: dataToSend[i] = 66;
  4033  0017FC  0E60               	movlw	low _dataToSend
  4034  0017FE  2429               	addwf	handleByteReceived@i,w,c
  4035  001800  6ED9               	movwf	fsr2l,c
  4036  001802  0E00               	movlw	high _dataToSend
  4037  001804  202A               	addwfc	handleByteReceived@i+1,w,c
  4038  001806  6EDA               	movwf	fsr2h,c
  4039  001808  0E42               	movlw	66
  4040  00180A  6EDF               	movwf	indf2,c
  4041  00180C  4A29               	infsnz	handleByteReceived@i,f,c
  4042  00180E  2A2A               	incf	handleByteReceived@i+1,f,c
  4043  001810  BE2A               	btfsc	handleByteReceived@i+1,7,c
  4044  001812  D7F4               	goto	i2l2704
  4045  001814  502A               	movf	handleByteReceived@i+1,w,c
  4046  001816  E101               	bnz	i2u143_40
  4047  001818  D7EB               	goto	L4
  4048  00181A                     i2u143_40:
  4049                           
  4050                           ;ax.c: 273: }
  4051                           ;ax.c: 274: } else if (readIndex == 1) {
  4052  00181A  0012               	return	
  4053  00181C                     i2l2710:
  4054  00181C  0100               	movlb	0	; () banked
  4055  00181E  0598               	decf	_readIndex& (0+255),w,b	;volatile
  4056  001820  0100               	movlb	0	; () banked
  4057  001822  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4058  001824  A4D8               	btfss	status,2,c
  4059  001826  D025               	goto	i2l2728
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;ax.c: 275: parameter1 = data;
  4063  001828  C02B  F0A5         	movff	handleByteReceived@data,_parameter1	;volatile
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;ax.c: 276: readIndex++;
  4067  00182C  0100               	movlb	0	; () banked
  4068  00182E  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4069  001830  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;ax.c: 277: if (currentCommand == 10) {
  4073  001832  0E0A               	movlw	10
  4074  001834  0100               	movlb	0	; () banked
  4075  001836  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4076  001838  A4D8               	btfss	status,2,c
  4077  00183A  D00B               	goto	i2l2722
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;ax.c: 278: setLedOn(parameter1);
  4081  00183C  C0A5  F001         	movff	_parameter1,setLedOn@led	;volatile
  4082  001840  6A02               	clrf	setLedOn@led+1,c
  4083  001842  EC96  F00F         	call	_setLedOn	;wreg free
  4084                           
  4085                           ;ax.c: 279: readIndex = 0;
  4086  001846  0E00               	movlw	0
  4087  001848  0100               	movlb	0	; () banked
  4088  00184A  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4089  00184C  0E00               	movlw	0
  4090  00184E  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4091                           
  4092                           ;ax.c: 280: } else if (currentCommand == 11) {
  4093  001850  0012               	return	
  4094  001852                     i2l2722:
  4095                           
  4096                           ; BSR set to: 0
  4097  001852  0E0B               	movlw	11
  4098  001854  0100               	movlb	0	; () banked
  4099  001856  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4100  001858  A4D8               	btfss	status,2,c
  4101  00185A  0012               	return	
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;ax.c: 281: setLedOff(parameter1);
  4105  00185C  C0A5  F001         	movff	_parameter1,setLedOff@led	;volatile
  4106  001860  6A02               	clrf	setLedOff@led+1,c
  4107  001862  ECD3  F00F         	call	_setLedOff	;wreg free
  4108                           
  4109                           ;ax.c: 282: readIndex = 0;
  4110  001866  0E00               	movlw	0
  4111  001868  0100               	movlb	0	; () banked
  4112  00186A  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4113  00186C  0E00               	movlw	0
  4114  00186E  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;ax.c: 283: }
  4118                           ;ax.c: 285: } else if (readIndex == 2) {
  4119                           
  4120                           ; BSR set to: 0
  4121  001870  0012               	return	
  4122  001872                     i2l2728:
  4123                           
  4124                           ; BSR set to: 0
  4125  001872  0E02               	movlw	2
  4126  001874  0100               	movlb	0	; () banked
  4127  001876  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4128  001878  0100               	movlb	0	; () banked
  4129  00187A  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4130  00187C  A4D8               	btfss	status,2,c
  4131  00187E  D006               	goto	i2l2734
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;ax.c: 286: parameter2 = data;
  4135  001880  C02B  F0A4         	movff	handleByteReceived@data,_parameter2	;volatile
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;ax.c: 287: readIndex++;
  4139  001884  0100               	movlb	0	; () banked
  4140  001886  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4141  001888  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4142                           
  4143                           ;ax.c: 288: } else if (readIndex == 3) {
  4144  00188A  0012               	return	
  4145  00188C                     i2l2734:
  4146                           
  4147                           ; BSR set to: 0
  4148  00188C  0E03               	movlw	3
  4149  00188E  0100               	movlb	0	; () banked
  4150  001890  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4151  001892  0100               	movlb	0	; () banked
  4152  001894  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4153  001896  A4D8               	btfss	status,2,c
  4154  001898  D006               	goto	i2l2740
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;ax.c: 289: parameter3 = data;
  4158  00189A  C02B  F0A3         	movff	handleByteReceived@data,_parameter3	;volatile
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;ax.c: 290: readIndex++;
  4162  00189E  0100               	movlb	0	; () banked
  4163  0018A0  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4164  0018A2  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4165                           
  4166                           ;ax.c: 291: } else if (readIndex == 4) {
  4167  0018A4  0012               	return	
  4168  0018A6                     i2l2740:
  4169                           
  4170                           ; BSR set to: 0
  4171  0018A6  0E04               	movlw	4
  4172  0018A8  0100               	movlb	0	; () banked
  4173  0018AA  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4174  0018AC  0100               	movlb	0	; () banked
  4175  0018AE  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4176  0018B0  A4D8               	btfss	status,2,c
  4177  0018B2  D006               	goto	i2l2746
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;ax.c: 292: parameter4 = data;
  4181  0018B4  C02B  F0A2         	movff	handleByteReceived@data,_parameter4	;volatile
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;ax.c: 293: readIndex++;
  4185  0018B8  0100               	movlb	0	; () banked
  4186  0018BA  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4187  0018BC  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4188                           
  4189                           ;ax.c: 294: } else if (readIndex == 5) {
  4190  0018BE  0012               	return	
  4191  0018C0                     i2l2746:
  4192                           
  4193                           ; BSR set to: 0
  4194  0018C0  0E05               	movlw	5
  4195  0018C2  0100               	movlb	0	; () banked
  4196  0018C4  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4197  0018C6  0100               	movlb	0	; () banked
  4198  0018C8  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4199  0018CA  A4D8               	btfss	status,2,c
  4200  0018CC  D006               	goto	i2l2752
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;ax.c: 295: parameter5 = data;
  4204  0018CE  C02B  F0A1         	movff	handleByteReceived@data,_parameter5	;volatile
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;ax.c: 296: readIndex++;
  4208  0018D2  0100               	movlb	0	; () banked
  4209  0018D4  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4210  0018D6  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4211                           
  4212                           ;ax.c: 297: } else if (readIndex == 6) {
  4213  0018D8  0012               	return	
  4214  0018DA                     i2l2752:
  4215                           
  4216                           ; BSR set to: 0
  4217  0018DA  0E06               	movlw	6
  4218  0018DC  0100               	movlb	0	; () banked
  4219  0018DE  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4220  0018E0  0100               	movlb	0	; () banked
  4221  0018E2  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4222  0018E4  A4D8               	btfss	status,2,c
  4223  0018E6  D006               	goto	i2l2758
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;ax.c: 298: parameter6 = data;
  4227  0018E8  C02B  F0A0         	movff	handleByteReceived@data,_parameter6	;volatile
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;ax.c: 299: readIndex++;
  4231  0018EC  0100               	movlb	0	; () banked
  4232  0018EE  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4233  0018F0  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4234                           
  4235                           ;ax.c: 300: } else {
  4236  0018F2  0012               	return	
  4237  0018F4                     i2l2758:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;ax.c: 301: readIndex++;
  4241  0018F4  0100               	movlb	0	; () banked
  4242  0018F6  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4243  0018F8  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4244                           
  4245                           ; BSR set to: 0
  4246                           
  4247                           ; BSR set to: 0
  4248                           
  4249                           ; BSR set to: 0
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ; BSR set to: 0
  4254                           
  4255                           ; BSR set to: 0
  4256  0018FA  0012               	return	
  4257  0018FC                     __end_of_handleByteReceived:
  4258                           	opt stack 0
  4259                           pclatu	equ	0xFFB
  4260                           pclath	equ	0xFFA
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           intcon	equ	0xFF2
  4268                           postinc0	equ	0xFEE
  4269                           fsr0h	equ	0xFEA
  4270                           fsr0l	equ	0xFE9
  4271                           wreg	equ	0xFE8
  4272                           fsr1h	equ	0xFE2
  4273                           fsr1l	equ	0xFE1
  4274                           indf2	equ	0xFDF
  4275                           postinc2	equ	0xFDE
  4276                           postdec2	equ	0xFDD
  4277                           fsr2h	equ	0xFDA
  4278                           fsr2l	equ	0xFD9
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function _setLedOn *****************
  4282 ;; Defined at:
  4283 ;;		line 45 in file "ax.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  led             2    0[COMRAM] int 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4301 ;;Total ram usage:        4 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_handleByteReceived
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text22
  4311  001F2C                     __ptext22:
  4312                           	opt stack 0
  4313  001F2C                     _setLedOn:
  4314                           	opt stack 24
  4315                           
  4316                           ;ax.c: 46: switch (led) {
  4317                           
  4318                           ;incstack = 0
  4319  001F2C  D014               	goto	i2l2416
  4320  001F2E                     i2l446:
  4321  001F2E  868C               	bsf	3980,3,c	;volatile
  4322                           
  4323                           ;ax.c: 49: break;
  4324  001F30  0012               	return	
  4325  001F32                     i2l450:
  4326  001F32  848C               	bsf	3980,2,c	;volatile
  4327                           
  4328                           ;ax.c: 52: break;
  4329  001F34  0012               	return	
  4330  001F36                     i2l453:
  4331  001F36  828C               	bsf	3980,1,c	;volatile
  4332                           
  4333                           ;ax.c: 55: break;
  4334  001F38  0012               	return	
  4335  001F3A                     i2l456:
  4336  001F3A  808C               	bsf	3980,0,c	;volatile
  4337                           
  4338                           ;ax.c: 58: break;
  4339  001F3C  0012               	return	
  4340  001F3E                     i2l459:
  4341  001F3E  848B               	bsf	3979,2,c	;volatile
  4342                           
  4343                           ;ax.c: 61: break;
  4344  001F40  0012               	return	
  4345  001F42                     i2l462:
  4346  001F42  828B               	bsf	3979,1,c	;volatile
  4347                           
  4348                           ;ax.c: 64: break;
  4349  001F44  0012               	return	
  4350  001F46                     i2l465:
  4351  001F46  808B               	bsf	3979,0,c	;volatile
  4352                           
  4353                           ;ax.c: 67: break;
  4354  001F48  0012               	return	
  4355  001F4A                     i2l468:
  4356  001F4A  808A               	bsf	3978,0,c	;volatile
  4357                           
  4358                           ;ax.c: 70: break;
  4359  001F4C  0012               	return	
  4360  001F4E                     i2l471:
  4361  001F4E  848A               	bsf	3978,2,c	;volatile
  4362                           
  4363                           ;ax.c: 73: break;
  4364  001F50  0012               	return	
  4365  001F52                     i2l474:
  4366  001F52  868A               	bsf	3978,3,c	;volatile
  4367                           
  4368                           ;ax.c: 77: }
  4369                           
  4370                           ;ax.c: 76: break;
  4371  001F54  0012               	return	
  4372  001F56                     i2l2416:
  4373  001F56  C001  F003         	movff	setLedOn@led,??_setLedOn
  4374  001F5A  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  4375                           
  4376                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4377                           ; Switch size 1, requested type "space"
  4378                           ; Number of cases is 1, Range of values is 0 to 0
  4379                           ; switch strategies available:
  4380                           ; Name         Instructions Cycles
  4381                           ; simple_byte            4     3 (average)
  4382                           ;	Chosen strategy is simple_byte
  4383  001F5E  5004               	movf	??_setLedOn+1,w,c
  4384  001F60  0A00               	xorlw	0	; case 0
  4385  001F62  A4D8               	btfss	status,2,c
  4386  001F64  0012               	return	
  4387                           
  4388                           ; Switch size 1, requested type "space"
  4389                           ; Number of cases is 10, Range of values is 1 to 10
  4390                           ; switch strategies available:
  4391                           ; Name         Instructions Cycles
  4392                           ; simple_byte           31    16 (average)
  4393                           ;	Chosen strategy is simple_byte
  4394  001F66  5003               	movf	??_setLedOn,w,c
  4395  001F68  0A01               	xorlw	1	; case 1
  4396  001F6A  B4D8               	btfsc	status,2,c
  4397  001F6C  D7E0               	goto	i2l446
  4398  001F6E  0A03               	xorlw	3	; case 2
  4399  001F70  B4D8               	btfsc	status,2,c
  4400  001F72  D7DF               	goto	i2l450
  4401  001F74  0A01               	xorlw	1	; case 3
  4402  001F76  B4D8               	btfsc	status,2,c
  4403  001F78  D7DE               	goto	i2l453
  4404  001F7A  0A07               	xorlw	7	; case 4
  4405  001F7C  B4D8               	btfsc	status,2,c
  4406  001F7E  D7DD               	goto	i2l456
  4407  001F80  0A01               	xorlw	1	; case 5
  4408  001F82  B4D8               	btfsc	status,2,c
  4409  001F84  D7DC               	goto	i2l459
  4410  001F86  0A03               	xorlw	3	; case 6
  4411  001F88  B4D8               	btfsc	status,2,c
  4412  001F8A  D7DB               	goto	i2l462
  4413  001F8C  0A01               	xorlw	1	; case 7
  4414  001F8E  B4D8               	btfsc	status,2,c
  4415  001F90  D7DA               	goto	i2l465
  4416  001F92  0A0F               	xorlw	15	; case 8
  4417  001F94  B4D8               	btfsc	status,2,c
  4418  001F96  D7D9               	goto	i2l468
  4419  001F98  0A01               	xorlw	1	; case 9
  4420  001F9A  B4D8               	btfsc	status,2,c
  4421  001F9C  D7D8               	goto	i2l471
  4422  001F9E  0A03               	xorlw	3	; case 10
  4423  001FA0  A4D8               	btfss	status,2,c
  4424  001FA2  0012               	return	
  4425  001FA4  D7D6               	goto	i2l474
  4426  001FA6                     __end_of_setLedOn:
  4427                           	opt stack 0
  4428                           pclatu	equ	0xFFB
  4429                           pclath	equ	0xFFA
  4430                           tblptru	equ	0xFF8
  4431                           tblptrh	equ	0xFF7
  4432                           tblptrl	equ	0xFF6
  4433                           tablat	equ	0xFF5
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           intcon	equ	0xFF2
  4437                           postinc0	equ	0xFEE
  4438                           fsr0h	equ	0xFEA
  4439                           fsr0l	equ	0xFE9
  4440                           wreg	equ	0xFE8
  4441                           fsr1h	equ	0xFE2
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           postdec2	equ	0xFDD
  4446                           fsr2h	equ	0xFDA
  4447                           fsr2l	equ	0xFD9
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function _setLedOff *****************
  4451 ;; Defined at:
  4452 ;;		line 80 in file "ax.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  led             2    0[COMRAM] int 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;		None
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4469 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4470 ;;Total ram usage:        4 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_handleByteReceived
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text23
  4480  001FA6                     __ptext23:
  4481                           	opt stack 0
  4482  001FA6                     _setLedOff:
  4483                           	opt stack 24
  4484                           
  4485                           ;ax.c: 81: switch (led) {
  4486                           
  4487                           ;incstack = 0
  4488  001FA6  D014               	goto	i2l2426
  4489  001FA8                     i2l481:
  4490  001FA8  968C               	bcf	3980,3,c	;volatile
  4491                           
  4492                           ;ax.c: 84: break;
  4493  001FAA  0012               	return	
  4494  001FAC                     i2l485:
  4495  001FAC  948C               	bcf	3980,2,c	;volatile
  4496                           
  4497                           ;ax.c: 87: break;
  4498  001FAE  0012               	return	
  4499  001FB0                     i2l488:
  4500  001FB0  928C               	bcf	3980,1,c	;volatile
  4501                           
  4502                           ;ax.c: 90: break;
  4503  001FB2  0012               	return	
  4504  001FB4                     i2l491:
  4505  001FB4  908C               	bcf	3980,0,c	;volatile
  4506                           
  4507                           ;ax.c: 93: break;
  4508  001FB6  0012               	return	
  4509  001FB8                     i2l494:
  4510  001FB8  948B               	bcf	3979,2,c	;volatile
  4511                           
  4512                           ;ax.c: 96: break;
  4513  001FBA  0012               	return	
  4514  001FBC                     i2l497:
  4515  001FBC  928B               	bcf	3979,1,c	;volatile
  4516                           
  4517                           ;ax.c: 99: break;
  4518  001FBE  0012               	return	
  4519  001FC0                     i2l500:
  4520  001FC0  908B               	bcf	3979,0,c	;volatile
  4521                           
  4522                           ;ax.c: 102: break;
  4523  001FC2  0012               	return	
  4524  001FC4                     i2l503:
  4525  001FC4  908A               	bcf	3978,0,c	;volatile
  4526                           
  4527                           ;ax.c: 105: break;
  4528  001FC6  0012               	return	
  4529  001FC8                     i2l506:
  4530  001FC8  948A               	bcf	3978,2,c	;volatile
  4531                           
  4532                           ;ax.c: 108: break;
  4533  001FCA  0012               	return	
  4534  001FCC                     i2l509:
  4535  001FCC  968A               	bcf	3978,3,c	;volatile
  4536                           
  4537                           ;ax.c: 112: }
  4538                           
  4539                           ;ax.c: 111: break;
  4540  001FCE  0012               	return	
  4541  001FD0                     i2l2426:
  4542  001FD0  C001  F003         	movff	setLedOff@led,??_setLedOff
  4543  001FD4  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  4544                           
  4545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4546                           ; Switch size 1, requested type "space"
  4547                           ; Number of cases is 1, Range of values is 0 to 0
  4548                           ; switch strategies available:
  4549                           ; Name         Instructions Cycles
  4550                           ; simple_byte            4     3 (average)
  4551                           ;	Chosen strategy is simple_byte
  4552  001FD8  5004               	movf	??_setLedOff+1,w,c
  4553  001FDA  0A00               	xorlw	0	; case 0
  4554  001FDC  A4D8               	btfss	status,2,c
  4555  001FDE  0012               	return	
  4556                           
  4557                           ; Switch size 1, requested type "space"
  4558                           ; Number of cases is 10, Range of values is 1 to 10
  4559                           ; switch strategies available:
  4560                           ; Name         Instructions Cycles
  4561                           ; simple_byte           31    16 (average)
  4562                           ;	Chosen strategy is simple_byte
  4563  001FE0  5003               	movf	??_setLedOff,w,c
  4564  001FE2  0A01               	xorlw	1	; case 1
  4565  001FE4  B4D8               	btfsc	status,2,c
  4566  001FE6  D7E0               	goto	i2l481
  4567  001FE8  0A03               	xorlw	3	; case 2
  4568  001FEA  B4D8               	btfsc	status,2,c
  4569  001FEC  D7DF               	goto	i2l485
  4570  001FEE  0A01               	xorlw	1	; case 3
  4571  001FF0  B4D8               	btfsc	status,2,c
  4572  001FF2  D7DE               	goto	i2l488
  4573  001FF4  0A07               	xorlw	7	; case 4
  4574  001FF6  B4D8               	btfsc	status,2,c
  4575  001FF8  D7DD               	goto	i2l491
  4576  001FFA  0A01               	xorlw	1	; case 5
  4577  001FFC  B4D8               	btfsc	status,2,c
  4578  001FFE  D7DC               	goto	i2l494
  4579  002000  0A03               	xorlw	3	; case 6
  4580  002002  B4D8               	btfsc	status,2,c
  4581  002004  D7DB               	goto	i2l497
  4582  002006  0A01               	xorlw	1	; case 7
  4583  002008  B4D8               	btfsc	status,2,c
  4584  00200A  D7DA               	goto	i2l500
  4585  00200C  0A0F               	xorlw	15	; case 8
  4586  00200E  B4D8               	btfsc	status,2,c
  4587  002010  D7D9               	goto	i2l503
  4588  002012  0A01               	xorlw	1	; case 9
  4589  002014  B4D8               	btfsc	status,2,c
  4590  002016  D7D8               	goto	i2l506
  4591  002018  0A03               	xorlw	3	; case 10
  4592  00201A  A4D8               	btfss	status,2,c
  4593  00201C  0012               	return	
  4594  00201E  D7D6               	goto	i2l509
  4595  002020                     __end_of_setLedOff:
  4596                           	opt stack 0
  4597                           pclatu	equ	0xFFB
  4598                           pclath	equ	0xFFA
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           postinc0	equ	0xFEE
  4607                           fsr0h	equ	0xFEA
  4608                           fsr0l	equ	0xFE9
  4609                           wreg	equ	0xFE8
  4610                           fsr1h	equ	0xFE2
  4611                           fsr1l	equ	0xFE1
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           postdec2	equ	0xFDD
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _getByteToSend *****************
  4620 ;; Defined at:
  4621 ;;		line 320 in file "ax.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  i2c_data_rec    1    wreg     unsigned char 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  i2c_data_rec    1   84[COMRAM] unsigned char 
  4626 ;;  value           2   92[COMRAM] int 
  4627 ;;  xhigh           1   88[COMRAM] unsigned char 
  4628 ;;  xlow            1   87[COMRAM] unsigned char 
  4629 ;;  error           2   82[COMRAM] int 
  4630 ;;  value           2   90[COMRAM] int 
  4631 ;;  xhigh           1   86[COMRAM] unsigned char 
  4632 ;;  xlow            1   85[COMRAM] unsigned char 
  4633 ;;  error           2   80[COMRAM] int 
  4634 ;;  d               1   89[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      unsigned char 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4645 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4647 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4648 ;;Total ram usage:       15 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    3
  4651 ;; This function calls:
  4652 ;;		_clearState
  4653 ;;		_pingAX
  4654 ;;		_readAXData
  4655 ;;		_writeAXData
  4656 ;;		i2_ADC_GetConversion
  4657 ;;		i2_printf
  4658 ;; This function is called by:
  4659 ;;		_I2C_ISR
  4660 ;;		_I2C_ISR_bad
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text24
  4665  00141E                     __ptext24:
  4666                           	opt stack 0
  4667  00141E                     _getByteToSend:
  4668                           	opt stack 22
  4669                           
  4670                           ;incstack = 0
  4671                           ;getByteToSend@i2c_data_received stored from wreg
  4672  00141E  6E55               	movwf	getByteToSend@i2c_data_received,c
  4673                           
  4674                           ;ax.c: 321: printf("getByteToSend bytesSent:%d data_received:%d \r\n",bytesSent,i2c_data
      +                          _received);
  4675  001420  0E29               	movlw	low STR_7
  4676  001422  6E17               	movwf	i2printf@f,c
  4677  001424  0E0F               	movlw	high STR_7
  4678  001426  6E18               	movwf	i2printf@f+1,c
  4679  001428  C094  F019         	movff	_bytesSent,?i2_printf+2	;volatile
  4680  00142C  C095  F01A         	movff	_bytesSent+1,?i2_printf+3	;volatile
  4681  001430  C055  F01B         	movff	getByteToSend@i2c_data_received,?i2_printf+4
  4682  001434  6A1C               	clrf	?i2_printf+5,c
  4683  001436  ECFA  F00A         	call	i2_printf	;wreg free
  4684                           
  4685                           ;ax.c: 323: if (currentCommand == 20) {
  4686  00143A  0E14               	movlw	20
  4687  00143C  0100               	movlb	0	; () banked
  4688  00143E  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4689  001440  A4D8               	btfss	status,2,c
  4690  001442  D016               	goto	i2l2614
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;ax.c: 324: int error = pingAX(parameter1);
  4694  001444  C0A5  F018         	movff	_parameter1,pingAX@id	;volatile
  4695  001448  6A19               	clrf	pingAX@id+1,c
  4696  00144A  EC7F  F010         	call	_pingAX	;wreg free
  4697  00144E  C018  F051         	movff	?_pingAX,getByteToSend@error
  4698  001452  C019  F052         	movff	?_pingAX+1,getByteToSend@error+1
  4699                           
  4700                           ;ax.c: 326: nbBytesToSend = 2;
  4701  001456  0E00               	movlw	0
  4702  001458  0100               	movlb	0	; () banked
  4703  00145A  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  4704  00145C  0E02               	movlw	2
  4705  00145E  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;ax.c: 327: dataToSend[0] = error;
  4709  001460  C051  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;ax.c: 328: dataToSend[1] = 0;
  4713  001464  0E00               	movlw	0
  4714  001466  0100               	movlb	0	; () banked
  4715  001468  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;ax.c: 330: clearState();
  4719  00146A  ECD0  F010         	call	_clearState	;wreg free
  4720                           
  4721                           ;ax.c: 331: } else if (currentCommand == 21) {
  4722  00146E  D097               	goto	i2l2666
  4723  001470                     i2l2614:
  4724  001470  0E15               	movlw	21
  4725  001472  0100               	movlb	0	; () banked
  4726  001474  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4727  001476  A4D8               	btfss	status,2,c
  4728  001478  D022               	goto	i2l2634
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;ax.c: 332: int value = readAXData(parameter1, parameter2);
  4732  00147A  C0A5  F018         	movff	_parameter1,readAXData@id	;volatile
  4733  00147E  6A19               	clrf	readAXData@id+1,c
  4734  001480  C0A4  F01A         	movff	_parameter2,readAXData@address	;volatile
  4735  001484  6A1B               	clrf	readAXData@address+1,c
  4736  001486  EC7C  F00E         	call	_readAXData	;wreg free
  4737  00148A  C018  F05B         	movff	?_readAXData,getByteToSend@value
  4738  00148E  C019  F05C         	movff	?_readAXData+1,getByteToSend@value+1
  4739                           
  4740                           ;ax.c: 334: nbBytesToSend = 4;
  4741  001492  0E00               	movlw	0
  4742  001494  0100               	movlb	0	; () banked
  4743  001496  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  4744  001498  0E04               	movlw	4
  4745  00149A  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;ax.c: 335: uint8_t xlow = value & 0xff;
  4749  00149C  C05B  F056         	movff	getByteToSend@value,getByteToSend@xlow
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;ax.c: 336: uint8_t xhigh = (value >> 8);
  4753  0014A0  505C               	movf	getByteToSend@value+1,w,c
  4754  0014A2  6E57               	movwf	getByteToSend@xhigh,c
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;ax.c: 337: dataToSend[0] = xlow;
  4758  0014A4  C056  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;ax.c: 338: dataToSend[1] = 0;
  4762  0014A8  0E00               	movlw	0
  4763  0014AA  0100               	movlb	0	; () banked
  4764  0014AC  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;ax.c: 339: dataToSend[2] = xhigh;
  4768  0014AE  C057  F062         	movff	getByteToSend@xhigh,_dataToSend+2	;volatile
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;ax.c: 340: dataToSend[3] = 0;
  4772  0014B2  0E00               	movlw	0
  4773  0014B4  0100               	movlb	0	; () banked
  4774  0014B6  6F63               	movwf	(_dataToSend+3)& (0+255),b	;volatile
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;ax.c: 342: clearState();
  4778  0014B8  ECD0  F010         	call	_clearState	;wreg free
  4779                           
  4780                           ;ax.c: 343: } else if (currentCommand == 22) {
  4781  0014BC  D070               	goto	i2l2666
  4782  0014BE                     i2l2634:
  4783  0014BE  0E16               	movlw	22
  4784  0014C0  0100               	movlb	0	; () banked
  4785  0014C2  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4786  0014C4  A4D8               	btfss	status,2,c
  4787  0014C6  D01C               	goto	i2l2646
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;ax.c: 344: int error = writeAXData(parameter1, parameter2, parameter3);
  4791  0014C8  C0A5  F018         	movff	_parameter1,writeAXData@id	;volatile
  4792  0014CC  6A19               	clrf	writeAXData@id+1,c
  4793  0014CE  C0A4  F01A         	movff	_parameter2,writeAXData@address	;volatile
  4794  0014D2  6A1B               	clrf	writeAXData@address+1,c
  4795  0014D4  C0A3  F01C         	movff	_parameter3,writeAXData@data	;volatile
  4796  0014D8  6A1D               	clrf	writeAXData@data+1,c
  4797  0014DA  EC0F  F00F         	call	_writeAXData	;wreg free
  4798  0014DE  C018  F053         	movff	?_writeAXData,getByteToSend@error_1441
  4799  0014E2  C019  F054         	movff	?_writeAXData+1,getByteToSend@error_1441+1
  4800                           
  4801                           ;ax.c: 346: nbBytesToSend = 2;
  4802  0014E6  0E00               	movlw	0
  4803  0014E8  0100               	movlb	0	; () banked
  4804  0014EA  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  4805  0014EC  0E02               	movlw	2
  4806  0014EE  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;ax.c: 347: dataToSend[0] = error;
  4810  0014F0  C053  F060         	movff	getByteToSend@error_1441,_dataToSend	;volatile
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;ax.c: 348: dataToSend[1] = 0;
  4814  0014F4  0E00               	movlw	0
  4815  0014F6  0100               	movlb	0	; () banked
  4816  0014F8  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;ax.c: 350: clearState();
  4820  0014FA  ECD0  F010         	call	_clearState	;wreg free
  4821                           
  4822                           ;ax.c: 351: } else if (currentCommand == 12) {
  4823  0014FE  D04F               	goto	i2l2666
  4824  001500                     i2l2646:
  4825  001500  0E0C               	movlw	12
  4826  001502  0100               	movlb	0	; () banked
  4827  001504  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4828  001506  A4D8               	btfss	status,2,c
  4829  001508  D04A               	goto	i2l2666
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;ax.c: 354: adc_values[parameter1] = ADC_GetConversion(parameter1) / 16;
  4833  00150A  0100               	movlb	0	; () banked
  4834  00150C  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  4835  00150E  EC43  F011         	call	i2_ADC_GetConversion
  4836  001512  0E04               	movlw	4
  4837  001514  6E50               	movwf	??_getByteToSend& (0+255),c
  4838  001516                     i2u138_45:
  4839  001516  90D8               	bcf	status,0,c
  4840  001518  3202               	rrcf	?i2_ADC_GetConversion+1,f,c
  4841  00151A  3201               	rrcf	?i2_ADC_GetConversion,f,c
  4842  00151C  2E50               	decfsz	??_getByteToSend& (0+255),f,c
  4843  00151E  D7FB               	goto	i2u138_45
  4844  001520  0100               	movlb	0	; () banked
  4845  001522  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  4846  001524  0D02               	mullw	2
  4847  001526  0E80               	movlw	low _adc_values
  4848  001528  24F3               	addwf	prodl,w,c
  4849  00152A  6ED9               	movwf	fsr2l,c
  4850  00152C  0E00               	movlw	high _adc_values
  4851  00152E  20F4               	addwfc	prodh,w,c
  4852  001530  6EDA               	movwf	fsr2h,c
  4853  001532  C001  FFDE         	movff	?i2_ADC_GetConversion,postinc2
  4854  001536  C002  FFDD         	movff	?i2_ADC_GetConversion+1,postdec2
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;ax.c: 355: printf("ADC %d : %ld\r\n", parameter1, adc_values[parameter1]);
  4858  00153A  0EA3               	movlw	low STR_5
  4859  00153C  6E17               	movwf	i2printf@f,c
  4860  00153E  0E0F               	movlw	high STR_5
  4861  001540  6E18               	movwf	i2printf@f+1,c
  4862  001542  C0A5  F019         	movff	_parameter1,?i2_printf+2	;volatile
  4863  001546  6A1A               	clrf	?i2_printf+3,c
  4864  001548  0100               	movlb	0	; () banked
  4865  00154A  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  4866  00154C  0D02               	mullw	2
  4867  00154E  0E80               	movlw	low _adc_values
  4868  001550  24F3               	addwf	prodl,w,c
  4869  001552  6ED9               	movwf	fsr2l,c
  4870  001554  0E00               	movlw	high _adc_values
  4871  001556  20F4               	addwfc	prodh,w,c
  4872  001558  6EDA               	movwf	fsr2h,c
  4873  00155A  CFDE F01B          	movff	postinc2,?i2_printf+4
  4874  00155E  CFDD F01C          	movff	postdec2,?i2_printf+5
  4875  001562  ECFA  F00A         	call	i2_printf	;wreg free
  4876                           
  4877                           ;ax.c: 356: int value = adc_values[parameter1];
  4878  001566  0100               	movlb	0	; () banked
  4879  001568  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  4880  00156A  0D02               	mullw	2
  4881  00156C  0E80               	movlw	low _adc_values
  4882  00156E  24F3               	addwf	prodl,w,c
  4883  001570  6ED9               	movwf	fsr2l,c
  4884  001572  0E00               	movlw	high _adc_values
  4885  001574  20F4               	addwfc	prodh,w,c
  4886  001576  6EDA               	movwf	fsr2h,c
  4887  001578  CFDE F05D          	movff	postinc2,getByteToSend@value_1444
  4888  00157C  CFDD F05E          	movff	postdec2,getByteToSend@value_1444+1
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;ax.c: 358: nbBytesToSend = 2;
  4892  001580  0E00               	movlw	0
  4893  001582  0100               	movlb	0	; () banked
  4894  001584  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  4895  001586  0E02               	movlw	2
  4896  001588  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;ax.c: 359: uint8_t xlow = value & 0xff;
  4900  00158A  C05D  F058         	movff	getByteToSend@value_1444,getByteToSend@xlow_1445
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;ax.c: 360: uint8_t xhigh = (value >> 8);
  4904  00158E  505E               	movf	getByteToSend@value_1444+1,w,c
  4905  001590  6E59               	movwf	getByteToSend@xhigh_1446,c
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;ax.c: 361: dataToSend[0] = xlow;
  4909  001592  C058  F060         	movff	getByteToSend@xlow_1445,_dataToSend	;volatile
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;ax.c: 362: dataToSend[1] = xhigh;
  4913  001596  C059  F061         	movff	getByteToSend@xhigh_1446,_dataToSend+1	;volatile
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;ax.c: 366: clearState();
  4917  00159A  ECD0  F010         	call	_clearState	;wreg free
  4918  00159E                     i2l2666:
  4919                           
  4920                           ;ax.c: 367: }
  4921                           ;ax.c: 368: if (nbBytesToSend == 0) {
  4922  00159E  0100               	movlb	0	; () banked
  4923  0015A0  5196               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  4924  0015A2  0100               	movlb	0	; () banked
  4925  0015A4  1197               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  4926  0015A6  A4D8               	btfss	status,2,c
  4927  0015A8  D004               	goto	i2l2674
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;ax.c: 370: clearState();
  4931  0015AA  ECD0  F010         	call	_clearState	;wreg free
  4932                           
  4933                           ;ax.c: 371: return 0;
  4934  0015AE  0E00               	movlw	0
  4935  0015B0  0012               	return	
  4936  0015B2                     i2l2674:
  4937                           
  4938                           ;ax.c: 372: }
  4939                           ;ax.c: 373: uint8_t d = dataToSend[bytesSent];
  4940  0015B2  0E60               	movlw	low _dataToSend
  4941  0015B4  0100               	movlb	0	; () banked
  4942  0015B6  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  4943  0015B8  6ED9               	movwf	fsr2l,c
  4944  0015BA  0E00               	movlw	high _dataToSend
  4945  0015BC  0100               	movlb	0	; () banked
  4946  0015BE  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  4947  0015C0  6EDA               	movwf	fsr2h,c
  4948  0015C2  50DF               	movf	indf2,w,c
  4949  0015C4  6E5A               	movwf	getByteToSend@d,c
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;ax.c: 374: bytesSent++;
  4953  0015C6  0100               	movlb	0	; () banked
  4954  0015C8  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  4955  0015CA  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;ax.c: 376: if (bytesSent > nbBytesToSend) {
  4959  0015CC  0100               	movlb	0	; () banked
  4960  0015CE  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  4961  0015D0  0100               	movlb	0	; () banked
  4962  0015D2  5D96               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  4963  0015D4  0100               	movlb	0	; () banked
  4964  0015D6  5197               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  4965  0015D8  0A80               	xorlw	128
  4966  0015DA  6E50               	movwf	??_getByteToSend& (0+255),c
  4967  0015DC  0100               	movlb	0	; () banked
  4968  0015DE  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  4969  0015E0  0A80               	xorlw	128
  4970  0015E2  5850               	subwfb	??_getByteToSend& (0+255),w,c
  4971  0015E4  B0D8               	btfsc	status,0,c
  4972  0015E6  D004               	goto	i2l2686
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;ax.c: 378: clearState();
  4976  0015E8  ECD0  F010         	call	_clearState	;wreg free
  4977                           
  4978                           ;ax.c: 379: return 111;
  4979  0015EC  0E6F               	movlw	111
  4980  0015EE  0012               	return	
  4981  0015F0                     i2l2686:
  4982                           
  4983                           ;ax.c: 380: }
  4984                           ;ax.c: 382: return d;
  4985  0015F0  505A               	movf	getByteToSend@d,w,c
  4986  0015F2  0012               	return	
  4987  0015F4                     __end_of_getByteToSend:
  4988                           	opt stack 0
  4989                           pclatu	equ	0xFFB
  4990                           pclath	equ	0xFFA
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           postinc0	equ	0xFEE
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function i2_printf *****************
  5012 ;; Defined at:
  5013 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  f               2   22[COMRAM] PTR const unsigned char 
  5016 ;;		 -> STR_8(15), STR_7(47), STR_6(40), STR_5(15), 
  5017 ;;		 -> STR_4(18), STR_3(17), STR_2(13), STR_1(10), 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  printf          4   35[COMRAM] unsigned long 
  5020 ;;  printf          4    0        struct .
  5021 ;;  printf          3    0        PTR const unsigned char 
  5022 ;;  printf          2   32[COMRAM] PTR void [1]
  5023 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5024 ;;  printf          2   30[COMRAM] int 
  5025 ;;  printf          2    0        unsigned int 
  5026 ;;  printf          1   39[COMRAM] char 
  5027 ;;  printf          1   34[COMRAM] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  2   22[COMRAM] int 
  5030 ;; Registers used:
  5031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5037 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5038 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5040 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5041 ;;Total ram usage:       18 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    2
  5044 ;; This function calls:
  5045 ;;		i2___lldiv
  5046 ;;		i2___llmod
  5047 ;;		i2_putch
  5048 ;; This function is called by:
  5049 ;;		_I2C_ISR
  5050 ;;		_handleByteReceived
  5051 ;;		_getByteToSend
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text25
  5056  0015F4                     __ptext25:
  5057                           	opt stack 0
  5058  0015F4                     i2_printf:
  5059                           	opt stack 23
  5060                           
  5061                           ;doprnt.c: 466: va_list ap;
  5062                           ;doprnt.c: 499: signed char c;
  5063                           ;doprnt.c: 504: int prec;
  5064                           ;doprnt.c: 508: unsigned char flag;
  5065                           ;doprnt.c: 523: union {
  5066                           ;doprnt.c: 524: unsigned long vd;
  5067                           ;doprnt.c: 525: double integ;
  5068                           ;doprnt.c: 526: } tmpval;
  5069                           ;doprnt.c: 528: unsigned long val;
  5070                           ;doprnt.c: 529: unsigned len;
  5071                           ;doprnt.c: 530: const char * cp;
  5072                           ;doprnt.c: 533: *ap = __va_start();
  5073                           
  5074                           ;incstack = 0
  5075  0015F4  0E19               	movlw	low (?i2_printf+2)
  5076  0015F6  6E21               	movwf	i2printf@ap,c
  5077  0015F8  0E00               	movlw	high (?i2_printf+2)
  5078  0015FA  6E22               	movwf	i2printf@ap+1,c
  5079                           
  5080                           ;doprnt.c: 536: while(c = *f++) {
  5081  0015FC  D0CA               	goto	i2l2582
  5082  0015FE                     i2l2530:
  5083                           
  5084                           ;doprnt.c: 538: if(c != '%')
  5085  0015FE  0E25               	movlw	37
  5086  001600  1828               	xorwf	i2printf@c,w,c
  5087  001602  B4D8               	btfsc	status,2,c
  5088  001604  D004               	goto	i2l2534
  5089                           
  5090                           ;doprnt.c: 540: {
  5091                           ;doprnt.c: 541: (putch(c) );
  5092  001606  5028               	movf	i2printf@c,w,c
  5093  001608  ECC6  F011         	call	i2_putch
  5094                           
  5095                           ;doprnt.c: 542: continue;
  5096  00160C  D0C2               	goto	i2l2582
  5097  00160E                     i2l2534:
  5098                           
  5099                           ;doprnt.c: 543: }
  5100                           ;doprnt.c: 548: flag = 0;
  5101  00160E  0E00               	movlw	0
  5102  001610  6E23               	movwf	i2printf@flag,c
  5103                           
  5104                           ;doprnt.c: 635: switch(c = *f++) {
  5105                           
  5106                           ;doprnt.c: 633: loop:
  5107  001612  D001               	goto	i2l2540
  5108  001614                     i2l2536:
  5109                           
  5110                           ;doprnt.c: 643: flag |= 0x10;
  5111  001614  8823               	bsf	i2printf@flag,4,c
  5112  001616                     i2l2540:
  5113  001616  C017  FFF6         	movff	i2printf@f,tblptrl
  5114  00161A  C018  FFF7         	movff	i2printf@f+1,tblptrh
  5115  00161E  4A17               	infsnz	i2printf@f,f,c
  5116  001620  2A18               	incf	i2printf@f+1,f,c
  5117  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5118  001622  6AF8               	clrf	tblptru,c
  5119  001624                     	endif
  5120  001624                     	if	0	;tblptru may be non-zero
  5121  001624                     	endif
  5122  001624  0008               	tblrd		*
  5123  001626  CFF5 F028          	movff	tablat,i2printf@c
  5124  00162A  5028               	movf	i2printf@c,w,c
  5125                           
  5126                           ; Switch size 1, requested type "space"
  5127                           ; Number of cases is 4, Range of values is 0 to 108
  5128                           ; switch strategies available:
  5129                           ; Name         Instructions Cycles
  5130                           ; simple_byte           13     7 (average)
  5131                           ;	Chosen strategy is simple_byte
  5132  00162C  0A00               	xorlw	0	; case 0
  5133  00162E  B4D8               	btfsc	status,2,c
  5134  001630  0012               	return	
  5135  001632  0A64               	xorlw	100	; case 100
  5136  001634  B4D8               	btfsc	status,2,c
  5137  001636  D007               	goto	i2l629
  5138  001638  0A0D               	xorlw	13	; case 105
  5139  00163A  B4D8               	btfsc	status,2,c
  5140  00163C  D004               	goto	i2l629
  5141  00163E  0A05               	xorlw	5	; case 108
  5142  001640  B4D8               	btfsc	status,2,c
  5143  001642  D7E8               	goto	i2l2536
  5144  001644  D0A6               	goto	i2l2582
  5145  001646                     i2l629:
  5146                           
  5147                           ;doprnt.c: 1253: {
  5148                           ;doprnt.c: 1255: if(flag & 0x10)
  5149  001646  A823               	btfss	i2printf@flag,4,c
  5150  001648  D00E               	goto	i2l2546
  5151                           
  5152                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5153  00164A  C021  FFD9         	movff	i2printf@ap,fsr2l
  5154  00164E  C022  FFDA         	movff	i2printf@ap+1,fsr2h
  5155  001652  CFDE F024          	movff	postinc2,i2printf@val
  5156  001656  CFDE F025          	movff	postinc2,i2printf@val+1
  5157  00165A  CFDE F026          	movff	postinc2,i2printf@val+2
  5158  00165E  CFDE F027          	movff	postinc2,i2printf@val+3
  5159  001662  0E04               	movlw	4
  5160  001664  D00E               	goto	L5
  5161  001666                     i2l2546:
  5162                           
  5163                           ;doprnt.c: 1257: else
  5164                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5165  001666  C021  FFD9         	movff	i2printf@ap,fsr2l
  5166  00166A  C022  FFDA         	movff	i2printf@ap+1,fsr2h
  5167  00166E  CFDE F024          	movff	postinc2,i2printf@val
  5168  001672  CFDD F025          	movff	postdec2,i2printf@val+1
  5169  001676  0E00               	movlw	0
  5170  001678  BE25               	btfsc	i2printf@val+1,7,c
  5171  00167A  0EFF               	movlw	-1
  5172  00167C  6E26               	movwf	i2printf@val+2,c
  5173  00167E  6E27               	movwf	i2printf@val+3,c
  5174  001680  0E02               	movlw	2
  5175  001682                     L5:
  5176  001682  2621               	addwf	i2printf@ap,f,c
  5177  001684  0E00               	movlw	0
  5178  001686  2222               	addwfc	i2printf@ap+1,f,c
  5179                           
  5180                           ;doprnt.c: 1261: if((long)val < 0) {
  5181  001688  AE27               	btfss	i2printf@val+3,7,c
  5182  00168A  D00A               	goto	i2l2556
  5183                           
  5184                           ;doprnt.c: 1262: flag |= 0x03;
  5185  00168C  0E03               	movlw	3
  5186  00168E  1223               	iorwf	i2printf@flag,f,c
  5187                           
  5188                           ;doprnt.c: 1263: val = -val;
  5189  001690  1E27               	comf	i2printf@val+3,f,c
  5190  001692  1E26               	comf	i2printf@val+2,f,c
  5191  001694  1E25               	comf	i2printf@val+1,f,c
  5192  001696  6C24               	negf	i2printf@val,c
  5193  001698  0E00               	movlw	0
  5194  00169A  2225               	addwfc	i2printf@val+1,f,c
  5195  00169C  2226               	addwfc	i2printf@val+2,f,c
  5196  00169E  2227               	addwfc	i2printf@val+3,f,c
  5197  0016A0                     i2l2556:
  5198                           
  5199                           ;doprnt.c: 1264: }
  5200                           ;doprnt.c: 1266: }
  5201                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5202  0016A0  0E01               	movlw	1
  5203  0016A2  6E28               	movwf	i2printf@c,c
  5204  0016A4                     i2l2558:
  5205  0016A4  0E0A               	movlw	10
  5206  0016A6  1828               	xorwf	i2printf@c,w,c
  5207  0016A8  B4D8               	btfsc	status,2,c
  5208  0016AA  D01B               	goto	i2l2570
  5209                           
  5210                           ;doprnt.c: 1306: if(val < dpowers[c])
  5211  0016AC  5028               	movf	i2printf@c,w,c
  5212  0016AE  0D04               	mullw	4
  5213  0016B0  0E01               	movlw	low _dpowers
  5214  0016B2  24F3               	addwf	prodl,w,c
  5215  0016B4  6EF6               	movwf	tblptrl,c
  5216  0016B6  0E0F               	movlw	high _dpowers
  5217  0016B8  20F4               	addwfc	prodh,w,c
  5218  0016BA  6EF7               	movwf	tblptrh,c
  5219  0016BC                     	if	1	;There are 3 active tblptr bytes
  5220  0016BC  6AF8               	clrf	tblptru,c
  5221  0016BE  0E00               	movlw	low (__mediumconst shr (0+16))
  5222  0016C0  22F8               	addwfc	tblptru,f,c
  5223  0016C2                     	endif
  5224  0016C2  0009               	tblrd		*+
  5225  0016C4  50F5               	movf	tablat,w,c
  5226  0016C6  5C24               	subwf	i2printf@val,w,c
  5227  0016C8  0009               	tblrd		*+
  5228  0016CA  50F5               	movf	tablat,w,c
  5229  0016CC  5825               	subwfb	i2printf@val+1,w,c
  5230  0016CE  0009               	tblrd		*+
  5231  0016D0  50F5               	movf	tablat,w,c
  5232  0016D2  5826               	subwfb	i2printf@val+2,w,c
  5233  0016D4  0009               	tblrd		*+
  5234  0016D6  50F5               	movf	tablat,w,c
  5235  0016D8  5827               	subwfb	i2printf@val+3,w,c
  5236  0016DA  A0D8               	btfss	status,0,c
  5237  0016DC  D002               	goto	i2l2570
  5238                           
  5239                           ;doprnt.c: 1307: break;
  5240  0016DE  2A28               	incf	i2printf@c,f,c
  5241  0016E0  D7E1               	goto	i2l2558
  5242  0016E2                     i2l2570:
  5243                           
  5244                           ;doprnt.c: 1422: {
  5245                           ;doprnt.c: 1438: if(flag & 0x03)
  5246  0016E2  C023  F01D         	movff	i2printf@flag,??i2_printf
  5247  0016E6  0E03               	movlw	3
  5248  0016E8  161D               	andwf	??i2_printf,f,c
  5249  0016EA  B4D8               	btfsc	status,2,c
  5250  0016EC  D003               	goto	i2l2574
  5251                           
  5252                           ;doprnt.c: 1439: (putch('-') );
  5253  0016EE  0E2D               	movlw	45
  5254  0016F0  ECC6  F011         	call	i2_putch
  5255  0016F4                     i2l2574:
  5256                           
  5257                           ;doprnt.c: 1469: }
  5258                           ;doprnt.c: 1472: prec = c;
  5259  0016F4  5028               	movf	i2printf@c,w,c
  5260  0016F6  6E1F               	movwf	i2printf@prec,c
  5261  0016F8  6A20               	clrf	i2printf@prec+1,c
  5262  0016FA  BE1F               	btfsc	i2printf@prec,7,c
  5263  0016FC  0620               	decf	i2printf@prec+1,f,c
  5264                           
  5265                           ;doprnt.c: 1474: while(prec--) {
  5266  0016FE  D041               	goto	i2l2580
  5267  001700                     i2l2576:
  5268                           
  5269                           ;doprnt.c: 1478: {
  5270                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5271  001700  C01F  F01D         	movff	i2printf@prec,??i2_printf
  5272  001704  C020  F01E         	movff	i2printf@prec+1,??i2_printf+1
  5273  001708  90D8               	bcf	status,0,c
  5274  00170A  361D               	rlcf	??i2_printf,f,c
  5275  00170C  361E               	rlcf	??i2_printf+1,f,c
  5276  00170E  90D8               	bcf	status,0,c
  5277  001710  361D               	rlcf	??i2_printf,f,c
  5278  001712  361E               	rlcf	??i2_printf+1,f,c
  5279  001714  0E01               	movlw	low _dpowers
  5280  001716  241D               	addwf	??i2_printf,w,c
  5281  001718  6EF6               	movwf	tblptrl,c
  5282  00171A  0E0F               	movlw	high _dpowers
  5283  00171C  201E               	addwfc	??i2_printf+1,w,c
  5284  00171E  6EF7               	movwf	tblptrh,c
  5285  001720                     	if	1	;There are 3 active tblptr bytes
  5286  001720  6AF8               	clrf	tblptru,c
  5287  001722  0E00               	movlw	low (__mediumconst shr (0+16))
  5288  001724  22F8               	addwfc	tblptru,f,c
  5289  001726                     	endif
  5290  001726  0009               	tblrd		*+
  5291  001728  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  5292  00172C  0009               	tblrd		*+
  5293  00172E  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  5294  001732  0009               	tblrd		*+
  5295  001734  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  5296  001738  000A               	tblrd		*-
  5297  00173A  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  5298  00173E  C024  F001         	movff	i2printf@val,i2___lldiv@dividend
  5299  001742  C025  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  5300  001746  C026  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  5301  00174A  C027  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  5302  00174E  EC55  F00F         	call	i2___lldiv	;wreg free
  5303  001752  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  5304  001756  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  5305  00175A  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  5306  00175E  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  5307  001762  0E0A               	movlw	10
  5308  001764  6E12               	movwf	i2___llmod@divisor,c
  5309  001766  0E00               	movlw	0
  5310  001768  6E13               	movwf	i2___llmod@divisor+1,c
  5311  00176A  0E00               	movlw	0
  5312  00176C  6E14               	movwf	i2___llmod@divisor+2,c
  5313  00176E  0E00               	movlw	0
  5314  001770  6E15               	movwf	i2___llmod@divisor+3,c
  5315  001772  EC4C  F010         	call	i2___llmod	;wreg free
  5316  001776  500E               	movf	?i2___llmod,w,c
  5317  001778  0F30               	addlw	48
  5318  00177A  6E28               	movwf	i2printf@c,c
  5319                           
  5320                           ;doprnt.c: 1523: }
  5321                           ;doprnt.c: 1524: (putch(c) );
  5322  00177C  5028               	movf	i2printf@c,w,c
  5323  00177E  ECC6  F011         	call	i2_putch
  5324  001782                     i2l2580:
  5325  001782  061F               	decf	i2printf@prec,f,c
  5326  001784  A0D8               	btfss	status,0,c
  5327  001786  0620               	decf	i2printf@prec+1,f,c
  5328  001788  281F               	incf	i2printf@prec,w,c
  5329  00178A  E1BA               	bnz	i2l2576
  5330  00178C  2820               	incf	i2printf@prec+1,w,c
  5331  00178E  A4D8               	btfss	status,2,c
  5332  001790  D7B7               	goto	i2l2576
  5333  001792                     i2l2582:
  5334  001792  C017  FFF6         	movff	i2printf@f,tblptrl
  5335  001796  C018  FFF7         	movff	i2printf@f+1,tblptrh
  5336  00179A  4A17               	infsnz	i2printf@f,f,c
  5337  00179C  2A18               	incf	i2printf@f+1,f,c
  5338  00179E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5339  00179E  6AF8               	clrf	tblptru,c
  5340  0017A0                     	endif
  5341  0017A0                     	if	0	;tblptru may be non-zero
  5342  0017A0                     	endif
  5343  0017A0  0008               	tblrd		*
  5344  0017A2  CFF5 F028          	movff	tablat,i2printf@c
  5345  0017A6  5028               	movf	i2printf@c,w,c
  5346  0017A8  B4D8               	btfsc	status,2,c
  5347  0017AA  0012               	return	
  5348  0017AC  D728               	goto	i2l2530
  5349  0017AE                     __end_ofi2_printf:
  5350                           	opt stack 0
  5351                           pclatu	equ	0xFFB
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           postinc0	equ	0xFEE
  5361                           fsr0h	equ	0xFEA
  5362                           fsr0l	equ	0xFE9
  5363                           wreg	equ	0xFE8
  5364                           fsr1h	equ	0xFE2
  5365                           fsr1l	equ	0xFE1
  5366                           indf2	equ	0xFDF
  5367                           postinc2	equ	0xFDE
  5368                           postdec2	equ	0xFDD
  5369                           fsr2h	equ	0xFDA
  5370                           fsr2l	equ	0xFD9
  5371                           status	equ	0xFD8
  5372                           
  5373 ;; *************** function i2_putch *****************
  5374 ;; Defined at:
  5375 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  txData          1    wreg     unsigned char 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  txData          1    1[COMRAM] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      void 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5393 ;;Total ram usage:        1 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    1
  5396 ;; This function calls:
  5397 ;;		i2_EUSART2_Write
  5398 ;; This function is called by:
  5399 ;;		i2_printf
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text26
  5404  00238C                     __ptext26:
  5405                           	opt stack 0
  5406  00238C                     i2_putch:
  5407                           	opt stack 23
  5408                           
  5409                           ;incstack = 0
  5410                           ;i2putch@txData stored from wreg
  5411  00238C  6E02               	movwf	i2putch@txData,c
  5412                           
  5413                           ;eusart2.c: 112: EUSART2_Write(txData);
  5414  00238E  5002               	movf	i2putch@txData,w,c
  5415  002390  ECBA  F011         	call	i2_EUSART2_Write
  5416  002394  0012               	return		;funcret
  5417  002396                     __end_ofi2_putch:
  5418                           	opt stack 0
  5419                           pclatu	equ	0xFFB
  5420                           pclath	equ	0xFFA
  5421                           tblptru	equ	0xFF8
  5422                           tblptrh	equ	0xFF7
  5423                           tblptrl	equ	0xFF6
  5424                           tablat	equ	0xFF5
  5425                           prodh	equ	0xFF4
  5426                           prodl	equ	0xFF3
  5427                           intcon	equ	0xFF2
  5428                           postinc0	equ	0xFEE
  5429                           fsr0h	equ	0xFEA
  5430                           fsr0l	equ	0xFE9
  5431                           wreg	equ	0xFE8
  5432                           fsr1h	equ	0xFE2
  5433                           fsr1l	equ	0xFE1
  5434                           indf2	equ	0xFDF
  5435                           postinc2	equ	0xFDE
  5436                           postdec2	equ	0xFDD
  5437                           fsr2h	equ	0xFDA
  5438                           fsr2l	equ	0xFD9
  5439                           status	equ	0xFD8
  5440                           
  5441 ;; *************** function i2_EUSART2_Write *****************
  5442 ;; Defined at:
  5443 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  txData          1    wreg     unsigned char 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  txData          1    0[COMRAM] unsigned char 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5461 ;;Total ram usage:        1 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		i2_putch
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text27
  5471  002374                     __ptext27:
  5472                           	opt stack 0
  5473  002374                     i2_EUSART2_Write:
  5474                           	opt stack 23
  5475                           
  5476                           ;incstack = 0
  5477                           ;i2EUSART2_Write@txData stored from wreg
  5478  002374  6E01               	movwf	i2EUSART2_Write@txData,c
  5479  002376                     i2l31:
  5480  002376  A8A4               	btfss	4004,4,c	;volatile
  5481  002378  D7FE               	goto	i2l31
  5482                           
  5483                           ;eusart2.c: 100: }
  5484                           ;eusart2.c: 102: TXREG2 = txData;
  5485  00237A  C001  FF79         	movff	i2EUSART2_Write@txData,3961	;volatile
  5486  00237E  0012               	return		;funcret
  5487  002380                     __end_ofi2_EUSART2_Write:
  5488                           	opt stack 0
  5489                           pclatu	equ	0xFFB
  5490                           pclath	equ	0xFFA
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           prodh	equ	0xFF4
  5496                           prodl	equ	0xFF3
  5497                           intcon	equ	0xFF2
  5498                           postinc0	equ	0xFEE
  5499                           fsr0h	equ	0xFEA
  5500                           fsr0l	equ	0xFE9
  5501                           wreg	equ	0xFE8
  5502                           fsr1h	equ	0xFE2
  5503                           fsr1l	equ	0xFE1
  5504                           indf2	equ	0xFDF
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function i2___llmod *****************
  5512 ;; Defined at:
  5513 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  dividend        4   13[COMRAM] unsigned long 
  5516 ;;  divisor         4   17[COMRAM] unsigned long 
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  __llmod         1   21[COMRAM] unsigned char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  4   13[COMRAM] unsigned long 
  5521 ;; Registers used:
  5522 ;;		wreg, status,2, status,0
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5528 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5531 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5532 ;;Total ram usage:        9 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		i2_printf
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text28
  5542  002098                     __ptext28:
  5543                           	opt stack 0
  5544  002098                     i2___llmod:
  5545                           	opt stack 24
  5546                           
  5547                           ;incstack = 0
  5548  002098  5012               	movf	i2___llmod@divisor,w,c
  5549  00209A  1013               	iorwf	i2___llmod@divisor+1,w,c
  5550  00209C  1014               	iorwf	i2___llmod@divisor+2,w,c
  5551  00209E  1015               	iorwf	i2___llmod@divisor+3,w,c
  5552  0020A0  B4D8               	btfsc	status,2,c
  5553  0020A2  D024               	goto	i2l1002
  5554  0020A4  0E01               	movlw	1
  5555  0020A6  6E16               	movwf	i2___llmod@counter,c
  5556  0020A8  D006               	goto	i2l2396
  5557  0020AA                     i2l2394:
  5558  0020AA  90D8               	bcf	status,0,c
  5559  0020AC  3612               	rlcf	i2___llmod@divisor,f,c
  5560  0020AE  3613               	rlcf	i2___llmod@divisor+1,f,c
  5561  0020B0  3614               	rlcf	i2___llmod@divisor+2,f,c
  5562  0020B2  3615               	rlcf	i2___llmod@divisor+3,f,c
  5563  0020B4  2A16               	incf	i2___llmod@counter,f,c
  5564  0020B6                     i2l2396:
  5565  0020B6  AE15               	btfss	i2___llmod@divisor+3,7,c
  5566  0020B8  D7F8               	goto	i2l2394
  5567  0020BA                     i2l2398:
  5568  0020BA  5012               	movf	i2___llmod@divisor,w,c
  5569  0020BC  5C0E               	subwf	i2___llmod@dividend,w,c
  5570  0020BE  5013               	movf	i2___llmod@divisor+1,w,c
  5571  0020C0  580F               	subwfb	i2___llmod@dividend+1,w,c
  5572  0020C2  5014               	movf	i2___llmod@divisor+2,w,c
  5573  0020C4  5810               	subwfb	i2___llmod@dividend+2,w,c
  5574  0020C6  5015               	movf	i2___llmod@divisor+3,w,c
  5575  0020C8  5811               	subwfb	i2___llmod@dividend+3,w,c
  5576  0020CA  A0D8               	btfss	status,0,c
  5577  0020CC  D008               	goto	i2l2402
  5578  0020CE  5012               	movf	i2___llmod@divisor,w,c
  5579  0020D0  5E0E               	subwf	i2___llmod@dividend,f,c
  5580  0020D2  5013               	movf	i2___llmod@divisor+1,w,c
  5581  0020D4  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  5582  0020D6  5014               	movf	i2___llmod@divisor+2,w,c
  5583  0020D8  5A10               	subwfb	i2___llmod@dividend+2,f,c
  5584  0020DA  5015               	movf	i2___llmod@divisor+3,w,c
  5585  0020DC  5A11               	subwfb	i2___llmod@dividend+3,f,c
  5586  0020DE                     i2l2402:
  5587  0020DE  90D8               	bcf	status,0,c
  5588  0020E0  3215               	rrcf	i2___llmod@divisor+3,f,c
  5589  0020E2  3214               	rrcf	i2___llmod@divisor+2,f,c
  5590  0020E4  3213               	rrcf	i2___llmod@divisor+1,f,c
  5591  0020E6  3212               	rrcf	i2___llmod@divisor,f,c
  5592  0020E8  2E16               	decfsz	i2___llmod@counter,f,c
  5593  0020EA  D7E7               	goto	i2l2398
  5594  0020EC                     i2l1002:
  5595  0020EC  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  5596  0020F0  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5597  0020F4  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5598  0020F8  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5599  0020FC  0012               	return		;funcret
  5600  0020FE                     __end_ofi2___llmod:
  5601                           	opt stack 0
  5602                           pclatu	equ	0xFFB
  5603                           pclath	equ	0xFFA
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           prodh	equ	0xFF4
  5609                           prodl	equ	0xFF3
  5610                           intcon	equ	0xFF2
  5611                           postinc0	equ	0xFEE
  5612                           fsr0h	equ	0xFEA
  5613                           fsr0l	equ	0xFE9
  5614                           wreg	equ	0xFE8
  5615                           fsr1h	equ	0xFE2
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           fsr2h	equ	0xFDA
  5621                           fsr2l	equ	0xFD9
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function i2___lldiv *****************
  5625 ;; Defined at:
  5626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  dividend        4    0[COMRAM] unsigned long 
  5629 ;;  divisor         4    4[COMRAM] unsigned long 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  __lldiv         4    8[COMRAM] unsigned long 
  5632 ;;  __lldiv         1   12[COMRAM] unsigned char 
  5633 ;; Return value:  Size  Location     Type
  5634 ;;                  4    0[COMRAM] unsigned long 
  5635 ;; Registers used:
  5636 ;;		wreg, status,2, status,0
  5637 ;; Tracked objects:
  5638 ;;		On entry : 0/0
  5639 ;;		On exit  : 0/0
  5640 ;;		Unchanged: 0/0
  5641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5642 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5643 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5645 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5646 ;;Total ram usage:       13 bytes
  5647 ;; Hardware stack levels used:    1
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		i2_printf
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text29
  5656  001EAA                     __ptext29:
  5657                           	opt stack 0
  5658  001EAA                     i2___lldiv:
  5659                           	opt stack 24
  5660                           
  5661                           ;incstack = 0
  5662  001EAA  0E00               	movlw	0
  5663  001EAC  6E09               	movwf	i2___lldiv@quotient,c
  5664  001EAE  0E00               	movlw	0
  5665  001EB0  6E0A               	movwf	i2___lldiv@quotient+1,c
  5666  001EB2  0E00               	movlw	0
  5667  001EB4  6E0B               	movwf	i2___lldiv@quotient+2,c
  5668  001EB6  0E00               	movlw	0
  5669  001EB8  6E0C               	movwf	i2___lldiv@quotient+3,c
  5670  001EBA  5005               	movf	i2___lldiv@divisor,w,c
  5671  001EBC  1006               	iorwf	i2___lldiv@divisor+1,w,c
  5672  001EBE  1007               	iorwf	i2___lldiv@divisor+2,w,c
  5673  001EC0  1008               	iorwf	i2___lldiv@divisor+3,w,c
  5674  001EC2  B4D8               	btfsc	status,2,c
  5675  001EC4  D02A               	goto	i2l992
  5676  001EC6  0E01               	movlw	1
  5677  001EC8  6E0D               	movwf	i2___lldiv@counter,c
  5678  001ECA  D006               	goto	i2l2376
  5679  001ECC                     i2l2374:
  5680  001ECC  90D8               	bcf	status,0,c
  5681  001ECE  3605               	rlcf	i2___lldiv@divisor,f,c
  5682  001ED0  3606               	rlcf	i2___lldiv@divisor+1,f,c
  5683  001ED2  3607               	rlcf	i2___lldiv@divisor+2,f,c
  5684  001ED4  3608               	rlcf	i2___lldiv@divisor+3,f,c
  5685  001ED6  2A0D               	incf	i2___lldiv@counter,f,c
  5686  001ED8                     i2l2376:
  5687  001ED8  AE08               	btfss	i2___lldiv@divisor+3,7,c
  5688  001EDA  D7F8               	goto	i2l2374
  5689  001EDC                     i2l2378:
  5690  001EDC  90D8               	bcf	status,0,c
  5691  001EDE  3609               	rlcf	i2___lldiv@quotient,f,c
  5692  001EE0  360A               	rlcf	i2___lldiv@quotient+1,f,c
  5693  001EE2  360B               	rlcf	i2___lldiv@quotient+2,f,c
  5694  001EE4  360C               	rlcf	i2___lldiv@quotient+3,f,c
  5695  001EE6  5005               	movf	i2___lldiv@divisor,w,c
  5696  001EE8  5C01               	subwf	i2___lldiv@dividend,w,c
  5697  001EEA  5006               	movf	i2___lldiv@divisor+1,w,c
  5698  001EEC  5802               	subwfb	i2___lldiv@dividend+1,w,c
  5699  001EEE  5007               	movf	i2___lldiv@divisor+2,w,c
  5700  001EF0  5803               	subwfb	i2___lldiv@dividend+2,w,c
  5701  001EF2  5008               	movf	i2___lldiv@divisor+3,w,c
  5702  001EF4  5804               	subwfb	i2___lldiv@dividend+3,w,c
  5703  001EF6  A0D8               	btfss	status,0,c
  5704  001EF8  D009               	goto	i2l2386
  5705  001EFA  5005               	movf	i2___lldiv@divisor,w,c
  5706  001EFC  5E01               	subwf	i2___lldiv@dividend,f,c
  5707  001EFE  5006               	movf	i2___lldiv@divisor+1,w,c
  5708  001F00  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  5709  001F02  5007               	movf	i2___lldiv@divisor+2,w,c
  5710  001F04  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  5711  001F06  5008               	movf	i2___lldiv@divisor+3,w,c
  5712  001F08  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  5713  001F0A  8009               	bsf	i2___lldiv@quotient,0,c
  5714  001F0C                     i2l2386:
  5715  001F0C  90D8               	bcf	status,0,c
  5716  001F0E  3208               	rrcf	i2___lldiv@divisor+3,f,c
  5717  001F10  3207               	rrcf	i2___lldiv@divisor+2,f,c
  5718  001F12  3206               	rrcf	i2___lldiv@divisor+1,f,c
  5719  001F14  3205               	rrcf	i2___lldiv@divisor,f,c
  5720  001F16  2E0D               	decfsz	i2___lldiv@counter,f,c
  5721  001F18  D7E1               	goto	i2l2378
  5722  001F1A                     i2l992:
  5723  001F1A  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  5724  001F1E  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  5725  001F22  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  5726  001F26  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  5727  001F2A  0012               	return		;funcret
  5728  001F2C                     __end_ofi2___lldiv:
  5729                           	opt stack 0
  5730                           pclatu	equ	0xFFB
  5731                           pclath	equ	0xFFA
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           postinc0	equ	0xFEE
  5740                           fsr0h	equ	0xFEA
  5741                           fsr0l	equ	0xFE9
  5742                           wreg	equ	0xFE8
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           fsr2h	equ	0xFDA
  5749                           fsr2l	equ	0xFD9
  5750                           status	equ	0xFD8
  5751                           
  5752 ;; *************** function i2_ADC_GetConversion *****************
  5753 ;; Defined at:
  5754 ;;		line 106 in file "mcc_generated_files/adc.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  channel         1    wreg     enum E15092
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  channel         1    4[COMRAM] enum E15092
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  2    0[COMRAM] unsigned int 
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5768 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5770 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5771 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5772 ;;Total ram usage:        5 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_getByteToSend
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text30
  5782  002286                     __ptext30:
  5783                           	opt stack 0
  5784  002286                     i2_ADC_GetConversion:
  5785                           	opt stack 24
  5786                           
  5787                           ;incstack = 0
  5788                           ;i2ADC_GetConversion@channel stored from wreg
  5789  002286  6E05               	movwf	i2ADC_GetConversion@channel,c
  5790                           
  5791                           ;adc.c: 109: ADCON0bits.CHS = channel;
  5792  002288  C005  F003         	movff	i2ADC_GetConversion@channel,??i2_ADC_GetConversion
  5793  00228C  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5794  00228E  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5795  002290  50C2               	movf	4034,w,c	;volatile
  5796  002292  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5797  002294  0B83               	andlw	-125
  5798  002296  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5799  002298  6EC2               	movwf	4034,c	;volatile
  5800                           
  5801                           ;adc.c: 112: ADCON0bits.ADON = 1;
  5802  00229A  80C2               	bsf	4034,0,c	;volatile
  5803                           
  5804                           ;adc.c: 116: ADCON0bits.GO_nDONE = 1;
  5805  00229C  82C2               	bsf	4034,1,c	;volatile
  5806  00229E                     i2l253:
  5807  00229E  B2C2               	btfsc	4034,1,c	;volatile
  5808  0022A0  D7FE               	goto	i2l253
  5809                           
  5810                           ;adc.c: 121: }
  5811                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  5812  0022A2  50C4               	movf	4036,w,c	;volatile
  5813  0022A4  6E04               	movwf	(??i2_ADC_GetConversion+1)& (0+255),c
  5814  0022A6  6A03               	clrf	??i2_ADC_GetConversion& (0+255),c
  5815  0022A8  50C3               	movf	4035,w,c	;volatile
  5816  0022AA  2403               	addwf	??i2_ADC_GetConversion,w,c
  5817  0022AC  6E01               	movwf	?i2_ADC_GetConversion,c
  5818  0022AE  0E00               	movlw	0
  5819  0022B0  2004               	addwfc	??i2_ADC_GetConversion+1,w,c
  5820  0022B2  6E02               	movwf	?i2_ADC_GetConversion+1,c
  5821  0022B4  0012               	return	
  5822  0022B6                     __end_ofi2_ADC_GetConversion:
  5823                           	opt stack 0
  5824                           pclatu	equ	0xFFB
  5825                           pclath	equ	0xFFA
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           postinc0	equ	0xFEE
  5834                           fsr0h	equ	0xFEA
  5835                           fsr0l	equ	0xFE9
  5836                           wreg	equ	0xFE8
  5837                           fsr1h	equ	0xFE2
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _writeAXData *****************
  5847 ;; Defined at:
  5848 ;;		line 226 in file "ax.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  id              2   23[COMRAM] int 
  5851 ;;  address         2   25[COMRAM] int 
  5852 ;;  data            2   27[COMRAM] int 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  packet         20   50[COMRAM] unsigned char [20]
  5855 ;;  result         20   30[COMRAM] unsigned char [20]
  5856 ;;  size            2   76[COMRAM] int 
  5857 ;;  error           2   74[COMRAM] int 
  5858 ;;  instruction     2   72[COMRAM] int 
  5859 ;;  length          2   70[COMRAM] int 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  2   23[COMRAM] int 
  5862 ;; Registers used:
  5863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5870 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5872 ;;      Totals:        55       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5873 ;;Total ram usage:       55 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    2
  5876 ;; This function calls:
  5877 ;;		_getAddressSize
  5878 ;;		_sendAX
  5879 ;; This function is called by:
  5880 ;;		_getByteToSend
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text31
  5885  001E1E                     __ptext31:
  5886                           	opt stack 0
  5887  001E1E                     _writeAXData:
  5888                           	opt stack 22
  5889                           
  5890                           ;ax.c: 227: int size = getAddressSize(address);
  5891                           
  5892                           ;incstack = 0
  5893  001E1E  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  5894  001E22  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  5895  001E26  EC10  F010         	call	_getAddressSize	;wreg free
  5896  001E2A  C001  F04D         	movff	?_getAddressSize,writeAXData@size
  5897  001E2E  C002  F04E         	movff	?_getAddressSize+1,writeAXData@size+1
  5898                           
  5899                           ;ax.c: 229: uint8_t packet[20];
  5900                           ;ax.c: 230: uint8_t result[20];
  5901                           ;ax.c: 231: packet[0] = 0xFF;
  5902  001E32  6833               	setf	writeAXData@packet,c
  5903                           
  5904                           ;ax.c: 232: packet[1] = 0xFF;
  5905  001E34  6834               	setf	writeAXData@packet+1,c
  5906                           
  5907                           ;ax.c: 233: packet[2] = id;
  5908  001E36  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  5909                           
  5910                           ;ax.c: 234: int length = size + 3;
  5911  001E3A  0E03               	movlw	3
  5912  001E3C  244D               	addwf	writeAXData@size,w,c
  5913  001E3E  6E47               	movwf	writeAXData@length,c
  5914  001E40  0E00               	movlw	0
  5915  001E42  204E               	addwfc	writeAXData@size+1,w,c
  5916  001E44  6E48               	movwf	writeAXData@length+1,c
  5917                           
  5918                           ;ax.c: 235: packet[3] = length;
  5919  001E46  C047  F036         	movff	writeAXData@length,writeAXData@packet+3
  5920                           
  5921                           ;ax.c: 236: int instruction = 0x03;
  5922  001E4A  0E00               	movlw	0
  5923  001E4C  6E4A               	movwf	writeAXData@instruction+1,c
  5924  001E4E  0E03               	movlw	3
  5925  001E50  6E49               	movwf	writeAXData@instruction,c
  5926                           
  5927                           ;ax.c: 237: packet[4] = instruction;
  5928  001E52  C049  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  5929                           
  5930                           ;ax.c: 238: packet[5] = address;
  5931  001E56  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  5932                           
  5933                           ;ax.c: 239: if (size == 1) {
  5934  001E5A  044D               	decf	writeAXData@size,w,c
  5935  001E5C  104E               	iorwf	writeAXData@size+1,w,c
  5936  001E5E  A4D8               	btfss	status,2,c
  5937  001E60  D003               	goto	i2l547
  5938                           
  5939                           ;ax.c: 240: packet[6] = data;
  5940  001E62  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5941                           
  5942                           ;ax.c: 241: } else {
  5943  001E66  D004               	goto	i2l2508
  5944  001E68                     i2l547:
  5945                           
  5946                           ;ax.c: 242: packet[6] = data & 0xff;
  5947  001E68  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5948                           
  5949                           ;ax.c: 243: packet[7] = (data >> 8);
  5950  001E6C  501D               	movf	writeAXData@data+1,w,c
  5951  001E6E  6E3A               	movwf	writeAXData@packet+7,c
  5952  001E70                     i2l2508:
  5953                           
  5954                           ;ax.c: 244: }
  5955                           ;ax.c: 247: int error = sendAX(packet, 6 + size, result, 0);
  5956  001E70  0E33               	movlw	low writeAXData@packet
  5957  001E72  6E02               	movwf	sendAX@buffer,c
  5958  001E74  0E00               	movlw	high writeAXData@packet
  5959  001E76  6E03               	movwf	sendAX@buffer+1,c
  5960  001E78  0E06               	movlw	6
  5961  001E7A  244D               	addwf	writeAXData@size,w,c
  5962  001E7C  6E04               	movwf	sendAX@packetSize,c
  5963  001E7E  0E00               	movlw	0
  5964  001E80  204E               	addwfc	writeAXData@size+1,w,c
  5965  001E82  6E05               	movwf	sendAX@packetSize+1,c
  5966  001E84  0E1F               	movlw	low writeAXData@result
  5967  001E86  6E06               	movwf	sendAX@result,c
  5968  001E88  0E00               	movlw	high writeAXData@result
  5969  001E8A  6E07               	movwf	sendAX@result+1,c
  5970  001E8C  0E00               	movlw	0
  5971  001E8E  6E09               	movwf	sendAX@parametersToRead+1,c
  5972  001E90  0E00               	movlw	0
  5973  001E92  6E08               	movwf	sendAX@parametersToRead,c
  5974  001E94  EC7E  F00C         	call	_sendAX	;wreg free
  5975  001E98  6E1E               	movwf	??_writeAXData& (0+255),c
  5976  001E9A  501E               	movf	??_writeAXData,w,c
  5977  001E9C  6E4B               	movwf	writeAXData@error,c
  5978  001E9E  6A4C               	clrf	writeAXData@error+1,c
  5979                           
  5980                           ;ax.c: 248: return error;
  5981  001EA0  C04B  F018         	movff	writeAXData@error,?_writeAXData
  5982  001EA4  C04C  F019         	movff	writeAXData@error+1,?_writeAXData+1
  5983  001EA8  0012               	return	
  5984  001EAA                     __end_of_writeAXData:
  5985                           	opt stack 0
  5986                           pclatu	equ	0xFFB
  5987                           pclath	equ	0xFFA
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           postinc0	equ	0xFEE
  5996                           fsr0h	equ	0xFEA
  5997                           fsr0l	equ	0xFE9
  5998                           wreg	equ	0xFE8
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _readAXData *****************
  6009 ;; Defined at:
  6010 ;;		line 199 in file "ax.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  id              2   23[COMRAM] int 
  6013 ;;  address         2   25[COMRAM] int 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  packet         20   51[COMRAM] unsigned char [20]
  6016 ;;  result         20   29[COMRAM] unsigned char [20]
  6017 ;;  size            2   77[COMRAM] int 
  6018 ;;  instruction     2   75[COMRAM] int 
  6019 ;;  length          2   73[COMRAM] int 
  6020 ;;  nbParameters    2   71[COMRAM] int 
  6021 ;;  error           2   49[COMRAM] int 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  2   23[COMRAM] int 
  6024 ;; Registers used:
  6025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6032 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6034 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6035 ;;Total ram usage:       56 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    2
  6038 ;; This function calls:
  6039 ;;		_getAddressSize
  6040 ;;		_sendAX
  6041 ;; This function is called by:
  6042 ;;		_getByteToSend
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text32
  6047  001CF8                     __ptext32:
  6048                           	opt stack 0
  6049  001CF8                     _readAXData:
  6050                           	opt stack 22
  6051                           
  6052                           ;ax.c: 200: int size = getAddressSize(address);
  6053                           
  6054                           ;incstack = 0
  6055  001CF8  C01A  F001         	movff	readAXData@address,getAddressSize@address
  6056  001CFC  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  6057  001D00  EC10  F010         	call	_getAddressSize	;wreg free
  6058  001D04  C001  F04E         	movff	?_getAddressSize,readAXData@size
  6059  001D08  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  6060                           
  6061                           ;ax.c: 202: uint8_t packet[20];
  6062                           ;ax.c: 203: uint8_t result[20];
  6063                           ;ax.c: 204: packet[0] = 0xFF;
  6064  001D0C  6834               	setf	readAXData@packet,c
  6065                           
  6066                           ;ax.c: 205: packet[1] = 0xFF;
  6067  001D0E  6835               	setf	readAXData@packet+1,c
  6068                           
  6069                           ;ax.c: 206: packet[2] = id;
  6070  001D10  C018  F036         	movff	readAXData@id,readAXData@packet+2
  6071                           
  6072                           ;ax.c: 207: int nbParameters = 2;
  6073  001D14  0E00               	movlw	0
  6074  001D16  6E49               	movwf	readAXData@nbParameters+1,c
  6075  001D18  0E02               	movlw	2
  6076  001D1A  6E48               	movwf	readAXData@nbParameters,c
  6077                           
  6078                           ;ax.c: 208: int length = nbParameters + 2;
  6079  001D1C  0E02               	movlw	2
  6080  001D1E  2448               	addwf	readAXData@nbParameters,w,c
  6081  001D20  6E4A               	movwf	readAXData@length,c
  6082  001D22  0E00               	movlw	0
  6083  001D24  2049               	addwfc	readAXData@nbParameters+1,w,c
  6084  001D26  6E4B               	movwf	readAXData@length+1,c
  6085                           
  6086                           ;ax.c: 209: packet[3] = length;
  6087  001D28  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  6088                           
  6089                           ;ax.c: 210: int instruction = 0x02;
  6090  001D2C  0E00               	movlw	0
  6091  001D2E  6E4D               	movwf	readAXData@instruction+1,c
  6092  001D30  0E02               	movlw	2
  6093  001D32  6E4C               	movwf	readAXData@instruction,c
  6094                           
  6095                           ;ax.c: 211: packet[4] = instruction;
  6096  001D34  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  6097                           
  6098                           ;ax.c: 212: packet[5] = address;
  6099  001D38  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  6100                           
  6101                           ;ax.c: 213: packet[6] = size;
  6102  001D3C  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  6103                           
  6104                           ;ax.c: 216: int error = sendAX(packet, 7, result, 1);
  6105  001D40  0E34               	movlw	low readAXData@packet
  6106  001D42  6E02               	movwf	sendAX@buffer,c
  6107  001D44  0E00               	movlw	high readAXData@packet
  6108  001D46  6E03               	movwf	sendAX@buffer+1,c
  6109  001D48  0E00               	movlw	0
  6110  001D4A  6E05               	movwf	sendAX@packetSize+1,c
  6111  001D4C  0E07               	movlw	7
  6112  001D4E  6E04               	movwf	sendAX@packetSize,c
  6113  001D50  0E1E               	movlw	low readAXData@result
  6114  001D52  6E06               	movwf	sendAX@result,c
  6115  001D54  0E00               	movlw	high readAXData@result
  6116  001D56  6E07               	movwf	sendAX@result+1,c
  6117  001D58  0E00               	movlw	0
  6118  001D5A  6E09               	movwf	sendAX@parametersToRead+1,c
  6119  001D5C  0E01               	movlw	1
  6120  001D5E  6E08               	movwf	sendAX@parametersToRead,c
  6121  001D60  EC7E  F00C         	call	_sendAX	;wreg free
  6122  001D64  6E1C               	movwf	??_readAXData& (0+255),c
  6123  001D66  501C               	movf	??_readAXData,w,c
  6124  001D68  6E32               	movwf	readAXData@error,c
  6125  001D6A  6A33               	clrf	readAXData@error+1,c
  6126                           
  6127                           ;ax.c: 217: if (size == 1) {
  6128  001D6C  044E               	decf	readAXData@size,w,c
  6129  001D6E  104F               	iorwf	readAXData@size+1,w,c
  6130  001D70  A4D8               	btfss	status,2,c
  6131  001D72  D004               	goto	i2l2480
  6132                           
  6133                           ;ax.c: 219: return result[5];
  6134  001D74  C023  F018         	movff	readAXData@result+5,?_readAXData
  6135  001D78  6A19               	clrf	?_readAXData+1,c
  6136                           
  6137                           ;ax.c: 220: } else {
  6138  001D7A  0012               	return	
  6139  001D7C                     i2l2480:
  6140                           
  6141                           ;ax.c: 222: return result[5] + result[6]*256;
  6142  001D7C  5024               	movf	readAXData@result+6,w,c
  6143  001D7E  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  6144  001D80  6A1C               	clrf	??_readAXData& (0+255),c
  6145  001D82  5023               	movf	readAXData@result+5,w,c
  6146  001D84  241C               	addwf	??_readAXData,w,c
  6147  001D86  6E18               	movwf	?_readAXData,c
  6148  001D88  0E00               	movlw	0
  6149  001D8A  201D               	addwfc	??_readAXData+1,w,c
  6150  001D8C  6E19               	movwf	?_readAXData+1,c
  6151  001D8E  0012               	return	
  6152  001D90                     __end_of_readAXData:
  6153                           	opt stack 0
  6154                           pclatu	equ	0xFFB
  6155                           pclath	equ	0xFFA
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           postinc0	equ	0xFEE
  6164                           fsr0h	equ	0xFEA
  6165                           fsr0l	equ	0xFE9
  6166                           wreg	equ	0xFE8
  6167                           fsr1h	equ	0xFE2
  6168                           fsr1l	equ	0xFE1
  6169                           indf2	equ	0xFDF
  6170                           postinc2	equ	0xFDE
  6171                           postdec2	equ	0xFDD
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _getAddressSize *****************
  6177 ;; Defined at:
  6178 ;;		line 24 in file "ax.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  address         2    0[COMRAM] int 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  2    0[COMRAM] int 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6195 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6196 ;;Total ram usage:        4 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; This function calls:
  6199 ;;		Nothing
  6200 ;; This function is called by:
  6201 ;;		_readAXData
  6202 ;;		_writeAXData
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text33
  6207  002020                     __ptext33:
  6208                           	opt stack 0
  6209  002020                     _getAddressSize:
  6210                           	opt stack 23
  6211                           
  6212                           ;ax.c: 25: switch (address) {
  6213                           
  6214                           ;incstack = 0
  6215  002020  D00A               	goto	i2l2302
  6216  002022                     i2l2292:
  6217                           
  6218                           ;ax.c: 27: case 6:
  6219                           ;ax.c: 28: case 8:
  6220                           ;ax.c: 29: case 14:
  6221                           ;ax.c: 30: case 20:
  6222                           ;ax.c: 31: case 22:
  6223                           ;ax.c: 32: case 30:
  6224                           ;ax.c: 33: case 32:
  6225                           ;ax.c: 34: case 34:
  6226                           ;ax.c: 35: case 36:
  6227                           ;ax.c: 36: case 38:
  6228                           ;ax.c: 37: case 40:
  6229                           ;ax.c: 38: case 48:
  6230                           ;ax.c: 39: return 2;
  6231  002022  0E00               	movlw	0
  6232  002024  6E02               	movwf	?_getAddressSize+1,c
  6233  002026  0E02               	movlw	2
  6234  002028  6E01               	movwf	?_getAddressSize,c
  6235  00202A  0012               	return	
  6236  00202C                     i2l2296:
  6237                           
  6238                           ;ax.c: 41: return 1;
  6239  00202C  0E00               	movlw	0
  6240  00202E  6E02               	movwf	?_getAddressSize+1,c
  6241  002030  0E01               	movlw	1
  6242  002032  6E01               	movwf	?_getAddressSize,c
  6243                           
  6244                           ;ax.c: 42: }
  6245  002034  0012               	return	
  6246  002036                     i2l2302:
  6247  002036  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  6248  00203A  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  6249                           
  6250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6251                           ; Switch size 1, requested type "space"
  6252                           ; Number of cases is 1, Range of values is 0 to 0
  6253                           ; switch strategies available:
  6254                           ; Name         Instructions Cycles
  6255                           ; simple_byte            4     3 (average)
  6256                           ;	Chosen strategy is simple_byte
  6257  00203E  5004               	movf	??_getAddressSize+1,w,c
  6258  002040  0A00               	xorlw	0	; case 0
  6259  002042  A4D8               	btfss	status,2,c
  6260  002044  D7F3               	goto	i2l2296
  6261                           
  6262                           ; Switch size 1, requested type "space"
  6263                           ; Number of cases is 13, Range of values is 0 to 48
  6264                           ; switch strategies available:
  6265                           ; Name         Instructions Cycles
  6266                           ; simple_byte           40    21 (average)
  6267                           ;	Chosen strategy is simple_byte
  6268  002046  5003               	movf	??_getAddressSize,w,c
  6269  002048  0A00               	xorlw	0	; case 0
  6270  00204A  B4D8               	btfsc	status,2,c
  6271  00204C  D7EA               	goto	i2l2292
  6272  00204E  0A06               	xorlw	6	; case 6
  6273  002050  B4D8               	btfsc	status,2,c
  6274  002052  D7E7               	goto	i2l2292
  6275  002054  0A0E               	xorlw	14	; case 8
  6276  002056  B4D8               	btfsc	status,2,c
  6277  002058  D7E4               	goto	i2l2292
  6278  00205A  0A06               	xorlw	6	; case 14
  6279  00205C  B4D8               	btfsc	status,2,c
  6280  00205E  D7E1               	goto	i2l2292
  6281  002060  0A1A               	xorlw	26	; case 20
  6282  002062  B4D8               	btfsc	status,2,c
  6283  002064  D7DE               	goto	i2l2292
  6284  002066  0A02               	xorlw	2	; case 22
  6285  002068  B4D8               	btfsc	status,2,c
  6286  00206A  D7DB               	goto	i2l2292
  6287  00206C  0A08               	xorlw	8	; case 30
  6288  00206E  B4D8               	btfsc	status,2,c
  6289  002070  D7D8               	goto	i2l2292
  6290  002072  0A3E               	xorlw	62	; case 32
  6291  002074  B4D8               	btfsc	status,2,c
  6292  002076  D7D5               	goto	i2l2292
  6293  002078  0A02               	xorlw	2	; case 34
  6294  00207A  B4D8               	btfsc	status,2,c
  6295  00207C  D7D2               	goto	i2l2292
  6296  00207E  0A06               	xorlw	6	; case 36
  6297  002080  B4D8               	btfsc	status,2,c
  6298  002082  D7CF               	goto	i2l2292
  6299  002084  0A02               	xorlw	2	; case 38
  6300  002086  B4D8               	btfsc	status,2,c
  6301  002088  D7CC               	goto	i2l2292
  6302  00208A  0A0E               	xorlw	14	; case 40
  6303  00208C  B4D8               	btfsc	status,2,c
  6304  00208E  D7C9               	goto	i2l2292
  6305  002090  0A18               	xorlw	24	; case 48
  6306  002092  B4D8               	btfsc	status,2,c
  6307  002094  D7C6               	goto	i2l2292
  6308  002096  D7CA               	goto	i2l2296
  6309  002098                     __end_of_getAddressSize:
  6310                           	opt stack 0
  6311                           pclatu	equ	0xFFB
  6312                           pclath	equ	0xFFA
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           postinc0	equ	0xFEE
  6321                           fsr0h	equ	0xFEA
  6322                           fsr0l	equ	0xFE9
  6323                           wreg	equ	0xFE8
  6324                           fsr1h	equ	0xFE2
  6325                           fsr1l	equ	0xFE1
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           postdec2	equ	0xFDD
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function _pingAX *****************
  6334 ;; Defined at:
  6335 ;;		line 182 in file "ax.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  id              2   23[COMRAM] int 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  packet         20   46[COMRAM] unsigned char [20]
  6340 ;;  result         20   26[COMRAM] unsigned char [20]
  6341 ;;  error           2   72[COMRAM] int 
  6342 ;;  instruction     2   70[COMRAM] int 
  6343 ;;  length          2   68[COMRAM] int 
  6344 ;;  nbParameters    2   66[COMRAM] int 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  2   23[COMRAM] int 
  6347 ;; Registers used:
  6348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6355 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6356 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6357 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6358 ;;Total ram usage:       51 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    2
  6361 ;; This function calls:
  6362 ;;		_sendAX
  6363 ;; This function is called by:
  6364 ;;		_getByteToSend
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text34
  6369  0020FE                     __ptext34:
  6370                           	opt stack 0
  6371  0020FE                     _pingAX:
  6372                           	opt stack 22
  6373                           
  6374                           ;ax.c: 183: uint8_t packet[20];
  6375                           ;ax.c: 184: uint8_t result[20];
  6376                           ;ax.c: 185: packet[0] = 0xFF;
  6377                           
  6378                           ;incstack = 0
  6379  0020FE  682F               	setf	pingAX@packet,c
  6380                           
  6381                           ;ax.c: 186: packet[1] = 0xFF;
  6382  002100  6830               	setf	pingAX@packet+1,c
  6383                           
  6384                           ;ax.c: 187: packet[2] = id;
  6385  002102  C018  F031         	movff	pingAX@id,pingAX@packet+2
  6386                           
  6387                           ;ax.c: 188: int nbParameters = 0;
  6388  002106  0E00               	movlw	0
  6389  002108  6E44               	movwf	pingAX@nbParameters+1,c
  6390  00210A  0E00               	movlw	0
  6391  00210C  6E43               	movwf	pingAX@nbParameters,c
  6392                           
  6393                           ;ax.c: 189: int length = nbParameters + 2;
  6394  00210E  0E02               	movlw	2
  6395  002110  2443               	addwf	pingAX@nbParameters,w,c
  6396  002112  6E45               	movwf	pingAX@length,c
  6397  002114  0E00               	movlw	0
  6398  002116  2044               	addwfc	pingAX@nbParameters+1,w,c
  6399  002118  6E46               	movwf	pingAX@length+1,c
  6400                           
  6401                           ;ax.c: 190: packet[3] = length;
  6402  00211A  C045  F032         	movff	pingAX@length,pingAX@packet+3
  6403                           
  6404                           ;ax.c: 191: int instruction = 0x01;
  6405  00211E  0E00               	movlw	0
  6406  002120  6E48               	movwf	pingAX@instruction+1,c
  6407  002122  0E01               	movlw	1
  6408  002124  6E47               	movwf	pingAX@instruction,c
  6409                           
  6410                           ;ax.c: 192: packet[4] = instruction;
  6411  002126  C047  F033         	movff	pingAX@instruction,pingAX@packet+4
  6412                           
  6413                           ;ax.c: 195: int error = sendAX(packet, 5, result, 0);
  6414  00212A  0E2F               	movlw	low pingAX@packet
  6415  00212C  6E02               	movwf	sendAX@buffer,c
  6416  00212E  0E00               	movlw	high pingAX@packet
  6417  002130  6E03               	movwf	sendAX@buffer+1,c
  6418  002132  0E00               	movlw	0
  6419  002134  6E05               	movwf	sendAX@packetSize+1,c
  6420  002136  0E05               	movlw	5
  6421  002138  6E04               	movwf	sendAX@packetSize,c
  6422  00213A  0E1B               	movlw	low pingAX@result
  6423  00213C  6E06               	movwf	sendAX@result,c
  6424  00213E  0E00               	movlw	high pingAX@result
  6425  002140  6E07               	movwf	sendAX@result+1,c
  6426  002142  0E00               	movlw	0
  6427  002144  6E09               	movwf	sendAX@parametersToRead+1,c
  6428  002146  0E00               	movlw	0
  6429  002148  6E08               	movwf	sendAX@parametersToRead,c
  6430  00214A  EC7E  F00C         	call	_sendAX	;wreg free
  6431  00214E  6E1A               	movwf	??_pingAX& (0+255),c
  6432  002150  501A               	movf	??_pingAX,w,c
  6433  002152  6E49               	movwf	pingAX@error,c
  6434  002154  6A4A               	clrf	pingAX@error+1,c
  6435                           
  6436                           ;ax.c: 196: return error;
  6437  002156  C049  F018         	movff	pingAX@error,?_pingAX
  6438  00215A  C04A  F019         	movff	pingAX@error+1,?_pingAX+1
  6439  00215E  0012               	return	
  6440  002160                     __end_of_pingAX:
  6441                           	opt stack 0
  6442                           pclatu	equ	0xFFB
  6443                           pclath	equ	0xFFA
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           postinc0	equ	0xFEE
  6452                           fsr0h	equ	0xFEA
  6453                           fsr0l	equ	0xFE9
  6454                           wreg	equ	0xFE8
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _sendAX *****************
  6465 ;; Defined at:
  6466 ;;		line 131 in file "ax.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  6469 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  6470 ;;  packetSize      2    3[COMRAM] int 
  6471 ;;  result          2    5[COMRAM] PTR unsigned char 
  6472 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  6473 ;;  parametersTo    2    7[COMRAM] int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  i               2   20[COMRAM] int 
  6476 ;;  i               2   16[COMRAM] int 
  6477 ;;  i               2   14[COMRAM] int 
  6478 ;;  i               2   12[COMRAM] int 
  6479 ;;  r0              2   18[COMRAM] int 
  6480 ;;  stop            2   10[COMRAM] int 
  6481 ;;  checksum        1   22[COMRAM] unsigned char 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      unsigned char 
  6484 ;; Registers used:
  6485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6491 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6492 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6494 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6495 ;;Total ram usage:       22 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    1
  6498 ;; This function calls:
  6499 ;;		_EUSART1_Read
  6500 ;;		_EUSART1_Write
  6501 ;; This function is called by:
  6502 ;;		_pingAX
  6503 ;;		_readAXData
  6504 ;;		_writeAXData
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text35
  6509  0018FC                     __ptext35:
  6510                           	opt stack 0
  6511  0018FC                     _sendAX:
  6512                           	opt stack 22
  6513                           
  6514                           ;ax.c: 132: uint8_t checksum = 0;
  6515                           
  6516                           ;incstack = 0
  6517  0018FC  0E00               	movlw	0
  6518  0018FE  6E17               	movwf	sendAX@checksum,c
  6519                           
  6520                           ;ax.c: 134: for (int i = 2; i < packetSize; i++) {
  6521  001900  0E00               	movlw	0
  6522  001902  6E0E               	movwf	sendAX@i+1,c
  6523  001904  0E02               	movlw	2
  6524  001906  6E0D               	movwf	sendAX@i,c
  6525  001908  D00A               	goto	i2l2314
  6526  00190A                     i2l2310:
  6527                           
  6528                           ;ax.c: 135: checksum += buffer[i];
  6529  00190A  500D               	movf	sendAX@i,w,c
  6530  00190C  2402               	addwf	sendAX@buffer,w,c
  6531  00190E  6ED9               	movwf	fsr2l,c
  6532  001910  500E               	movf	sendAX@i+1,w,c
  6533  001912  2003               	addwfc	sendAX@buffer+1,w,c
  6534  001914  6EDA               	movwf	fsr2h,c
  6535  001916  50DF               	movf	indf2,w,c
  6536  001918  2617               	addwf	sendAX@checksum,f,c
  6537  00191A  4A0D               	infsnz	sendAX@i,f,c
  6538  00191C  2A0E               	incf	sendAX@i+1,f,c
  6539  00191E                     i2l2314:
  6540  00191E  5004               	movf	sendAX@packetSize,w,c
  6541  001920  5C0D               	subwf	sendAX@i,w,c
  6542  001922  500E               	movf	sendAX@i+1,w,c
  6543  001924  0A80               	xorlw	128
  6544  001926  6E0A               	movwf	??_sendAX& (0+255),c
  6545  001928  5005               	movf	sendAX@packetSize+1,w,c
  6546  00192A  0A80               	xorlw	128
  6547  00192C  580A               	subwfb	??_sendAX& (0+255),w,c
  6548  00192E  A0D8               	btfss	status,0,c
  6549  001930  D7EC               	goto	i2l2310
  6550                           
  6551                           ;ax.c: 136: }
  6552                           ;ax.c: 137: checksum = ~checksum;
  6553  001932  1E17               	comf	sendAX@checksum,f,c
  6554                           
  6555                           ;ax.c: 139: do { LATDbits.LATD4 = 1; } while(0);
  6556  001934  888C               	bsf	3980,4,c	;volatile
  6557                           
  6558                           ;ax.c: 140: for (int i = 0; i < packetSize; i++) {
  6559  001936  0E00               	movlw	0
  6560  001938  6E10               	movwf	sendAX@i_1376+1,c
  6561  00193A  0E00               	movlw	0
  6562  00193C  6E0F               	movwf	sendAX@i_1376,c
  6563  00193E  D00B               	goto	i2l2326
  6564  001940                     i2l2322:
  6565                           
  6566                           ;ax.c: 141: EUSART1_Write(buffer[i]);
  6567  001940  500F               	movf	sendAX@i_1376,w,c
  6568  001942  2402               	addwf	sendAX@buffer,w,c
  6569  001944  6ED9               	movwf	fsr2l,c
  6570  001946  5010               	movf	sendAX@i_1376+1,w,c
  6571  001948  2003               	addwfc	sendAX@buffer+1,w,c
  6572  00194A  6EDA               	movwf	fsr2h,c
  6573  00194C  50DF               	movf	indf2,w,c
  6574  00194E  ECC0  F011         	call	_EUSART1_Write
  6575  001952  4A0F               	infsnz	sendAX@i_1376,f,c
  6576  001954  2A10               	incf	sendAX@i_1376+1,f,c
  6577  001956                     i2l2326:
  6578  001956  5004               	movf	sendAX@packetSize,w,c
  6579  001958  5C0F               	subwf	sendAX@i_1376,w,c
  6580  00195A  5010               	movf	sendAX@i_1376+1,w,c
  6581  00195C  0A80               	xorlw	128
  6582  00195E  6E0A               	movwf	??_sendAX& (0+255),c
  6583  001960  5005               	movf	sendAX@packetSize+1,w,c
  6584  001962  0A80               	xorlw	128
  6585  001964  580A               	subwfb	??_sendAX& (0+255),w,c
  6586  001966  A0D8               	btfss	status,0,c
  6587  001968  D7EB               	goto	i2l2322
  6588                           
  6589                           ;ax.c: 142: }
  6590                           ;ax.c: 143: EUSART1_Write(checksum);
  6591  00196A  5017               	movf	sendAX@checksum,w,c
  6592  00196C  ECC0  F011         	call	_EUSART1_Write
  6593                           
  6594                           ;ax.c: 144: _delay((unsigned long)((100)*(64000000/4000000.0)));
  6595  001970  0EE4               	movlw	228
  6596  001972                     i2u210_47:
  6597  001972  D000               	nop2	
  6598  001974  D000               	nop2	
  6599  001976  2EE8               	decfsz	wreg,f,c
  6600  001978  D7FC               	bra	i2u210_47
  6601  00197A  D000               	nop2	
  6602  00197C  D000               	nop2	
  6603                           
  6604                           ;ax.c: 145: do { LATDbits.LATD4 = 0; } while(0);
  6605  00197E  988C               	bcf	3980,4,c	;volatile
  6606                           
  6607                           ;ax.c: 161: int stop = 6 + parametersToRead;
  6608  001980  0E06               	movlw	6
  6609  001982  2408               	addwf	sendAX@parametersToRead,w,c
  6610  001984  6E0B               	movwf	sendAX@stop,c
  6611  001986  0E00               	movlw	0
  6612  001988  2009               	addwfc	sendAX@parametersToRead+1,w,c
  6613  00198A  6E0C               	movwf	sendAX@stop+1,c
  6614                           
  6615                           ;ax.c: 163: for (int i = 0; i < stop; i++) {
  6616  00198C  0E00               	movlw	0
  6617  00198E  6E12               	movwf	sendAX@i_1379+1,c
  6618  001990  0E00               	movlw	0
  6619  001992  6E11               	movwf	sendAX@i_1379,c
  6620  001994  D00A               	goto	i2l2342
  6621  001996                     i2l2338:
  6622                           
  6623                           ;ax.c: 164: result[i] = 122;
  6624  001996  5011               	movf	sendAX@i_1379,w,c
  6625  001998  2406               	addwf	sendAX@result,w,c
  6626  00199A  6ED9               	movwf	fsr2l,c
  6627  00199C  5012               	movf	sendAX@i_1379+1,w,c
  6628  00199E  2007               	addwfc	sendAX@result+1,w,c
  6629  0019A0  6EDA               	movwf	fsr2h,c
  6630  0019A2  0E7A               	movlw	122
  6631  0019A4  6EDF               	movwf	indf2,c
  6632  0019A6  4A11               	infsnz	sendAX@i_1379,f,c
  6633  0019A8  2A12               	incf	sendAX@i_1379+1,f,c
  6634  0019AA                     i2l2342:
  6635  0019AA  500B               	movf	sendAX@stop,w,c
  6636  0019AC  5C11               	subwf	sendAX@i_1379,w,c
  6637  0019AE  5012               	movf	sendAX@i_1379+1,w,c
  6638  0019B0  0A80               	xorlw	128
  6639  0019B2  6E0A               	movwf	??_sendAX& (0+255),c
  6640  0019B4  500C               	movf	sendAX@stop+1,w,c
  6641  0019B6  0A80               	xorlw	128
  6642  0019B8  580A               	subwfb	??_sendAX& (0+255),w,c
  6643  0019BA  A0D8               	btfss	status,0,c
  6644  0019BC  D7EC               	goto	i2l2338
  6645                           
  6646                           ;ax.c: 165: }
  6647                           ;ax.c: 167: int r0 = EUSART1_Read();
  6648  0019BE  ECA4  F011         	call	_EUSART1_Read	;wreg free
  6649  0019C2  D002               	goto	L6
  6650  0019C4                     i2l2346:
  6651                           
  6652                           ;ax.c: 169: r0 = EUSART1_Read();
  6653  0019C4  ECA4  F011         	call	_EUSART1_Read	;wreg free
  6654  0019C8                     L6:
  6655  0019C8  6E0A               	movwf	??_sendAX& (0+255),c
  6656  0019CA  500A               	movf	??_sendAX,w,c
  6657  0019CC  6E13               	movwf	sendAX@r0,c
  6658  0019CE  6A14               	clrf	sendAX@r0+1,c
  6659  0019D0  2813               	incf	sendAX@r0,w,c
  6660  0019D2  1014               	iorwf	sendAX@r0+1,w,c
  6661  0019D4  A4D8               	btfss	status,2,c
  6662  0019D6  D7F6               	goto	i2l2346
  6663                           
  6664                           ;ax.c: 170: }
  6665                           ;ax.c: 171: result[0] = r0;
  6666  0019D8  C006  FFD9         	movff	sendAX@result,fsr2l
  6667  0019DC  C007  FFDA         	movff	sendAX@result+1,fsr2h
  6668  0019E0  C013  FFDF         	movff	sendAX@r0,indf2
  6669                           
  6670                           ;ax.c: 172: for (int i = 1; i < stop; i++) {
  6671  0019E4  0E00               	movlw	0
  6672  0019E6  6E16               	movwf	sendAX@i_1382+1,c
  6673  0019E8  0E01               	movlw	1
  6674  0019EA  6E15               	movwf	sendAX@i_1382,c
  6675  0019EC  D00B               	goto	i2l2358
  6676  0019EE                     i2l2354:
  6677                           
  6678                           ;ax.c: 173: result[i] = EUSART1_Read();
  6679  0019EE  5015               	movf	sendAX@i_1382,w,c
  6680  0019F0  2406               	addwf	sendAX@result,w,c
  6681  0019F2  6ED9               	movwf	fsr2l,c
  6682  0019F4  5016               	movf	sendAX@i_1382+1,w,c
  6683  0019F6  2007               	addwfc	sendAX@result+1,w,c
  6684  0019F8  6EDA               	movwf	fsr2h,c
  6685  0019FA  ECA4  F011         	call	_EUSART1_Read	;wreg free
  6686  0019FE  6EDF               	movwf	indf2,c
  6687  001A00  4A15               	infsnz	sendAX@i_1382,f,c
  6688  001A02  2A16               	incf	sendAX@i_1382+1,f,c
  6689  001A04                     i2l2358:
  6690  001A04  500B               	movf	sendAX@stop,w,c
  6691  001A06  5C15               	subwf	sendAX@i_1382,w,c
  6692  001A08  5016               	movf	sendAX@i_1382+1,w,c
  6693  001A0A  0A80               	xorlw	128
  6694  001A0C  6E0A               	movwf	??_sendAX& (0+255),c
  6695  001A0E  500C               	movf	sendAX@stop+1,w,c
  6696  001A10  0A80               	xorlw	128
  6697  001A12  580A               	subwfb	??_sendAX& (0+255),w,c
  6698  001A14  A0D8               	btfss	status,0,c
  6699  001A16  D7EB               	goto	i2l2354
  6700                           
  6701                           ;ax.c: 174: }
  6702                           ;ax.c: 177: _delay((unsigned long)((200)*(64000000/4000000.0)));
  6703  001A18  0E05               	movlw	5
  6704  001A1A  6E0A               	movwf	??_sendAX& (0+255),c
  6705  001A1C  0E26               	movlw	38
  6706  001A1E                     i2u211_47:
  6707  001A1E  2EE8               	decfsz	wreg,f,c
  6708  001A20  D7FE               	bra	i2u211_47
  6709  001A22  2E0A               	decfsz	??_sendAX& (0+255),f,c
  6710  001A24  D7FC               	bra	i2u211_47
  6711  001A26  D000               	nop2	
  6712                           
  6713                           ;ax.c: 178: return result[4];
  6714  001A28  EE20 F004          	lfsr	2,4
  6715  001A2C  5006               	movf	sendAX@result,w,c
  6716  001A2E  26D9               	addwf	fsr2l,f,c
  6717  001A30  5007               	movf	sendAX@result+1,w,c
  6718  001A32  22DA               	addwfc	fsr2h,f,c
  6719  001A34  50DF               	movf	indf2,w,c
  6720  001A36  0012               	return	
  6721  001A38                     __end_of_sendAX:
  6722                           	opt stack 0
  6723                           pclatu	equ	0xFFB
  6724                           pclath	equ	0xFFA
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon	equ	0xFF2
  6732                           postinc0	equ	0xFEE
  6733                           fsr0h	equ	0xFEA
  6734                           fsr0l	equ	0xFE9
  6735                           wreg	equ	0xFE8
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _EUSART1_Write *****************
  6746 ;; Defined at:
  6747 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  txData          1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  txData          1    0[COMRAM] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      void 
  6754 ;; Registers used:
  6755 ;;		wreg
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6765 ;;Total ram usage:        1 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_sendAX
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text36
  6775  002380                     __ptext36:
  6776                           	opt stack 0
  6777  002380                     _EUSART1_Write:
  6778                           	opt stack 22
  6779                           
  6780                           ;incstack = 0
  6781                           ;EUSART1_Write@txData stored from wreg
  6782  002380  6E01               	movwf	EUSART1_Write@txData,c
  6783  002382                     i2l103:
  6784  002382  A89E               	btfss	3998,4,c	;volatile
  6785  002384  D7FE               	goto	i2l103
  6786                           
  6787                           ;eusart1.c: 100: }
  6788                           ;eusart1.c: 102: TXREG1 = txData;
  6789  002386  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6790  00238A  0012               	return		;funcret
  6791  00238C                     __end_of_EUSART1_Write:
  6792                           	opt stack 0
  6793                           pclatu	equ	0xFFB
  6794                           pclath	equ	0xFFA
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           intcon	equ	0xFF2
  6802                           postinc0	equ	0xFEE
  6803                           fsr0h	equ	0xFEA
  6804                           fsr0l	equ	0xFE9
  6805                           wreg	equ	0xFE8
  6806                           fsr1h	equ	0xFE2
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           postdec2	equ	0xFDD
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8
  6814                           
  6815 ;; *************** function _EUSART1_Read *****************
  6816 ;; Defined at:
  6817 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;		None
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      unsigned char 
  6824 ;; Registers used:
  6825 ;;		wreg, status,2
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6835 ;;Total ram usage:        0 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_sendAX
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text37
  6845  002348                     __ptext37:
  6846                           	opt stack 0
  6847  002348                     _EUSART1_Read:
  6848                           	opt stack 22
  6849  002348                     i2l96:
  6850  002348  AA9E               	btfss	3998,5,c	;volatile
  6851  00234A  D7FE               	goto	i2l96
  6852                           
  6853                           ;eusart1.c: 82: }
  6854                           ;eusart1.c: 85: if(1 == RCSTA1bits.OERR)
  6855  00234C  A2AB               	btfss	4011,1,c	;volatile
  6856  00234E  D002               	goto	i2l2278
  6857                           
  6858                           ;eusart1.c: 86: {
  6859                           ;eusart1.c: 89: RCSTA1bits.SPEN = 0;
  6860  002350  9EAB               	bcf	4011,7,c	;volatile
  6861                           
  6862                           ;eusart1.c: 90: RCSTA1bits.SPEN = 1;
  6863  002352  8EAB               	bsf	4011,7,c	;volatile
  6864  002354                     i2l2278:
  6865                           
  6866                           ;eusart1.c: 91: }
  6867                           ;eusart1.c: 93: return RCREG1;
  6868  002354  50AE               	movf	4014,w,c	;volatile
  6869  002356  0012               	return	
  6870  002358                     __end_of_EUSART1_Read:
  6871                           	opt stack 0
  6872                           pclatu	equ	0xFFB
  6873                           pclath	equ	0xFFA
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           intcon	equ	0xFF2
  6881                           postinc0	equ	0xFEE
  6882                           fsr0h	equ	0xFEA
  6883                           fsr0l	equ	0xFE9
  6884                           wreg	equ	0xFE8
  6885                           fsr1h	equ	0xFE2
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _clearState *****************
  6895 ;; Defined at:
  6896 ;;		line 308 in file "ax.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      void 
  6903 ;; Registers used:
  6904 ;;		wreg, status,2
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		_getByteToSend
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text38
  6924  0021A0                     __ptext38:
  6925                           	opt stack 0
  6926  0021A0                     _clearState:
  6927                           	opt stack 24
  6928                           
  6929                           ;ax.c: 309: bytesSent = 0;
  6930                           
  6931                           ;incstack = 0
  6932  0021A0  0E00               	movlw	0
  6933  0021A2  0100               	movlb	0	; () banked
  6934  0021A4  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  6935  0021A6  0E00               	movlw	0
  6936  0021A8  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;ax.c: 310: currentCommand = -1;
  6940  0021AA  0100               	movlb	0	; () banked
  6941  0021AC  69E8               	setf	_currentCommand& (0+255),b	;volatile
  6942                           
  6943                           ;ax.c: 311: parameter1 = 0;
  6944  0021AE  0E00               	movlw	0
  6945  0021B0  0100               	movlb	0	; () banked
  6946  0021B2  6FA5               	movwf	_parameter1& (0+255),b	;volatile
  6947                           
  6948                           ;ax.c: 312: parameter2 = 0;
  6949  0021B4  0E00               	movlw	0
  6950  0021B6  0100               	movlb	0	; () banked
  6951  0021B8  6FA4               	movwf	_parameter2& (0+255),b	;volatile
  6952                           
  6953                           ;ax.c: 313: parameter3 = 0;
  6954  0021BA  0E00               	movlw	0
  6955  0021BC  0100               	movlb	0	; () banked
  6956  0021BE  6FA3               	movwf	_parameter3& (0+255),b	;volatile
  6957                           
  6958                           ;ax.c: 314: parameter4 = 0;
  6959  0021C0  0E00               	movlw	0
  6960  0021C2  0100               	movlb	0	; () banked
  6961  0021C4  6FA2               	movwf	_parameter4& (0+255),b	;volatile
  6962                           
  6963                           ;ax.c: 315: parameter5 = 0;
  6964  0021C6  0E00               	movlw	0
  6965  0021C8  0100               	movlb	0	; () banked
  6966  0021CA  6FA1               	movwf	_parameter5& (0+255),b	;volatile
  6967                           
  6968                           ;ax.c: 316: parameter6 = 0;
  6969  0021CC  0E00               	movlw	0
  6970  0021CE  0100               	movlb	0	; () banked
  6971  0021D0  6FA0               	movwf	_parameter6& (0+255),b	;volatile
  6972                           
  6973                           ;ax.c: 317: readIndex = 0;
  6974  0021D2  0E00               	movlw	0
  6975  0021D4  0100               	movlb	0	; () banked
  6976  0021D6  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  6977  0021D8  0E00               	movlw	0
  6978  0021DA  6F98               	movwf	_readIndex& (0+255),b	;volatile
  6979                           
  6980                           ; BSR set to: 0
  6981  0021DC  0012               	return		;funcret
  6982  0021DE                     __end_of_clearState:
  6983                           	opt stack 0
  6984                           pclatu	equ	0xFFB
  6985                           pclath	equ	0xFFA
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           postinc0	equ	0xFEE
  6994                           fsr0h	equ	0xFEA
  6995                           fsr0l	equ	0xFE9
  6996                           wreg	equ	0xFE8
  6997                           fsr1h	equ	0xFE2
  6998                           fsr1l	equ	0xFE1
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _ADC_ISR *****************
  7007 ;; Defined at:
  7008 ;;		line 127 in file "mcc_generated_files/adc.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		None
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7026 ;;Total ram usage:        0 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_INTERRUPT_InterruptManager
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text39
  7036  00239E                     __ptext39:
  7037                           	opt stack 0
  7038  00239E                     _ADC_ISR:
  7039                           	opt stack 26
  7040                           
  7041                           ;adc.c: 130: PIR1bits.ADIF = 0;
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;incstack = 0
  7045  00239E  9C9E               	bcf	3998,6,c	;volatile
  7046  0023A0  0012               	return		;funcret
  7047  0023A2                     __end_of_ADC_ISR:
  7048                           	opt stack 0
  7049                           pclatu	equ	0xFFB
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           fsr1h	equ	0xFE2
  7063                           fsr1l	equ	0xFE1
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           fsr2h	equ	0xFDA
  7068                           fsr2l	equ	0xFD9
  7069                           status	equ	0xFD8
  7070                           pclatu	equ	0xFFB
  7071                           pclath	equ	0xFFA
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           intcon	equ	0xFF2
  7079                           postinc0	equ	0xFEE
  7080                           fsr0h	equ	0xFEA
  7081                           fsr0l	equ	0xFE9
  7082                           wreg	equ	0xFE8
  7083                           fsr1h	equ	0xFE2
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092                           	psect	rparam
  7093  0000                     pclatu	equ	0xFFB
  7094                           pclath	equ	0xFFA
  7095                           tblptru	equ	0xFF8
  7096                           tblptrh	equ	0xFF7
  7097                           tblptrl	equ	0xFF6
  7098                           tablat	equ	0xFF5
  7099                           prodh	equ	0xFF4
  7100                           prodl	equ	0xFF3
  7101                           intcon	equ	0xFF2
  7102                           postinc0	equ	0xFEE
  7103                           fsr0h	equ	0xFEA
  7104                           fsr0l	equ	0xFE9
  7105                           wreg	equ	0xFE8
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115                           	psect	temp
  7116  00005F                     btemp:
  7117                           	opt stack 0
  7118  00005F                     	ds	1
  7119  0000                     int$flags	set	btemp
  7120                           pclatu	equ	0xFFB
  7121                           pclath	equ	0xFFA
  7122                           tblptru	equ	0xFF8
  7123                           tblptrh	equ	0xFF7
  7124                           tblptrl	equ	0xFF6
  7125                           tablat	equ	0xFF5
  7126                           prodh	equ	0xFF4
  7127                           prodl	equ	0xFF3
  7128                           intcon	equ	0xFF2
  7129                           postinc0	equ	0xFEE
  7130                           fsr0h	equ	0xFEA
  7131                           fsr0l	equ	0xFE9
  7132                           wreg	equ	0xFE8
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8


Data Sizes:
    Strings     160
    Constant    40
    Data        3
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     65     139
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_8(CODE[15]), STR_7(CODE[47]), STR_6(CODE[40]), STR_5(CODE[15]), 
		 -> STR_4(CODE[18]), STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(COMRAM[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_ISR->_getByteToSend
    _handleByteReceived->i2_printf
    _getByteToSend->_readAXData
    i2_printf->i2___llmod
    i2_putch->i2_EUSART2_Write
    i2___llmod->i2___lldiv
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3436
                                             54 BANK0     11    11      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    1462
                                             36 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             15 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             27 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             14 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1415
                                             22 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             14 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             14 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             14 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    9572
                                              0 BANK0     14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              0     0      0    9572
                      _getByteToSend
                 _handleByteReceived
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0    1422
                                             40 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _getByteToSend                                       15    15      0    7144
                                             79 COMRAM    15    15      0
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
                i2_ADC_GetConversion
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            27    21      6    1006
                                             22 COMRAM    18    12      6
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (8) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2___llmod                                            9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) i2_ADC_GetConversion                                  5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _writeAXData                                         55    49      6    2167
                                             23 COMRAM    55    49      6
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (7) _readAXData                                          56    52      4    2037
                                             23 COMRAM    56    52      4
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _pingAX                                              51    49      2    1639
                                             23 COMRAM    51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _sendAX                                              22    14      8    1310
                                              1 COMRAM    22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _getByteToSend
       _clearState
       _pingAX
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _readAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _writeAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       i2_ADC_GetConversion
       i2_printf
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2_putch
           i2_EUSART2_Write
     _handleByteReceived
       _setLedOff
       _setLedOn
       i2_printf
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2_putch
           i2_EUSART2_Write
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_EUSART2_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E9       6        0.0%
DATA                 0      0      E9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 01 23:18:51 2017

                        _SSPSTATbits 000FC7                                   l31 236A  
                       ___awdiv@sign 00BA                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l253 217E                                  l342 106A  
                                l419 1DFC                                  l382 111E  
                                l385 1120                                  l629 127C  
                                l992 1BA0                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000           __end_of_handleByteReceived 18FC  
                    __end_of_I2C_ISR 1C5E                      _timer1ReloadVal 009C  
                    __end_of_ADC_ISR 23A2                                  prod 000FF3  
                                wreg 000FE8                                 l1002 1CE6  
                               l3010 1DBA                                 l3014 1DE4  
                               l3008 1DA6                                 l3140 1124  
                               l3062 0FEA                                 l3160 11E4  
                               l3152 1168                                 l3144 1138  
                               l3090 1054                                 l3058 0FD4  
                               l3148 1152                                 l3068 1010  
                               l3166 11FA                                 l2800 1A9A  
                               l2812 1AD8                                 l2830 1B3A  
                               l2816 1AEC                                 l2808 1ACA  
                               l2826 1B24                                 l2850 1C90  
                               l2930 123C                                 l2828 1B34  
                               l2932 1244                                 l2790 1A6A  
                               l2838 1B8E                                 l2854 1CD4  
                               l2846 1C7A                                 l2942 129E  
                               l2926 1228                                 l2784 1A54  
                               l2848 1C8A                                 l2952 12E2  
                               l2936 1248                                 l2970 1348  
                               l2954 12E8                                 l2796 1A88  
                               l2972 1358                                 l2798 1A94  
                               l2966 1334                                 l2976 13E8  
                               l2978 13FE                                 STR_1 0FBF  
                               STR_2 0FB2                                 STR_3 0F92  
                               STR_4 0F80                                 STR_5 0FA3  
                               STR_6 0F58                                 STR_7 0F29  
                               STR_8 0FA3                                 _LATA 000F89  
                               _LATB 000F8A                                 u2055 1176  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2087 1DAE  
                               u2097 1DEC                                 i2l31 2376  
                               i2l96 2348                         main@adc_1272 00E4  
                               _WPUB 000F5B                        _EUSART1_Write 2380  
                      _EUSART2_Write 2366                                 _main 0FCA  
                      ?_EUSART1_Read 0001                                 _junk 00A6  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 005F  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0096                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC$HS2 000000                      __end_ofi2_putch 2396  
                     readAXData@size 004E                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                          _writeAXData 1E1E  
           __size_ofi2_EUSART2_Write 000C                   writeAXData@address 001A  
            __size_of_getAddressSize 0078       __size_of_OSCILLATOR_Initialize 0012  
      __end_of_OSCILLATOR_Initialize 2348                                ?_main 0001  
                              _BCLIF 007D0B                      __end_of___awdiv 1AF6  
                    _TMR1_StartTimer 2396                      __end_of___lldiv 1BB2  
                    ___awdiv@divisor 00B7                                _T1CON 000FCD  
                    __end_of___llmod 1CF8                                i2l103 2382  
                              i2l152 1BBC                                i2l500 1FC0  
                              i2l253 229E                                i2l309 005A  
                              i2l503 1FC4                                i2l506 1FC8  
                              i2l450 1F32                                i2l509 1FCC  
                              i2l453 1F36                                i2l462 1F42  
                              i2l446 1F2E                                i2l471 1F4E  
                              i2l456 1F3A                                i2l481 1FA8  
                              i2l465 1F46                                i2l474 1F52  
                              i2l547 1E68                                i2l491 1FB4  
                              i2l459 1F3E                                i2l468 1F4A  
                              i2l629 1646                                i2l485 1FAC  
                              i2l494 1FB8                                i2l488 1FB0  
                              i2l497 1FBC                      ___awdiv@counter 00B9  
                              i2l992 1F1A                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _SSPIF 007CF3                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 0F29                                _first 00E9  
                  getByteToSend@xlow 0056                                _putch 2358  
                              main@i 00DE                       ?_EUSART1_Write 0001  
            __end_of_TMR1_Initialize 2218                       ?_EUSART2_Write 0001  
                              pclath 000FFA                                tablat 000FF5  
             readAXData@nbParameters 0048                       ??_EUSART1_Read 0001  
                              status 000FD8                   __size_ofi2___lldiv 0082  
                 __size_ofi2___llmod 0066                      readAXData@error 0032  
                   __end_ofi2_printf 17AE                      __initialization 2252  
                  i2___lldiv@divisor 0005           __end_of_EUSART1_Initialize 2336  
                       __end_of_main 121A                    i2___lldiv@counter 000D  
                         i2printf@ap 0021                            ??_I2C_ISR 005F  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 00DD                        __activetblptr 000003  
                     __CFG_PLLCFG$ON 000000                       __CFG_RETEN$OFF 000000  
         __end_of_EUSART2_Initialize 2320                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   ___llmod@dividend 00C2                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _ANCON0 000F5D  
                             _ANCON1 000F5C                     ___awdiv@dividend 00B5  
                             ?_putch 0001                               _T1GCON 000FAA  
                             i2l1002 20EC                      __CFG_BBSIZ$BB2K 000000  
                             i2l2310 190A                               i2l2302 2036  
                             i2l2322 1940                               i2l2314 191E  
                             i2l2402 20DE                               i2l2342 19AA  
                             i2l2326 1956                               i2l2416 1F56  
                             i2l3048 004E                               i2l2354 19EE  
                             i2l2346 19C4                               i2l2338 1996  
                             i2l2530 15FE                               i2l2426 1FD0  
                             i2l2292 2022                               i2l2508 1E70  
                             i2l2540 1616                               i2l2278 2354  
                             i2l2358 1A04                               i2l2374 1ECC  
                             i2l2534 160E                               i2l2614 1470  
                             i2l2710 181C                       __CFG_WDTEN$OFF 000000  
                             i2l2296 202C                               i2l2480 1D7C  
                             i2l2376 1ED8                               i2l2536 1614  
                             i2l2704 17FC                               i2l2386 1F0C  
                             i2l2378 1EDC                               i2l2394 20AA  
                             i2l2570 16E2                               i2l2546 1666  
                             i2l2634 14BE                               i2l2722 1852  
                             i2l2396 20B6                               i2l2580 1782  
                             i2l2556 16A0                               i2l2740 18A6  
                             i2l2398 20BA                               i2l2574 16F4  
                             i2l2558 16A4                               i2l2582 1792  
                             i2l2646 1500                               i2l2734 188C  
                             i2l2910 1C40                               i2l2902 1C28  
                             i2l2576 1700                               i2l2752 18DA  
                             i2l2728 1872                               i2l2904 1C2E  
                             i2l2912 1C42                               i2l2674 15B2  
                             i2l2666 159E                               i2l2746 18C0  
                             i2l2922 1C5A                               i2l2686 15F0  
                             i2l2758 18F4                               i2l2874 1BDA  
                             i2l2882 1BF0                               i2l2892 1C04  
                      i2putch@txData 0002                               _RCREG1 000FAE  
                             _RCREG2 000F7A                               _RCSTA1 000FAB  
                             _RCSTA2 000FA6                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _SPBRG2 000F7B  
                          ??i2_putch 0002                               _SSPADD 000FC8  
                             _SSPBUF 000FC9                               _TXREG1 000FAD  
                             _TXREG2 000F79                               _TXSTA1 000FAC  
                             _TXSTA2 000FBA                     __end_of_delay_ms 1E1E  
                     __CFG_XINST$OFF 000000                       sendAX@checksum 0017  
            __end_of_TMR1_StartTimer 239A                            ??___awdiv 00B9  
                     __CFG_STVREN$ON 000000                            ??___lldiv 00BD  
                 getByteToSend@error 0051                            ??___llmod 00CA  
                 getByteToSend@value 005B                   getByteToSend@xhigh 0057  
                             _pingAX 20FE                               _sendAX 18FC  
                             clear_0 2276                     ___awdiv@quotient 00BB  
            __size_of_I2C_Initialize 001A                               _printf 121A  
                   __end_of_setLedOn 1FA6                    ??i2_EUSART2_Write 0001  
                  __end_ofi2___lldiv 1F2C                    __end_ofi2___llmod 20FE  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 00B9                      ??_EUSART1_Write 0001  
                    ??_EUSART2_Write 00B5        __size_of_INTERRUPT_Initialize 0004  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 22B6  
                         __accesstop 0060              __end_of__initialization 227C  
                   readAXData@packet 0034                     readAXData@length 004A  
                 ?_SYSTEM_Initialize 0001                          pingAX@error 0049  
                      ___rparam_used 000001                     readAXData@result 001E  
                  i2___llmod@divisor 0012                    i2___llmod@counter 0016  
                       readAXData@id 0018         __size_ofi2_ADC_GetConversion 0030  
                     __pcstackCOMRAM 0001                   i2___lldiv@dividend 0001  
                       __pidataBANK0 23A2                readAXData@instruction 004C  
                ??_SYSTEM_Initialize 00B7                __end_of_getByteToSend 15F4  
                     _getAddressSize 2020                           _adc_values 0080  
                      __end_of_putch 2366                          i2printf@val 0024  
               __end_of_EUSART1_Read 2358                            ?i2_printf 0017  
          __end_of_SYSTEM_Initialize 22D8                              ??_putch 00B6  
                 i2___lldiv@quotient 0009                           _dataToSend 0060  
                         __pbssBANK0 0060               sendAX@parametersToRead 0008  
                 _handleByteReceived 17AE                          setLedOn@led 0001  
                         _clearState 21A0                  ?_handleByteReceived 0001  
             __end_of_getAddressSize 2098                         ?_writeAXData 0018  
                 __size_of_setLedOff 007A                     ?_TMR1_StartTimer 0001  
                            _I2C_ISR 1BB2                              _ADC_ISR 239E  
                            ?_pingAX 0018                              ?_sendAX 0002  
                            ?_printf 00CB              __size_of_ADC_Initialize 0018  
                   __CFG_CANMX$PORTB 000000                              _REFOCON 000F9A  
                            _OSCCON2 000FD2                            ?_delay_ms 00BD  
               ??_handleByteReceived 0029                           ??i2_printf 001D  
                            _OSCTUNE 000F9B                              _SPBRGH1 000F7D  
                            _SPBRGH2 000F7C                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                            i2_putch 238C                      writeAXData@data 001C  
             getByteToSend@xlow_1445 0058                      writeAXData@size 004D  
                         _readAXData 1CF8                            ?_setLedOn 0001  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
              getAddressSize@address 0001                              __Lparam 0000  
                    ?_getAddressSize 0001                              ___awdiv 1A38  
                            ___lldiv 1AF6                              ___llmod 1C5E  
                       __psmallconst 0F00                              __pcinit 2252  
                     _I2C_Initialize 22D8                      __size_of_pingAX 0062  
                            __ramtop 0F00                      __size_of_sendAX 013C  
                            __ptext0 0FCA                              __ptext1 121A  
                            __ptext2 2358                              __ptext3 2366  
                            __ptext4 1C5E                              __ptext5 1AF6  
                            __ptext6 1D90                              __ptext7 1A38  
                            __ptext8 22B6                              __ptext9 21DE  
                    __size_of_printf 0204                           _parameter1 00A5  
                         _parameter2 00A4                           _parameter3 00A3  
                         _parameter4 00A2                           _parameter5 00A1  
                         _parameter6 00A0                            _T1CONbits 000FCD  
                            _dpowers 0F01                _OSCILLATOR_Initialize 2336  
                 _EUSART1_Initialize 2320             ??_PIN_MANAGER_Initialize 00B5  
                  __CFG_MSSPMSK$MSK7 000000                           ??_delay_ms 00BF  
                            main@adc 00E2                    __end_of_setLedOff 2020  
         __size_of_SYSTEM_Initialize 0022                i2EUSART2_Write@txData 0001  
                         delay_ms@ms 00BD                 end_of_initialization 227C  
                ?_EUSART1_Initialize 0001               handleByteReceived@data 002B  
                            sendAX@i 000D                           ??_setLedOn 0003  
                    ___lldiv@divisor 00B9                          ?_clearState 0001  
                    ___lldiv@counter 00C1                   _EUSART2_Initialize 230A  
                    i2_EUSART2_Write 2374                              printf@c 00DC  
                            printf@f 00CB                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0010               __end_of_I2C_Initialize 22F2  
               ??_EUSART1_Initialize 00B5                  ?_EUSART2_Initialize 0001  
                          _PORTCbits 000F82                    readAXData@address 001A  
                i2_ADC_GetConversion 2286                           main@i_1270 00E0  
                EUSART1_Write@txData 0001                            i2___lldiv 1EAA  
                          i2___llmod 2098                 ??_EUSART2_Initialize 00B5  
                     getByteToSend@d 005A                         pingAX@packet 002F  
                       pingAX@length 0045                    pingAX@instruction 0047  
                       pingAX@result 001B               writeAXData@instruction 0049  
                       _EUSART1_Read 2348                   i2___llmod@dividend 000E  
                        ?_readAXData 0018                 ?i2_ADC_GetConversion 0001  
                       sendAX@i_1382 0015                         sendAX@i_1376 000F  
                       sendAX@i_1379 0011         __end_of_INTERRUPT_Initialize 239E  
                    ?_I2C_Initialize 0001                    writeAXData@packet 0033  
                  writeAXData@length 0047                 __size_of_writeAXData 008C  
                  writeAXData@result 001F                       _ADC_Initialize 22F2  
             ?_OSCILLATOR_Initialize 0001                         sendAX@buffer 0002  
                     __end_of_pingAX 2160                       __end_of_sendAX 1A38  
                handleByteReceived@i 0029                       __end_of_printf 141E  
                       sendAX@result 0006                         i2printf@flag 0023  
                       i2printf@prec 001F                  start_initialization 2252  
    __size_of_PIN_MANAGER_Initialize 003A                  __size_of_clearState 003E  
                          i2printf@c 0028                            i2printf@f 0017  
                         ?i2___lldiv 0001                           ?i2___llmod 000E  
                        putch@txData 00B6                    __size_ofi2_printf 01BA  
              __end_of_EUSART1_Write 238C                __end_of_EUSART2_Write 2374  
            __end_ofi2_EUSART2_Write 2380                      ___llmod@divisor 00C6  
                    ___llmod@counter 00CA                ??i2_ADC_GetConversion 0003  
                     _currentCommand 00E8             __size_of_TMR1_Initialize 003A  
                 pingAX@nbParameters 0043               __end_of_ADC_Initialize 230A  
                        __pdataBANK0 00E8                             ?_I2C_ISR 0001  
                           ?_ADC_ISR 0001                             ??_pingAX 001A  
                           ??_sendAX 000A                             ??_printf 00D1  
                __size_of_readAXData 0098                        __pcstackBANK0 00A7  
                       setLedOff@led 0001                           sendAX@stop 000B  
                  __size_of_delay_ms 008E                  EUSART2_Write@txData 00B5  
             __size_of_getByteToSend 01D6                             ?i2_putch 0001  
                   ??_getAddressSize 0003              getByteToSend@error_1441 0053  
             _PIN_MANAGER_Initialize 2218                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 00B5  
                           ?___lldiv 00B5                             ?___llmod 00C2  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 00A7  
                        __smallconst 0F00                             _BAUDCON1 000FA7  
                           _BAUDCON2 000FB9             __size_of_TMR1_StartTimer 0004  
                          _index_i2c 009E                        _nbBytesToSend 0096  
        __size_of_handleByteReceived 014E                            _readIndex 0098  
                          _bytesSent 0094       getByteToSend@i2c_data_received 0055  
                        ??i2___lldiv 0009                          ??i2___llmod 0016  
                     __size_of_putch 000E                 _INTERRUPT_Initialize 239A  
            getByteToSend@value_1444 005D                            _setLedOff 1FA6  
                   ?i2_EUSART2_Write 0001                             _LATBbits 000F8A  
                           _LATCbits 000F8B                             _LATDbits 000F8C  
                          delay_ms@i 00C2                            delay_ms@n 00C0  
                           _PIE1bits 000F9D                         ??_clearState 0001  
                           i2u210_47 1972                             i2u211_47 1A1E  
                           i2u142_40 17FA                             i2u143_40 181A  
__size_of_INTERRUPT_InterruptManager 008E                             i2u138_45 1516  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _RCONbits 000FD0                        _getByteToSend 141E  
            getByteToSend@xhigh_1446 0059                     __size_of_I2C_ISR 00AC  
                  ??_TMR1_Initialize 00B5                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                     __CFG_SOSCSEL$DIG 000000  
                         printf@flag 00D7                            main@delay 00E6  
                         printf@prec 00D3                             i2_printf 15F4  
                 __end_of_clearState 21DE                     writeAXData@error 004B  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                   __size_ofi2_putch 000A                         ??_readAXData 001C  
                   ??_I2C_Initialize 00B5                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 2160  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 00B5                   ?_ADC_GetConversion 00B5  
                   __size_of___awdiv 00BE                     __size_of___lldiv 00BC  
                   __size_of___llmod 009A          __size_of_EUSART1_Initialize 0016  
              _TMR1_InterruptHandler 009A                  ??_ADC_GetConversion 00B7  
                           _delay_ms 1D90                   __end_of_readAXData 1D90  
                           __ptext10 2396                             __ptext11 2218  
                           __ptext20 1BB2                             __ptext12 2336  
                           __ptext21 17AE                             __ptext13 239A  
                         _T1GCONbits 000FAA                             __ptext30 2286  
                           __ptext22 1F2C                             __ptext14 22D8  
                           __ptext31 1E1E                             __ptext23 1FA6  
                           __ptext15 230A                             __ptext32 1CF8  
                           __ptext24 141E                             __ptext16 2320  
                           __ptext33 2020                             __ptext25 15F4  
                           __ptext17 22F2                             __ptext34 20FE  
                           __ptext26 238C                             __ptext18 2160  
                           __ptext35 18FC                             __ptext27 2374  
                           __ptext36 2380                             __ptext28 2098  
                           __ptext37 2348                             __ptext29 1EAA  
                           __ptext38 21A0                             __ptext39 239E  
                  ??_TMR1_StartTimer 00B5                        writeAXData@id 0018  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 0250  
                           _setLedOn 1F2C            __end_of_ADC_GetConversion 21A0  
                      ??_writeAXData 001E                             int$flags 005F  
 __end_of_INTERRUPT_InterruptManager 0096           _INTERRUPT_InterruptManager 0008  
                          printf@val 00D8                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0004                   _I2C_slaveWriteData 00EA  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 00B5  
                           pingAX@id 0018                             sendAX@r0 0013  
                           intlevel2 0000          __end_ofi2_ADC_GetConversion 22B6  
                        ??_setLedOff 0003                     ___lldiv@dividend 00B5  
            ?_PIN_MANAGER_Initialize 0001                           _RCSTA1bits 000FAB  
                         _RCSTA2bits 000FA6                     ??_ADC_Initialize 00B5  
                    ??_getByteToSend 0050                             printf@ap 00D5  
                 __CFG_WDTPS$1048576 000000               __size_of_EUSART1_Write 000C  
             __size_of_EUSART2_Write 000E                  __end_of_writeAXData 1EAA  
                   ___lldiv@quotient 00BD           i2ADC_GetConversion@channel 0005  
                        _SSPCON1bits 000FC6       __end_of_PIN_MANAGER_Initialize 2252  
                __CFG_BORPWR$ZPBORMV 000000           __size_of_ADC_GetConversion 0040  
                    _TMR1_Initialize 21DE  
