

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Apr 17 12:58:37 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataBANK0
    53  000EE0                     __pidataBANK0:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _I2C_slaveWriteData
    57  000EE0  55                 	db	85
    58                           
    59                           ;initializer for _currentCommand
    60  000EE1  FF                 	db	255
    61                           
    62                           	psect	idataBANK1
    63  000A30                     __pidataBANK1:
    64                           	opt stack 0
    65                           
    66                           ;initializer for I2C_StatusCallbackOld@EEPROM_Buffer
    67  000A30  00                 	db	0
    68  000A31  01                 	db	1
    69  000A32  02                 	db	2
    70  000A33  03                 	db	3
    71  000A34  04                 	db	4
    72  000A35  05                 	db	5
    73  000A36  06                 	db	6
    74  000A37  07                 	db	7
    75  000A38  08                 	db	8
    76  000A39  09                 	db	9
    77  000A3A  0A                 	db	10
    78  000A3B  0B                 	db	11
    79  000A3C  0C                 	db	12
    80  000A3D  0D                 	db	13
    81  000A3E  0E                 	db	14
    82  000A3F  0F                 	db	15
    83  000A40  10                 	db	16
    84  000A41  11                 	db	17
    85  000A42  12                 	db	18
    86  000A43  13                 	db	19
    87  000A44  14                 	db	20
    88  000A45  15                 	db	21
    89  000A46  16                 	db	22
    90  000A47  17                 	db	23
    91  000A48  18                 	db	24
    92  000A49  19                 	db	25
    93  000A4A  1A                 	db	26
    94  000A4B  1B                 	db	27
    95  000A4C  1C                 	db	28
    96  000A4D  1D                 	db	29
    97  000A4E  1E                 	db	30
    98  000A4F  1F                 	db	31
    99  000A50  20                 	db	32
   100  000A51  21                 	db	33
   101  000A52  22                 	db	34
   102  000A53  23                 	db	35
   103  000A54  24                 	db	36
   104  000A55  25                 	db	37
   105  000A56  26                 	db	38
   106  000A57  27                 	db	39
   107  000A58  28                 	db	40
   108  000A59  29                 	db	41
   109  000A5A  2A                 	db	42
   110  000A5B  2B                 	db	43
   111  000A5C  2C                 	db	44
   112  000A5D  2D                 	db	45
   113  000A5E  2E                 	db	46
   114  000A5F  2F                 	db	47
   115  000A60  30                 	db	48
   116  000A61  31                 	db	49
   117  000A62  32                 	db	50
   118  000A63  33                 	db	51
   119  000A64  34                 	db	52
   120  000A65  35                 	db	53
   121  000A66  36                 	db	54
   122  000A67  37                 	db	55
   123  000A68  38                 	db	56
   124  000A69  39                 	db	57
   125  000A6A  3A                 	db	58
   126  000A6B  3B                 	db	59
   127  000A6C  3C                 	db	60
   128  000A6D  3D                 	db	61
   129  000A6E  3E                 	db	62
   130  000A6F  3F                 	db	63
   131  000A70  40                 	db	64
   132  000A71  41                 	db	65
   133  000A72  42                 	db	66
   134  000A73  43                 	db	67
   135  000A74  44                 	db	68
   136  000A75  45                 	db	69
   137  000A76  46                 	db	70
   138  000A77  47                 	db	71
   139  000A78  48                 	db	72
   140  000A79  49                 	db	73
   141  000A7A  4A                 	db	74
   142  000A7B  4B                 	db	75
   143  000A7C  4C                 	db	76
   144  000A7D  4D                 	db	77
   145  000A7E  4E                 	db	78
   146  000A7F  4F                 	db	79
   147  000A80  50                 	db	80
   148  000A81  51                 	db	81
   149  000A82  52                 	db	82
   150  000A83  53                 	db	83
   151  000A84  54                 	db	84
   152  000A85  55                 	db	85
   153  000A86  56                 	db	86
   154  000A87  57                 	db	87
   155  000A88  58                 	db	88
   156  000A89  59                 	db	89
   157  000A8A  5A                 	db	90
   158  000A8B  5B                 	db	91
   159  000A8C  5C                 	db	92
   160  000A8D  5D                 	db	93
   161  000A8E  5E                 	db	94
   162  000A8F  5F                 	db	95
   163  000A90  60                 	db	96
   164  000A91  61                 	db	97
   165  000A92  62                 	db	98
   166  000A93  63                 	db	99
   167  000A94  64                 	db	100
   168  000A95  65                 	db	101
   169  000A96  66                 	db	102
   170  000A97  67                 	db	103
   171  000A98  68                 	db	104
   172  000A99  69                 	db	105
   173  000A9A  6A                 	db	106
   174  000A9B  6B                 	db	107
   175  000A9C  6C                 	db	108
   176  000A9D  6D                 	db	109
   177  000A9E  6E                 	db	110
   178  000A9F  6F                 	db	111
   179  000AA0  70                 	db	112
   180  000AA1  71                 	db	113
   181  000AA2  72                 	db	114
   182  000AA3  73                 	db	115
   183  000AA4  74                 	db	116
   184  000AA5  75                 	db	117
   185  000AA6  76                 	db	118
   186  000AA7  77                 	db	119
   187  000AA8  78                 	db	120
   188  000AA9  79                 	db	121
   189  000AAA  7A                 	db	122
   190  000AAB  7B                 	db	123
   191  000AAC  7C                 	db	124
   192  000AAD  7D                 	db	125
   193  000AAE  7E                 	db	126
   194  000AAF  7F                 	db	127
   195                           
   196                           	psect	nvBANK0
   197  0000EB                     __pnvBANK0:
   198                           	opt stack 0
   199  0000EB                     _timer1ReloadVal:
   200                           	opt stack 0
   201  0000EB                     	ds	2
   202  0000                     _WPUB	set	3931
   203  0000                     _ADCON0	set	4034
   204  0000                     _ADCON0bits	set	4034
   205  0000                     _ADCON1	set	4033
   206  0000                     _ADCON2	set	4032
   207  0000                     _ADRESH	set	4036
   208  0000                     _ADRESL	set	4035
   209  0000                     _BAUDCON1	set	4007
   210  0000                     _BAUDCON2	set	4025
   211  0000                     _CCP1CON	set	4027
   212  0000                     _CCPR1H	set	4029
   213  0000                     _CCPR1L	set	4028
   214  0000                     _CCPTMRSbits	set	3993
   215  0000                     _INTCONbits	set	4082
   216  0000                     _IPR1bits	set	3999
   217  0000                     _LATA	set	3977
   218  0000                     _LATB	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATE	set	3981
   222  0000                     _OSCCON	set	4051
   223  0000                     _OSCCON2	set	4050
   224  0000                     _OSCTUNE	set	3995
   225  0000                     _PIE1bits	set	3997
   226  0000                     _PIR1bits	set	3998
   227  0000                     _PIR3bits	set	4004
   228  0000                     _PORTCbits	set	3970
   229  0000                     _RCREG1	set	4014
   230  0000                     _RCREG2	set	3962
   231  0000                     _RCSTA1	set	4011
   232  0000                     _RCSTA1bits	set	4011
   233  0000                     _RCSTA2	set	4006
   234  0000                     _RCSTA2bits	set	4006
   235  0000                     _REFOCON	set	3994
   236  0000                     _SPBRG1	set	4015
   237  0000                     _SPBRG2	set	3963
   238  0000                     _SPBRGH1	set	3965
   239  0000                     _SPBRGH2	set	3964
   240  0000                     _SSPADD	set	4040
   241  0000                     _SSPBUF	set	4041
   242  0000                     _SSPCON1	set	4038
   243  0000                     _SSPCON1bits	set	4038
   244  0000                     _SSPCON2	set	4037
   245  0000                     _SSPSTAT	set	4039
   246  0000                     _SSPSTATbits	set	4039
   247  0000                     _T1CON	set	4045
   248  0000                     _T1CONbits	set	4045
   249  0000                     _T1GCON	set	4010
   250  0000                     _T1GCONbits	set	4010
   251  0000                     _TMR1H	set	4047
   252  0000                     _TMR1L	set	4046
   253  0000                     _TRISA	set	3986
   254  0000                     _TRISB	set	3987
   255  0000                     _TRISC	set	3988
   256  0000                     _TRISD	set	3989
   257  0000                     _TRISE	set	3990
   258  0000                     _TXREG1	set	4013
   259  0000                     _TXREG2	set	3961
   260  0000                     _TXSTA1	set	4012
   261  0000                     _TXSTA2	set	4026
   262  0000                     _IPEN	set	32391
   263  0000                     _LATB0	set	31824
   264  0000                     _LATB2	set	31826
   265  0000                     _LATB3	set	31827
   266  0000                     _LATC0	set	31832
   267  0000                     _LATC1	set	31833
   268  0000                     _LATC2	set	31834
   269  0000                     _LATD0	set	31840
   270  0000                     _LATD1	set	31841
   271  0000                     _LATD2	set	31842
   272  0000                     _LATD3	set	31843
   273  0000                     _LATD4	set	31844
   274  0000                     _TRISC0	set	31904
   275  0000                     _TRISC1	set	31905
   276                           
   277                           ; #config settings
   278  0000                     
   279                           	psect	cinit
   280  000C7E                     __pcinit:
   281                           	opt stack 0
   282  000C7E                     start_initialization:
   283                           	opt stack 0
   284  000C7E                     __initialization:
   285                           	opt stack 0
   286                           
   287                           ; Initialize objects allocated to BANK1 (128 bytes)
   288                           ; load TBLPTR registers with __pidataBANK1
   289  000C7E  0E30               	movlw	low __pidataBANK1
   290  000C80  6EF6               	movwf	tblptrl,c
   291  000C82  0E0A               	movlw	high __pidataBANK1
   292  000C84  6EF7               	movwf	tblptrh,c
   293  000C86  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   294  000C88  6EF8               	movwf	tblptru,c
   295  000C8A  EE01  F000         	lfsr	0,__pdataBANK1
   296  000C8E  EE10 F080          	lfsr	1,128
   297  000C92                     copy_data0:
   298  000C92  0009               	tblrd		*+
   299  000C94  CFF5 FFEE          	movff	tablat,postinc0
   300  000C98  50E5               	movf	postdec1,w,c
   301  000C9A  50E1               	movf	fsr1l,w,c
   302  000C9C  E1FA               	bnz	copy_data0
   303                           
   304                           ; Initialize objects allocated to BANK0 (2 bytes)
   305                           ; load TBLPTR registers with __pidataBANK0
   306  000C9E  0EE0               	movlw	low __pidataBANK0
   307  000CA0  6EF6               	movwf	tblptrl,c
   308  000CA2  0E0E               	movlw	high __pidataBANK0
   309  000CA4  6EF7               	movwf	tblptrh,c
   310  000CA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   311  000CA8  6EF8               	movwf	tblptru,c
   312  000CAA  0009               	tblrd		*+	;fetch initializer
   313  000CAC  CFF5 F0ED          	movff	tablat,__pdataBANK0
   314  000CB0  0009               	tblrd		*+	;fetch initializer
   315  000CB2  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   316                           
   317                           ; Clear objects allocated to BANK0 (45 bytes)
   318  000CB6  EE00  F0BE         	lfsr	0,__pbssBANK0
   319  000CBA  0E2D               	movlw	45
   320  000CBC                     clear_0:
   321  000CBC  6AEE               	clrf	postinc0,c
   322  000CBE  06E8               	decf	wreg,f,c
   323  000CC0  E1FD               	bnz	clear_0
   324  000CC2                     end_of_initialization:
   325                           	opt stack 0
   326  000CC2                     __end_of__initialization:
   327                           	opt stack 0
   328  000CC2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   329  000CC4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   330  000CC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   331  000CC8  6EF8               	movwf	tblptru,c
   332  000CCA  0100               	movlb	0
   333  000CCC  EF1C  F001         	goto	_main	;jump to C main() function
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           postinc0	equ	0xFEE
   339                           wreg	equ	0xFE8
   340                           postdec1	equ	0xFE5
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	bssBANK0
   344  0000BE                     __pbssBANK0:
   345                           	opt stack 0
   346  0000BE                     _dataToSend:
   347                           	opt stack 0
   348  0000BE                     	ds	32
   349  0000DE                     _bytesSent:
   350                           	opt stack 0
   351  0000DE                     	ds	2
   352  0000E0                     _c:
   353                           	opt stack 0
   354  0000E0                     	ds	2
   355  0000E2                     _nbBytesToSend:
   356                           	opt stack 0
   357  0000E2                     	ds	2
   358  0000E4                     _readIndex:
   359                           	opt stack 0
   360  0000E4                     	ds	2
   361  0000E6                     I2C_StatusCallbackOld@eepromAddress:
   362                           	opt stack 0
   363  0000E6                     	ds	1
   364  0000E7                     I2C_StatusCallbackOld@slaveWriteType:
   365                           	opt stack 0
   366  0000E7                     	ds	1
   367  0000E8                     _parameter1:
   368                           	opt stack 0
   369  0000E8                     	ds	1
   370  0000E9                     _parameter2:
   371                           	opt stack 0
   372  0000E9                     	ds	1
   373  0000EA                     _parameter3:
   374                           	opt stack 0
   375  0000EA                     	ds	1
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	dataBANK0
   386  0000ED                     __pdataBANK0:
   387                           	opt stack 0
   388  0000ED                     _I2C_slaveWriteData:
   389                           	opt stack 0
   390  0000ED                     	ds	1
   391  0000EE                     _currentCommand:
   392                           	opt stack 0
   393  0000EE                     	ds	1
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           postdec1	equ	0xFE5
   401                           fsr1l	equ	0xFE1
   402                           
   403                           	psect	dataBANK1
   404  000100                     __pdataBANK1:
   405                           	opt stack 0
   406  000100                     I2C_StatusCallbackOld@EEPROM_Buffer:
   407                           	opt stack 0
   408  000100                     	ds	128
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1l	equ	0xFE1
   417                           
   418                           	psect	cstackBANK0
   419  000060                     __pcstackBANK0:
   420                           	opt stack 0
   421  000060                     I2C_StatusCallback@i2c_bus_state:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x0
   425  000060                     	ds	1
   426  000061                     I2C_StatusCallback@data:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x1
   430  000061                     	ds	1
   431  000062                     ??_INTERRUPT_InterruptManager:
   432                           
   433                           ; 1 bytes @ 0x2
   434  000062                     	ds	14
   435  000070                     ??_TMR1_Initialize:
   436  000070                     ?___awdiv:
   437                           	opt stack 0
   438  000070                     EUSART1_Write@txData:
   439                           	opt stack 0
   440  000070                     ___awdiv@dividend:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x10
   444  000070                     	ds	1
   445  000071                     sendAX@buffer:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x11
   449  000071                     	ds	1
   450  000072                     ___awdiv@divisor:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x12
   454  000072                     	ds	1
   455  000073                     sendAX@packetSize:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x13
   459  000073                     	ds	1
   460  000074                     ___awdiv@counter:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x14
   464  000074                     	ds	1
   465  000075                     ___awdiv@sign:
   466                           	opt stack 0
   467  000075                     sendAX@result:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x15
   471  000075                     	ds	1
   472  000076                     ___awdiv@quotient:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x16
   476  000076                     	ds	1
   477  000077                     sendAX@parametersToRead:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x17
   481  000077                     	ds	1
   482  000078                     delay_ms@ms:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x18
   486  000078                     	ds	1
   487  000079                     ??_sendAX:
   488                           
   489                           ; 1 bytes @ 0x19
   490  000079                     	ds	1
   491  00007A                     ??_delay_ms:
   492  00007A                     sendAX@stop:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x1A
   496  00007A                     	ds	1
   497  00007B                     delay_ms@n:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x1B
   501  00007B                     	ds	1
   502  00007C                     sendAX@i:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x1C
   506  00007C                     	ds	1
   507  00007D                     delay_ms@i:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511  00007D                     	ds	1
   512  00007E                     sendAX@i_1221:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x1E
   516  00007E                     	ds	2
   517  000080                     sendAX@i_1224:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x20
   521  000080                     	ds	2
   522  000082                     sendAX@r0:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x22
   526  000082                     	ds	2
   527  000084                     sendAX@i_1227:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x24
   531  000084                     	ds	2
   532  000086                     sendAX@checksum:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x26
   536  000086                     	ds	1
   537  000087                     ?_pingAX:
   538                           	opt stack 0
   539  000087                     pingAX@id:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x27
   543  000087                     	ds	2
   544  000089                     ??_pingAX:
   545                           
   546                           ; 1 bytes @ 0x29
   547  000089                     	ds	1
   548  00008A                     pingAX@result:
   549                           	opt stack 0
   550                           
   551                           ; 20 bytes @ 0x2A
   552  00008A                     	ds	20
   553  00009E                     pingAX@packet:
   554                           	opt stack 0
   555                           
   556                           ; 20 bytes @ 0x3E
   557  00009E                     	ds	20
   558  0000B2                     pingAX@nbParameters:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x52
   562  0000B2                     	ds	2
   563  0000B4                     pingAX@length:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x54
   567  0000B4                     	ds	2
   568  0000B6                     pingAX@instruction:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x56
   572  0000B6                     	ds	2
   573  0000B8                     pingAX@error:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x58
   577  0000B8                     	ds	2
   578  0000BA                     main@i:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x5A
   582  0000BA                     	ds	2
   583  0000BC                     main@delay:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x5C
   587  0000BC                     	ds	2
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597                           	psect	cstackCOMRAM
   598  000001                     __pcstackCOMRAM:
   599                           	opt stack 0
   600  000001                     ?_ADC_GetConversion:
   601                           	opt stack 0
   602  000001                     ?_getAddressSize:
   603                           	opt stack 0
   604  000001                     i2EUSART1_Write@txData:
   605                           	opt stack 0
   606  000001                     getAddressSize@address:
   607                           	opt stack 0
   608  000001                     setLedOn@led:
   609                           	opt stack 0
   610  000001                     setLedOff@led:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x0
   614  000001                     	ds	1
   615  000002                     i2sendAX@buffer:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1
   619  000002                     	ds	1
   620  000003                     ??_ADC_GetConversion:
   621  000003                     ??_getAddressSize:
   622  000003                     ??_setLedOn:
   623  000003                     ??_setLedOff:
   624                           
   625                           ; 1 bytes @ 0x2
   626  000003                     	ds	1
   627  000004                     i2sendAX@packetSize:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x3
   631  000004                     	ds	1
   632  000005                     ADC_GetConversion@channel:
   633                           	opt stack 0
   634  000005                     handleByteReceived@i:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x4
   638  000005                     	ds	1
   639  000006                     ?_getADC:
   640                           	opt stack 0
   641  000006                     getADC@adc:
   642                           	opt stack 0
   643  000006                     i2sendAX@result:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x5
   647  000006                     	ds	1
   648  000007                     handleByteReceived@data:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x6
   652  000007                     	ds	1
   653  000008                     i2sendAX@parametersToRead:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x7
   657  000008                     	ds	2
   658  00000A                     ??i2_sendAX:
   659                           
   660                           ; 1 bytes @ 0x9
   661  00000A                     	ds	1
   662  00000B                     i2sendAX@stop:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0xA
   666  00000B                     	ds	2
   667  00000D                     i2sendAX@i:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0xC
   671  00000D                     	ds	2
   672  00000F                     i2sendAX@i_1221:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0xE
   676  00000F                     	ds	2
   677  000011                     i2sendAX@i_1224:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x10
   681  000011                     	ds	2
   682  000013                     i2sendAX@r0:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x12
   686  000013                     	ds	2
   687  000015                     i2sendAX@i_1227:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x14
   691  000015                     	ds	2
   692  000017                     i2sendAX@checksum:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x16
   696  000017                     	ds	1
   697  000018                     ?_readAXData:
   698                           	opt stack 0
   699  000018                     ?_writeAXData:
   700                           	opt stack 0
   701  000018                     ?i2_pingAX:
   702                           	opt stack 0
   703  000018                     readAXData@id:
   704                           	opt stack 0
   705  000018                     writeAXData@id:
   706                           	opt stack 0
   707  000018                     i2pingAX@id:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x17
   711  000018                     	ds	2
   712  00001A                     ??i2_pingAX:
   713  00001A                     readAXData@address:
   714                           	opt stack 0
   715  00001A                     writeAXData@address:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x19
   719  00001A                     	ds	1
   720  00001B                     i2pingAX@result:
   721                           	opt stack 0
   722                           
   723                           ; 20 bytes @ 0x1A
   724  00001B                     	ds	1
   725  00001C                     ??_readAXData:
   726  00001C                     writeAXData@data:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x1B
   730  00001C                     	ds	2
   731  00001E                     ??_writeAXData:
   732  00001E                     readAXData@result:
   733                           	opt stack 0
   734                           
   735                           ; 20 bytes @ 0x1D
   736  00001E                     	ds	1
   737  00001F                     writeAXData@result:
   738                           	opt stack 0
   739                           
   740                           ; 20 bytes @ 0x1E
   741  00001F                     	ds	16
   742  00002F                     i2pingAX@packet:
   743                           	opt stack 0
   744                           
   745                           ; 20 bytes @ 0x2E
   746  00002F                     	ds	3
   747  000032                     readAXData@error:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x31
   751  000032                     	ds	1
   752  000033                     writeAXData@packet:
   753                           	opt stack 0
   754                           
   755                           ; 20 bytes @ 0x32
   756  000033                     	ds	1
   757  000034                     readAXData@packet:
   758                           	opt stack 0
   759                           
   760                           ; 20 bytes @ 0x33
   761  000034                     	ds	15
   762  000043                     i2pingAX@nbParameters:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x42
   766  000043                     	ds	2
   767  000045                     i2pingAX@length:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x44
   771  000045                     	ds	2
   772  000047                     writeAXData@length:
   773                           	opt stack 0
   774  000047                     i2pingAX@instruction:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x46
   778  000047                     	ds	1
   779  000048                     readAXData@nbParameters:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x47
   783  000048                     	ds	1
   784  000049                     writeAXData@instruction:
   785                           	opt stack 0
   786  000049                     i2pingAX@error:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x48
   790  000049                     	ds	1
   791  00004A                     readAXData@length:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x49
   795  00004A                     	ds	1
   796  00004B                     writeAXData@error:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x4A
   800  00004B                     	ds	1
   801  00004C                     readAXData@instruction:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x4B
   805  00004C                     	ds	1
   806  00004D                     writeAXData@size:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x4C
   810  00004D                     	ds	1
   811  00004E                     readAXData@size:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x4D
   815  00004E                     	ds	2
   816  000050                     ??_getByteToSend:
   817                           
   818                           ; 1 bytes @ 0x4F
   819  000050                     	ds	1
   820  000051                     getByteToSend@error:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x50
   824  000051                     	ds	2
   825  000053                     getByteToSend@error_1277:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x52
   829  000053                     	ds	2
   830  000055                     getByteToSend@xlow:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x54
   834  000055                     	ds	1
   835  000056                     getByteToSend@xhigh:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x55
   839  000056                     	ds	1
   840  000057                     getByteToSend@xlow_1281:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x56
   844  000057                     	ds	1
   845  000058                     getByteToSend@xhigh_1282:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x57
   849  000058                     	ds	1
   850  000059                     getByteToSend@d:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x58
   854  000059                     	ds	1
   855  00005A                     getByteToSend@value:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x59
   859  00005A                     	ds	2
   860  00005C                     getByteToSend@value_1279:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x5B
   864  00005C                     	ds	2
   865  00005E                     I2C_ISR@i2c_data:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x5D
   869  00005E                     	ds	1
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879 ;;
   880 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   881 ;;
   882 ;; *************** function _main *****************
   883 ;; Defined at:
   884 ;;		line 52 in file "main.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  i               2   90[BANK0 ] int 
   889 ;;  delay           2   92[BANK0 ] int 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   900 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   903 ;;Total ram usage:        4 bytes
   904 ;; Hardware stack levels required when called:   10
   905 ;; This function calls:
   906 ;;		_SYSTEM_Initialize
   907 ;;		_delay_ms
   908 ;;		_pingAX
   909 ;; This function is called by:
   910 ;;		Startup code after reset
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text0
   915  000238                     __ptext0:
   916                           	opt stack 0
   917  000238                     _main:
   918                           	opt stack 21
   919                           
   920                           ;main.c: 54: SYSTEM_Initialize();
   921                           
   922                           ;incstack = 0
   923  000238  ECF2  F006         	call	_SYSTEM_Initialize	;wreg free
   924                           
   925                           ;main.c: 73: (INTCONbits.GIE = 1);
   926  00023C  8EF2               	bsf	intcon,7,c	;volatile
   927                           
   928                           ;main.c: 76: (INTCONbits.PEIE = 1);
   929  00023E  8CF2               	bsf	intcon,6,c	;volatile
   930                           
   931                           ;main.c: 87: do { TRISC0 = 0; } while(0);
   932  000240  9094               	bcf	3988,0,c	;volatile
   933                           
   934                           ;main.c: 88: do { TRISC1 = 0; } while(0);
   935  000242  9294               	bcf	3988,1,c	;volatile
   936                           
   937                           ;main.c: 89: int delay = 10;
   938  000244  0E00               	movlw	0
   939  000246  0100               	movlb	0	; () banked
   940  000248  6FBD               	movwf	(main@delay+1)& (0+255),b
   941  00024A  0E0A               	movlw	10
   942  00024C  6FBC               	movwf	main@delay& (0+255),b
   943                           
   944                           ; BSR set to: 0
   945                           ;main.c: 90: for (int i = 0; i < 2; i++) {
   946  00024E  0E00               	movlw	0
   947  000250  0100               	movlb	0	; () banked
   948  000252  6FBB               	movwf	(main@i+1)& (0+255),b
   949  000254  0E00               	movlw	0
   950  000256  6FBA               	movwf	main@i& (0+255),b
   951  000258                     l2723:
   952                           
   953                           ; BSR set to: 0
   954  000258  0100               	movlb	0	; () banked
   955  00025A  BFBB               	btfsc	(main@i+1)& (0+255),7,b
   956  00025C  D008               	goto	l361
   957  00025E  0100               	movlb	0	; () banked
   958  000260  51BB               	movf	(main@i+1)& (0+255),w,b
   959  000262  E15F               	bnz	l401
   960  000264  0E02               	movlw	2
   961  000266  0100               	movlb	0	; () banked
   962  000268  5DBA               	subwf	main@i& (0+255),w,b
   963  00026A  B0D8               	btfsc	status,0,c
   964  00026C  D05A               	goto	l401
   965  00026E                     l361:
   966                           
   967                           ; BSR set to: 0
   968  00026E  868C               	bsf	3980,3,c	;volatile
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 93: delay_ms(delay);
   972                           
   973                           ; BSR set to: 0
   974  000270  C0BC  F078         	movff	main@delay,delay_ms@ms
   975  000274  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
   976  000278  EC91  F004         	call	_delay_ms	;wreg free
   977                           
   978                           ;main.c: 94: do { LATD3 = 0; } while(0);
   979  00027C  968C               	bcf	3980,3,c	;volatile
   980                           
   981                           ;main.c: 95: do { LATD2 = 1; } while(0);
   982  00027E  848C               	bsf	3980,2,c	;volatile
   983                           
   984                           ;main.c: 96: delay_ms(delay);
   985  000280  C0BC  F078         	movff	main@delay,delay_ms@ms
   986  000284  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
   987  000288  EC91  F004         	call	_delay_ms	;wreg free
   988                           
   989                           ;main.c: 97: do { LATD2 = 0; } while(0);
   990  00028C  948C               	bcf	3980,2,c	;volatile
   991                           
   992                           ;main.c: 98: do { LATD1 = 1; } while(0);
   993  00028E  828C               	bsf	3980,1,c	;volatile
   994                           
   995                           ;main.c: 99: delay_ms(delay);
   996  000290  C0BC  F078         	movff	main@delay,delay_ms@ms
   997  000294  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
   998  000298  EC91  F004         	call	_delay_ms	;wreg free
   999                           
  1000                           ;main.c: 100: do { LATD1 = 0; } while(0);
  1001  00029C  928C               	bcf	3980,1,c	;volatile
  1002                           
  1003                           ;main.c: 101: do { LATD0 = 1; } while(0);
  1004  00029E  808C               	bsf	3980,0,c	;volatile
  1005                           
  1006                           ;main.c: 102: delay_ms(delay);
  1007  0002A0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1008  0002A4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1009  0002A8  EC91  F004         	call	_delay_ms	;wreg free
  1010                           
  1011                           ;main.c: 103: do { LATD0 = 0; } while(0);
  1012  0002AC  908C               	bcf	3980,0,c	;volatile
  1013                           
  1014                           ;main.c: 104: do { LATC2 = 1; } while(0);
  1015  0002AE  848B               	bsf	3979,2,c	;volatile
  1016                           
  1017                           ;main.c: 105: delay_ms(delay);
  1018  0002B0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1019  0002B4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1020  0002B8  EC91  F004         	call	_delay_ms	;wreg free
  1021                           
  1022                           ;main.c: 106: do { LATC2 = 0; } while(0);
  1023  0002BC  948B               	bcf	3979,2,c	;volatile
  1024                           
  1025                           ;main.c: 107: do { LATC1 = 1; } while(0);
  1026  0002BE  828B               	bsf	3979,1,c	;volatile
  1027                           
  1028                           ;main.c: 108: delay_ms(delay);
  1029  0002C0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1030  0002C4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1031  0002C8  EC91  F004         	call	_delay_ms	;wreg free
  1032                           
  1033                           ;main.c: 109: do { LATC1 = 0; } while(0);
  1034  0002CC  928B               	bcf	3979,1,c	;volatile
  1035                           
  1036                           ;main.c: 110: do { LATC0 = 1; } while(0);
  1037  0002CE  808B               	bsf	3979,0,c	;volatile
  1038                           
  1039                           ;main.c: 111: delay_ms(delay);
  1040  0002D0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1041  0002D4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1042  0002D8  EC91  F004         	call	_delay_ms	;wreg free
  1043                           
  1044                           ;main.c: 112: do { LATC0 = 0; } while(0);
  1045  0002DC  908B               	bcf	3979,0,c	;volatile
  1046                           
  1047                           ;main.c: 113: do { LATB0 = 1; } while(0);
  1048  0002DE  808A               	bsf	3978,0,c	;volatile
  1049                           
  1050                           ;main.c: 114: delay_ms(delay);
  1051  0002E0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1052  0002E4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1053  0002E8  EC91  F004         	call	_delay_ms	;wreg free
  1054                           
  1055                           ;main.c: 115: do { LATB0 = 0; } while(0);
  1056  0002EC  908A               	bcf	3978,0,c	;volatile
  1057                           
  1058                           ;main.c: 116: do { LATB2 = 1; } while(0);
  1059  0002EE  848A               	bsf	3978,2,c	;volatile
  1060                           
  1061                           ;main.c: 117: delay_ms(delay);
  1062  0002F0  C0BC  F078         	movff	main@delay,delay_ms@ms
  1063  0002F4  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1064  0002F8  EC91  F004         	call	_delay_ms	;wreg free
  1065                           
  1066                           ;main.c: 118: do { LATB2 = 0; } while(0);
  1067  0002FC  948A               	bcf	3978,2,c	;volatile
  1068                           
  1069                           ;main.c: 119: do { LATB3 = 1; } while(0);
  1070  0002FE  868A               	bsf	3978,3,c	;volatile
  1071                           
  1072                           ;main.c: 120: delay_ms(delay);
  1073  000300  C0BC  F078         	movff	main@delay,delay_ms@ms
  1074  000304  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1075  000308  EC91  F004         	call	_delay_ms	;wreg free
  1076                           
  1077                           ;main.c: 121: do { LATB3 = 0; } while(0);
  1078  00030C  968A               	bcf	3978,3,c	;volatile
  1079                           
  1080                           ;main.c: 122: delay_ms(delay);
  1081  00030E  C0BC  F078         	movff	main@delay,delay_ms@ms
  1082  000312  C0BD  F079         	movff	main@delay+1,delay_ms@ms+1
  1083  000316  EC91  F004         	call	_delay_ms	;wreg free
  1084  00031A  0100               	movlb	0	; () banked
  1085  00031C  4BBA               	infsnz	main@i& (0+255),f,b
  1086  00031E  2BBB               	incf	(main@i+1)& (0+255),f,b
  1087  000320  D79B               	goto	l2723
  1088  000322                     l401:
  1089                           
  1090                           ; BSR set to: 0
  1091  000322  988C               	bcf	3980,4,c	;volatile
  1092  000324                     l2771:
  1093                           
  1094                           ;main.c: 129: delay_ms(500);
  1095  000324  0E01               	movlw	1
  1096  000326  0100               	movlb	0	; () banked
  1097  000328  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1098  00032A  0EF4               	movlw	244
  1099  00032C  6F78               	movwf	delay_ms@ms& (0+255),b
  1100  00032E  EC91  F004         	call	_delay_ms	;wreg free
  1101                           
  1102                           ;main.c: 130: do { LATB3 = 1; } while(0);
  1103  000332  868A               	bsf	3978,3,c	;volatile
  1104                           
  1105                           ;main.c: 131: delay_ms(500);
  1106  000334  0E01               	movlw	1
  1107  000336  0100               	movlb	0	; () banked
  1108  000338  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1109  00033A  0EF4               	movlw	244
  1110  00033C  6F78               	movwf	delay_ms@ms& (0+255),b
  1111  00033E  EC91  F004         	call	_delay_ms	;wreg free
  1112                           
  1113                           ;main.c: 133: do { LATB3 = 0; } while(0);
  1114  000342  968A               	bcf	3978,3,c	;volatile
  1115  000344  D7EF               	goto	l2771
  1116  000346                     l411:
  1117  000346  868A               	bsf	3978,3,c	;volatile
  1118                           
  1119                           ;main.c: 140: delay_ms(100);
  1120  000348  0E00               	movlw	0
  1121  00034A  0100               	movlb	0	; () banked
  1122  00034C  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1123  00034E  0E64               	movlw	100
  1124  000350  6F78               	movwf	delay_ms@ms& (0+255),b
  1125  000352  EC91  F004         	call	_delay_ms	;wreg free
  1126                           
  1127                           ;main.c: 141: pingAX(2);
  1128  000356  0E00               	movlw	0
  1129  000358  0100               	movlb	0	; () banked
  1130  00035A  6F88               	movwf	(pingAX@id+1)& (0+255),b
  1131  00035C  0E02               	movlw	2
  1132  00035E  6F87               	movwf	pingAX@id& (0+255),b
  1133  000360  ECD6  F004         	call	_pingAX	;wreg free
  1134                           
  1135                           ;main.c: 142: do { LATB3 = 0; } while(0);
  1136  000364  968A               	bcf	3978,3,c	;volatile
  1137                           
  1138                           ;main.c: 143: delay_ms(100);
  1139  000366  0E00               	movlw	0
  1140  000368  0100               	movlb	0	; () banked
  1141  00036A  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1142  00036C  0E64               	movlw	100
  1143  00036E  6F78               	movwf	delay_ms@ms& (0+255),b
  1144  000370  EC91  F004         	call	_delay_ms	;wreg free
  1145                           
  1146                           ;main.c: 145: do { LATB2 = 1; } while(0);
  1147  000374  848A               	bsf	3978,2,c	;volatile
  1148                           
  1149                           ;main.c: 146: delay_ms(100);
  1150  000376  0E00               	movlw	0
  1151  000378  0100               	movlb	0	; () banked
  1152  00037A  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1153  00037C  0E64               	movlw	100
  1154  00037E  6F78               	movwf	delay_ms@ms& (0+255),b
  1155  000380  EC91  F004         	call	_delay_ms	;wreg free
  1156                           
  1157                           ;main.c: 147: pingAX(2);
  1158  000384  0E00               	movlw	0
  1159  000386  0100               	movlb	0	; () banked
  1160  000388  6F88               	movwf	(pingAX@id+1)& (0+255),b
  1161  00038A  0E02               	movlw	2
  1162  00038C  6F87               	movwf	pingAX@id& (0+255),b
  1163  00038E  ECD6  F004         	call	_pingAX	;wreg free
  1164                           
  1165                           ;main.c: 148: do { LATB2 = 0; } while(0);
  1166  000392  948A               	bcf	3978,2,c	;volatile
  1167                           
  1168                           ;main.c: 149: delay_ms(100);
  1169  000394  0E00               	movlw	0
  1170  000396  0100               	movlb	0	; () banked
  1171  000398  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1172  00039A  0E64               	movlw	100
  1173  00039C  6F78               	movwf	delay_ms@ms& (0+255),b
  1174  00039E  EC91  F004         	call	_delay_ms	;wreg free
  1175                           
  1176                           ;main.c: 151: do { LATB0 = 1; } while(0);
  1177  0003A2  808A               	bsf	3978,0,c	;volatile
  1178                           
  1179                           ;main.c: 152: delay_ms(100);
  1180  0003A4  0E00               	movlw	0
  1181  0003A6  0100               	movlb	0	; () banked
  1182  0003A8  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1183  0003AA  0E64               	movlw	100
  1184  0003AC  6F78               	movwf	delay_ms@ms& (0+255),b
  1185  0003AE  EC91  F004         	call	_delay_ms	;wreg free
  1186                           
  1187                           ;main.c: 153: pingAX(2);
  1188  0003B2  0E00               	movlw	0
  1189  0003B4  0100               	movlb	0	; () banked
  1190  0003B6  6F88               	movwf	(pingAX@id+1)& (0+255),b
  1191  0003B8  0E02               	movlw	2
  1192  0003BA  6F87               	movwf	pingAX@id& (0+255),b
  1193  0003BC  ECD6  F004         	call	_pingAX	;wreg free
  1194                           
  1195                           ;main.c: 154: do { LATB0 = 0; } while(0);
  1196  0003C0  908A               	bcf	3978,0,c	;volatile
  1197                           
  1198                           ;main.c: 155: delay_ms(100);
  1199  0003C2  0E00               	movlw	0
  1200  0003C4  0100               	movlb	0	; () banked
  1201  0003C6  6F79               	movwf	(delay_ms@ms+1)& (0+255),b
  1202  0003C8  0E64               	movlw	100
  1203  0003CA  6F78               	movwf	delay_ms@ms& (0+255),b
  1204  0003CC  EC91  F004         	call	_delay_ms	;wreg free
  1205  0003D0  D7BA               	goto	l411
  1206  0003D2                     __end_of_main:
  1207                           	opt stack 0
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           intcon	equ	0xFF2
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           postdec1	equ	0xFE5
  1216                           fsr1l	equ	0xFE1
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _pingAX *****************
  1220 ;; Defined at:
  1221 ;;		line 180 in file "ax.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  id              2   39[BANK0 ] int 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  packet         20   62[BANK0 ] unsigned char [20]
  1226 ;;  result         20   42[BANK0 ] unsigned char [20]
  1227 ;;  error           2   88[BANK0 ] int 
  1228 ;;  instruction     2   86[BANK0 ] int 
  1229 ;;  length          2   84[BANK0 ] int 
  1230 ;;  nbParameters    2   82[BANK0 ] int 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  2   39[BANK0 ] int 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1241 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1243 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1244 ;;Total ram usage:       51 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    9
  1247 ;; This function calls:
  1248 ;;		_sendAX
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text1
  1255  0009AC                     __ptext1:
  1256                           	opt stack 0
  1257  0009AC                     _pingAX:
  1258                           	opt stack 21
  1259                           
  1260                           ;ax.c: 181: uint8_t packet[20];
  1261                           ;ax.c: 182: uint8_t result[20];
  1262                           ;ax.c: 183: packet[0] = 0xFF;
  1263                           
  1264                           ;incstack = 0
  1265  0009AC  0100               	movlb	0	; () banked
  1266  0009AE  699E               	setf	pingAX@packet& (0+255),b
  1267                           
  1268                           ;ax.c: 184: packet[1] = 0xFF;
  1269  0009B0  0100               	movlb	0	; () banked
  1270  0009B2  699F               	setf	(pingAX@packet+1)& (0+255),b
  1271                           
  1272                           ;ax.c: 185: packet[2] = id;
  1273  0009B4  C087  F0A0         	movff	pingAX@id,pingAX@packet+2
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;ax.c: 186: int nbParameters = 0;
  1277  0009B8  0E00               	movlw	0
  1278  0009BA  0100               	movlb	0	; () banked
  1279  0009BC  6FB3               	movwf	(pingAX@nbParameters+1)& (0+255),b
  1280  0009BE  0E00               	movlw	0
  1281  0009C0  6FB2               	movwf	pingAX@nbParameters& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;ax.c: 187: int length = nbParameters + 2;
  1285  0009C2  0E02               	movlw	2
  1286  0009C4  0100               	movlb	0	; () banked
  1287  0009C6  25B2               	addwf	pingAX@nbParameters& (0+255),w,b
  1288  0009C8  0100               	movlb	0	; () banked
  1289  0009CA  6FB4               	movwf	pingAX@length& (0+255),b
  1290  0009CC  0E00               	movlw	0
  1291  0009CE  0100               	movlb	0	; () banked
  1292  0009D0  21B3               	addwfc	(pingAX@nbParameters+1)& (0+255),w,b
  1293  0009D2  0100               	movlb	0	; () banked
  1294  0009D4  6FB5               	movwf	(pingAX@length+1)& (0+255),b
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;ax.c: 188: packet[3] = length;
  1298  0009D6  C0B4  F0A1         	movff	pingAX@length,pingAX@packet+3
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;ax.c: 189: int instruction = 0x01;
  1302  0009DA  0E00               	movlw	0
  1303  0009DC  0100               	movlb	0	; () banked
  1304  0009DE  6FB7               	movwf	(pingAX@instruction+1)& (0+255),b
  1305  0009E0  0E01               	movlw	1
  1306  0009E2  6FB6               	movwf	pingAX@instruction& (0+255),b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;ax.c: 190: packet[4] = instruction;
  1310  0009E4  C0B6  F0A2         	movff	pingAX@instruction,pingAX@packet+4
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;ax.c: 193: int error = sendAX(packet, 5, result, 0);
  1314  0009E8  0E9E               	movlw	low pingAX@packet
  1315  0009EA  0100               	movlb	0	; () banked
  1316  0009EC  6F71               	movwf	sendAX@buffer& (0+255),b
  1317  0009EE  0E00               	movlw	high pingAX@packet
  1318  0009F0  0100               	movlb	0	; () banked
  1319  0009F2  6F72               	movwf	(sendAX@buffer+1)& (0+255),b
  1320  0009F4  0E00               	movlw	0
  1321  0009F6  0100               	movlb	0	; () banked
  1322  0009F8  6F74               	movwf	(sendAX@packetSize+1)& (0+255),b
  1323  0009FA  0E05               	movlw	5
  1324  0009FC  6F73               	movwf	sendAX@packetSize& (0+255),b
  1325  0009FE  0E8A               	movlw	low pingAX@result
  1326  000A00  0100               	movlb	0	; () banked
  1327  000A02  6F75               	movwf	sendAX@result& (0+255),b
  1328  000A04  0E00               	movlw	high pingAX@result
  1329  000A06  0100               	movlb	0	; () banked
  1330  000A08  6F76               	movwf	(sendAX@result+1)& (0+255),b
  1331  000A0A  0E00               	movlw	0
  1332  000A0C  0100               	movlb	0	; () banked
  1333  000A0E  6F78               	movwf	(sendAX@parametersToRead+1)& (0+255),b
  1334  000A10  0E00               	movlw	0
  1335  000A12  6F77               	movwf	sendAX@parametersToRead& (0+255),b
  1336  000A14  EC47  F000         	call	_sendAX	;wreg free
  1337  000A18  0100               	movlb	0	; () banked
  1338  000A1A  6F89               	movwf	??_pingAX& (0+255),b
  1339  000A1C  0100               	movlb	0	; () banked
  1340  000A1E  5189               	movf	??_pingAX& (0+255),w,b
  1341  000A20  0100               	movlb	0	; () banked
  1342  000A22  6FB8               	movwf	pingAX@error& (0+255),b
  1343  000A24  6BB9               	clrf	(pingAX@error+1)& (0+255),b
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;ax.c: 194: return error;
  1347  000A26  C0B8  F087         	movff	pingAX@error,?_pingAX
  1348  000A2A  C0B9  F088         	movff	pingAX@error+1,?_pingAX+1
  1349  000A2E  0012               	return	
  1350  000A30                     __end_of_pingAX:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           intcon	equ	0xFF2
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _sendAX *****************
  1364 ;; Defined at:
  1365 ;;		line 129 in file "ax.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  buffer          2   17[BANK0 ] PTR unsigned char 
  1368 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  1369 ;;  packetSize      2   19[BANK0 ] int 
  1370 ;;  result          2   21[BANK0 ] PTR unsigned char 
  1371 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  1372 ;;  parametersTo    2   23[BANK0 ] int 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  i               2   36[BANK0 ] int 
  1375 ;;  i               2   32[BANK0 ] int 
  1376 ;;  i               2   30[BANK0 ] int 
  1377 ;;  i               2   28[BANK0 ] int 
  1378 ;;  r0              2   34[BANK0 ] int 
  1379 ;;  stop            2   26[BANK0 ] int 
  1380 ;;  checksum        1   38[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      unsigned char 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1390 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1391 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;Total ram usage:       22 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    8
  1397 ;; This function calls:
  1398 ;;		_EUSART1_Read
  1399 ;;		_EUSART1_Write
  1400 ;; This function is called by:
  1401 ;;		_pingAX
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text2
  1406  00008E                     __ptext2:
  1407                           	opt stack 0
  1408  00008E                     _sendAX:
  1409                           	opt stack 21
  1410                           
  1411                           ;ax.c: 130: uint8_t checksum = 0;
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;incstack = 0
  1415  00008E  0E00               	movlw	0
  1416  000090  0100               	movlb	0	; () banked
  1417  000092  6F86               	movwf	sendAX@checksum& (0+255),b
  1418                           
  1419                           ;ax.c: 132: for (int i = 2; i < packetSize; i++) {
  1420  000094  0E00               	movlw	0
  1421  000096  0100               	movlb	0	; () banked
  1422  000098  6F7D               	movwf	(sendAX@i+1)& (0+255),b
  1423  00009A  0E02               	movlw	2
  1424  00009C  6F7C               	movwf	sendAX@i& (0+255),b
  1425  00009E  D010               	goto	l2501
  1426  0000A0                     l2497:
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;ax.c: 133: checksum += buffer[i];
  1430  0000A0  0100               	movlb	0	; () banked
  1431  0000A2  517C               	movf	sendAX@i& (0+255),w,b
  1432  0000A4  0100               	movlb	0	; () banked
  1433  0000A6  2571               	addwf	sendAX@buffer& (0+255),w,b
  1434  0000A8  6ED9               	movwf	fsr2l,c
  1435  0000AA  0100               	movlb	0	; () banked
  1436  0000AC  517D               	movf	(sendAX@i+1)& (0+255),w,b
  1437  0000AE  0100               	movlb	0	; () banked
  1438  0000B0  2172               	addwfc	(sendAX@buffer+1)& (0+255),w,b
  1439  0000B2  6EDA               	movwf	fsr2h,c
  1440  0000B4  50DF               	movf	indf2,w,c
  1441  0000B6  0100               	movlb	0	; () banked
  1442  0000B8  2786               	addwf	sendAX@checksum& (0+255),f,b
  1443                           
  1444                           ; BSR set to: 0
  1445  0000BA  0100               	movlb	0	; () banked
  1446  0000BC  4B7C               	infsnz	sendAX@i& (0+255),f,b
  1447  0000BE  2B7D               	incf	(sendAX@i+1)& (0+255),f,b
  1448  0000C0                     l2501:
  1449                           
  1450                           ; BSR set to: 0
  1451  0000C0  0100               	movlb	0	; () banked
  1452  0000C2  5173               	movf	sendAX@packetSize& (0+255),w,b
  1453  0000C4  0100               	movlb	0	; () banked
  1454  0000C6  5D7C               	subwf	sendAX@i& (0+255),w,b
  1455  0000C8  0100               	movlb	0	; () banked
  1456  0000CA  517D               	movf	(sendAX@i+1)& (0+255),w,b
  1457  0000CC  0A80               	xorlw	128
  1458  0000CE  0100               	movlb	0	; () banked
  1459  0000D0  6F79               	movwf	??_sendAX& (0+255),b
  1460  0000D2  0100               	movlb	0	; () banked
  1461  0000D4  5174               	movf	(sendAX@packetSize+1)& (0+255),w,b
  1462  0000D6  0A80               	xorlw	128
  1463  0000D8  0100               	movlb	0	; () banked
  1464  0000DA  5979               	subwfb	??_sendAX& (0+255),w,b
  1465  0000DC  A0D8               	btfss	status,0,c
  1466  0000DE  D7E0               	goto	l2497
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;ax.c: 134: }
  1470                           ;ax.c: 135: checksum = ~checksum;
  1471                           
  1472                           ; BSR set to: 0
  1473  0000E0  0100               	movlb	0	; () banked
  1474  0000E2  1F86               	comf	sendAX@checksum& (0+255),f,b
  1475                           
  1476                           ; BSR set to: 0
  1477                           
  1478                           ; BSR set to: 0
  1479                           
  1480                           ;ax.c: 137: do { LATD4 = 1; } while(0);
  1481  0000E4  888C               	bsf	3980,4,c	;volatile
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;ax.c: 138: for (int i = 0; i < packetSize; i++) {
  1485                           
  1486                           ; BSR set to: 0
  1487  0000E6  0E00               	movlw	0
  1488  0000E8  0100               	movlb	0	; () banked
  1489  0000EA  6F7F               	movwf	(sendAX@i_1221+1)& (0+255),b
  1490  0000EC  0E00               	movlw	0
  1491  0000EE  6F7E               	movwf	sendAX@i_1221& (0+255),b
  1492  0000F0  D010               	goto	l2513
  1493  0000F2                     l2509:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;ax.c: 139: EUSART1_Write(buffer[i]);
  1497  0000F2  0100               	movlb	0	; () banked
  1498  0000F4  517E               	movf	sendAX@i_1221& (0+255),w,b
  1499  0000F6  0100               	movlb	0	; () banked
  1500  0000F8  2571               	addwf	sendAX@buffer& (0+255),w,b
  1501  0000FA  6ED9               	movwf	fsr2l,c
  1502  0000FC  0100               	movlb	0	; () banked
  1503  0000FE  517F               	movf	(sendAX@i_1221+1)& (0+255),w,b
  1504  000100  0100               	movlb	0	; () banked
  1505  000102  2172               	addwfc	(sendAX@buffer+1)& (0+255),w,b
  1506  000104  6EDA               	movwf	fsr2h,c
  1507  000106  50DF               	movf	indf2,w,c
  1508  000108  EC5E  F007         	call	_EUSART1_Write
  1509  00010C  0100               	movlb	0	; () banked
  1510  00010E  4B7E               	infsnz	sendAX@i_1221& (0+255),f,b
  1511  000110  2B7F               	incf	(sendAX@i_1221+1)& (0+255),f,b
  1512  000112                     l2513:
  1513                           
  1514                           ; BSR set to: 0
  1515  000112  0100               	movlb	0	; () banked
  1516  000114  5173               	movf	sendAX@packetSize& (0+255),w,b
  1517  000116  0100               	movlb	0	; () banked
  1518  000118  5D7E               	subwf	sendAX@i_1221& (0+255),w,b
  1519  00011A  0100               	movlb	0	; () banked
  1520  00011C  517F               	movf	(sendAX@i_1221+1)& (0+255),w,b
  1521  00011E  0A80               	xorlw	128
  1522  000120  0100               	movlb	0	; () banked
  1523  000122  6F79               	movwf	??_sendAX& (0+255),b
  1524  000124  0100               	movlb	0	; () banked
  1525  000126  5174               	movf	(sendAX@packetSize+1)& (0+255),w,b
  1526  000128  0A80               	xorlw	128
  1527  00012A  0100               	movlb	0	; () banked
  1528  00012C  5979               	subwfb	??_sendAX& (0+255),w,b
  1529  00012E  A0D8               	btfss	status,0,c
  1530  000130  D7E0               	goto	l2509
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;ax.c: 140: }
  1534                           ;ax.c: 141: EUSART1_Write(checksum);
  1535                           
  1536                           ; BSR set to: 0
  1537  000132  0100               	movlb	0	; () banked
  1538  000134  5186               	movf	sendAX@checksum& (0+255),w,b
  1539  000136  EC5E  F007         	call	_EUSART1_Write
  1540                           
  1541                           ;ax.c: 142: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1542  00013A  0E85               	movlw	133
  1543  00013C                     u1097:
  1544  00013C  2EE8               	decfsz	wreg,f,c
  1545  00013E  D7FE               	goto	u1097
  1546  000140  F000               	nop	
  1547                           
  1548                           ;ax.c: 143: do { LATD4 = 0; } while(0);
  1549  000142  988C               	bcf	3980,4,c	;volatile
  1550                           
  1551                           ;ax.c: 159: int stop = 6 + parametersToRead;
  1552  000144  0E06               	movlw	6
  1553  000146  0100               	movlb	0	; () banked
  1554  000148  2577               	addwf	sendAX@parametersToRead& (0+255),w,b
  1555  00014A  0100               	movlb	0	; () banked
  1556  00014C  6F7A               	movwf	sendAX@stop& (0+255),b
  1557  00014E  0E00               	movlw	0
  1558  000150  0100               	movlb	0	; () banked
  1559  000152  2178               	addwfc	(sendAX@parametersToRead+1)& (0+255),w,b
  1560  000154  0100               	movlb	0	; () banked
  1561  000156  6F7B               	movwf	(sendAX@stop+1)& (0+255),b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;ax.c: 161: for (int i = 0; i < stop; i++) {
  1565  000158  0E00               	movlw	0
  1566  00015A  0100               	movlb	0	; () banked
  1567  00015C  6F81               	movwf	(sendAX@i_1224+1)& (0+255),b
  1568  00015E  0E00               	movlw	0
  1569  000160  6F80               	movwf	sendAX@i_1224& (0+255),b
  1570  000162  D00F               	goto	l2529
  1571  000164                     l2525:
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;ax.c: 162: result[i] = 122;
  1575  000164  0100               	movlb	0	; () banked
  1576  000166  5180               	movf	sendAX@i_1224& (0+255),w,b
  1577  000168  0100               	movlb	0	; () banked
  1578  00016A  2575               	addwf	sendAX@result& (0+255),w,b
  1579  00016C  6ED9               	movwf	fsr2l,c
  1580  00016E  0100               	movlb	0	; () banked
  1581  000170  5181               	movf	(sendAX@i_1224+1)& (0+255),w,b
  1582  000172  0100               	movlb	0	; () banked
  1583  000174  2176               	addwfc	(sendAX@result+1)& (0+255),w,b
  1584  000176  6EDA               	movwf	fsr2h,c
  1585  000178  0E7A               	movlw	122
  1586  00017A  6EDF               	movwf	indf2,c
  1587                           
  1588                           ; BSR set to: 0
  1589  00017C  0100               	movlb	0	; () banked
  1590  00017E  4B80               	infsnz	sendAX@i_1224& (0+255),f,b
  1591  000180  2B81               	incf	(sendAX@i_1224+1)& (0+255),f,b
  1592  000182                     l2529:
  1593                           
  1594                           ; BSR set to: 0
  1595  000182  0100               	movlb	0	; () banked
  1596  000184  517A               	movf	sendAX@stop& (0+255),w,b
  1597  000186  0100               	movlb	0	; () banked
  1598  000188  5D80               	subwf	sendAX@i_1224& (0+255),w,b
  1599  00018A  0100               	movlb	0	; () banked
  1600  00018C  5181               	movf	(sendAX@i_1224+1)& (0+255),w,b
  1601  00018E  0A80               	xorlw	128
  1602  000190  0100               	movlb	0	; () banked
  1603  000192  6F79               	movwf	??_sendAX& (0+255),b
  1604  000194  0100               	movlb	0	; () banked
  1605  000196  517B               	movf	(sendAX@stop+1)& (0+255),w,b
  1606  000198  0A80               	xorlw	128
  1607  00019A  0100               	movlb	0	; () banked
  1608  00019C  5979               	subwfb	??_sendAX& (0+255),w,b
  1609  00019E  A0D8               	btfss	status,0,c
  1610  0001A0  D7E1               	goto	l2525
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;ax.c: 163: }
  1614                           ;ax.c: 165: int r0 = EUSART1_Read();
  1615                           
  1616                           ; BSR set to: 0
  1617  0001A2  EC33  F007         	call	_EUSART1_Read	;wreg free
  1618  0001A6  D002               	goto	L2
  1619  0001A8                     l2533:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;ax.c: 167: r0 = EUSART1_Read();
  1623  0001A8  EC33  F007         	call	_EUSART1_Read	;wreg free
  1624  0001AC                     L2:
  1625  0001AC  0100               	movlb	0	; () banked
  1626  0001AE  6F79               	movwf	??_sendAX& (0+255),b
  1627  0001B0  0100               	movlb	0	; () banked
  1628  0001B2  5179               	movf	??_sendAX& (0+255),w,b
  1629  0001B4  0100               	movlb	0	; () banked
  1630  0001B6  6F82               	movwf	sendAX@r0& (0+255),b
  1631  0001B8  6B83               	clrf	(sendAX@r0+1)& (0+255),b
  1632                           
  1633                           ; BSR set to: 0
  1634                           
  1635                           ; BSR set to: 0
  1636  0001BA  0100               	movlb	0	; () banked
  1637  0001BC  2982               	incf	sendAX@r0& (0+255),w,b
  1638  0001BE  0100               	movlb	0	; () banked
  1639  0001C0  1183               	iorwf	(sendAX@r0+1)& (0+255),w,b
  1640  0001C2  A4D8               	btfss	status,2,c
  1641  0001C4  D7F1               	goto	l2533
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;ax.c: 168: }
  1645                           ;ax.c: 169: result[0] = r0;
  1646                           
  1647                           ; BSR set to: 0
  1648  0001C6  C075  FFD9         	movff	sendAX@result,fsr2l
  1649  0001CA  C076  FFDA         	movff	sendAX@result+1,fsr2h
  1650  0001CE  C082  FFDF         	movff	sendAX@r0,indf2
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;ax.c: 170: for (int i = 1; i < stop; i++) {
  1654  0001D2  0E00               	movlw	0
  1655  0001D4  0100               	movlb	0	; () banked
  1656  0001D6  6F85               	movwf	(sendAX@i_1227+1)& (0+255),b
  1657  0001D8  0E01               	movlw	1
  1658  0001DA  6F84               	movwf	sendAX@i_1227& (0+255),b
  1659  0001DC  D010               	goto	l2545
  1660  0001DE                     l2541:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;ax.c: 171: result[i] = EUSART1_Read();
  1664  0001DE  0100               	movlb	0	; () banked
  1665  0001E0  5184               	movf	sendAX@i_1227& (0+255),w,b
  1666  0001E2  0100               	movlb	0	; () banked
  1667  0001E4  2575               	addwf	sendAX@result& (0+255),w,b
  1668  0001E6  6ED9               	movwf	fsr2l,c
  1669  0001E8  0100               	movlb	0	; () banked
  1670  0001EA  5185               	movf	(sendAX@i_1227+1)& (0+255),w,b
  1671  0001EC  0100               	movlb	0	; () banked
  1672  0001EE  2176               	addwfc	(sendAX@result+1)& (0+255),w,b
  1673  0001F0  6EDA               	movwf	fsr2h,c
  1674  0001F2  EC33  F007         	call	_EUSART1_Read	;wreg free
  1675  0001F6  6EDF               	movwf	indf2,c
  1676  0001F8  0100               	movlb	0	; () banked
  1677  0001FA  4B84               	infsnz	sendAX@i_1227& (0+255),f,b
  1678  0001FC  2B85               	incf	(sendAX@i_1227+1)& (0+255),f,b
  1679  0001FE                     l2545:
  1680                           
  1681                           ; BSR set to: 0
  1682  0001FE  0100               	movlb	0	; () banked
  1683  000200  517A               	movf	sendAX@stop& (0+255),w,b
  1684  000202  0100               	movlb	0	; () banked
  1685  000204  5D84               	subwf	sendAX@i_1227& (0+255),w,b
  1686  000206  0100               	movlb	0	; () banked
  1687  000208  5185               	movf	(sendAX@i_1227+1)& (0+255),w,b
  1688  00020A  0A80               	xorlw	128
  1689  00020C  0100               	movlb	0	; () banked
  1690  00020E  6F79               	movwf	??_sendAX& (0+255),b
  1691  000210  0100               	movlb	0	; () banked
  1692  000212  517B               	movf	(sendAX@stop+1)& (0+255),w,b
  1693  000214  0A80               	xorlw	128
  1694  000216  0100               	movlb	0	; () banked
  1695  000218  5979               	subwfb	??_sendAX& (0+255),w,b
  1696  00021A  A0D8               	btfss	status,0,c
  1697  00021C  D7E0               	goto	l2541
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;ax.c: 172: }
  1701                           ;ax.c: 175: _delay((unsigned long)((200)*(16000000/4000000.0)));
  1702                           
  1703                           ; BSR set to: 0
  1704  00021E  0EC8               	movlw	200
  1705  000220                     u1107:
  1706  000220  F000               	nop	
  1707  000222  2EE8               	decfsz	wreg,f,c
  1708  000224  D7FD               	goto	u1107
  1709                           
  1710                           ;ax.c: 176: return result[4];
  1711  000226  0100               	movlb	0	; () banked
  1712  000228  EE20 F004          	lfsr	2,4
  1713  00022C  5175               	movf	sendAX@result& (0+255),w,b
  1714  00022E  26D9               	addwf	fsr2l,f,c
  1715  000230  5176               	movf	(sendAX@result+1)& (0+255),w,b
  1716  000232  22DA               	addwfc	fsr2h,f,c
  1717  000234  50DF               	movf	indf2,w,c
  1718  000236  0012               	return	
  1719  000238                     __end_of_sendAX:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           intcon	equ	0xFF2
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           postdec1	equ	0xFE5
  1729                           fsr1l	equ	0xFE1
  1730                           indf2	equ	0xFDF
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _EUSART1_Write *****************
  1736 ;; Defined at:
  1737 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  txData          1    wreg     unsigned char 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  txData          1   16[BANK0 ] unsigned char 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1754 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1755 ;;Total ram usage:        1 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    7
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_sendAX
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text3
  1766  000EBC                     __ptext3:
  1767                           	opt stack 0
  1768  000EBC                     _EUSART1_Write:
  1769                           	opt stack 21
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;incstack = 0
  1773                           ;EUSART1_Write@txData stored from wreg
  1774  000EBC  0100               	movlb	0	; () banked
  1775  000EBE  6F70               	movwf	EUSART1_Write@txData& (0+255),b
  1776  000EC0                     l122:
  1777  000EC0  A89E               	btfss	3998,4,c	;volatile
  1778  000EC2  D7FE               	goto	l122
  1779                           
  1780                           ;eusart1.c: 101: }
  1781                           ;eusart1.c: 103: TXREG1 = txData;
  1782  000EC4  C070  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1783  000EC8  0012               	return		;funcret
  1784  000ECA                     __end_of_EUSART1_Write:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           intcon	equ	0xFF2
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postdec1	equ	0xFE5
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _EUSART1_Read *****************
  1801 ;; Defined at:
  1802 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      unsigned char 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1820 ;;Total ram usage:        0 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    7
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_sendAX
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text4
  1831  000E66                     __ptext4:
  1832                           	opt stack 0
  1833  000E66                     _EUSART1_Read:
  1834                           	opt stack 21
  1835                           
  1836                           ;eusart1.c: 80: RCSTA1bits.SREN = 1;
  1837                           
  1838                           ;incstack = 0
  1839  000E66  8AAB               	bsf	4011,5,c	;volatile
  1840  000E68                     l115:
  1841  000E68  AA9E               	btfss	3998,5,c	;volatile
  1842  000E6A  D7FE               	goto	l115
  1843                           
  1844                           ;eusart1.c: 83: }
  1845                           ;eusart1.c: 86: if(1 == RCSTA1bits.OERR)
  1846  000E6C  A2AB               	btfss	4011,1,c	;volatile
  1847  000E6E  D002               	goto	l2293
  1848                           
  1849                           ;eusart1.c: 87: {
  1850                           ;eusart1.c: 90: RCSTA1bits.SPEN = 0;
  1851  000E70  9EAB               	bcf	4011,7,c	;volatile
  1852                           
  1853                           ;eusart1.c: 91: RCSTA1bits.SPEN = 1;
  1854  000E72  8EAB               	bsf	4011,7,c	;volatile
  1855  000E74                     l2293:
  1856                           
  1857                           ;eusart1.c: 92: }
  1858                           ;eusart1.c: 94: return RCREG1;
  1859  000E74  50AE               	movf	4014,w,c	;volatile
  1860  000E76  0012               	return	
  1861  000E78                     __end_of_EUSART1_Read:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           intcon	equ	0xFF2
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           indf2	equ	0xFDF
  1873                           fsr2h	equ	0xFDA
  1874                           fsr2l	equ	0xFD9
  1875                           status	equ	0xFD8
  1876                           
  1877 ;; *************** function _delay_ms *****************
  1878 ;; Defined at:
  1879 ;;		line 11 in file "ax.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  ms              2   24[BANK0 ] int 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  i               2   29[BANK0 ] int 
  1884 ;;  n               2   27[BANK0 ] int 
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2, status,0, cstack
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1895 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1897 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1898 ;;Total ram usage:        7 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    8
  1901 ;; This function calls:
  1902 ;;		___awdiv
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;;		_I2C_StatusCallbackOld
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text5
  1910  000922                     __ptext5:
  1911                           	opt stack 0
  1912  000922                     _delay_ms:
  1913                           	opt stack 22
  1914                           
  1915                           ;ax.c: 12: if (ms < 10) {
  1916                           
  1917                           ;incstack = 0
  1918  000922  0100               	movlb	0	; () banked
  1919  000924  BF79               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  1920  000926  D008               	goto	l2639
  1921  000928  0100               	movlb	0	; () banked
  1922  00092A  5179               	movf	(delay_ms@ms+1)& (0+255),w,b
  1923  00092C  E10E               	bnz	l2641
  1924  00092E  0E0A               	movlw	10
  1925  000930  0100               	movlb	0	; () banked
  1926  000932  5D78               	subwf	delay_ms@ms& (0+255),w,b
  1927  000934  B0D8               	btfsc	status,0,c
  1928  000936  D009               	goto	l2641
  1929  000938                     l2639:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;ax.c: 13: _delay((unsigned long)((10)*(16000000/4000.0)));
  1933  000938  0E34               	movlw	52
  1934  00093A  0100               	movlb	0	; () banked
  1935  00093C  6F7A               	movwf	??_delay_ms& (0+255),b
  1936  00093E  0EF2               	movlw	242
  1937  000940                     u1117:
  1938  000940  2EE8               	decfsz	wreg,f,c
  1939  000942  D7FE               	goto	u1117
  1940  000944  2F7A               	decfsz	??_delay_ms& (0+255),f,b
  1941  000946  D7FC               	goto	u1117
  1942                           
  1943                           ;ax.c: 14: } else {
  1944  000948  0012               	return	
  1945  00094A                     l2641:
  1946                           
  1947                           ;ax.c: 15: int n = ms / 10;
  1948  00094A  C078  F070         	movff	delay_ms@ms,___awdiv@dividend
  1949  00094E  C079  F071         	movff	delay_ms@ms+1,___awdiv@dividend+1
  1950  000952  0E00               	movlw	0
  1951  000954  0100               	movlb	0	; () banked
  1952  000956  6F73               	movwf	(___awdiv@divisor+1)& (0+255),b
  1953  000958  0E0A               	movlw	10
  1954  00095A  6F72               	movwf	___awdiv@divisor& (0+255),b
  1955  00095C  ECA0  F003         	call	___awdiv	;wreg free
  1956  000960  C070  F07B         	movff	?___awdiv,delay_ms@n
  1957  000964  C071  F07C         	movff	?___awdiv+1,delay_ms@n+1
  1958                           
  1959                           ;ax.c: 16: for (int i = 0; i < n; i++) {
  1960  000968  0E00               	movlw	0
  1961  00096A  0100               	movlb	0	; () banked
  1962  00096C  6F7E               	movwf	(delay_ms@i+1)& (0+255),b
  1963  00096E  0E00               	movlw	0
  1964  000970  6F7D               	movwf	delay_ms@i& (0+255),b
  1965  000972  D00B               	goto	l460
  1966  000974                     l2645:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;ax.c: 17: _delay((unsigned long)((10)*(16000000/4000.0)));
  1970  000974  0E34               	movlw	52
  1971  000976  0100               	movlb	0	; () banked
  1972  000978  6F7A               	movwf	??_delay_ms& (0+255),b
  1973  00097A  0EF2               	movlw	242
  1974  00097C                     u1127:
  1975  00097C  2EE8               	decfsz	wreg,f,c
  1976  00097E  D7FE               	goto	u1127
  1977  000980  2F7A               	decfsz	??_delay_ms& (0+255),f,b
  1978  000982  D7FC               	goto	u1127
  1979  000984  0100               	movlb	0	; () banked
  1980  000986  4B7D               	infsnz	delay_ms@i& (0+255),f,b
  1981  000988  2B7E               	incf	(delay_ms@i+1)& (0+255),f,b
  1982  00098A                     l460:
  1983                           
  1984                           ; BSR set to: 0
  1985  00098A  0100               	movlb	0	; () banked
  1986  00098C  517B               	movf	delay_ms@n& (0+255),w,b
  1987  00098E  0100               	movlb	0	; () banked
  1988  000990  5D7D               	subwf	delay_ms@i& (0+255),w,b
  1989  000992  0100               	movlb	0	; () banked
  1990  000994  517E               	movf	(delay_ms@i+1)& (0+255),w,b
  1991  000996  0A80               	xorlw	128
  1992  000998  0100               	movlb	0	; () banked
  1993  00099A  6F7A               	movwf	??_delay_ms& (0+255),b
  1994  00099C  0100               	movlb	0	; () banked
  1995  00099E  517C               	movf	(delay_ms@n+1)& (0+255),w,b
  1996  0009A0  0A80               	xorlw	128
  1997  0009A2  0100               	movlb	0	; () banked
  1998  0009A4  597A               	subwfb	??_delay_ms& (0+255),w,b
  1999  0009A6  B0D8               	btfsc	status,0,c
  2000  0009A8  0012               	return	
  2001  0009AA  D7E4               	goto	l2645
  2002  0009AC                     __end_of_delay_ms:
  2003                           	opt stack 0
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           intcon	equ	0xFF2
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postdec1	equ	0xFE5
  2012                           fsr1l	equ	0xFE1
  2013                           indf2	equ	0xFDF
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function ___awdiv *****************
  2019 ;; Defined at:
  2020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  dividend        2   16[BANK0 ] int 
  2023 ;;  divisor         2   18[BANK0 ] int 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  quotient        2   22[BANK0 ] int 
  2026 ;;  sign            1   21[BANK0 ] unsigned char 
  2027 ;;  counter         1   20[BANK0 ] unsigned char 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2   16[BANK0 ] int 
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2037 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2040 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2041 ;;Total ram usage:        8 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    7
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_delay_ms
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text6
  2052  000740                     __ptext6:
  2053                           	opt stack 0
  2054  000740                     ___awdiv:
  2055                           	opt stack 22
  2056                           
  2057                           ;incstack = 0
  2058  000740  0E00               	movlw	0
  2059  000742  0100               	movlb	0	; () banked
  2060  000744  6F75               	movwf	___awdiv@sign& (0+255),b
  2061                           
  2062                           ; BSR set to: 0
  2063  000746  0100               	movlb	0	; () banked
  2064  000748  AF73               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2065  00074A  D008               	goto	l2561
  2066                           
  2067                           ; BSR set to: 0
  2068  00074C  0100               	movlb	0	; () banked
  2069  00074E  6D72               	negf	___awdiv@divisor& (0+255),b
  2070  000750  1F73               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2071  000752  B0D8               	btfsc	status,0,c
  2072  000754  2B73               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2073                           
  2074                           ; BSR set to: 0
  2075  000756  0E01               	movlw	1
  2076  000758  0100               	movlb	0	; () banked
  2077  00075A  6F75               	movwf	___awdiv@sign& (0+255),b
  2078  00075C                     l2561:
  2079                           
  2080                           ; BSR set to: 0
  2081  00075C  0100               	movlb	0	; () banked
  2082  00075E  AF71               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2083  000760  D008               	goto	l2567
  2084                           
  2085                           ; BSR set to: 0
  2086  000762  0100               	movlb	0	; () banked
  2087  000764  6D70               	negf	___awdiv@dividend& (0+255),b
  2088  000766  1F71               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2089  000768  B0D8               	btfsc	status,0,c
  2090  00076A  2B71               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2091                           
  2092                           ; BSR set to: 0
  2093  00076C  0E01               	movlw	1
  2094  00076E  0100               	movlb	0	; () banked
  2095  000770  1B75               	xorwf	___awdiv@sign& (0+255),f,b
  2096  000772                     l2567:
  2097                           
  2098                           ; BSR set to: 0
  2099  000772  0E00               	movlw	0
  2100  000774  0100               	movlb	0	; () banked
  2101  000776  6F77               	movwf	(___awdiv@quotient+1)& (0+255),b
  2102  000778  0E00               	movlw	0
  2103  00077A  6F76               	movwf	___awdiv@quotient& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106  00077C  0100               	movlb	0	; () banked
  2107  00077E  5172               	movf	___awdiv@divisor& (0+255),w,b
  2108  000780  0100               	movlb	0	; () banked
  2109  000782  1173               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2110  000784  B4D8               	btfsc	status,2,c
  2111  000786  D02C               	goto	l2589
  2112                           
  2113                           ; BSR set to: 0
  2114  000788  0E01               	movlw	1
  2115  00078A  0100               	movlb	0	; () banked
  2116  00078C  6F74               	movwf	___awdiv@counter& (0+255),b
  2117  00078E  D006               	goto	l2575
  2118  000790                     l2573:
  2119                           
  2120                           ; BSR set to: 0
  2121  000790  0100               	movlb	0	; () banked
  2122  000792  90D8               	bcf	status,0,c
  2123  000794  3772               	rlcf	___awdiv@divisor& (0+255),f,b
  2124  000796  3773               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2125  000798  0100               	movlb	0	; () banked
  2126  00079A  2B74               	incf	___awdiv@counter& (0+255),f,b
  2127  00079C                     l2575:
  2128                           
  2129                           ; BSR set to: 0
  2130  00079C  0100               	movlb	0	; () banked
  2131  00079E  AF73               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2132  0007A0  D7F7               	goto	l2573
  2133  0007A2                     l2577:
  2134                           
  2135                           ; BSR set to: 0
  2136  0007A2  0100               	movlb	0	; () banked
  2137  0007A4  90D8               	bcf	status,0,c
  2138  0007A6  3776               	rlcf	___awdiv@quotient& (0+255),f,b
  2139  0007A8  3777               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2140                           
  2141                           ; BSR set to: 0
  2142  0007AA  0100               	movlb	0	; () banked
  2143  0007AC  5172               	movf	___awdiv@divisor& (0+255),w,b
  2144  0007AE  0100               	movlb	0	; () banked
  2145  0007B0  5D70               	subwf	___awdiv@dividend& (0+255),w,b
  2146  0007B2  0100               	movlb	0	; () banked
  2147  0007B4  5173               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2148  0007B6  0100               	movlb	0	; () banked
  2149  0007B8  5971               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2150  0007BA  A0D8               	btfss	status,0,c
  2151  0007BC  D00A               	goto	l2585
  2152                           
  2153                           ; BSR set to: 0
  2154  0007BE  0100               	movlb	0	; () banked
  2155  0007C0  5172               	movf	___awdiv@divisor& (0+255),w,b
  2156  0007C2  0100               	movlb	0	; () banked
  2157  0007C4  5F70               	subwf	___awdiv@dividend& (0+255),f,b
  2158  0007C6  0100               	movlb	0	; () banked
  2159  0007C8  5173               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2160  0007CA  0100               	movlb	0	; () banked
  2161  0007CC  5B71               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2162                           
  2163                           ; BSR set to: 0
  2164  0007CE  0100               	movlb	0	; () banked
  2165  0007D0  8176               	bsf	___awdiv@quotient& (0+255),0,b
  2166  0007D2                     l2585:
  2167                           
  2168                           ; BSR set to: 0
  2169  0007D2  0100               	movlb	0	; () banked
  2170  0007D4  90D8               	bcf	status,0,c
  2171  0007D6  3373               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2172  0007D8  3372               	rrcf	___awdiv@divisor& (0+255),f,b
  2173                           
  2174                           ; BSR set to: 0
  2175  0007DA  0100               	movlb	0	; () banked
  2176  0007DC  2F74               	decfsz	___awdiv@counter& (0+255),f,b
  2177  0007DE  D7E1               	goto	l2577
  2178  0007E0                     l2589:
  2179                           
  2180                           ; BSR set to: 0
  2181  0007E0  0100               	movlb	0	; () banked
  2182  0007E2  5175               	movf	___awdiv@sign& (0+255),w,b
  2183  0007E4  0100               	movlb	0	; () banked
  2184  0007E6  B4D8               	btfsc	status,2,c
  2185  0007E8  D005               	goto	l2593
  2186                           
  2187                           ; BSR set to: 0
  2188  0007EA  0100               	movlb	0	; () banked
  2189  0007EC  6D76               	negf	___awdiv@quotient& (0+255),b
  2190  0007EE  1F77               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2191  0007F0  B0D8               	btfsc	status,0,c
  2192  0007F2  2B77               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2193  0007F4                     l2593:
  2194                           
  2195                           ; BSR set to: 0
  2196  0007F4  C076  F070         	movff	___awdiv@quotient,?___awdiv
  2197  0007F8  C077  F071         	movff	___awdiv@quotient+1,?___awdiv+1
  2198  0007FC  0012               	return	
  2199  0007FE                     __end_of___awdiv:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           intcon	equ	0xFF2
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           postdec1	equ	0xFE5
  2209                           fsr1l	equ	0xFE1
  2210                           indf2	equ	0xFDF
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           
  2215 ;; *************** function _SYSTEM_Initialize *****************
  2216 ;; Defined at:
  2217 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;		None
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;Total ram usage:        0 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    9
  2238 ;; This function calls:
  2239 ;;		_ADC_Initialize
  2240 ;;		_ECCP1_Initialize
  2241 ;;		_EUSART1_Initialize
  2242 ;;		_EUSART2_Initialize
  2243 ;;		_I2C_Initialize
  2244 ;;		_INTERRUPT_Initialize
  2245 ;;		_OSCILLATOR_Initialize
  2246 ;;		_PIN_MANAGER_Initialize
  2247 ;;		_TMR1_Initialize
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text7
  2254  000DE4                     __ptext7:
  2255                           	opt stack 0
  2256  000DE4                     _SYSTEM_Initialize:
  2257                           	opt stack 21
  2258                           
  2259                           ;mcc.c: 113: INTERRUPT_Initialize();
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;incstack = 0
  2263  000DE4  EC6B  F007         	call	_INTERRUPT_Initialize	;wreg free
  2264                           
  2265                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  2266  000DE8  ECC2  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  2267                           
  2268                           ;mcc.c: 115: OSCILLATOR_Initialize();
  2269  000DEC  EC3C  F007         	call	_OSCILLATOR_Initialize	;wreg free
  2270                           
  2271                           ;mcc.c: 116: I2C_Initialize();
  2272  000DF0  EC05  F007         	call	_I2C_Initialize	;wreg free
  2273                           
  2274                           ;mcc.c: 117: ECCP1_Initialize();
  2275  000DF4  EC4E  F007         	call	_ECCP1_Initialize	;wreg free
  2276                           
  2277                           ;mcc.c: 118: ADC_Initialize();
  2278  000DF8  EC28  F007         	call	_ADC_Initialize	;wreg free
  2279                           
  2280                           ;mcc.c: 119: TMR1_Initialize();
  2281  000DFC  ECA5  F006         	call	_TMR1_Initialize	;wreg free
  2282                           
  2283                           ;mcc.c: 120: EUSART1_Initialize();
  2284  000E00  EC1D  F007         	call	_EUSART1_Initialize	;wreg free
  2285                           
  2286                           ;mcc.c: 121: EUSART2_Initialize();
  2287  000E04  EC12  F007         	call	_EUSART2_Initialize	;wreg free
  2288  000E08  0012               	return		;funcret
  2289  000E0A                     __end_of_SYSTEM_Initialize:
  2290                           	opt stack 0
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           intcon	equ	0xFF2
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           postdec1	equ	0xFE5
  2299                           fsr1l	equ	0xFE1
  2300                           indf2	equ	0xFDF
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function _TMR1_Initialize *****************
  2306 ;; Defined at:
  2307 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2325 ;;Total ram usage:        2 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    8
  2328 ;; This function calls:
  2329 ;;		_TMR1_StartTimer
  2330 ;; This function is called by:
  2331 ;;		_SYSTEM_Initialize
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text8
  2336  000D4A                     __ptext8:
  2337                           	opt stack 0
  2338  000D4A                     _TMR1_Initialize:
  2339                           	opt stack 21
  2340                           
  2341                           ;tmr1.c: 67: T1CON = 0x00;
  2342                           
  2343                           ;incstack = 0
  2344  000D4A  0E00               	movlw	0
  2345  000D4C  6ECD               	movwf	4045,c	;volatile
  2346                           
  2347                           ;tmr1.c: 70: T1GCON = 0x00;
  2348  000D4E  0E00               	movlw	0
  2349  000D50  6EAA               	movwf	4010,c	;volatile
  2350                           
  2351                           ;tmr1.c: 73: TMR1H = 0x00;
  2352  000D52  0E00               	movlw	0
  2353  000D54  6ECF               	movwf	4047,c	;volatile
  2354                           
  2355                           ;tmr1.c: 76: TMR1L = 0x00;
  2356  000D56  0E00               	movlw	0
  2357  000D58  6ECE               	movwf	4046,c	;volatile
  2358                           
  2359                           ;tmr1.c: 79: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2360  000D5A  50CE               	movf	4046,w,c	;volatile
  2361  000D5C  CFCF F070          	movff	4047,??_TMR1_Initialize	;volatile
  2362  000D60  0100               	movlb	0	; () banked
  2363  000D62  6B71               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  2364  000D64  C070  F071         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  2365  000D68  0100               	movlb	0	; () banked
  2366  000D6A  6B70               	clrf	??_TMR1_Initialize& (0+255),b
  2367  000D6C  0100               	movlb	0	; () banked
  2368  000D6E  1170               	iorwf	??_TMR1_Initialize& (0+255),w,b
  2369  000D70  0100               	movlb	0	; () banked
  2370  000D72  6FEB               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  2371  000D74  0100               	movlb	0	; () banked
  2372  000D76  5171               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  2373  000D78  0100               	movlb	0	; () banked
  2374  000D7A  6FEC               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  2378  000D7C  909E               	bcf	3998,0,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;tmr1.c: 85: TMR1_StartTimer();
  2382  000D7E  EC6E  F007         	call	_TMR1_StartTimer	;wreg free
  2383  000D82  0012               	return		;funcret
  2384  000D84                     __end_of_TMR1_Initialize:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _TMR1_StartTimer *****************
  2401 ;; Defined at:
  2402 ;;		line 88 in file "mcc_generated_files/tmr1.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		None
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2420 ;;Total ram usage:        0 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    7
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_TMR1_Initialize
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text9
  2431  000EDC                     __ptext9:
  2432                           	opt stack 0
  2433  000EDC                     _TMR1_StartTimer:
  2434                           	opt stack 21
  2435                           
  2436                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
  2437                           
  2438                           ;incstack = 0
  2439  000EDC  80CD               	bsf	4045,0,c	;volatile
  2440  000EDE  0012               	return		;funcret
  2441  000EE0                     __end_of_TMR1_StartTimer:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           intcon	equ	0xFF2
  2448                           postinc0	equ	0xFEE
  2449                           wreg	equ	0xFE8
  2450                           postdec1	equ	0xFE5
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _PIN_MANAGER_Initialize *****************
  2458 ;; Defined at:
  2459 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;		None
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;		None
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;Total ram usage:        0 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    7
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_SYSTEM_Initialize
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text10
  2488  000D84                     __ptext10:
  2489                           	opt stack 0
  2490  000D84                     _PIN_MANAGER_Initialize:
  2491                           	opt stack 22
  2492                           
  2493                           ;pin_manager.c: 51: LATB = 0x0;
  2494                           
  2495                           ;incstack = 0
  2496  000D84  0E00               	movlw	0
  2497  000D86  6E8A               	movwf	3978,c	;volatile
  2498                           
  2499                           ;pin_manager.c: 52: LATA = 0x0;
  2500  000D88  0E00               	movlw	0
  2501  000D8A  6E89               	movwf	3977,c	;volatile
  2502                           
  2503                           ;pin_manager.c: 53: LATE = 0x0;
  2504  000D8C  0E00               	movlw	0
  2505  000D8E  6E8D               	movwf	3981,c	;volatile
  2506                           
  2507                           ;pin_manager.c: 54: LATD = 0x0;
  2508  000D90  0E00               	movlw	0
  2509  000D92  6E8C               	movwf	3980,c	;volatile
  2510                           
  2511                           ;pin_manager.c: 55: LATC = 0x0;
  2512  000D94  0E00               	movlw	0
  2513  000D96  6E8B               	movwf	3979,c	;volatile
  2514                           
  2515                           ;pin_manager.c: 56: WPUB = 0xFE;
  2516  000D98  0EFE               	movlw	254
  2517  000D9A  010F               	movlb	15	; () banked
  2518  000D9C  6F5B               	movwf	91,b	;volatile
  2519                           
  2520                           ;pin_manager.c: 57: TRISD = 0xA0;
  2521  000D9E  0EA0               	movlw	160
  2522  000DA0  6E95               	movwf	3989,c	;volatile
  2523                           
  2524                           ;pin_manager.c: 58: TRISE = 0x7;
  2525  000DA2  0E07               	movlw	7
  2526  000DA4  6E96               	movwf	3990,c	;volatile
  2527                           
  2528                           ;pin_manager.c: 59: TRISB = 0xF2;
  2529  000DA6  0EF2               	movlw	242
  2530  000DA8  6E93               	movwf	3987,c	;volatile
  2531                           
  2532                           ;pin_manager.c: 60: TRISC = 0xB8;
  2533  000DAA  0EB8               	movlw	184
  2534  000DAC  6E94               	movwf	3988,c	;volatile
  2535                           
  2536                           ;pin_manager.c: 61: TRISA = 0xEF;
  2537  000DAE  0EEF               	movlw	239
  2538  000DB0  6E92               	movwf	3986,c	;volatile
  2539                           
  2540                           ; BSR set to: 15
  2541  000DB2  0012               	return		;funcret
  2542  000DB4                     __end_of_PIN_MANAGER_Initialize:
  2543                           	opt stack 0
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           intcon	equ	0xFF2
  2549                           postinc0	equ	0xFEE
  2550                           wreg	equ	0xFE8
  2551                           postdec1	equ	0xFE5
  2552                           fsr1l	equ	0xFE1
  2553                           indf2	equ	0xFDF
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _OSCILLATOR_Initialize *****************
  2559 ;; Defined at:
  2560 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;		None
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, status,2
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2578 ;;Total ram usage:        0 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    7
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		_SYSTEM_Initialize
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text11
  2589  000E78                     __ptext11:
  2590                           	opt stack 0
  2591  000E78                     _OSCILLATOR_Initialize:
  2592                           	opt stack 22
  2593                           
  2594                           ;mcc.c: 126: OSCCON = 0x60;
  2595                           
  2596                           ; BSR set to: 15
  2597                           ;incstack = 0
  2598  000E78  0E60               	movlw	96
  2599  000E7A  6ED3               	movwf	4051,c	;volatile
  2600                           
  2601                           ;mcc.c: 128: OSCCON2 = 0x00;
  2602  000E7C  0E00               	movlw	0
  2603  000E7E  6ED2               	movwf	4050,c	;volatile
  2604                           
  2605                           ;mcc.c: 130: OSCTUNE = 0x00;
  2606  000E80  0E00               	movlw	0
  2607  000E82  6E9B               	movwf	3995,c	;volatile
  2608                           
  2609                           ;mcc.c: 132: REFOCON = 0x00;
  2610  000E84  0E00               	movlw	0
  2611  000E86  6E9A               	movwf	3994,c	;volatile
  2612  000E88  0012               	return		;funcret
  2613  000E8A                     __end_of_OSCILLATOR_Initialize:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           intcon	equ	0xFF2
  2620                           postinc0	equ	0xFEE
  2621                           wreg	equ	0xFE8
  2622                           postdec1	equ	0xFE5
  2623                           fsr1l	equ	0xFE1
  2624                           indf2	equ	0xFDF
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _INTERRUPT_Initialize *****************
  2630 ;; Defined at:
  2631 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		None
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    7
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_SYSTEM_Initialize
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text12
  2660  000ED6                     __ptext12:
  2661                           	opt stack 0
  2662  000ED6                     _INTERRUPT_Initialize:
  2663                           	opt stack 22
  2664                           
  2665                           ;interrupt_manager.c: 54: IPEN = 0;
  2666                           
  2667                           ;incstack = 0
  2668  000ED6  9ED0               	bcf	4048,7,c	;volatile
  2669                           
  2670                           ;interrupt_manager.c: 59: IPR1bits.SSPIP = 0;
  2671  000ED8  969F               	bcf	3999,3,c	;volatile
  2672  000EDA  0012               	return		;funcret
  2673  000EDC                     __end_of_INTERRUPT_Initialize:
  2674                           	opt stack 0
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           intcon	equ	0xFF2
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           postdec1	equ	0xFE5
  2683                           fsr1l	equ	0xFE1
  2684                           indf2	equ	0xFDF
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function _I2C_Initialize *****************
  2690 ;; Defined at:
  2691 ;;		line 79 in file "mcc_generated_files/i2c.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    7
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_SYSTEM_Initialize
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text13
  2720  000E0A                     __ptext13:
  2721                           	opt stack 0
  2722  000E0A                     _I2C_Initialize:
  2723                           	opt stack 22
  2724                           
  2725                           ;i2c.c: 82: SSPSTAT = 0xC0;
  2726                           
  2727                           ;incstack = 0
  2728  000E0A  0EC0               	movlw	192
  2729  000E0C  6EC7               	movwf	4039,c	;volatile
  2730                           
  2731                           ;i2c.c: 84: SSPCON1 = 0x26;
  2732  000E0E  0E26               	movlw	38
  2733  000E10  6EC6               	movwf	4038,c	;volatile
  2734                           
  2735                           ;i2c.c: 86: SSPCON2 = 0x00;
  2736  000E12  0E00               	movlw	0
  2737  000E14  6EC5               	movwf	4037,c	;volatile
  2738                           
  2739                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  2740  000E16  0EFE               	movlw	254
  2741  000E18  6EC8               	movwf	4040,c	;volatile
  2742                           
  2743                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  2744  000E1A  0E10               	movlw	16
  2745  000E1C  6EC8               	movwf	4040,c	;volatile
  2746                           
  2747                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  2748  000E1E  969E               	bcf	3998,3,c	;volatile
  2749                           
  2750                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  2751  000E20  869D               	bsf	3997,3,c	;volatile
  2752  000E22  0012               	return		;funcret
  2753  000E24                     __end_of_I2C_Initialize:
  2754                           	opt stack 0
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           intcon	equ	0xFF2
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           postdec1	equ	0xFE5
  2763                           fsr1l	equ	0xFE1
  2764                           indf2	equ	0xFDF
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _EUSART2_Initialize *****************
  2770 ;; Defined at:
  2771 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    7
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_SYSTEM_Initialize
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text14
  2800  000E24                     __ptext14:
  2801                           	opt stack 0
  2802  000E24                     _EUSART2_Initialize:
  2803                           	opt stack 22
  2804                           
  2805                           ;eusart2.c: 60: BAUDCON2 = 0x08;
  2806                           
  2807                           ;incstack = 0
  2808  000E24  0E08               	movlw	8
  2809  000E26  6EB9               	movwf	4025,c	;volatile
  2810                           
  2811                           ;eusart2.c: 63: RCSTA2 = 0x90;
  2812  000E28  0E90               	movlw	144
  2813  000E2A  6EA6               	movwf	4006,c	;volatile
  2814                           
  2815                           ;eusart2.c: 66: TXSTA2 = 0x26;
  2816  000E2C  0E26               	movlw	38
  2817  000E2E  6EBA               	movwf	4026,c	;volatile
  2818                           
  2819                           ;eusart2.c: 69: SPBRG2 = 0xA0;
  2820  000E30  0EA0               	movlw	160
  2821  000E32  6E7B               	movwf	3963,c	;volatile
  2822                           
  2823                           ;eusart2.c: 72: SPBRGH2 = 0x01;
  2824  000E34  0E01               	movlw	1
  2825  000E36  6E7C               	movwf	3964,c	;volatile
  2826  000E38  0012               	return		;funcret
  2827  000E3A                     __end_of_EUSART2_Initialize:
  2828                           	opt stack 0
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           intcon	equ	0xFF2
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _EUSART1_Initialize *****************
  2844 ;; Defined at:
  2845 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    7
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_SYSTEM_Initialize
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text15
  2874  000E3A                     __ptext15:
  2875                           	opt stack 0
  2876  000E3A                     _EUSART1_Initialize:
  2877                           	opt stack 22
  2878                           
  2879                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  2880                           
  2881                           ;incstack = 0
  2882  000E3A  0E08               	movlw	8
  2883  000E3C  6EA7               	movwf	4007,c	;volatile
  2884                           
  2885                           ;eusart1.c: 63: RCSTA1 = 0x90;
  2886  000E3E  0E90               	movlw	144
  2887  000E40  6EAB               	movwf	4011,c	;volatile
  2888                           
  2889                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  2890  000E42  0EA4               	movlw	164
  2891  000E44  6EAC               	movwf	4012,c	;volatile
  2892                           
  2893                           ;eusart1.c: 69: SPBRG1 = 0x03;
  2894  000E46  0E03               	movlw	3
  2895  000E48  6EAF               	movwf	4015,c	;volatile
  2896                           
  2897                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  2898  000E4A  0E00               	movlw	0
  2899  000E4C  6E7D               	movwf	3965,c	;volatile
  2900  000E4E  0012               	return		;funcret
  2901  000E50                     __end_of_EUSART1_Initialize:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           intcon	equ	0xFF2
  2908                           postinc0	equ	0xFEE
  2909                           wreg	equ	0xFE8
  2910                           postdec1	equ	0xFE5
  2911                           fsr1l	equ	0xFE1
  2912                           indf2	equ	0xFDF
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _ECCP1_Initialize *****************
  2918 ;; Defined at:
  2919 ;;		line 57 in file "mcc_generated_files/eccp1.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    7
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_SYSTEM_Initialize
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text16
  2948  000E9C                     __ptext16:
  2949                           	opt stack 0
  2950  000E9C                     _ECCP1_Initialize:
  2951                           	opt stack 22
  2952                           
  2953                           ;eccp1.c: 62: CCP1CON = 0x00;
  2954                           
  2955                           ;incstack = 0
  2956  000E9C  0E00               	movlw	0
  2957  000E9E  6EBB               	movwf	4027,c	;volatile
  2958                           
  2959                           ;eccp1.c: 65: CCPR1L = 0x00;
  2960  000EA0  0E00               	movlw	0
  2961  000EA2  6EBC               	movwf	4028,c	;volatile
  2962                           
  2963                           ;eccp1.c: 68: CCPR1H = 0x00;
  2964  000EA4  0E00               	movlw	0
  2965  000EA6  6EBD               	movwf	4029,c	;volatile
  2966                           
  2967                           ;eccp1.c: 71: CCPTMRSbits.C1TSEL = 0x0;
  2968  000EA8  9099               	bcf	3993,0,c	;volatile
  2969  000EAA  0012               	return		;funcret
  2970  000EAC                     __end_of_ECCP1_Initialize:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           intcon	equ	0xFF2
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _ADC_Initialize *****************
  2987 ;; Defined at:
  2988 ;;		line 58 in file "mcc_generated_files/adc.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;		None
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, status,2
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3006 ;;Total ram usage:        0 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    7
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_SYSTEM_Initialize
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text17
  3017  000E50                     __ptext17:
  3018                           	opt stack 0
  3019  000E50                     _ADC_Initialize:
  3020                           	opt stack 22
  3021                           
  3022                           ;adc.c: 63: ADCON0 = 0x01;
  3023                           
  3024                           ;incstack = 0
  3025  000E50  0E01               	movlw	1
  3026  000E52  6EC2               	movwf	4034,c	;volatile
  3027                           
  3028                           ;adc.c: 66: ADCON1 = 0x00;
  3029  000E54  0E00               	movlw	0
  3030  000E56  6EC1               	movwf	4033,c	;volatile
  3031                           
  3032                           ;adc.c: 69: ADCON2 = 0x32;
  3033  000E58  0E32               	movlw	50
  3034  000E5A  6EC0               	movwf	4032,c	;volatile
  3035                           
  3036                           ;adc.c: 72: ADRESH = 0x00;
  3037  000E5C  0E00               	movlw	0
  3038  000E5E  6EC4               	movwf	4036,c	;volatile
  3039                           
  3040                           ;adc.c: 75: ADRESL = 0x00;
  3041  000E60  0E00               	movlw	0
  3042  000E62  6EC3               	movwf	4035,c	;volatile
  3043  000E64  0012               	return		;funcret
  3044  000E66                     __end_of_ADC_Initialize:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           intcon	equ	0xFF2
  3051                           postinc0	equ	0xFEE
  3052                           wreg	equ	0xFE8
  3053                           postdec1	equ	0xFE5
  3054                           fsr1l	equ	0xFE1
  3055                           indf2	equ	0xFDF
  3056                           fsr2h	equ	0xFDA
  3057                           fsr2l	equ	0xFD9
  3058                           status	equ	0xFD8
  3059                           
  3060 ;; *************** function _INTERRUPT_InterruptManager *****************
  3061 ;; Defined at:
  3062 ;;		line 63 in file "mcc_generated_files/interrupt_manager.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3078 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3079 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3080 ;;Total ram usage:       14 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    6
  3083 ;; This function calls:
  3084 ;;		_I2C_ISR
  3085 ;; This function is called by:
  3086 ;;		Interrupt level 2
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	intcode
  3091  000008                     __pintcode:
  3092                           	opt stack 0
  3093  000008                     _INTERRUPT_InterruptManager:
  3094                           	opt stack 21
  3095                           
  3096                           ;incstack = 0
  3097  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3098  00000A  CFFA F062          	movff	pclath,??_INTERRUPT_InterruptManager
  3099  00000E  CFFB F063          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3100  000012  CFE9 F064          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3101  000016  CFEA F065          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3102  00001A  CFE1 F066          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3103  00001E  CFE2 F067          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3104  000022  CFD9 F068          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3105  000026  CFDA F069          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3106  00002A  CFF3 F06A          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3107  00002E  CFF4 F06B          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3108  000032  CFF6 F06C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3109  000036  CFF7 F06D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3110  00003A  CFF8 F06E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3111  00003E  CFF5 F06F          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3112                           
  3113                           ;interrupt_manager.c: 66: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  3114  000042  BCF2               	btfsc	intcon,6,c	;volatile
  3115  000044  A69D               	btfss	3997,3,c	;volatile
  3116  000046  D003               	goto	i2l222
  3117  000048  B69E               	btfsc	3998,3,c	;volatile
  3118                           
  3119                           ;interrupt_manager.c: 67: {
  3120                           ;interrupt_manager.c: 68: I2C_ISR();
  3121  00004A  EC68  F006         	call	_I2C_ISR	;wreg free
  3122  00004E                     i2l222:
  3123  00004E  C06F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3124  000052  C06E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3125  000056  C06D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3126  00005A  C06C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3127  00005E  C06B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3128  000062  C06A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3129  000066  C069  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3130  00006A  C068  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3131  00006E  C067  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3132  000072  C066  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3133  000076  C065  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3134  00007A  C064  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3135  00007E  C063  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3136  000082  C062  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3137  000086  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3138  000088  0011               	retfie		f
  3139  00008A                     __end_of_INTERRUPT_InterruptManager:
  3140                           	opt stack 0
  3141                           pclatu	equ	0xFFB
  3142                           pclath	equ	0xFFA
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           intcon	equ	0xFF2
  3150                           postinc0	equ	0xFEE
  3151                           fsr0h	equ	0xFEA
  3152                           fsr0l	equ	0xFE9
  3153                           wreg	equ	0xFE8
  3154                           postdec1	equ	0xFE5
  3155                           fsr1h	equ	0xFE2
  3156                           fsr1l	equ	0xFE1
  3157                           indf2	equ	0xFDF
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _I2C_ISR *****************
  3163 ;; Defined at:
  3164 ;;		line 99 in file "mcc_generated_files/i2c.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  i2c_data        1   93[COMRAM] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3182 ;;Total ram usage:        1 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    5
  3185 ;; This function calls:
  3186 ;;		_I2C_StatusCallback
  3187 ;; This function is called by:
  3188 ;;		_INTERRUPT_InterruptManager
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text19
  3193  000CD0                     __ptext19:
  3194                           	opt stack 0
  3195  000CD0                     _I2C_ISR:
  3196                           	opt stack 21
  3197                           
  3198                           ;i2c.c: 100: uint8_t i2c_data = 0x55;
  3199                           
  3200                           ;incstack = 0
  3201  000CD0  0E55               	movlw	85
  3202  000CD2  6E5E               	movwf	I2C_ISR@i2c_data,c
  3203                           
  3204                           ;i2c.c: 106: PIR1bits.SSPIF = 0;
  3205  000CD4  969E               	bcf	3998,3,c	;volatile
  3206                           
  3207                           ;i2c.c: 107: i2c_data = SSPBUF;
  3208  000CD6  CFC9 F05E          	movff	4041,I2C_ISR@i2c_data	;volatile
  3209                           
  3210                           ;i2c.c: 108: if (1 == SSPSTATbits.R_nW) {
  3211  000CDA  A4C7               	btfss	4039,2,c	;volatile
  3212  000CDC  D00B               	goto	i2l161
  3213                           
  3214                           ;i2c.c: 109: if ((1 == SSPSTATbits.D_nA) && (1 == PORTCbits.RC4)) {
  3215  000CDE  BAC7               	btfsc	4039,5,c	;volatile
  3216  000CE0  A882               	btfss	3970,4,c	;volatile
  3217  000CE2  D004               	goto	i2l2629
  3218                           
  3219                           ;i2c.c: 111: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
  3220  000CE4  0E03               	movlw	3
  3221  000CE6  EC87  F006         	call	_I2C_StatusCallback
  3222                           
  3223                           ;i2c.c: 112: } else {
  3224  000CEA  D00F               	goto	i2l2635
  3225  000CEC                     i2l2629:
  3226                           
  3227                           ;i2c.c: 114: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
  3228  000CEC  0E01               	movlw	1
  3229  000CEE  EC87  F006         	call	_I2C_StatusCallback
  3230                           
  3231                           ;i2c.c: 115: }
  3232                           ;i2c.c: 116: } else if (0 == SSPSTATbits.D_nA) {
  3233  000CF2  D00B               	goto	i2l2635
  3234  000CF4                     i2l161:
  3235  000CF4  BAC7               	btfsc	4039,5,c	;volatile
  3236  000CF6  D004               	goto	i2l165
  3237                           
  3238                           ;i2c.c: 120: I2C_StatusCallback(I2C_SLAVE_WRITE_REQUEST);
  3239  000CF8  0E00               	movlw	0
  3240  000CFA  EC87  F006         	call	_I2C_StatusCallback
  3241                           
  3242                           ;i2c.c: 121: } else {
  3243  000CFE  D005               	goto	i2l2635
  3244  000D00                     i2l165:
  3245                           
  3246                           ;i2c.c: 122: I2C_slaveWriteData = i2c_data;
  3247  000D00  C05E  F0ED         	movff	I2C_ISR@i2c_data,_I2C_slaveWriteData	;volatile
  3248                           
  3249                           ;i2c.c: 125: I2C_StatusCallback(I2C_SLAVE_WRITE_COMPLETED);
  3250  000D04  0E02               	movlw	2
  3251  000D06  EC87  F006         	call	_I2C_StatusCallback
  3252  000D0A                     i2l2635:
  3253                           
  3254                           ;i2c.c: 126: }
  3255                           ;i2c.c: 128: SSPCON1bits.CKP = 1;
  3256  000D0A  88C6               	bsf	4038,4,c	;volatile
  3257  000D0C  0012               	return		;funcret
  3258  000D0E                     __end_of_I2C_ISR:
  3259                           	opt stack 0
  3260                           pclatu	equ	0xFFB
  3261                           pclath	equ	0xFFA
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           prodh	equ	0xFF4
  3267                           prodl	equ	0xFF3
  3268                           intcon	equ	0xFF2
  3269                           postinc0	equ	0xFEE
  3270                           fsr0h	equ	0xFEA
  3271                           fsr0l	equ	0xFE9
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1h	equ	0xFE2
  3275                           fsr1l	equ	0xFE1
  3276                           indf2	equ	0xFDF
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _I2C_StatusCallback *****************
  3282 ;; Defined at:
  3283 ;;		line 214 in file "mcc_generated_files/i2c.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  i2c_bus_stat    1    wreg     enum E18217
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  i2c_bus_stat    1    0[BANK0 ] enum E18217
  3288 ;;  data            1    1[BANK0 ] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3299 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    4
  3305 ;; This function calls:
  3306 ;;		_getByteToSend
  3307 ;;		_handleByteReceived
  3308 ;; This function is called by:
  3309 ;;		_I2C_ISR
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text20
  3314  000D0E                     __ptext20:
  3315                           	opt stack 0
  3316  000D0E                     _I2C_StatusCallback:
  3317                           	opt stack 21
  3318                           
  3319                           ;incstack = 0
  3320                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
  3321  000D0E  0100               	movlb	0	; () banked
  3322  000D10  6F60               	movwf	I2C_StatusCallback@i2c_bus_state& (0+255),b
  3323                           
  3324                           ;i2c.c: 215: uint8_t data;
  3325                           ;i2c.c: 216: switch (i2c_bus_state) {
  3326  000D12  D00E               	goto	i2l2493
  3327  000D14                     i2l198:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;i2c.c: 224: data = I2C_slaveWriteData;
  3331  000D14  C0ED  F061         	movff	_I2C_slaveWriteData,I2C_StatusCallback@data	;volatile
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;i2c.c: 226: handleByteReceived(data);
  3335  000D18  0100               	movlb	0	; () banked
  3336  000D1A  5161               	movf	I2C_StatusCallback@data& (0+255),w,b
  3337  000D1C  EC37  F003         	call	_handleByteReceived
  3338                           
  3339                           ;i2c.c: 228: break;
  3340  000D20  0012               	return	
  3341  000D22                     i2l2489:
  3342                           
  3343                           ;i2c.c: 232: data = getByteToSend();
  3344  000D22  ECE9  F001         	call	_getByteToSend	;wreg free
  3345  000D26  0100               	movlb	0	; () banked
  3346  000D28  6F61               	movwf	I2C_StatusCallback@data& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;i2c.c: 234: SSPBUF = data;
  3350  000D2A  C061  FFC9         	movff	I2C_StatusCallback@data,4041	;volatile
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;i2c.c: 240: }
  3354                           
  3355                           ;i2c.c: 238: default:;
  3356                           
  3357                           ; BSR set to: 0
  3358                           
  3359                           ;i2c.c: 237: case I2C_SLAVE_READ_COMPLETED:
  3360                           
  3361                           ;i2c.c: 235: break;
  3362  000D2E  0012               	return	
  3363  000D30                     i2l2493:
  3364  000D30  0100               	movlb	0	; () banked
  3365  000D32  5160               	movf	I2C_StatusCallback@i2c_bus_state& (0+255),w,b
  3366                           
  3367                           ; Switch size 1, requested type "space"
  3368                           ; Number of cases is 4, Range of values is 0 to 3
  3369                           ; switch strategies available:
  3370                           ; Name         Instructions Cycles
  3371                           ; simple_byte           13     7 (average)
  3372                           ;	Chosen strategy is simple_byte
  3373  000D34  0A00               	xorlw	0	; case 0
  3374  000D36  B4D8               	btfsc	status,2,c
  3375  000D38  0012               	return	
  3376  000D3A  0A01               	xorlw	1	; case 1
  3377  000D3C  B4D8               	btfsc	status,2,c
  3378  000D3E  D7F1               	goto	i2l2489
  3379  000D40  0A03               	xorlw	3	; case 2
  3380  000D42  B4D8               	btfsc	status,2,c
  3381  000D44  D7E7               	goto	i2l198
  3382  000D46  0A01               	xorlw	1	; case 3
  3383  000D48  0012               	return	
  3384  000D4A                     __end_of_I2C_StatusCallback:
  3385                           	opt stack 0
  3386                           pclatu	equ	0xFFB
  3387                           pclath	equ	0xFFA
  3388                           tblptru	equ	0xFF8
  3389                           tblptrh	equ	0xFF7
  3390                           tblptrl	equ	0xFF6
  3391                           tablat	equ	0xFF5
  3392                           prodh	equ	0xFF4
  3393                           prodl	equ	0xFF3
  3394                           intcon	equ	0xFF2
  3395                           postinc0	equ	0xFEE
  3396                           fsr0h	equ	0xFEA
  3397                           fsr0l	equ	0xFE9
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1h	equ	0xFE2
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _handleByteReceived *****************
  3408 ;; Defined at:
  3409 ;;		line 260 in file "ax.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  data            1    wreg     unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  data            1    6[COMRAM] unsigned char 
  3414 ;;  i               2    4[COMRAM] int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3425 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3427 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;Total ram usage:        3 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    1
  3431 ;; This function calls:
  3432 ;;		_setLedOff
  3433 ;;		_setLedOn
  3434 ;; This function is called by:
  3435 ;;		_I2C_StatusCallback
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text21
  3440  00066E                     __ptext21:
  3441                           	opt stack 0
  3442  00066E                     _handleByteReceived:
  3443                           	opt stack 23
  3444                           
  3445                           ;incstack = 0
  3446                           ;handleByteReceived@data stored from wreg
  3447  00066E  6E07               	movwf	handleByteReceived@data,c
  3448                           
  3449                           ;ax.c: 261: if (readIndex == 0) {
  3450  000670  0100               	movlb	0	; () banked
  3451  000672  51E4               	movf	_readIndex& (0+255),w,b
  3452  000674  0100               	movlb	0	; () banked
  3453  000676  11E5               	iorwf	(_readIndex+1)& (0+255),w,b
  3454  000678  A4D8               	btfss	status,2,c
  3455  00067A  D01C               	goto	i2l2319
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;ax.c: 262: currentCommand = data;
  3459  00067C  C007  F0EE         	movff	handleByteReceived@data,_currentCommand
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;ax.c: 263: readIndex++;
  3463  000680  0100               	movlb	0	; () banked
  3464  000682  4BE4               	infsnz	_readIndex& (0+255),f,b
  3465  000684  2BE5               	incf	(_readIndex+1)& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;ax.c: 265: for (int i = 0; i < 32; i++) {
  3469  000686  0E00               	movlw	0
  3470  000688  6E06               	movwf	handleByteReceived@i+1,c
  3471  00068A  0E00               	movlw	0
  3472  00068C  6E05               	movwf	handleByteReceived@i,c
  3473  00068E                     i2l2309:
  3474                           
  3475                           ; BSR set to: 0
  3476  00068E  BE06               	btfsc	handleByteReceived@i+1,7,c
  3477  000690  D006               	goto	i2l2313
  3478  000692  5006               	movf	handleByteReceived@i+1,w,c
  3479  000694  E154               	bnz	i2l621
  3480  000696  0E20               	movlw	32
  3481  000698  5C05               	subwf	handleByteReceived@i,w,c
  3482  00069A  B0D8               	btfsc	status,0,c
  3483  00069C  0012               	return	
  3484  00069E                     i2l2313:
  3485                           
  3486                           ;ax.c: 266: dataToSend[i] = 66;
  3487  00069E  0EBE               	movlw	low _dataToSend
  3488  0006A0  2405               	addwf	handleByteReceived@i,w,c
  3489  0006A2  6ED9               	movwf	fsr2l,c
  3490  0006A4  0E00               	movlw	high _dataToSend
  3491  0006A6  2006               	addwfc	handleByteReceived@i+1,w,c
  3492  0006A8  6EDA               	movwf	fsr2h,c
  3493  0006AA  0E42               	movlw	66
  3494  0006AC  6EDF               	movwf	indf2,c
  3495  0006AE  4A05               	infsnz	handleByteReceived@i,f,c
  3496  0006B0  2A06               	incf	handleByteReceived@i+1,f,c
  3497  0006B2  D7ED               	goto	i2l2309
  3498  0006B4                     i2l2319:
  3499  0006B4  0100               	movlb	0	; () banked
  3500  0006B6  05E4               	decf	_readIndex& (0+255),w,b
  3501  0006B8  0100               	movlb	0	; () banked
  3502  0006BA  11E5               	iorwf	(_readIndex+1)& (0+255),w,b
  3503  0006BC  A4D8               	btfss	status,2,c
  3504  0006BE  D025               	goto	i2l2337
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;ax.c: 269: parameter1 = data;
  3508  0006C0  C007  F0E8         	movff	handleByteReceived@data,_parameter1
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;ax.c: 270: readIndex++;
  3512  0006C4  0100               	movlb	0	; () banked
  3513  0006C6  4BE4               	infsnz	_readIndex& (0+255),f,b
  3514  0006C8  2BE5               	incf	(_readIndex+1)& (0+255),f,b
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;ax.c: 271: if (currentCommand == 10) {
  3518  0006CA  0E0A               	movlw	10
  3519  0006CC  0100               	movlb	0	; () banked
  3520  0006CE  19EE               	xorwf	_currentCommand& (0+255),w,b
  3521  0006D0  A4D8               	btfss	status,2,c
  3522  0006D2  D00B               	goto	i2l2331
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;ax.c: 272: setLedOn(parameter1);
  3526  0006D4  C0E8  F001         	movff	_parameter1,setLedOn@led
  3527  0006D8  6A02               	clrf	setLedOn@led+1,c
  3528  0006DA  EC58  F005         	call	_setLedOn	;wreg free
  3529                           
  3530                           ;ax.c: 273: readIndex = 0;
  3531  0006DE  0E00               	movlw	0
  3532  0006E0  0100               	movlb	0	; () banked
  3533  0006E2  6FE5               	movwf	(_readIndex+1)& (0+255),b
  3534  0006E4  0E00               	movlw	0
  3535  0006E6  6FE4               	movwf	_readIndex& (0+255),b
  3536                           
  3537                           ;ax.c: 274: } else if (currentCommand == 11) {
  3538  0006E8  0012               	return	
  3539  0006EA                     i2l2331:
  3540                           
  3541                           ; BSR set to: 0
  3542  0006EA  0E0B               	movlw	11
  3543  0006EC  0100               	movlb	0	; () banked
  3544  0006EE  19EE               	xorwf	_currentCommand& (0+255),w,b
  3545  0006F0  A4D8               	btfss	status,2,c
  3546  0006F2  0012               	return	
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;ax.c: 275: setLedOff(parameter1);
  3550  0006F4  C0E8  F001         	movff	_parameter1,setLedOff@led
  3551  0006F8  6A02               	clrf	setLedOff@led+1,c
  3552  0006FA  EC95  F005         	call	_setLedOff	;wreg free
  3553                           
  3554                           ;ax.c: 276: readIndex = 0;
  3555  0006FE  0E00               	movlw	0
  3556  000700  0100               	movlb	0	; () banked
  3557  000702  6FE5               	movwf	(_readIndex+1)& (0+255),b
  3558  000704  0E00               	movlw	0
  3559  000706  6FE4               	movwf	_readIndex& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;ax.c: 277: }
  3563                           ;ax.c: 279: } else if (readIndex == 2) {
  3564                           
  3565                           ; BSR set to: 0
  3566  000708  0012               	return	
  3567  00070A                     i2l2337:
  3568                           
  3569                           ; BSR set to: 0
  3570  00070A  0E02               	movlw	2
  3571  00070C  0100               	movlb	0	; () banked
  3572  00070E  19E4               	xorwf	_readIndex& (0+255),w,b
  3573  000710  0100               	movlb	0	; () banked
  3574  000712  11E5               	iorwf	(_readIndex+1)& (0+255),w,b
  3575  000714  A4D8               	btfss	status,2,c
  3576  000716  D006               	goto	i2l2343
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;ax.c: 280: parameter2 = data;
  3580  000718  C007  F0E9         	movff	handleByteReceived@data,_parameter2
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;ax.c: 281: readIndex++;
  3584  00071C  0100               	movlb	0	; () banked
  3585  00071E  4BE4               	infsnz	_readIndex& (0+255),f,b
  3586  000720  2BE5               	incf	(_readIndex+1)& (0+255),f,b
  3587                           
  3588                           ;ax.c: 282: } else if (readIndex == 3) {
  3589  000722  0012               	return	
  3590  000724                     i2l2343:
  3591                           
  3592                           ; BSR set to: 0
  3593  000724  0E03               	movlw	3
  3594  000726  0100               	movlb	0	; () banked
  3595  000728  19E4               	xorwf	_readIndex& (0+255),w,b
  3596  00072A  0100               	movlb	0	; () banked
  3597  00072C  11E5               	iorwf	(_readIndex+1)& (0+255),w,b
  3598  00072E  A4D8               	btfss	status,2,c
  3599  000730  0012               	return	
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;ax.c: 283: parameter3 = data;
  3603  000732  C007  F0EA         	movff	handleByteReceived@data,_parameter3
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;ax.c: 284: readIndex++;
  3607  000736  0100               	movlb	0	; () banked
  3608  000738  4BE4               	infsnz	_readIndex& (0+255),f,b
  3609  00073A  2BE5               	incf	(_readIndex+1)& (0+255),f,b
  3610                           
  3611                           ; BSR set to: 0
  3612                           
  3613                           ; BSR set to: 0
  3614                           
  3615                           ; BSR set to: 0
  3616  00073C  0012               	return	
  3617  00073E                     i2l621:
  3618  00073E  0012               	return		;funcret
  3619  000740                     __end_of_handleByteReceived:
  3620                           	opt stack 0
  3621                           pclatu	equ	0xFFB
  3622                           pclath	equ	0xFFA
  3623                           tblptru	equ	0xFF8
  3624                           tblptrh	equ	0xFF7
  3625                           tblptrl	equ	0xFF6
  3626                           tablat	equ	0xFF5
  3627                           prodh	equ	0xFF4
  3628                           prodl	equ	0xFF3
  3629                           intcon	equ	0xFF2
  3630                           postinc0	equ	0xFEE
  3631                           fsr0h	equ	0xFEA
  3632                           fsr0l	equ	0xFE9
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           fsr2h	equ	0xFDA
  3639                           fsr2l	equ	0xFD9
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _setLedOn *****************
  3643 ;; Defined at:
  3644 ;;		line 43 in file "ax.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  led             2    0[COMRAM] int 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3661 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3662 ;;Total ram usage:        4 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_handleByteReceived
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text22
  3672  000AB0                     __ptext22:
  3673                           	opt stack 0
  3674  000AB0                     _setLedOn:
  3675                           	opt stack 23
  3676                           
  3677                           ;ax.c: 44: switch (led) {
  3678                           
  3679                           ;incstack = 0
  3680  000AB0  D014               	goto	i2l2187
  3681  000AB2                     i2l487:
  3682  000AB2  868C               	bsf	3980,3,c	;volatile
  3683                           
  3684                           ;ax.c: 47: break;
  3685  000AB4  0012               	return	
  3686  000AB6                     i2l491:
  3687  000AB6  848C               	bsf	3980,2,c	;volatile
  3688                           
  3689                           ;ax.c: 50: break;
  3690  000AB8  0012               	return	
  3691  000ABA                     i2l494:
  3692  000ABA  828C               	bsf	3980,1,c	;volatile
  3693                           
  3694                           ;ax.c: 53: break;
  3695  000ABC  0012               	return	
  3696  000ABE                     i2l497:
  3697  000ABE  808C               	bsf	3980,0,c	;volatile
  3698                           
  3699                           ;ax.c: 56: break;
  3700  000AC0  0012               	return	
  3701  000AC2                     i2l500:
  3702  000AC2  848B               	bsf	3979,2,c	;volatile
  3703                           
  3704                           ;ax.c: 59: break;
  3705  000AC4  0012               	return	
  3706  000AC6                     i2l503:
  3707  000AC6  828B               	bsf	3979,1,c	;volatile
  3708                           
  3709                           ;ax.c: 62: break;
  3710  000AC8  0012               	return	
  3711  000ACA                     i2l506:
  3712  000ACA  808B               	bsf	3979,0,c	;volatile
  3713                           
  3714                           ;ax.c: 65: break;
  3715  000ACC  0012               	return	
  3716  000ACE                     i2l509:
  3717  000ACE  808A               	bsf	3978,0,c	;volatile
  3718                           
  3719                           ;ax.c: 68: break;
  3720  000AD0  0012               	return	
  3721  000AD2                     i2l512:
  3722  000AD2  848A               	bsf	3978,2,c	;volatile
  3723                           
  3724                           ;ax.c: 71: break;
  3725  000AD4  0012               	return	
  3726  000AD6                     i2l515:
  3727  000AD6  868A               	bsf	3978,3,c	;volatile
  3728                           
  3729                           ;ax.c: 75: }
  3730                           
  3731                           ;ax.c: 74: break;
  3732  000AD8  0012               	return	
  3733  000ADA                     i2l2187:
  3734  000ADA  C001  F003         	movff	setLedOn@led,??_setLedOn
  3735  000ADE  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  3736                           
  3737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3738                           ; Switch size 1, requested type "space"
  3739                           ; Number of cases is 1, Range of values is 0 to 0
  3740                           ; switch strategies available:
  3741                           ; Name         Instructions Cycles
  3742                           ; simple_byte            4     3 (average)
  3743                           ;	Chosen strategy is simple_byte
  3744  000AE2  5004               	movf	??_setLedOn+1,w,c
  3745  000AE4  0A00               	xorlw	0	; case 0
  3746  000AE6  A4D8               	btfss	status,2,c
  3747  000AE8  0012               	return	
  3748                           
  3749                           ; Switch size 1, requested type "space"
  3750                           ; Number of cases is 10, Range of values is 1 to 10
  3751                           ; switch strategies available:
  3752                           ; Name         Instructions Cycles
  3753                           ; simple_byte           31    16 (average)
  3754                           ;	Chosen strategy is simple_byte
  3755  000AEA  5003               	movf	??_setLedOn,w,c
  3756  000AEC  0A01               	xorlw	1	; case 1
  3757  000AEE  B4D8               	btfsc	status,2,c
  3758  000AF0  D7E0               	goto	i2l487
  3759  000AF2  0A03               	xorlw	3	; case 2
  3760  000AF4  B4D8               	btfsc	status,2,c
  3761  000AF6  D7DF               	goto	i2l491
  3762  000AF8  0A01               	xorlw	1	; case 3
  3763  000AFA  B4D8               	btfsc	status,2,c
  3764  000AFC  D7DE               	goto	i2l494
  3765  000AFE  0A07               	xorlw	7	; case 4
  3766  000B00  B4D8               	btfsc	status,2,c
  3767  000B02  D7DD               	goto	i2l497
  3768  000B04  0A01               	xorlw	1	; case 5
  3769  000B06  B4D8               	btfsc	status,2,c
  3770  000B08  D7DC               	goto	i2l500
  3771  000B0A  0A03               	xorlw	3	; case 6
  3772  000B0C  B4D8               	btfsc	status,2,c
  3773  000B0E  D7DB               	goto	i2l503
  3774  000B10  0A01               	xorlw	1	; case 7
  3775  000B12  B4D8               	btfsc	status,2,c
  3776  000B14  D7DA               	goto	i2l506
  3777  000B16  0A0F               	xorlw	15	; case 8
  3778  000B18  B4D8               	btfsc	status,2,c
  3779  000B1A  D7D9               	goto	i2l509
  3780  000B1C  0A01               	xorlw	1	; case 9
  3781  000B1E  B4D8               	btfsc	status,2,c
  3782  000B20  D7D8               	goto	i2l512
  3783  000B22  0A03               	xorlw	3	; case 10
  3784  000B24  A4D8               	btfss	status,2,c
  3785  000B26  0012               	return	
  3786  000B28  D7D6               	goto	i2l515
  3787  000B2A                     __end_of_setLedOn:
  3788                           	opt stack 0
  3789                           pclatu	equ	0xFFB
  3790                           pclath	equ	0xFFA
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           prodh	equ	0xFF4
  3796                           prodl	equ	0xFF3
  3797                           intcon	equ	0xFF2
  3798                           postinc0	equ	0xFEE
  3799                           fsr0h	equ	0xFEA
  3800                           fsr0l	equ	0xFE9
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1h	equ	0xFE2
  3804                           fsr1l	equ	0xFE1
  3805                           indf2	equ	0xFDF
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _setLedOff *****************
  3811 ;; Defined at:
  3812 ;;		line 78 in file "ax.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  led             2    0[COMRAM] int 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3826 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3829 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3830 ;;Total ram usage:        4 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_handleByteReceived
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text23
  3840  000B2A                     __ptext23:
  3841                           	opt stack 0
  3842  000B2A                     _setLedOff:
  3843                           	opt stack 23
  3844                           
  3845                           ;ax.c: 79: switch (led) {
  3846                           
  3847                           ;incstack = 0
  3848  000B2A  D014               	goto	i2l2197
  3849  000B2C                     i2l522:
  3850  000B2C  968C               	bcf	3980,3,c	;volatile
  3851                           
  3852                           ;ax.c: 82: break;
  3853  000B2E  0012               	return	
  3854  000B30                     i2l526:
  3855  000B30  948C               	bcf	3980,2,c	;volatile
  3856                           
  3857                           ;ax.c: 85: break;
  3858  000B32  0012               	return	
  3859  000B34                     i2l529:
  3860  000B34  928C               	bcf	3980,1,c	;volatile
  3861                           
  3862                           ;ax.c: 88: break;
  3863  000B36  0012               	return	
  3864  000B38                     i2l532:
  3865  000B38  908C               	bcf	3980,0,c	;volatile
  3866                           
  3867                           ;ax.c: 91: break;
  3868  000B3A  0012               	return	
  3869  000B3C                     i2l535:
  3870  000B3C  948B               	bcf	3979,2,c	;volatile
  3871                           
  3872                           ;ax.c: 94: break;
  3873  000B3E  0012               	return	
  3874  000B40                     i2l538:
  3875  000B40  928B               	bcf	3979,1,c	;volatile
  3876                           
  3877                           ;ax.c: 97: break;
  3878  000B42  0012               	return	
  3879  000B44                     i2l541:
  3880  000B44  908B               	bcf	3979,0,c	;volatile
  3881                           
  3882                           ;ax.c: 100: break;
  3883  000B46  0012               	return	
  3884  000B48                     i2l544:
  3885  000B48  908A               	bcf	3978,0,c	;volatile
  3886                           
  3887                           ;ax.c: 103: break;
  3888  000B4A  0012               	return	
  3889  000B4C                     i2l547:
  3890  000B4C  948A               	bcf	3978,2,c	;volatile
  3891                           
  3892                           ;ax.c: 106: break;
  3893  000B4E  0012               	return	
  3894  000B50                     i2l550:
  3895  000B50  968A               	bcf	3978,3,c	;volatile
  3896                           
  3897                           ;ax.c: 110: }
  3898                           
  3899                           ;ax.c: 109: break;
  3900  000B52  0012               	return	
  3901  000B54                     i2l2197:
  3902  000B54  C001  F003         	movff	setLedOff@led,??_setLedOff
  3903  000B58  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  3904                           
  3905                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3906                           ; Switch size 1, requested type "space"
  3907                           ; Number of cases is 1, Range of values is 0 to 0
  3908                           ; switch strategies available:
  3909                           ; Name         Instructions Cycles
  3910                           ; simple_byte            4     3 (average)
  3911                           ;	Chosen strategy is simple_byte
  3912  000B5C  5004               	movf	??_setLedOff+1,w,c
  3913  000B5E  0A00               	xorlw	0	; case 0
  3914  000B60  A4D8               	btfss	status,2,c
  3915  000B62  0012               	return	
  3916                           
  3917                           ; Switch size 1, requested type "space"
  3918                           ; Number of cases is 10, Range of values is 1 to 10
  3919                           ; switch strategies available:
  3920                           ; Name         Instructions Cycles
  3921                           ; simple_byte           31    16 (average)
  3922                           ;	Chosen strategy is simple_byte
  3923  000B64  5003               	movf	??_setLedOff,w,c
  3924  000B66  0A01               	xorlw	1	; case 1
  3925  000B68  B4D8               	btfsc	status,2,c
  3926  000B6A  D7E0               	goto	i2l522
  3927  000B6C  0A03               	xorlw	3	; case 2
  3928  000B6E  B4D8               	btfsc	status,2,c
  3929  000B70  D7DF               	goto	i2l526
  3930  000B72  0A01               	xorlw	1	; case 3
  3931  000B74  B4D8               	btfsc	status,2,c
  3932  000B76  D7DE               	goto	i2l529
  3933  000B78  0A07               	xorlw	7	; case 4
  3934  000B7A  B4D8               	btfsc	status,2,c
  3935  000B7C  D7DD               	goto	i2l532
  3936  000B7E  0A01               	xorlw	1	; case 5
  3937  000B80  B4D8               	btfsc	status,2,c
  3938  000B82  D7DC               	goto	i2l535
  3939  000B84  0A03               	xorlw	3	; case 6
  3940  000B86  B4D8               	btfsc	status,2,c
  3941  000B88  D7DB               	goto	i2l538
  3942  000B8A  0A01               	xorlw	1	; case 7
  3943  000B8C  B4D8               	btfsc	status,2,c
  3944  000B8E  D7DA               	goto	i2l541
  3945  000B90  0A0F               	xorlw	15	; case 8
  3946  000B92  B4D8               	btfsc	status,2,c
  3947  000B94  D7D9               	goto	i2l544
  3948  000B96  0A01               	xorlw	1	; case 9
  3949  000B98  B4D8               	btfsc	status,2,c
  3950  000B9A  D7D8               	goto	i2l547
  3951  000B9C  0A03               	xorlw	3	; case 10
  3952  000B9E  A4D8               	btfss	status,2,c
  3953  000BA0  0012               	return	
  3954  000BA2  D7D6               	goto	i2l550
  3955  000BA4                     __end_of_setLedOff:
  3956                           	opt stack 0
  3957                           pclatu	equ	0xFFB
  3958                           pclath	equ	0xFFA
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           postinc0	equ	0xFEE
  3967                           fsr0h	equ	0xFEA
  3968                           fsr0l	equ	0xFE9
  3969                           wreg	equ	0xFE8
  3970                           postdec1	equ	0xFE5
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _getByteToSend *****************
  3979 ;; Defined at:
  3980 ;;		line 291 in file "ax.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  value           2   91[COMRAM] int 
  3985 ;;  xhigh           1   87[COMRAM] unsigned char 
  3986 ;;  xlow            1   86[COMRAM] unsigned char 
  3987 ;;  error           2   82[COMRAM] int 
  3988 ;;  value           2   89[COMRAM] int 
  3989 ;;  xhigh           1   85[COMRAM] unsigned char 
  3990 ;;  xlow            1   84[COMRAM] unsigned char 
  3991 ;;  error           2   80[COMRAM] int 
  3992 ;;  d               1   88[COMRAM] unsigned char 
  3993 ;; Return value:  Size  Location     Type
  3994 ;;                  1    wreg      unsigned char 
  3995 ;; Registers used:
  3996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3997 ;; Tracked objects:
  3998 ;;		On entry : 0/0
  3999 ;;		On exit  : 0/0
  4000 ;;		Unchanged: 0/0
  4001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4003 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4005 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4006 ;;Total ram usage:       14 bytes
  4007 ;; Hardware stack levels used:    1
  4008 ;; Hardware stack levels required when called:    3
  4009 ;; This function calls:
  4010 ;;		_getADC
  4011 ;;		_readAXData
  4012 ;;		_writeAXData
  4013 ;;		i2_pingAX
  4014 ;; This function is called by:
  4015 ;;		_I2C_StatusCallback
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text24
  4020  0003D2                     __ptext24:
  4021                           	opt stack 0
  4022  0003D2                     _getByteToSend:
  4023                           	opt stack 21
  4024                           
  4025                           ;ax.c: 294: if (currentCommand == 20) {
  4026                           
  4027                           ;incstack = 0
  4028  0003D2  0E14               	movlw	20
  4029  0003D4  0100               	movlb	0	; () banked
  4030  0003D6  19EE               	xorwf	_currentCommand& (0+255),w,b
  4031  0003D8  A4D8               	btfss	status,2,c
  4032  0003DA  D017               	goto	i2l2365
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;ax.c: 295: int error = pingAX(parameter1);
  4036  0003DC  C0E8  F018         	movff	_parameter1,i2pingAX@id
  4037  0003E0  6A19               	clrf	i2pingAX@id+1,c
  4038  0003E2  EC0E  F006         	call	i2_pingAX	;wreg free
  4039  0003E6  C018  F051         	movff	?i2_pingAX,getByteToSend@error
  4040  0003EA  C019  F052         	movff	?i2_pingAX+1,getByteToSend@error+1
  4041                           
  4042                           ;ax.c: 297: nbBytesToSend = 2;
  4043  0003EE  0E00               	movlw	0
  4044  0003F0  0100               	movlb	0	; () banked
  4045  0003F2  6FE3               	movwf	(_nbBytesToSend+1)& (0+255),b
  4046  0003F4  0E02               	movlw	2
  4047  0003F6  6FE2               	movwf	_nbBytesToSend& (0+255),b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;ax.c: 298: dataToSend[0] = error;
  4051  0003F8  C051  F0BE         	movff	getByteToSend@error,_dataToSend
  4052  0003FC                     i2l2357:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;ax.c: 299: dataToSend[1] = 0;
  4056  0003FC  0E00               	movlw	0
  4057  0003FE  0100               	movlb	0	; () banked
  4058  000400  6FBF               	movwf	(_dataToSend+1)& (0+255),b
  4059  000402  D062               	goto	i2l2423
  4060  000404                     i2l2361:
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;ax.c: 302: currentCommand = -1;
  4064  000404  0100               	movlb	0	; () banked
  4065  000406  69EE               	setf	_currentCommand& (0+255),b
  4066  000408  D065               	goto	L5
  4067  00040A                     i2l2365:
  4068                           
  4069                           ; BSR set to: 0
  4070  00040A  0E15               	movlw	21
  4071  00040C  0100               	movlb	0	; () banked
  4072  00040E  19EE               	xorwf	_currentCommand& (0+255),w,b
  4073  000410  A4D8               	btfss	status,2,c
  4074  000412  D01D               	goto	i2l2389
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;ax.c: 305: int value = readAXData(parameter1, parameter2);
  4078  000414  C0E8  F018         	movff	_parameter1,readAXData@id
  4079  000418  6A19               	clrf	readAXData@id+1,c
  4080  00041A  C0E9  F01A         	movff	_parameter2,readAXData@address
  4081  00041E  6A1B               	clrf	readAXData@address+1,c
  4082  000420  ECFF  F003         	call	_readAXData	;wreg free
  4083  000424  C018  F05A         	movff	?_readAXData,getByteToSend@value
  4084  000428  C019  F05B         	movff	?_readAXData+1,getByteToSend@value+1
  4085                           
  4086                           ;ax.c: 307: nbBytesToSend = 4;
  4087  00042C  0E00               	movlw	0
  4088  00042E  0100               	movlb	0	; () banked
  4089  000430  6FE3               	movwf	(_nbBytesToSend+1)& (0+255),b
  4090  000432  0E04               	movlw	4
  4091  000434  6FE2               	movwf	_nbBytesToSend& (0+255),b
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;ax.c: 308: uint8_t xlow = value & 0xff;
  4095  000436  C05A  F055         	movff	getByteToSend@value,getByteToSend@xlow
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;ax.c: 309: uint8_t xhigh = (value >> 8);
  4099  00043A  505B               	movf	getByteToSend@value+1,w,c
  4100  00043C  6E56               	movwf	getByteToSend@xhigh,c
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;ax.c: 310: dataToSend[0] = xlow;
  4104  00043E  C055  F0BE         	movff	getByteToSend@xlow,_dataToSend
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;ax.c: 311: dataToSend[1] = 0;
  4108  000442  0E00               	movlw	0
  4109  000444  0100               	movlb	0	; () banked
  4110  000446  6FBF               	movwf	(_dataToSend+1)& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;ax.c: 312: dataToSend[2] = xhigh;
  4114  000448  C056  F0C0         	movff	getByteToSend@xhigh,_dataToSend+2
  4115  00044C  D03A               	goto	L4
  4116  00044E                     i2l2389:
  4117                           
  4118                           ; BSR set to: 0
  4119  00044E  0E16               	movlw	22
  4120  000450  0100               	movlb	0	; () banked
  4121  000452  19EE               	xorwf	_currentCommand& (0+255),w,b
  4122  000454  A4D8               	btfss	status,2,c
  4123  000456  D017               	goto	i2l2405
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;ax.c: 319: int error = writeAXData(parameter1, parameter2, parameter3);
  4127  000458  C0E8  F018         	movff	_parameter1,writeAXData@id
  4128  00045C  6A19               	clrf	writeAXData@id+1,c
  4129  00045E  C0E9  F01A         	movff	_parameter2,writeAXData@address
  4130  000462  6A1B               	clrf	writeAXData@address+1,c
  4131  000464  C0EA  F01C         	movff	_parameter3,writeAXData@data
  4132  000468  6A1D               	clrf	writeAXData@data+1,c
  4133  00046A  EC4B  F004         	call	_writeAXData	;wreg free
  4134  00046E  C018  F053         	movff	?_writeAXData,getByteToSend@error_1277
  4135  000472  C019  F054         	movff	?_writeAXData+1,getByteToSend@error_1277+1
  4136                           
  4137                           ;ax.c: 321: nbBytesToSend = 2;
  4138  000476  0E00               	movlw	0
  4139  000478  0100               	movlb	0	; () banked
  4140  00047A  6FE3               	movwf	(_nbBytesToSend+1)& (0+255),b
  4141  00047C  0E02               	movlw	2
  4142  00047E  6FE2               	movwf	_nbBytesToSend& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;ax.c: 322: dataToSend[0] = error;
  4146  000480  C053  F0BE         	movff	getByteToSend@error_1277,_dataToSend
  4147  000484  D7BB               	goto	i2l2357
  4148  000486                     i2l2405:
  4149                           
  4150                           ; BSR set to: 0
  4151  000486  0E0C               	movlw	12
  4152  000488  0100               	movlb	0	; () banked
  4153  00048A  19EE               	xorwf	_currentCommand& (0+255),w,b
  4154  00048C  A4D8               	btfss	status,2,c
  4155  00048E  D027               	goto	i2l2429
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;ax.c: 329: int value = getADC(parameter1);
  4159  000490  C0E8  F006         	movff	_parameter1,getADC@adc
  4160  000494  6A07               	clrf	getADC@adc+1,c
  4161  000496  EC56  F007         	call	_getADC	;wreg free
  4162  00049A  C006  F05C         	movff	?_getADC,getByteToSend@value_1279
  4163  00049E  C007  F05D         	movff	?_getADC+1,getByteToSend@value_1279+1
  4164                           
  4165                           ;ax.c: 331: nbBytesToSend = 4;
  4166  0004A2  0E00               	movlw	0
  4167  0004A4  0100               	movlb	0	; () banked
  4168  0004A6  6FE3               	movwf	(_nbBytesToSend+1)& (0+255),b
  4169  0004A8  0E04               	movlw	4
  4170  0004AA  6FE2               	movwf	_nbBytesToSend& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;ax.c: 332: uint8_t xlow = value & 0xff;
  4174  0004AC  C05C  F057         	movff	getByteToSend@value_1279,getByteToSend@xlow_1281
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;ax.c: 333: uint8_t xhigh = (value >> 8);
  4178  0004B0  505D               	movf	getByteToSend@value_1279+1,w,c
  4179  0004B2  6E58               	movwf	getByteToSend@xhigh_1282,c
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;ax.c: 334: dataToSend[0] = xlow;
  4183  0004B4  C057  F0BE         	movff	getByteToSend@xlow_1281,_dataToSend
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;ax.c: 335: dataToSend[1] = 0;
  4187  0004B8  0E00               	movlw	0
  4188  0004BA  0100               	movlb	0	; () banked
  4189  0004BC  6FBF               	movwf	(_dataToSend+1)& (0+255),b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;ax.c: 336: dataToSend[2] = xhigh;
  4193  0004BE  C058  F0C0         	movff	getByteToSend@xhigh_1282,_dataToSend+2
  4194  0004C2                     L4:
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;ax.c: 337: dataToSend[3] = 0;
  4198  0004C2  0E00               	movlw	0
  4199  0004C4  0100               	movlb	0	; () banked
  4200  0004C6  6FC1               	movwf	(_dataToSend+3)& (0+255),b
  4201  0004C8                     i2l2423:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;ax.c: 339: bytesSent = 0;
  4205  0004C8  0E00               	movlw	0
  4206  0004CA  0100               	movlb	0	; () banked
  4207  0004CC  6FDF               	movwf	(_bytesSent+1)& (0+255),b
  4208  0004CE  0E00               	movlw	0
  4209  0004D0  6FDE               	movwf	_bytesSent& (0+255),b
  4210  0004D2  D798               	goto	i2l2361
  4211  0004D4                     L5:
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;ax.c: 341: readIndex = 0;
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;ax.c: 340: currentCommand = -1;
  4218  0004D4  0E00               	movlw	0
  4219  0004D6  0100               	movlb	0	; () banked
  4220  0004D8  6FE5               	movwf	(_readIndex+1)& (0+255),b
  4221  0004DA  0E00               	movlw	0
  4222  0004DC  6FE4               	movwf	_readIndex& (0+255),b
  4223  0004DE                     i2l2429:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;ax.c: 342: }
  4227                           ;ax.c: 343: if (nbBytesToSend == 0) {
  4228  0004DE  0100               	movlb	0	; () banked
  4229  0004E0  51E2               	movf	_nbBytesToSend& (0+255),w,b
  4230  0004E2  0100               	movlb	0	; () banked
  4231  0004E4  11E3               	iorwf	(_nbBytesToSend+1)& (0+255),w,b
  4232  0004E6  A4D8               	btfss	status,2,c
  4233  0004E8  D007               	goto	i2l2437
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;ax.c: 345: readIndex = 0;
  4237  0004EA  0E00               	movlw	0
  4238  0004EC  0100               	movlb	0	; () banked
  4239  0004EE  6FE5               	movwf	(_readIndex+1)& (0+255),b
  4240  0004F0  0E00               	movlw	0
  4241  0004F2  6FE4               	movwf	_readIndex& (0+255),b
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;ax.c: 346: return 0;
  4245  0004F4  0E00               	movlw	0
  4246                           
  4247                           ; BSR set to: 0
  4248  0004F6  0012               	return	
  4249  0004F8                     i2l2437:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;ax.c: 347: }
  4253                           ;ax.c: 348: uint8_t d = dataToSend[bytesSent];
  4254  0004F8  0EBE               	movlw	low _dataToSend
  4255  0004FA  0100               	movlb	0	; () banked
  4256  0004FC  25DE               	addwf	_bytesSent& (0+255),w,b
  4257  0004FE  6ED9               	movwf	fsr2l,c
  4258  000500  0E00               	movlw	high _dataToSend
  4259  000502  0100               	movlb	0	; () banked
  4260  000504  21DF               	addwfc	(_bytesSent+1)& (0+255),w,b
  4261  000506  6EDA               	movwf	fsr2h,c
  4262  000508  50DF               	movf	indf2,w,c
  4263  00050A  6E59               	movwf	getByteToSend@d,c
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;ax.c: 349: bytesSent++;
  4267  00050C  0100               	movlb	0	; () banked
  4268  00050E  4BDE               	infsnz	_bytesSent& (0+255),f,b
  4269  000510  2BDF               	incf	(_bytesSent+1)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;ax.c: 351: if (bytesSent > nbBytesToSend) {
  4273  000512  0100               	movlb	0	; () banked
  4274  000514  51DE               	movf	_bytesSent& (0+255),w,b
  4275  000516  0100               	movlb	0	; () banked
  4276  000518  5DE2               	subwf	_nbBytesToSend& (0+255),w,b
  4277  00051A  0100               	movlb	0	; () banked
  4278  00051C  51E3               	movf	(_nbBytesToSend+1)& (0+255),w,b
  4279  00051E  0A80               	xorlw	128
  4280  000520  6E50               	movwf	??_getByteToSend& (0+255),c
  4281  000522  0100               	movlb	0	; () banked
  4282  000524  51DF               	movf	(_bytesSent+1)& (0+255),w,b
  4283  000526  0A80               	xorlw	128
  4284  000528  5850               	subwfb	??_getByteToSend& (0+255),w,c
  4285  00052A  B0D8               	btfsc	status,0,c
  4286  00052C  D007               	goto	i2l2449
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;ax.c: 353: readIndex = 0;
  4290  00052E  0E00               	movlw	0
  4291  000530  0100               	movlb	0	; () banked
  4292  000532  6FE5               	movwf	(_readIndex+1)& (0+255),b
  4293  000534  0E00               	movlw	0
  4294  000536  6FE4               	movwf	_readIndex& (0+255),b
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;ax.c: 354: return 111;
  4298  000538  0E6F               	movlw	111
  4299                           
  4300                           ; BSR set to: 0
  4301  00053A  0012               	return	
  4302  00053C                     i2l2449:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;ax.c: 355: }
  4306                           ;ax.c: 357: return d;
  4307  00053C  5059               	movf	getByteToSend@d,w,c
  4308  00053E  0012               	return	
  4309  000540                     __end_of_getByteToSend:
  4310                           	opt stack 0
  4311                           pclatu	equ	0xFFB
  4312                           pclath	equ	0xFFA
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           fsr0h	equ	0xFEA
  4322                           fsr0l	equ	0xFE9
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           fsr2h	equ	0xFDA
  4329                           fsr2l	equ	0xFD9
  4330                           status	equ	0xFD8
  4331                           
  4332 ;; *************** function i2_pingAX *****************
  4333 ;; Defined at:
  4334 ;;		line 180 in file "ax.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  id              2   23[COMRAM] int 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  pingAX         20   46[COMRAM] unsigned char [20]
  4339 ;;  pingAX         20   26[COMRAM] unsigned char [20]
  4340 ;;  pingAX          2   72[COMRAM] int 
  4341 ;;  pingAX          2   70[COMRAM] int 
  4342 ;;  pingAX          2   68[COMRAM] int 
  4343 ;;  pingAX          2   66[COMRAM] int 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  2   23[COMRAM] int 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4354 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4356 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4357 ;;Total ram usage:       51 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    2
  4360 ;; This function calls:
  4361 ;;		i2_sendAX
  4362 ;; This function is called by:
  4363 ;;		_getByteToSend
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text25
  4368  000C1C                     __ptext25:
  4369                           	opt stack 0
  4370  000C1C                     i2_pingAX:
  4371                           	opt stack 21
  4372                           
  4373                           ;ax.c: 181: uint8_t packet[20];
  4374                           ;ax.c: 182: uint8_t result[20];
  4375                           ;ax.c: 183: packet[0] = 0xFF;
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;incstack = 0
  4379  000C1C  682F               	setf	i2pingAX@packet,c
  4380                           
  4381                           ;ax.c: 184: packet[1] = 0xFF;
  4382  000C1E  6830               	setf	i2pingAX@packet+1,c
  4383                           
  4384                           ;ax.c: 185: packet[2] = id;
  4385  000C20  C018  F031         	movff	i2pingAX@id,i2pingAX@packet+2
  4386                           
  4387                           ;ax.c: 186: int nbParameters = 0;
  4388  000C24  0E00               	movlw	0
  4389  000C26  6E44               	movwf	i2pingAX@nbParameters+1,c
  4390  000C28  0E00               	movlw	0
  4391  000C2A  6E43               	movwf	i2pingAX@nbParameters,c
  4392                           
  4393                           ;ax.c: 187: int length = nbParameters + 2;
  4394  000C2C  0E02               	movlw	2
  4395  000C2E  2443               	addwf	i2pingAX@nbParameters,w,c
  4396  000C30  6E45               	movwf	i2pingAX@length,c
  4397  000C32  0E00               	movlw	0
  4398  000C34  2044               	addwfc	i2pingAX@nbParameters+1,w,c
  4399  000C36  6E46               	movwf	i2pingAX@length+1,c
  4400                           
  4401                           ;ax.c: 188: packet[3] = length;
  4402  000C38  C045  F032         	movff	i2pingAX@length,i2pingAX@packet+3
  4403                           
  4404                           ;ax.c: 189: int instruction = 0x01;
  4405  000C3C  0E00               	movlw	0
  4406  000C3E  6E48               	movwf	i2pingAX@instruction+1,c
  4407  000C40  0E01               	movlw	1
  4408  000C42  6E47               	movwf	i2pingAX@instruction,c
  4409                           
  4410                           ;ax.c: 190: packet[4] = instruction;
  4411  000C44  C047  F033         	movff	i2pingAX@instruction,i2pingAX@packet+4
  4412                           
  4413                           ;ax.c: 193: int error = sendAX(packet, 5, result, 0);
  4414  000C48  0E2F               	movlw	low i2pingAX@packet
  4415  000C4A  6E02               	movwf	i2sendAX@buffer,c
  4416  000C4C  0E00               	movlw	high i2pingAX@packet
  4417  000C4E  6E03               	movwf	i2sendAX@buffer+1,c
  4418  000C50  0E00               	movlw	0
  4419  000C52  6E05               	movwf	i2sendAX@packetSize+1,c
  4420  000C54  0E05               	movlw	5
  4421  000C56  6E04               	movwf	i2sendAX@packetSize,c
  4422  000C58  0E1B               	movlw	low i2pingAX@result
  4423  000C5A  6E06               	movwf	i2sendAX@result,c
  4424  000C5C  0E00               	movlw	high i2pingAX@result
  4425  000C5E  6E07               	movwf	i2sendAX@result+1,c
  4426  000C60  0E00               	movlw	0
  4427  000C62  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4428  000C64  0E00               	movlw	0
  4429  000C66  6E08               	movwf	i2sendAX@parametersToRead,c
  4430  000C68  ECA0  F002         	call	i2_sendAX	;wreg free
  4431  000C6C  6E1A               	movwf	??i2_pingAX& (0+255),c
  4432  000C6E  501A               	movf	??i2_pingAX,w,c
  4433  000C70  6E49               	movwf	i2pingAX@error,c
  4434  000C72  6A4A               	clrf	i2pingAX@error+1,c
  4435                           
  4436                           ;ax.c: 194: return error;
  4437  000C74  C049  F018         	movff	i2pingAX@error,?i2_pingAX
  4438  000C78  C04A  F019         	movff	i2pingAX@error+1,?i2_pingAX+1
  4439  000C7C  0012               	return	
  4440  000C7E                     __end_ofi2_pingAX:
  4441                           	opt stack 0
  4442                           pclatu	equ	0xFFB
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           fsr0h	equ	0xFEA
  4453                           fsr0l	equ	0xFE9
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1h	equ	0xFE2
  4457                           fsr1l	equ	0xFE1
  4458                           indf2	equ	0xFDF
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _writeAXData *****************
  4464 ;; Defined at:
  4465 ;;		line 224 in file "ax.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  id              2   23[COMRAM] int 
  4468 ;;  address         2   25[COMRAM] int 
  4469 ;;  data            2   27[COMRAM] int 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  packet         20   50[COMRAM] unsigned char [20]
  4472 ;;  result         20   30[COMRAM] unsigned char [20]
  4473 ;;  size            2   76[COMRAM] int 
  4474 ;;  error           2   74[COMRAM] int 
  4475 ;;  instruction     2   72[COMRAM] int 
  4476 ;;  length          2   70[COMRAM] int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  2   23[COMRAM] int 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4487 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4488 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4489 ;;      Totals:        55       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4490 ;;Total ram usage:       55 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    2
  4493 ;; This function calls:
  4494 ;;		_getAddressSize
  4495 ;;		i2_sendAX
  4496 ;; This function is called by:
  4497 ;;		_getByteToSend
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text26
  4502  000896                     __ptext26:
  4503                           	opt stack 0
  4504  000896                     _writeAXData:
  4505                           	opt stack 21
  4506                           
  4507                           ;ax.c: 225: int size = getAddressSize(address);
  4508                           
  4509                           ;incstack = 0
  4510  000896  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  4511  00089A  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  4512  00089E  ECD2  F005         	call	_getAddressSize	;wreg free
  4513  0008A2  C001  F04D         	movff	?_getAddressSize,writeAXData@size
  4514  0008A6  C002  F04E         	movff	?_getAddressSize+1,writeAXData@size+1
  4515                           
  4516                           ;ax.c: 227: uint8_t packet[20];
  4517                           ;ax.c: 228: uint8_t result[20];
  4518                           ;ax.c: 229: packet[0] = 0xFF;
  4519  0008AA  6833               	setf	writeAXData@packet,c
  4520                           
  4521                           ;ax.c: 230: packet[1] = 0xFF;
  4522  0008AC  6834               	setf	writeAXData@packet+1,c
  4523                           
  4524                           ;ax.c: 231: packet[2] = id;
  4525  0008AE  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  4526                           
  4527                           ;ax.c: 232: int length = size + 3;
  4528  0008B2  0E03               	movlw	3
  4529  0008B4  244D               	addwf	writeAXData@size,w,c
  4530  0008B6  6E47               	movwf	writeAXData@length,c
  4531  0008B8  0E00               	movlw	0
  4532  0008BA  204E               	addwfc	writeAXData@size+1,w,c
  4533  0008BC  6E48               	movwf	writeAXData@length+1,c
  4534                           
  4535                           ;ax.c: 233: packet[3] = length;
  4536  0008BE  C047  F036         	movff	writeAXData@length,writeAXData@packet+3
  4537                           
  4538                           ;ax.c: 234: int instruction = 0x03;
  4539  0008C2  0E00               	movlw	0
  4540  0008C4  6E4A               	movwf	writeAXData@instruction+1,c
  4541  0008C6  0E03               	movlw	3
  4542  0008C8  6E49               	movwf	writeAXData@instruction,c
  4543                           
  4544                           ;ax.c: 235: packet[4] = instruction;
  4545  0008CA  C049  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  4546                           
  4547                           ;ax.c: 236: packet[5] = address;
  4548  0008CE  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  4549                           
  4550                           ;ax.c: 237: if (size == 1) {
  4551  0008D2  044D               	decf	writeAXData@size,w,c
  4552  0008D4  104E               	iorwf	writeAXData@size+1,w,c
  4553  0008D6  A4D8               	btfss	status,2,c
  4554  0008D8  D003               	goto	i2l588
  4555                           
  4556                           ;ax.c: 238: packet[6] = data;
  4557  0008DA  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  4558                           
  4559                           ;ax.c: 239: } else {
  4560  0008DE  D004               	goto	i2l2265
  4561  0008E0                     i2l588:
  4562                           
  4563                           ;ax.c: 240: packet[6] = data & 0xff;
  4564  0008E0  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  4565                           
  4566                           ;ax.c: 241: packet[7] = (data >> 8);
  4567  0008E4  501D               	movf	writeAXData@data+1,w,c
  4568  0008E6  6E3A               	movwf	writeAXData@packet+7,c
  4569  0008E8                     i2l2265:
  4570                           
  4571                           ;ax.c: 242: }
  4572                           ;ax.c: 245: int error = sendAX(packet, 6 + size, result, 0);
  4573  0008E8  0E33               	movlw	low writeAXData@packet
  4574  0008EA  6E02               	movwf	i2sendAX@buffer,c
  4575  0008EC  0E00               	movlw	high writeAXData@packet
  4576  0008EE  6E03               	movwf	i2sendAX@buffer+1,c
  4577  0008F0  0E06               	movlw	6
  4578  0008F2  244D               	addwf	writeAXData@size,w,c
  4579  0008F4  6E04               	movwf	i2sendAX@packetSize,c
  4580  0008F6  0E00               	movlw	0
  4581  0008F8  204E               	addwfc	writeAXData@size+1,w,c
  4582  0008FA  6E05               	movwf	i2sendAX@packetSize+1,c
  4583  0008FC  0E1F               	movlw	low writeAXData@result
  4584  0008FE  6E06               	movwf	i2sendAX@result,c
  4585  000900  0E00               	movlw	high writeAXData@result
  4586  000902  6E07               	movwf	i2sendAX@result+1,c
  4587  000904  0E00               	movlw	0
  4588  000906  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4589  000908  0E00               	movlw	0
  4590  00090A  6E08               	movwf	i2sendAX@parametersToRead,c
  4591  00090C  ECA0  F002         	call	i2_sendAX	;wreg free
  4592  000910  6E1E               	movwf	??_writeAXData& (0+255),c
  4593  000912  501E               	movf	??_writeAXData,w,c
  4594  000914  6E4B               	movwf	writeAXData@error,c
  4595  000916  6A4C               	clrf	writeAXData@error+1,c
  4596                           
  4597                           ;ax.c: 246: return error;
  4598  000918  C04B  F018         	movff	writeAXData@error,?_writeAXData
  4599  00091C  C04C  F019         	movff	writeAXData@error+1,?_writeAXData+1
  4600  000920  0012               	return	
  4601  000922                     __end_of_writeAXData:
  4602                           	opt stack 0
  4603                           pclatu	equ	0xFFB
  4604                           pclath	equ	0xFFA
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           intcon	equ	0xFF2
  4612                           postinc0	equ	0xFEE
  4613                           fsr0h	equ	0xFEA
  4614                           fsr0l	equ	0xFE9
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1h	equ	0xFE2
  4618                           fsr1l	equ	0xFE1
  4619                           indf2	equ	0xFDF
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _readAXData *****************
  4625 ;; Defined at:
  4626 ;;		line 197 in file "ax.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  id              2   23[COMRAM] int 
  4629 ;;  address         2   25[COMRAM] int 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  packet         20   51[COMRAM] unsigned char [20]
  4632 ;;  result         20   29[COMRAM] unsigned char [20]
  4633 ;;  size            2   77[COMRAM] int 
  4634 ;;  instruction     2   75[COMRAM] int 
  4635 ;;  length          2   73[COMRAM] int 
  4636 ;;  nbParameters    2   71[COMRAM] int 
  4637 ;;  error           2   49[COMRAM] int 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  2   23[COMRAM] int 
  4640 ;; Registers used:
  4641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4648 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4650 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4651 ;;Total ram usage:       56 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    2
  4654 ;; This function calls:
  4655 ;;		_getAddressSize
  4656 ;;		i2_sendAX
  4657 ;; This function is called by:
  4658 ;;		_getByteToSend
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text27
  4663  0007FE                     __ptext27:
  4664                           	opt stack 0
  4665  0007FE                     _readAXData:
  4666                           	opt stack 21
  4667                           
  4668                           ;ax.c: 198: int size = getAddressSize(address);
  4669                           
  4670                           ;incstack = 0
  4671  0007FE  C01A  F001         	movff	readAXData@address,getAddressSize@address
  4672  000802  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  4673  000806  ECD2  F005         	call	_getAddressSize	;wreg free
  4674  00080A  C001  F04E         	movff	?_getAddressSize,readAXData@size
  4675  00080E  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  4676                           
  4677                           ;ax.c: 200: uint8_t packet[20];
  4678                           ;ax.c: 201: uint8_t result[20];
  4679                           ;ax.c: 202: packet[0] = 0xFF;
  4680  000812  6834               	setf	readAXData@packet,c
  4681                           
  4682                           ;ax.c: 203: packet[1] = 0xFF;
  4683  000814  6835               	setf	readAXData@packet+1,c
  4684                           
  4685                           ;ax.c: 204: packet[2] = id;
  4686  000816  C018  F036         	movff	readAXData@id,readAXData@packet+2
  4687                           
  4688                           ;ax.c: 205: int nbParameters = 2;
  4689  00081A  0E00               	movlw	0
  4690  00081C  6E49               	movwf	readAXData@nbParameters+1,c
  4691  00081E  0E02               	movlw	2
  4692  000820  6E48               	movwf	readAXData@nbParameters,c
  4693                           
  4694                           ;ax.c: 206: int length = nbParameters + 2;
  4695  000822  0E02               	movlw	2
  4696  000824  2448               	addwf	readAXData@nbParameters,w,c
  4697  000826  6E4A               	movwf	readAXData@length,c
  4698  000828  0E00               	movlw	0
  4699  00082A  2049               	addwfc	readAXData@nbParameters+1,w,c
  4700  00082C  6E4B               	movwf	readAXData@length+1,c
  4701                           
  4702                           ;ax.c: 207: packet[3] = length;
  4703  00082E  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  4704                           
  4705                           ;ax.c: 208: int instruction = 0x02;
  4706  000832  0E00               	movlw	0
  4707  000834  6E4D               	movwf	readAXData@instruction+1,c
  4708  000836  0E02               	movlw	2
  4709  000838  6E4C               	movwf	readAXData@instruction,c
  4710                           
  4711                           ;ax.c: 209: packet[4] = instruction;
  4712  00083A  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  4713                           
  4714                           ;ax.c: 210: packet[5] = address;
  4715  00083E  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  4716                           
  4717                           ;ax.c: 211: packet[6] = size;
  4718  000842  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  4719                           
  4720                           ;ax.c: 214: int error = sendAX(packet, 7, result, 1);
  4721  000846  0E34               	movlw	low readAXData@packet
  4722  000848  6E02               	movwf	i2sendAX@buffer,c
  4723  00084A  0E00               	movlw	high readAXData@packet
  4724  00084C  6E03               	movwf	i2sendAX@buffer+1,c
  4725  00084E  0E00               	movlw	0
  4726  000850  6E05               	movwf	i2sendAX@packetSize+1,c
  4727  000852  0E07               	movlw	7
  4728  000854  6E04               	movwf	i2sendAX@packetSize,c
  4729  000856  0E1E               	movlw	low readAXData@result
  4730  000858  6E06               	movwf	i2sendAX@result,c
  4731  00085A  0E00               	movlw	high readAXData@result
  4732  00085C  6E07               	movwf	i2sendAX@result+1,c
  4733  00085E  0E00               	movlw	0
  4734  000860  6E09               	movwf	i2sendAX@parametersToRead+1,c
  4735  000862  0E01               	movlw	1
  4736  000864  6E08               	movwf	i2sendAX@parametersToRead,c
  4737  000866  ECA0  F002         	call	i2_sendAX	;wreg free
  4738  00086A  6E1C               	movwf	??_readAXData& (0+255),c
  4739  00086C  501C               	movf	??_readAXData,w,c
  4740  00086E  6E32               	movwf	readAXData@error,c
  4741  000870  6A33               	clrf	readAXData@error+1,c
  4742                           
  4743                           ;ax.c: 215: if (size == 1) {
  4744  000872  044E               	decf	readAXData@size,w,c
  4745  000874  104F               	iorwf	readAXData@size+1,w,c
  4746  000876  A4D8               	btfss	status,2,c
  4747  000878  D004               	goto	i2l2237
  4748                           
  4749                           ;ax.c: 217: return result[5];
  4750  00087A  C023  F018         	movff	readAXData@result+5,?_readAXData
  4751  00087E  6A19               	clrf	?_readAXData+1,c
  4752                           
  4753                           ;ax.c: 218: } else {
  4754  000880  0012               	return	
  4755  000882                     i2l2237:
  4756                           
  4757                           ;ax.c: 220: return result[5] + result[6]*256;
  4758  000882  5024               	movf	readAXData@result+6,w,c
  4759  000884  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  4760  000886  6A1C               	clrf	??_readAXData& (0+255),c
  4761  000888  5023               	movf	readAXData@result+5,w,c
  4762  00088A  241C               	addwf	??_readAXData,w,c
  4763  00088C  6E18               	movwf	?_readAXData,c
  4764  00088E  0E00               	movlw	0
  4765  000890  201D               	addwfc	??_readAXData+1,w,c
  4766  000892  6E19               	movwf	?_readAXData+1,c
  4767  000894  0012               	return	
  4768  000896                     __end_of_readAXData:
  4769                           	opt stack 0
  4770                           pclatu	equ	0xFFB
  4771                           pclath	equ	0xFFA
  4772                           tblptru	equ	0xFF8
  4773                           tblptrh	equ	0xFF7
  4774                           tblptrl	equ	0xFF6
  4775                           tablat	equ	0xFF5
  4776                           prodh	equ	0xFF4
  4777                           prodl	equ	0xFF3
  4778                           intcon	equ	0xFF2
  4779                           postinc0	equ	0xFEE
  4780                           fsr0h	equ	0xFEA
  4781                           fsr0l	equ	0xFE9
  4782                           wreg	equ	0xFE8
  4783                           postdec1	equ	0xFE5
  4784                           fsr1h	equ	0xFE2
  4785                           fsr1l	equ	0xFE1
  4786                           indf2	equ	0xFDF
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function i2_sendAX *****************
  4792 ;; Defined at:
  4793 ;;		line 129 in file "ax.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  4796 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  4797 ;;  packetSize      2    3[COMRAM] int 
  4798 ;;  result          2    5[COMRAM] PTR unsigned char 
  4799 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  4800 ;;  parametersTo    2    7[COMRAM] int 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  sendAX          2   20[COMRAM] int 
  4803 ;;  sendAX          2   18[COMRAM] int 
  4804 ;;  sendAX          2   16[COMRAM] int 
  4805 ;;  sendAX          2   14[COMRAM] int 
  4806 ;;  sendAX          2   12[COMRAM] int 
  4807 ;;  sendAX          2   10[COMRAM] int 
  4808 ;;  sendAX          1   22[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      unsigned char 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4818 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4819 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4820 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4821 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4822 ;;Total ram usage:       22 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    1
  4825 ;; This function calls:
  4826 ;;		i2_EUSART1_Read
  4827 ;;		i2_EUSART1_Write
  4828 ;; This function is called by:
  4829 ;;		_readAXData
  4830 ;;		_writeAXData
  4831 ;;		i2_pingAX
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text28
  4836  000540                     __ptext28:
  4837                           	opt stack 0
  4838  000540                     i2_sendAX:
  4839                           	opt stack 21
  4840                           
  4841                           ;ax.c: 130: uint8_t checksum = 0;
  4842                           
  4843                           ;incstack = 0
  4844  000540  0E00               	movlw	0
  4845  000542  6E17               	movwf	i2sendAX@checksum,c
  4846                           
  4847                           ;ax.c: 132: for (int i = 2; i < packetSize; i++) {
  4848  000544  0E00               	movlw	0
  4849  000546  6E0E               	movwf	i2sendAX@i+1,c
  4850  000548  0E02               	movlw	2
  4851  00054A  6E0D               	movwf	i2sendAX@i,c
  4852  00054C  D00A               	goto	i2l2131
  4853  00054E                     i2l2127:
  4854                           
  4855                           ;ax.c: 133: checksum += buffer[i];
  4856  00054E  500D               	movf	i2sendAX@i,w,c
  4857  000550  2402               	addwf	i2sendAX@buffer,w,c
  4858  000552  6ED9               	movwf	fsr2l,c
  4859  000554  500E               	movf	i2sendAX@i+1,w,c
  4860  000556  2003               	addwfc	i2sendAX@buffer+1,w,c
  4861  000558  6EDA               	movwf	fsr2h,c
  4862  00055A  50DF               	movf	indf2,w,c
  4863  00055C  2617               	addwf	i2sendAX@checksum,f,c
  4864  00055E  4A0D               	infsnz	i2sendAX@i,f,c
  4865  000560  2A0E               	incf	i2sendAX@i+1,f,c
  4866  000562                     i2l2131:
  4867  000562  5004               	movf	i2sendAX@packetSize,w,c
  4868  000564  5C0D               	subwf	i2sendAX@i,w,c
  4869  000566  500E               	movf	i2sendAX@i+1,w,c
  4870  000568  0A80               	xorlw	128
  4871  00056A  6E0A               	movwf	??i2_sendAX& (0+255),c
  4872  00056C  5005               	movf	i2sendAX@packetSize+1,w,c
  4873  00056E  0A80               	xorlw	128
  4874  000570  580A               	subwfb	??i2_sendAX& (0+255),w,c
  4875  000572  A0D8               	btfss	status,0,c
  4876  000574  D7EC               	goto	i2l2127
  4877                           
  4878                           ;ax.c: 134: }
  4879                           ;ax.c: 135: checksum = ~checksum;
  4880  000576  1E17               	comf	i2sendAX@checksum,f,c
  4881                           
  4882                           ;ax.c: 137: do { LATD4 = 1; } while(0);
  4883  000578  888C               	bsf	3980,4,c	;volatile
  4884                           
  4885                           ;ax.c: 138: for (int i = 0; i < packetSize; i++) {
  4886  00057A  0E00               	movlw	0
  4887  00057C  6E10               	movwf	i2sendAX@i_1221+1,c
  4888  00057E  0E00               	movlw	0
  4889  000580  6E0F               	movwf	i2sendAX@i_1221,c
  4890  000582  D00B               	goto	i2l2143
  4891  000584                     i2l2139:
  4892                           
  4893                           ;ax.c: 139: EUSART1_Write(buffer[i]);
  4894  000584  500F               	movf	i2sendAX@i_1221,w,c
  4895  000586  2402               	addwf	i2sendAX@buffer,w,c
  4896  000588  6ED9               	movwf	fsr2l,c
  4897  00058A  5010               	movf	i2sendAX@i_1221+1,w,c
  4898  00058C  2003               	addwfc	i2sendAX@buffer+1,w,c
  4899  00058E  6EDA               	movwf	fsr2h,c
  4900  000590  50DF               	movf	indf2,w,c
  4901  000592  EC65  F007         	call	i2_EUSART1_Write
  4902  000596  4A0F               	infsnz	i2sendAX@i_1221,f,c
  4903  000598  2A10               	incf	i2sendAX@i_1221+1,f,c
  4904  00059A                     i2l2143:
  4905  00059A  5004               	movf	i2sendAX@packetSize,w,c
  4906  00059C  5C0F               	subwf	i2sendAX@i_1221,w,c
  4907  00059E  5010               	movf	i2sendAX@i_1221+1,w,c
  4908  0005A0  0A80               	xorlw	128
  4909  0005A2  6E0A               	movwf	??i2_sendAX& (0+255),c
  4910  0005A4  5005               	movf	i2sendAX@packetSize+1,w,c
  4911  0005A6  0A80               	xorlw	128
  4912  0005A8  580A               	subwfb	??i2_sendAX& (0+255),w,c
  4913  0005AA  A0D8               	btfss	status,0,c
  4914  0005AC  D7EB               	goto	i2l2139
  4915                           
  4916                           ;ax.c: 140: }
  4917                           ;ax.c: 141: EUSART1_Write(checksum);
  4918  0005AE  5017               	movf	i2sendAX@checksum,w,c
  4919  0005B0  EC65  F007         	call	i2_EUSART1_Write
  4920                           
  4921                           ;ax.c: 142: _delay((unsigned long)((100)*(16000000/4000000.0)));
  4922  0005B4  0E85               	movlw	133
  4923  0005B6                     i2u113_47:
  4924  0005B6  2EE8               	decfsz	wreg,f,c
  4925  0005B8  D7FE               	goto	i2u113_47
  4926  0005BA  F000               	nop	
  4927                           
  4928                           ;ax.c: 143: do { LATD4 = 0; } while(0);
  4929  0005BC  988C               	bcf	3980,4,c	;volatile
  4930                           
  4931                           ;ax.c: 159: int stop = 6 + parametersToRead;
  4932  0005BE  0E06               	movlw	6
  4933  0005C0  2408               	addwf	i2sendAX@parametersToRead,w,c
  4934  0005C2  6E0B               	movwf	i2sendAX@stop,c
  4935  0005C4  0E00               	movlw	0
  4936  0005C6  2009               	addwfc	i2sendAX@parametersToRead+1,w,c
  4937  0005C8  6E0C               	movwf	i2sendAX@stop+1,c
  4938                           
  4939                           ;ax.c: 161: for (int i = 0; i < stop; i++) {
  4940  0005CA  0E00               	movlw	0
  4941  0005CC  6E12               	movwf	i2sendAX@i_1224+1,c
  4942  0005CE  0E00               	movlw	0
  4943  0005D0  6E11               	movwf	i2sendAX@i_1224,c
  4944  0005D2  D00A               	goto	i2l2159
  4945  0005D4                     i2l2155:
  4946                           
  4947                           ;ax.c: 162: result[i] = 122;
  4948  0005D4  5011               	movf	i2sendAX@i_1224,w,c
  4949  0005D6  2406               	addwf	i2sendAX@result,w,c
  4950  0005D8  6ED9               	movwf	fsr2l,c
  4951  0005DA  5012               	movf	i2sendAX@i_1224+1,w,c
  4952  0005DC  2007               	addwfc	i2sendAX@result+1,w,c
  4953  0005DE  6EDA               	movwf	fsr2h,c
  4954  0005E0  0E7A               	movlw	122
  4955  0005E2  6EDF               	movwf	indf2,c
  4956  0005E4  4A11               	infsnz	i2sendAX@i_1224,f,c
  4957  0005E6  2A12               	incf	i2sendAX@i_1224+1,f,c
  4958  0005E8                     i2l2159:
  4959  0005E8  500B               	movf	i2sendAX@stop,w,c
  4960  0005EA  5C11               	subwf	i2sendAX@i_1224,w,c
  4961  0005EC  5012               	movf	i2sendAX@i_1224+1,w,c
  4962  0005EE  0A80               	xorlw	128
  4963  0005F0  6E0A               	movwf	??i2_sendAX& (0+255),c
  4964  0005F2  500C               	movf	i2sendAX@stop+1,w,c
  4965  0005F4  0A80               	xorlw	128
  4966  0005F6  580A               	subwfb	??i2_sendAX& (0+255),w,c
  4967  0005F8  A0D8               	btfss	status,0,c
  4968  0005FA  D7EC               	goto	i2l2155
  4969                           
  4970                           ;ax.c: 163: }
  4971                           ;ax.c: 165: int r0 = EUSART1_Read();
  4972  0005FC  EC45  F007         	call	i2_EUSART1_Read	;wreg free
  4973  000600  D002               	goto	L3
  4974  000602                     i2l2163:
  4975                           
  4976                           ;ax.c: 167: r0 = EUSART1_Read();
  4977  000602  EC45  F007         	call	i2_EUSART1_Read	;wreg free
  4978  000606                     L3:
  4979  000606  6E0A               	movwf	??i2_sendAX& (0+255),c
  4980  000608  500A               	movf	??i2_sendAX,w,c
  4981  00060A  6E13               	movwf	i2sendAX@r0,c
  4982  00060C  6A14               	clrf	i2sendAX@r0+1,c
  4983  00060E  2813               	incf	i2sendAX@r0,w,c
  4984  000610  1014               	iorwf	i2sendAX@r0+1,w,c
  4985  000612  A4D8               	btfss	status,2,c
  4986  000614  D7F6               	goto	i2l2163
  4987                           
  4988                           ;ax.c: 168: }
  4989                           ;ax.c: 169: result[0] = r0;
  4990  000616  C006  FFD9         	movff	i2sendAX@result,fsr2l
  4991  00061A  C007  FFDA         	movff	i2sendAX@result+1,fsr2h
  4992  00061E  C013  FFDF         	movff	i2sendAX@r0,indf2
  4993                           
  4994                           ;ax.c: 170: for (int i = 1; i < stop; i++) {
  4995  000622  0E00               	movlw	0
  4996  000624  6E16               	movwf	i2sendAX@i_1227+1,c
  4997  000626  0E01               	movlw	1
  4998  000628  6E15               	movwf	i2sendAX@i_1227,c
  4999  00062A  D00B               	goto	i2l2175
  5000  00062C                     i2l2171:
  5001                           
  5002                           ;ax.c: 171: result[i] = EUSART1_Read();
  5003  00062C  5015               	movf	i2sendAX@i_1227,w,c
  5004  00062E  2406               	addwf	i2sendAX@result,w,c
  5005  000630  6ED9               	movwf	fsr2l,c
  5006  000632  5016               	movf	i2sendAX@i_1227+1,w,c
  5007  000634  2007               	addwfc	i2sendAX@result+1,w,c
  5008  000636  6EDA               	movwf	fsr2h,c
  5009  000638  EC45  F007         	call	i2_EUSART1_Read	;wreg free
  5010  00063C  6EDF               	movwf	indf2,c
  5011  00063E  4A15               	infsnz	i2sendAX@i_1227,f,c
  5012  000640  2A16               	incf	i2sendAX@i_1227+1,f,c
  5013  000642                     i2l2175:
  5014  000642  500B               	movf	i2sendAX@stop,w,c
  5015  000644  5C15               	subwf	i2sendAX@i_1227,w,c
  5016  000646  5016               	movf	i2sendAX@i_1227+1,w,c
  5017  000648  0A80               	xorlw	128
  5018  00064A  6E0A               	movwf	??i2_sendAX& (0+255),c
  5019  00064C  500C               	movf	i2sendAX@stop+1,w,c
  5020  00064E  0A80               	xorlw	128
  5021  000650  580A               	subwfb	??i2_sendAX& (0+255),w,c
  5022  000652  A0D8               	btfss	status,0,c
  5023  000654  D7EB               	goto	i2l2171
  5024                           
  5025                           ;ax.c: 172: }
  5026                           ;ax.c: 175: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5027  000656  0EC8               	movlw	200
  5028  000658                     i2u114_47:
  5029  000658  F000               	nop	
  5030  00065A  2EE8               	decfsz	wreg,f,c
  5031  00065C  D7FD               	goto	i2u114_47
  5032                           
  5033                           ;ax.c: 176: return result[4];
  5034  00065E  EE20 F004          	lfsr	2,4
  5035  000662  5006               	movf	i2sendAX@result,w,c
  5036  000664  26D9               	addwf	fsr2l,f,c
  5037  000666  5007               	movf	i2sendAX@result+1,w,c
  5038  000668  22DA               	addwfc	fsr2h,f,c
  5039  00066A  50DF               	movf	indf2,w,c
  5040  00066C  0012               	return	
  5041  00066E                     __end_ofi2_sendAX:
  5042                           	opt stack 0
  5043                           pclatu	equ	0xFFB
  5044                           pclath	equ	0xFFA
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           postinc0	equ	0xFEE
  5053                           fsr0h	equ	0xFEA
  5054                           fsr0l	equ	0xFE9
  5055                           wreg	equ	0xFE8
  5056                           postdec1	equ	0xFE5
  5057                           fsr1h	equ	0xFE2
  5058                           fsr1l	equ	0xFE1
  5059                           indf2	equ	0xFDF
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function i2_EUSART1_Write *****************
  5065 ;; Defined at:
  5066 ;;		line 97 in file "mcc_generated_files/eusart1.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  txData          1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  txData          1    0[COMRAM] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5083 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5084 ;;Total ram usage:        1 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; This function calls:
  5087 ;;		Nothing
  5088 ;; This function is called by:
  5089 ;;		i2_sendAX
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	text29
  5094  000ECA                     __ptext29:
  5095                           	opt stack 0
  5096  000ECA                     i2_EUSART1_Write:
  5097                           	opt stack 21
  5098                           
  5099                           ;incstack = 0
  5100                           ;i2EUSART1_Write@txData stored from wreg
  5101  000ECA  6E01               	movwf	i2EUSART1_Write@txData,c
  5102  000ECC                     i2l122:
  5103  000ECC  A89E               	btfss	3998,4,c	;volatile
  5104  000ECE  D7FE               	goto	i2l122
  5105                           
  5106                           ;eusart1.c: 101: }
  5107                           ;eusart1.c: 103: TXREG1 = txData;
  5108  000ED0  C001  FFAD         	movff	i2EUSART1_Write@txData,4013	;volatile
  5109  000ED4  0012               	return		;funcret
  5110  000ED6                     __end_ofi2_EUSART1_Write:
  5111                           	opt stack 0
  5112                           pclatu	equ	0xFFB
  5113                           pclath	equ	0xFFA
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           postinc0	equ	0xFEE
  5122                           fsr0h	equ	0xFEA
  5123                           fsr0l	equ	0xFE9
  5124                           wreg	equ	0xFE8
  5125                           postdec1	equ	0xFE5
  5126                           fsr1h	equ	0xFE2
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function i2_EUSART1_Read *****************
  5134 ;; Defined at:
  5135 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;		None
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      unsigned char 
  5142 ;; Registers used:
  5143 ;;		wreg, status,2
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;Total ram usage:        0 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		i2_sendAX
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text30
  5163  000E8A                     __ptext30:
  5164                           	opt stack 0
  5165  000E8A                     i2_EUSART1_Read:
  5166                           	opt stack 21
  5167                           
  5168                           ;eusart1.c: 80: RCSTA1bits.SREN = 1;
  5169                           
  5170                           ;incstack = 0
  5171  000E8A  8AAB               	bsf	4011,5,c	;volatile
  5172  000E8C                     i2l115:
  5173  000E8C  AA9E               	btfss	3998,5,c	;volatile
  5174  000E8E  D7FE               	goto	i2l115
  5175                           
  5176                           ;eusart1.c: 83: }
  5177                           ;eusart1.c: 86: if(1 == RCSTA1bits.OERR)
  5178  000E90  A2AB               	btfss	4011,1,c	;volatile
  5179  000E92  D002               	goto	i2l2089
  5180                           
  5181                           ;eusart1.c: 87: {
  5182                           ;eusart1.c: 90: RCSTA1bits.SPEN = 0;
  5183  000E94  9EAB               	bcf	4011,7,c	;volatile
  5184                           
  5185                           ;eusart1.c: 91: RCSTA1bits.SPEN = 1;
  5186  000E96  8EAB               	bsf	4011,7,c	;volatile
  5187  000E98                     i2l2089:
  5188                           
  5189                           ;eusart1.c: 92: }
  5190                           ;eusart1.c: 94: return RCREG1;
  5191  000E98  50AE               	movf	4014,w,c	;volatile
  5192  000E9A  0012               	return	
  5193  000E9C                     __end_ofi2_EUSART1_Read:
  5194                           	opt stack 0
  5195                           pclatu	equ	0xFFB
  5196                           pclath	equ	0xFFA
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           postdec1	equ	0xFE5
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _getAddressSize *****************
  5217 ;; Defined at:
  5218 ;;		line 22 in file "ax.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  address         2    0[COMRAM] int 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  2    0[COMRAM] int 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5235 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5236 ;;Total ram usage:        4 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; This function calls:
  5239 ;;		Nothing
  5240 ;; This function is called by:
  5241 ;;		_readAXData
  5242 ;;		_writeAXData
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text31
  5247  000BA4                     __ptext31:
  5248                           	opt stack 0
  5249  000BA4                     _getAddressSize:
  5250                           	opt stack 22
  5251                           
  5252                           ;ax.c: 23: switch (address) {
  5253                           
  5254                           ;incstack = 0
  5255  000BA4  D00A               	goto	i2l2119
  5256  000BA6                     i2l2109:
  5257                           
  5258                           ;ax.c: 25: case 6:
  5259                           ;ax.c: 26: case 8:
  5260                           ;ax.c: 27: case 14:
  5261                           ;ax.c: 28: case 20:
  5262                           ;ax.c: 29: case 22:
  5263                           ;ax.c: 30: case 30:
  5264                           ;ax.c: 31: case 32:
  5265                           ;ax.c: 32: case 34:
  5266                           ;ax.c: 33: case 36:
  5267                           ;ax.c: 34: case 38:
  5268                           ;ax.c: 35: case 40:
  5269                           ;ax.c: 36: case 48:
  5270                           ;ax.c: 37: return 2;
  5271  000BA6  0E00               	movlw	0
  5272  000BA8  6E02               	movwf	?_getAddressSize+1,c
  5273  000BAA  0E02               	movlw	2
  5274  000BAC  6E01               	movwf	?_getAddressSize,c
  5275  000BAE  0012               	return	
  5276  000BB0                     i2l2113:
  5277                           
  5278                           ;ax.c: 39: return 1;
  5279  000BB0  0E00               	movlw	0
  5280  000BB2  6E02               	movwf	?_getAddressSize+1,c
  5281  000BB4  0E01               	movlw	1
  5282  000BB6  6E01               	movwf	?_getAddressSize,c
  5283                           
  5284                           ;ax.c: 40: }
  5285  000BB8  0012               	return	
  5286  000BBA                     i2l2119:
  5287  000BBA  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  5288  000BBE  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  5289                           
  5290                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5291                           ; Switch size 1, requested type "space"
  5292                           ; Number of cases is 1, Range of values is 0 to 0
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte            4     3 (average)
  5296                           ;	Chosen strategy is simple_byte
  5297  000BC2  5004               	movf	??_getAddressSize+1,w,c
  5298  000BC4  0A00               	xorlw	0	; case 0
  5299  000BC6  A4D8               	btfss	status,2,c
  5300  000BC8  D7F3               	goto	i2l2113
  5301                           
  5302                           ; Switch size 1, requested type "space"
  5303                           ; Number of cases is 13, Range of values is 0 to 48
  5304                           ; switch strategies available:
  5305                           ; Name         Instructions Cycles
  5306                           ; simple_byte           40    21 (average)
  5307                           ;	Chosen strategy is simple_byte
  5308  000BCA  5003               	movf	??_getAddressSize,w,c
  5309  000BCC  0A00               	xorlw	0	; case 0
  5310  000BCE  B4D8               	btfsc	status,2,c
  5311  000BD0  D7EA               	goto	i2l2109
  5312  000BD2  0A06               	xorlw	6	; case 6
  5313  000BD4  B4D8               	btfsc	status,2,c
  5314  000BD6  D7E7               	goto	i2l2109
  5315  000BD8  0A0E               	xorlw	14	; case 8
  5316  000BDA  B4D8               	btfsc	status,2,c
  5317  000BDC  D7E4               	goto	i2l2109
  5318  000BDE  0A06               	xorlw	6	; case 14
  5319  000BE0  B4D8               	btfsc	status,2,c
  5320  000BE2  D7E1               	goto	i2l2109
  5321  000BE4  0A1A               	xorlw	26	; case 20
  5322  000BE6  B4D8               	btfsc	status,2,c
  5323  000BE8  D7DE               	goto	i2l2109
  5324  000BEA  0A02               	xorlw	2	; case 22
  5325  000BEC  B4D8               	btfsc	status,2,c
  5326  000BEE  D7DB               	goto	i2l2109
  5327  000BF0  0A08               	xorlw	8	; case 30
  5328  000BF2  B4D8               	btfsc	status,2,c
  5329  000BF4  D7D8               	goto	i2l2109
  5330  000BF6  0A3E               	xorlw	62	; case 32
  5331  000BF8  B4D8               	btfsc	status,2,c
  5332  000BFA  D7D5               	goto	i2l2109
  5333  000BFC  0A02               	xorlw	2	; case 34
  5334  000BFE  B4D8               	btfsc	status,2,c
  5335  000C00  D7D2               	goto	i2l2109
  5336  000C02  0A06               	xorlw	6	; case 36
  5337  000C04  B4D8               	btfsc	status,2,c
  5338  000C06  D7CF               	goto	i2l2109
  5339  000C08  0A02               	xorlw	2	; case 38
  5340  000C0A  B4D8               	btfsc	status,2,c
  5341  000C0C  D7CC               	goto	i2l2109
  5342  000C0E  0A0E               	xorlw	14	; case 40
  5343  000C10  B4D8               	btfsc	status,2,c
  5344  000C12  D7C9               	goto	i2l2109
  5345  000C14  0A18               	xorlw	24	; case 48
  5346  000C16  B4D8               	btfsc	status,2,c
  5347  000C18  D7C6               	goto	i2l2109
  5348  000C1A  D7CA               	goto	i2l2113
  5349  000C1C                     __end_of_getAddressSize:
  5350                           	opt stack 0
  5351                           pclatu	equ	0xFFB
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           postinc0	equ	0xFEE
  5361                           fsr0h	equ	0xFEA
  5362                           fsr0l	equ	0xFE9
  5363                           wreg	equ	0xFE8
  5364                           postdec1	equ	0xFE5
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _getADC *****************
  5373 ;; Defined at:
  5374 ;;		line 119 in file "ax.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  adc             2    5[COMRAM] int 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  2    5[COMRAM] int 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5388 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5392 ;;Total ram usage:        2 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    1
  5395 ;; This function calls:
  5396 ;;		_ADC_GetConversion
  5397 ;; This function is called by:
  5398 ;;		_getByteToSend
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text32
  5403  000EAC                     __ptext32:
  5404                           	opt stack 0
  5405  000EAC                     _getADC:
  5406                           	opt stack 22
  5407                           
  5408                           ;ax.c: 120: return ADC_GetConversion(adc);
  5409                           
  5410                           ;incstack = 0
  5411  000EAC  5006               	movf	getADC@adc,w,c
  5412  000EAE  ECDA  F006         	call	_ADC_GetConversion
  5413  000EB2  C001  F006         	movff	?_ADC_GetConversion,?_getADC
  5414  000EB6  C002  F007         	movff	?_ADC_GetConversion+1,?_getADC+1
  5415  000EBA  0012               	return	
  5416  000EBC                     __end_of_getADC:
  5417                           	opt stack 0
  5418                           pclatu	equ	0xFFB
  5419                           pclath	equ	0xFFA
  5420                           tblptru	equ	0xFF8
  5421                           tblptrh	equ	0xFF7
  5422                           tblptrl	equ	0xFF6
  5423                           tablat	equ	0xFF5
  5424                           prodh	equ	0xFF4
  5425                           prodl	equ	0xFF3
  5426                           intcon	equ	0xFF2
  5427                           postinc0	equ	0xFEE
  5428                           fsr0h	equ	0xFEA
  5429                           fsr0l	equ	0xFE9
  5430                           wreg	equ	0xFE8
  5431                           postdec1	equ	0xFE5
  5432                           fsr1h	equ	0xFE2
  5433                           fsr1l	equ	0xFE1
  5434                           indf2	equ	0xFDF
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _ADC_GetConversion *****************
  5440 ;; Defined at:
  5441 ;;		line 104 in file "mcc_generated_files/adc.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  channel         1    wreg     enum E18216
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  channel         1    4[COMRAM] enum E18216
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  2    0[COMRAM] unsigned int 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5458 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5459 ;;Total ram usage:        5 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_getADC
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text33
  5469  000DB4                     __ptext33:
  5470                           	opt stack 0
  5471  000DB4                     _ADC_GetConversion:
  5472                           	opt stack 22
  5473                           
  5474                           ;incstack = 0
  5475                           ;ADC_GetConversion@channel stored from wreg
  5476  000DB4  6E05               	movwf	ADC_GetConversion@channel,c
  5477                           
  5478                           ;adc.c: 107: ADCON0bits.CHS = channel;
  5479  000DB6  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  5480  000DBA  4603               	rlncf	??_ADC_GetConversion,f,c
  5481  000DBC  4603               	rlncf	??_ADC_GetConversion,f,c
  5482  000DBE  50C2               	movf	4034,w,c	;volatile
  5483  000DC0  1803               	xorwf	??_ADC_GetConversion,w,c
  5484  000DC2  0B83               	andlw	-125
  5485  000DC4  1803               	xorwf	??_ADC_GetConversion,w,c
  5486  000DC6  6EC2               	movwf	4034,c	;volatile
  5487                           
  5488                           ;adc.c: 110: ADCON0bits.ADON = 1;
  5489  000DC8  80C2               	bsf	4034,0,c	;volatile
  5490                           
  5491                           ;adc.c: 114: ADCON0bits.GO_nDONE = 1;
  5492  000DCA  82C2               	bsf	4034,1,c	;volatile
  5493  000DCC                     i2l315:
  5494  000DCC  B2C2               	btfsc	4034,1,c	;volatile
  5495  000DCE  D7FE               	goto	i2l315
  5496                           
  5497                           ;adc.c: 119: }
  5498                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
  5499  000DD0  50C4               	movf	4036,w,c	;volatile
  5500  000DD2  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  5501  000DD4  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  5502  000DD6  50C3               	movf	4035,w,c	;volatile
  5503  000DD8  2403               	addwf	??_ADC_GetConversion,w,c
  5504  000DDA  6E01               	movwf	?_ADC_GetConversion,c
  5505  000DDC  0E00               	movlw	0
  5506  000DDE  2004               	addwfc	??_ADC_GetConversion+1,w,c
  5507  000DE0  6E02               	movwf	?_ADC_GetConversion+1,c
  5508  000DE2  0012               	return	
  5509  000DE4                     __end_of_ADC_GetConversion:
  5510                           	opt stack 0
  5511  0000                     pclatu	equ	0xFFB
  5512                           pclath	equ	0xFFA
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           postinc0	equ	0xFEE
  5521                           fsr0h	equ	0xFEA
  5522                           fsr0l	equ	0xFE9
  5523                           wreg	equ	0xFE8
  5524                           postdec1	equ	0xFE5
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           fsr2h	equ	0xFDA
  5529                           fsr2l	equ	0xFD9
  5530                           status	equ	0xFD8
  5531                           pclatu	equ	0xFFB
  5532                           pclath	equ	0xFFA
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           prodh	equ	0xFF4
  5538                           prodl	equ	0xFF3
  5539                           intcon	equ	0xFF2
  5540                           postinc0	equ	0xFEE
  5541                           fsr0h	equ	0xFEA
  5542                           fsr0l	equ	0xFE9
  5543                           wreg	equ	0xFE8
  5544                           postdec1	equ	0xFE5
  5545                           fsr1h	equ	0xFE2
  5546                           fsr1l	equ	0xFE1
  5547                           indf2	equ	0xFDF
  5548                           fsr2h	equ	0xFDA
  5549                           fsr2l	equ	0xFD9
  5550                           status	equ	0xFD8
  5551                           
  5552                           	psect	rparam
  5553  0000                     pclatu	equ	0xFFB
  5554                           pclath	equ	0xFFA
  5555                           tblptru	equ	0xFF8
  5556                           tblptrh	equ	0xFF7
  5557                           tblptrl	equ	0xFF6
  5558                           tablat	equ	0xFF5
  5559                           prodh	equ	0xFF4
  5560                           prodl	equ	0xFF3
  5561                           intcon	equ	0xFF2
  5562                           postinc0	equ	0xFEE
  5563                           fsr0h	equ	0xFEA
  5564                           fsr0l	equ	0xFE9
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           fsr1h	equ	0xFE2
  5568                           fsr1l	equ	0xFE1
  5569                           indf2	equ	0xFDF
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574                           	psect	temp
  5575  00005F                     btemp:
  5576                           	opt stack 0
  5577  00005F                     	ds	1
  5578  0000                     int$flags	set	btemp
  5579                           pclatu	equ	0xFFB
  5580                           pclath	equ	0xFFA
  5581                           tblptru	equ	0xFF8
  5582                           tblptrh	equ	0xFF7
  5583                           tblptrl	equ	0xFF6
  5584                           tablat	equ	0xFF5
  5585                           prodh	equ	0xFF4
  5586                           prodl	equ	0xFF3
  5587                           intcon	equ	0xFF2
  5588                           postinc0	equ	0xFEE
  5589                           fsr0h	equ	0xFEA
  5590                           fsr0l	equ	0xFE9
  5591                           wreg	equ	0xFE8
  5592                           postdec1	equ	0xFE5
  5593                           fsr1h	equ	0xFE2
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        130
    BSS         45
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     94     143
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(BANK0[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(BANK0[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_StatusCallback->_getByteToSend
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_readAXData
    i2_pingAX->i2_sendAX
    _writeAXData->i2_sendAX
    _readAXData->i2_sendAX
    i2_sendAX->i2_EUSART1_Write
    _getADC->_ADC_GetConversion

Critical Paths under _main in BANK0

    _main->_pingAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _I2C_ISR->_I2C_StatusCallback

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    3703
                                             90 BANK0      4     4      0
                  _SYSTEM_Initialize
                           _delay_ms
                             _pingAX
 ---------------------------------------------------------------------------------
 (1) _pingAX                                              51    49      2    1615
                                             39 BANK0     51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (2) _sendAX                                              22    14      8    1102
                                             17 BANK0     22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      22
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1799
                                             24 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             16 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                   _ECCP1_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             16 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ECCP1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    5218
                                              2 BANK0     14    14      0
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              1     1      0    5218
                                             93 COMRAM     1     1      0
                 _I2C_StatusCallback
 ---------------------------------------------------------------------------------
 (6) _I2C_StatusCallback                                   2     2      0    5194
                                              0 BANK0      2     2      0
                      _getByteToSend
                 _handleByteReceived
 ---------------------------------------------------------------------------------
 (7) _handleByteReceived                                   3     3      0     328
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (8) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _getByteToSend                                       14    14      0    4798
                                             79 COMRAM    14    14      0
                             _getADC
                         _readAXData
                        _writeAXData
                           i2_pingAX
 ---------------------------------------------------------------------------------
 (8) i2_pingAX                                            51    49      2    1127
                                             23 COMRAM    51    49      2
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (8) _writeAXData                                         55    49      6    1721
                                             23 COMRAM    55    49      6
                     _getAddressSize
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (8) _readAXData                                          56    52      4    1591
                                             23 COMRAM    56    52      4
                     _getAddressSize
                           i2_sendAX
 ---------------------------------------------------------------------------------
 (9) i2_sendAX                                            22    14      8     854
                                              1 COMRAM    22    14      8
                     i2_EUSART1_Read
                    i2_EUSART1_Write
 ---------------------------------------------------------------------------------
 (10) i2_EUSART1_Write                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2_EUSART1_Read                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _getADC                                               2     0      2     108
                                              5 COMRAM     2     0      2
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _ECCP1_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _pingAX
     _sendAX
       _EUSART1_Read
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_ISR
     _I2C_StatusCallback
       _getByteToSend
         _getADC
           _ADC_GetConversion
         _readAXData
           _getAddressSize
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
         _writeAXData
           _getAddressSize
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
         i2_pingAX
           i2_sendAX
             i2_EUSART1_Read
             i2_EUSART1_Write
       _handleByteReceived
         _setLedOff
         _setLedOn

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      80       8       50.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5E      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16D       6        0.0%
DATA                 0      0     16D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Apr 17 12:58:37 2017

                                  _c 00E0                          _SSPSTATbits 000FC7  
                       ___awdiv@sign 0075                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l122 0EC0                                  l115 0E68  
                                l401 0322                                  l411 0346  
                                l361 026E                                  l460 098A  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
         __end_of_handleByteReceived 0740                      __end_of_I2C_ISR 0D0E  
                    _timer1ReloadVal 00EB                                  wreg 000FE8  
                   i2sendAX@checksum 0017                                 l2501 00C0  
                               l2513 0112                                 l2293 0E74  
                               l2541 01DE                                 l2533 01A8  
                               l2525 0164                                 l2509 00F2  
                               l2561 075C                                 l2641 094A  
                               l2545 01FE                                 l2529 0182  
                               l2723 0258                                 l2573 0790  
                               l2645 0974                                 l2575 079C  
                               l2567 0772                                 l2639 0938  
                               l2593 07F4                                 l2585 07D2  
                               l2577 07A2                                 l2497 00A0  
                               l2771 0324                                 l2589 07E0  
                               u1107 0220                                 u1117 0940  
                               u1127 097C                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 u1097 013C  
                               _LATE 000F8D                                 _IPEN 007E87  
                               _WPUB 000F5B                        _EUSART1_Write 0EBC  
                               _main 0238                        ?_EUSART1_Read 0001  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 005F  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 008A  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                     readAXData@size 004E                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000010                          _writeAXData 0896  
           __size_ofi2_EUSART1_Write 000C                   writeAXData@address 001A  
            __size_of_getAddressSize 0078       __size_of_OSCILLATOR_Initialize 0012  
      __end_of_OSCILLATOR_Initialize 0E8A                                ?_main 0001  
                    __end_of___awdiv 07FE                      _TMR1_StartTimer 0EDC  
                    ___awdiv@divisor 0072                                _T1CON 000FCD  
                              _LATB0 007C50                                _LATC0 007C58  
                              _LATB2 007C52                                _LATC1 007C59  
                              _LATB3 007C53                                _LATD0 007C60  
                              _LATC2 007C5A                                _LATD1 007C61  
                              _LATD2 007C62                                _LATD3 007C63  
                              _LATD4 007C64                                i2l122 0ECC  
                              i2l115 0E8C                                i2l222 004E  
                              i2l161 0CF4                                i2l315 0DCC  
                              i2l500 0AC2                                i2l165 0D00  
                              i2l503 0AC6                                i2l512 0AD2  
                              i2l522 0B2C                                i2l506 0ACA  
                              i2l515 0AD6                                i2l532 0B38  
                              i2l541 0B44                                i2l509 0ACE  
                              i2l621 073E                                i2l550 0B50  
                              i2l526 0B30                                i2l198 0D14  
                              i2l535 0B3C                                i2l544 0B48  
                              i2l529 0B34                                i2l538 0B40  
                              i2l547 0B4C                                i2l491 0AB6  
                              i2l494 0ABA                                i2l487 0AB2  
                              i2l497 0ABE                                i2l588 08E0  
                    ___awdiv@counter 0074                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                    getByteToSend@xlow 0055  
                         i2pingAX@id 0018                           i2sendAX@r0 0013  
                   ??i2_EUSART1_Read 0001                                main@i 00BA  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 0D84  
                              tablat 000FF5               readAXData@nbParameters 0048  
                     ??_EUSART1_Read 0070                                status 000FD8  
                   __end_ofi2_pingAX 0C7E                     __end_ofi2_sendAX 066E  
                    readAXData@error 0032                      __initialization 0C7E  
         __end_of_EUSART1_Initialize 0E50                         __end_of_main 03D2  
                          ??_I2C_ISR 005E          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 00BA                        __activetblptr 000002  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 0E3A  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBD  
                             _CCPR1L 000FBC                     ___awdiv@dividend 0070  
                             _T1GCON 000FAA               I2C_StatusCallback@data 0061  
                    __CFG_BBSIZ$BB2K 000000                               i2l2113 0BB0  
                             i2l2131 0562                               i2l2109 0BA6  
                             i2l2119 0BBA                               i2l2143 059A  
                             i2l2127 054E                               i2l2313 069E  
                             i2l2171 062C                               i2l2163 0602  
                             i2l2155 05D4                               i2l2139 0584  
                             i2l2331 06EA                               i2l2237 0882  
                             i2l2405 0486                               i2l2309 068E  
                             i2l2175 0642                               i2l2159 05E8  
                             i2l2423 04C8                               i2l2343 0724  
                             i2l2319 06B4                               i2l2089 0E98  
                             i2l2265 08E8                               i2l2361 0404  
                             i2l2337 070A                               i2l2187 0ADA  
                             i2l2437 04F8                               i2l2429 04DE  
                             i2l2357 03FC                               i2l2365 040A  
                             i2l2197 0B54                       __CFG_WDTEN$OFF 000000  
                             i2l2449 053C                               i2l2635 0D0A  
                             i2l2389 044E                               i2l2493 0D30  
                             i2l2629 0CEC                               i2l2489 0D22  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                               _SSPADD 000FC8  
                             _TRISC0 007CA0                               _TRISC1 007CA1  
                             _SSPBUF 000FC9                               _TXREG1 000FAD  
                             _TXREG2 000F79                               _TXSTA1 000FAC  
                             _TXSTA2 000FBA                     __end_of_delay_ms 09AC  
                     __CFG_XINST$OFF 000000                       sendAX@checksum 0086  
            __end_of_TMR1_StartTimer 0EE0                               _getADC 0EAC  
                          ??___awdiv 0074                       __CFG_STVREN$ON 000000  
                 getByteToSend@error 0051                   getByteToSend@value 005A  
                 getByteToSend@xhigh 0056                               _pingAX 09AC  
                             _sendAX 008E                               clear_0 0CBC  
                i2pingAX@instruction 0047                     ___awdiv@quotient 0076  
                 _I2C_StatusCallback 0D0E              __size_of_I2C_Initialize 001A  
                   __end_of_setLedOn 0B2A                    ??i2_EUSART1_Write 0001  
                ?_I2C_StatusCallback 0001                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0005                   i2sendAX@packetSize 0004  
                    ??_EUSART1_Write 0070                    ?_ECCP1_Initialize 0001  
      __size_of_INTERRUPT_Initialize 0006                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 0DE4                   ??_ECCP1_Initialize 0070  
                         __accesstop 0060              __end_of__initialization 0CC2  
                   readAXData@packet 0034                     readAXData@length 004A  
                 ?_SYSTEM_Initialize 0001                          pingAX@error 00B8  
                      ___rparam_used 000001                     readAXData@result 001E  
               ??_I2C_StatusCallback 005E                         readAXData@id 0018  
                     __pcstackCOMRAM 0001                         __pidataBANK0 0EE0  
                       __pidataBANK1 0A30                readAXData@instruction 004C  
                ??_SYSTEM_Initialize 0072                __end_of_getByteToSend 0540  
                     _getAddressSize 0BA4                 __end_of_EUSART1_Read 0E78  
                          ?i2_pingAX 0018                            ?i2_sendAX 0002  
              i2EUSART1_Write@txData 0001            __end_of_SYSTEM_Initialize 0E0A  
                         _dataToSend 00BE                           __pbssBANK0 00BE  
             sendAX@parametersToRead 0077                      __CFG_PLLCFG$OFF 000000  
                 _handleByteReceived 066E                          setLedOn@led 0001  
                ?_handleByteReceived 0001               __end_of_getAddressSize 0C1C  
                       ?_writeAXData 0018                   __size_of_setLedOff 007A  
                            ?_getADC 0006                     ?_TMR1_StartTimer 0001  
                            _CCP1CON 000FBB                              _I2C_ISR 0CD0  
                            ?_pingAX 0087                              ?_sendAX 0071  
            __size_of_ADC_Initialize 0016                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                           ??i2_pingAX 001A  
                         ??i2_sendAX 000A                              _OSCCON2 000FD2  
                          ?_delay_ms 0078                 ??_handleByteReceived 0005  
                            _OSCTUNE 000F9B                              _SPBRGH1 000F7D  
                            _SPBRGH2 000F7C                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                    writeAXData@data 001C               getByteToSend@xlow_1281 0057  
                    writeAXData@size 004D                           _readAXData 07FE  
                          ?_setLedOn 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                getAddressSize@address 0001  
                            __Lparam 0000                      ?_getAddressSize 0001  
                            ___awdiv 0740                      __size_of_getADC 0010  
                            __pcinit 0C7E                       _I2C_Initialize 0E0A  
                    __size_of_pingAX 0084                              __ramtop 0F00  
                    __size_of_sendAX 01AA                              __ptext0 0238  
                            __ptext1 09AC                              __ptext2 008E  
                            __ptext3 0EBC                              __ptext4 0E66  
                            __ptext5 0922                              __ptext6 0740  
                            __ptext7 0DE4                              __ptext8 0D4A  
                            __ptext9 0EDC                           _parameter1 00E8  
                         _parameter2 00E9                           _parameter3 00EA  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 0E78  
                 _EUSART1_Initialize 0E3A             ??_PIN_MANAGER_Initialize 0070  
                  __CFG_MSSPMSK$MSK7 000000                           ??_delay_ms 007A  
                  __end_of_setLedOff 0BA4           __size_of_SYSTEM_Initialize 0026  
                       i2sendAX@stop 000B                           delay_ms@ms 0078  
               end_of_initialization 0CC2                  ?_EUSART1_Initialize 0001  
             handleByteReceived@data 0007   I2C_StatusCallbackOld@EEPROM_Buffer 0100  
                      __Lmediumconst 0000                              sendAX@i 007C  
                         ??_setLedOn 0003                   _EUSART2_Initialize 0E24  
                    i2_EUSART1_Write 0ECA                              postdec1 000FE5  
                            postinc0 000FEE                __size_of_EUSART1_Read 0012  
             __end_of_I2C_Initialize 0E24                 ??_EUSART1_Initialize 0070  
                ?_EUSART2_Initialize 0001                            _PORTCbits 000F82  
                  readAXData@address 001A                  EUSART1_Write@txData 0070  
               ??_EUSART2_Initialize 0070                       getByteToSend@d 0059  
                       pingAX@packet 009E                         pingAX@length 00B4  
                  pingAX@instruction 00B6                         pingAX@result 008A  
             writeAXData@instruction 0049                         _EUSART1_Read 0E66  
                        ?_readAXData 0018              __size_ofi2_EUSART1_Read 0012  
          __size_of_ECCP1_Initialize 0010                         sendAX@i_1221 007E  
                       sendAX@i_1224 0080                         sendAX@i_1227 0084  
       __end_of_INTERRUPT_Initialize 0EDC                      ?_I2C_Initialize 0001  
                  writeAXData@packet 0033                    writeAXData@length 0047  
                     __end_of_getADC 0EBC                 __size_of_writeAXData 008C  
                  writeAXData@result 001F                       _ADC_Initialize 0E50  
             ?_OSCILLATOR_Initialize 0001                         sendAX@buffer 0071  
                     __end_of_pingAX 0A30                       __end_of_sendAX 0238  
                          i2sendAX@i 000D                  handleByteReceived@i 0005  
                       sendAX@result 0075                  start_initialization 0C7E  
    __size_of_PIN_MANAGER_Initialize 0030                    __size_ofi2_pingAX 0062  
                  __size_ofi2_sendAX 012E                __end_of_EUSART1_Write 0ECA  
            __end_ofi2_EUSART1_Write 0ED6          __size_of_I2C_StatusCallback 003C  
                     _currentCommand 00EE             __size_of_TMR1_Initialize 003A  
                 pingAX@nbParameters 00B2                             ??_getADC 0008  
                        _CCPTMRSbits 000F99               __end_of_ADC_Initialize 0E66  
                        __pdataBANK0 00ED                          __pdataBANK1 0100  
                           ?_I2C_ISR 0001                             ??_pingAX 0089  
                           ??_sendAX 0079                  __size_of_readAXData 0098  
                      __pcstackBANK0 0060                         setLedOff@led 0001  
                         sendAX@stop 007A                    __size_of_delay_ms 008A  
             __size_of_getByteToSend 016E                     ??_getAddressSize 0003  
            getByteToSend@error_1277 0053                            __pnvBANK0 00EB  
             _PIN_MANAGER_Initialize 0D84                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 0070  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0062  
                          getADC@adc 0006                             _BAUDCON1 000FA7  
                           _BAUDCON2 000FB9             __size_of_TMR1_StartTimer 0004  
                      _nbBytesToSend 00E2          __size_of_handleByteReceived 00D2  
 I2C_StatusCallbackOld@eepromAddress 00E6             i2sendAX@parametersToRead 0008  
                          _readIndex 00E4                            _bytesSent 00DE  
               _INTERRUPT_Initialize 0ED6              getByteToSend@value_1279 005C  
                          _setLedOff 0B2A                     ?i2_EUSART1_Write 0001  
                          delay_ms@i 007D                            delay_ms@n 007B  
                     i2pingAX@packet 002F                       i2pingAX@length 0045  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                     i2pingAX@result 001B                             i2u113_47 05B6  
                           i2u114_47 0658  __size_of_INTERRUPT_InterruptManager 0082  
                     i2_EUSART1_Read 0E8A                             _PIR1bits 000F9E  
                           _PIR3bits 000FA4                     _ECCP1_Initialize 0E9C  
                      _getByteToSend 03D2              getByteToSend@xhigh_1282 0058  
                     i2sendAX@i_1221 000F                       i2sendAX@i_1224 0011  
                     i2sendAX@i_1227 0015                     __size_of_I2C_ISR 003E  
                  ??_TMR1_Initialize 0070                           _ADCON0bits 000FC2  
                   __CFG_SOSCSEL$DIG 000000                            main@delay 00BC  
                     i2sendAX@buffer 0002                             i2_pingAX 0C1C  
                           i2_sendAX 0540                       i2sendAX@result 0006  
                   writeAXData@error 004B                            copy_data0 0C92  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                       ??_readAXData 001C               __end_ofi2_EUSART1_Read 0E9C  
                   ??_I2C_Initialize 0070                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 0DB4  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 0070                   ?_ADC_GetConversion 0001  
                    I2C_ISR@i2c_data 005E                     __size_of___awdiv 00BE  
        __size_of_EUSART1_Initialize 0016                  ??_ADC_GetConversion 0003  
                           _delay_ms 0922                   __end_of_readAXData 0896  
                           __ptext10 0D84                             __ptext11 0E78  
                           __ptext20 0D0E                             __ptext12 0ED6  
                           __ptext21 066E                             __ptext13 0E0A  
                         _T1GCONbits 000FAA                             __ptext30 0E8A  
                           __ptext22 0AB0                             __ptext14 0E24  
                           __ptext31 0BA4                             __ptext23 0B2A  
                           __ptext15 0E3A                             __ptext32 0EAC  
                           __ptext24 03D2                             __ptext16 0E9C  
                           __ptext33 0DB4                             __ptext25 0C1C  
                           __ptext17 0E50                             __ptext26 0896  
                           __ptext27 07FE                             __ptext19 0CD0  
                           __ptext28 0540                             __ptext29 0ECA  
                  ??_TMR1_StartTimer 0070                        writeAXData@id 0018  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 019A  
I2C_StatusCallbackOld@slaveWriteType 00E7                      ?i2_EUSART1_Read 0001  
                           _setLedOn 0AB0            __end_of_ADC_GetConversion 0DE4  
                      i2pingAX@error 0049                        ??_writeAXData 001E  
                           int$flags 005F   __end_of_INTERRUPT_InterruptManager 008A  
         _INTERRUPT_InterruptManager 0008                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0073                   _I2C_slaveWriteData 00ED  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 0070  
                           pingAX@id 0087                             sendAX@r0 0082  
                           intlevel2 0000                          ??_setLedOff 0003  
            ?_PIN_MANAGER_Initialize 0001           __end_of_I2C_StatusCallback 0D4A  
                         _RCSTA1bits 000FAB                           _RCSTA2bits 000FA6  
    I2C_StatusCallback@i2c_bus_state 0060                     ??_ADC_Initialize 0070  
                    ??_getByteToSend 0050                   __CFG_WDTPS$1048576 000000  
             __size_of_EUSART1_Write 000E                  __end_of_writeAXData 0922  
                        _SSPCON1bits 000FC6             __end_of_ECCP1_Initialize 0EAC  
     __end_of_PIN_MANAGER_Initialize 0DB4                  __CFG_BORPWR$ZPBORMV 000000  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 0D4A  
               i2pingAX@nbParameters 0043  
