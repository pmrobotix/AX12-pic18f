

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 01 23:40:02 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.41
    58                           ; Generated 25/01/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F46K80 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataBANK0
    93  0022D8                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _currentCommand
    97  0022D8  FF                 	db	255
    98                           
    99                           ;initializer for _first
   100  0022D9  01                 	db	1
   101                           
   102                           ;initializer for _I2C_slaveWriteData
   103  0022DA  55                 	db	85
   104                           
   105                           	psect	smallconst
   106  000F00                     __psmallconst:
   107                           	opt stack 0
   108  000F00  00                 	db	0
   109  000F01                     _dpowers:
   110                           	opt stack 0
   111  000F01  0001               	dw	1
   112  000F03  0000               	dw	0
   113  000F05  000A               	dw	10
   114  000F07  0000               	dw	0
   115  000F09  0064               	dw	100
   116  000F0B  0000               	dw	0
   117  000F0D  03E8               	dw	1000
   118  000F0F  0000               	dw	0
   119  000F11  2710               	dw	10000
   120  000F13  0000               	dw	0
   121  000F15  86A0               	dw	34464
   122  000F17  0001               	dw	1
   123  000F19  4240               	dw	16960
   124  000F1B  000F               	dw	15
   125  000F1D  9680               	dw	38528
   126  000F1F  0098               	dw	152
   127  000F21  E100               	dw	57600
   128  000F23  05F5               	dw	1525
   129  000F25  CA00               	dw	51712
   130  000F27  3B9A               	dw	15258
   131  000F29                     __end_of_dpowers:
   132                           	opt stack 0
   133  0000                     _WPUB	set	3931
   134  0000                     _ANCON1	set	3932
   135  0000                     _ANCON0	set	3933
   136  0000                     _LATBbits	set	3978
   137  0000                     _LATCbits	set	3979
   138  0000                     _LATDbits	set	3980
   139  0000                     _INTCONbits	set	4082
   140  0000                     _RCONbits	set	4048
   141  0000                     _REFOCON	set	3994
   142  0000                     _OSCTUNE	set	3995
   143  0000                     _OSCCON2	set	4050
   144  0000                     _OSCCON	set	4051
   145  0000                     _ADCON0bits	set	4034
   146  0000                     _ADRESL	set	4035
   147  0000                     _ADRESH	set	4036
   148  0000                     _ADCON2	set	4032
   149  0000                     _ADCON1	set	4033
   150  0000                     _ADCON0	set	4034
   151  0000                     _T1GCONbits	set	4010
   152  0000                     _T1CONbits	set	4045
   153  0000                     _TMR1L	set	4046
   154  0000                     _TMR1H	set	4047
   155  0000                     _T1GCON	set	4010
   156  0000                     _T1CON	set	4045
   157  0000                     _PORTCbits	set	3970
   158  0000                     _SSPCON1bits	set	4038
   159  0000                     _SSPBUF	set	4041
   160  0000                     _SSPSTATbits	set	4039
   161  0000                     _PIE1bits	set	3997
   162  0000                     _SSPADD	set	4040
   163  0000                     _SSPCON2	set	4037
   164  0000                     _SSPCON1	set	4038
   165  0000                     _SSPSTAT	set	4039
   166  0000                     _TXREG1	set	4013
   167  0000                     _RCREG1	set	4014
   168  0000                     _RCSTA1bits	set	4011
   169  0000                     _PIR1bits	set	3998
   170  0000                     _SPBRGH1	set	3965
   171  0000                     _SPBRG1	set	4015
   172  0000                     _TXSTA1	set	4012
   173  0000                     _RCSTA1	set	4011
   174  0000                     _BAUDCON1	set	4007
   175  0000                     _TRISD	set	3989
   176  0000                     _TRISC	set	3988
   177  0000                     _TRISB	set	3987
   178  0000                     _TRISA	set	3986
   179  0000                     _TRISE	set	3990
   180  0000                     _LATC	set	3979
   181  0000                     _LATB	set	3978
   182  0000                     _LATA	set	3977
   183  0000                     _LATD	set	3980
   184  0000                     _LATE	set	3981
   185  0000                     _TXREG2	set	3961
   186  0000                     _RCREG2	set	3962
   187  0000                     _RCSTA2bits	set	4006
   188  0000                     _PIR3bits	set	4004
   189  0000                     _SPBRGH2	set	3964
   190  0000                     _SPBRG2	set	3963
   191  0000                     _TXSTA2	set	4026
   192  0000                     _RCSTA2	set	4006
   193  0000                     _BAUDCON2	set	4025
   194  0000                     _BCLIF	set	32011
   195  0000                     _SSPIF	set	31987
   196  000F29                     STR_4:
   197  000F29  52                 	db	82	;'R'
   198  000F2A  65                 	db	101	;'e'
   199  000F2B  61                 	db	97	;'a'
   200  000F2C  64                 	db	100	;'d'
   201  000F2D  69                 	db	105	;'i'
   202  000F2E  6E                 	db	110	;'n'
   203  000F2F  67                 	db	103	;'g'
   204  000F30  20                 	db	32
   205  000F31  61                 	db	97	;'a'
   206  000F32  6C                 	db	108	;'l'
   207  000F33  6C                 	db	108	;'l'
   208  000F34  20                 	db	32
   209  000F35  41                 	db	65	;'A'
   210  000F36  44                 	db	68	;'D'
   211  000F37  43                 	db	67	;'C'
   212  000F38  0D                 	db	13
   213  000F39  0A                 	db	10
   214  000F3A  00                 	db	0
   215  000F3B                     STR_3:
   216  000F3B  49                 	db	73	;'I'
   217  000F3C  6E                 	db	110	;'n'
   218  000F3D  69                 	db	105	;'i'
   219  000F3E  74                 	db	116	;'t'
   220  000F3F  20                 	db	32
   221  000F40  63                 	db	99	;'c'
   222  000F41  6F                 	db	111	;'o'
   223  000F42  6D                 	db	109	;'m'
   224  000F43  70                 	db	112	;'p'
   225  000F44  6C                 	db	108	;'l'
   226  000F45  65                 	db	101	;'e'
   227  000F46  74                 	db	116	;'t'
   228  000F47  65                 	db	101	;'e'
   229  000F48  64                 	db	100	;'d'
   230  000F49  0D                 	db	13
   231  000F4A  0A                 	db	10
   232  000F4B  00                 	db	0
   233  000F4C                     STR_5:
   234  000F4C  41                 	db	65	;'A'
   235  000F4D  44                 	db	68	;'D'
   236  000F4E  43                 	db	67	;'C'
   237  000F4F  20                 	db	32
   238  000F50  25                 	db	37
   239  000F51  64                 	db	100	;'d'
   240  000F52  20                 	db	32
   241  000F53  3A                 	db	58	;':'
   242  000F54  20                 	db	32
   243  000F55  25                 	db	37
   244  000F56  6C                 	db	108	;'l'
   245  000F57  64                 	db	100	;'d'
   246  000F58  0D                 	db	13
   247  000F59  0A                 	db	10
   248  000F5A  00                 	db	0
   249  000F5B                     STR_2:
   250  000F5B  50                 	db	80	;'P'
   251  000F5C  4D                 	db	77	;'M'
   252  000F5D  20                 	db	32
   253  000F5E  52                 	db	82	;'R'
   254  000F5F  6F                 	db	111	;'o'
   255  000F60  62                 	db	98	;'b'
   256  000F61  6F                 	db	111	;'o'
   257  000F62  74                 	db	116	;'t'
   258  000F63  69                 	db	105	;'i'
   259  000F64  78                 	db	120	;'x'
   260  000F65  0D                 	db	13
   261  000F66  0A                 	db	10
   262  000F67  00                 	db	0
   263  000F68                     STR_1:
   264  000F68  63                 	db	99	;'c'
   265  000F69  6F                 	db	111	;'o'
   266  000F6A  6C                 	db	108	;'l'
   267  000F6B  6C                 	db	108	;'l'
   268  000F6C  69                 	db	105	;'i'
   269  000F6D  64                 	db	100	;'d'
   270  000F6E  65                 	db	101	;'e'
   271  000F6F  0D                 	db	13
   272  000F70  0A                 	db	10
   273  000F71  00                 	db	0
   274                           
   275                           ; #config settings
   276  000F72  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  002186                     __pcinit:
   280                           	opt stack 0
   281  002186                     start_initialization:
   282                           	opt stack 0
   283  002186                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Initialize objects allocated to BANK0 (3 bytes)
   287                           ; load TBLPTR registers with __pidataBANK0
   288  002186  0ED8               	movlw	low __pidataBANK0
   289  002188  6EF6               	movwf	tblptrl,c
   290  00218A  0E22               	movlw	high __pidataBANK0
   291  00218C  6EF7               	movwf	tblptrh,c
   292  00218E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   293  002190  6EF8               	movwf	tblptru,c
   294  002192  0009               	tblrd		*+	;fetch initializer
   295  002194  CFF5 F0E7          	movff	tablat,__pdataBANK0
   296  002198  0009               	tblrd		*+	;fetch initializer
   297  00219A  CFF5 F0E8          	movff	tablat,__pdataBANK0+1
   298  00219E  0009               	tblrd		*+	;fetch initializer
   299  0021A0  CFF5 F0E9          	movff	tablat,__pdataBANK0+2
   300                           
   301                           ; Clear objects allocated to BANK0 (70 bytes)
   302  0021A4  EE00  F060         	lfsr	0,__pbssBANK0
   303  0021A8  0E46               	movlw	70
   304  0021AA                     clear_0:
   305  0021AA  6AEE               	clrf	postinc0,c
   306  0021AC  06E8               	decf	wreg,f,c
   307  0021AE  E1FD               	bnz	clear_0
   308                           
   309                           ; Clear objects allocated to COMRAM (1 bytes)
   310  0021B0  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   311  0021B2                     end_of_initialization:
   312                           	opt stack 0
   313  0021B2                     __end_of__initialization:
   314                           	opt stack 0
   315  0021B2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   316  0021B4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   317  0021B6  0100               	movlb	0
   318  0021B8  EFBA  F007         	goto	_main	;jump to C main() function
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	bssCOMRAM
   327  00005E                     __pbssCOMRAM:
   328                           	opt stack 0
   329  00005E                     _parameter1:
   330                           	opt stack 0
   331  00005E                     	ds	1
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           	psect	bssBANK0
   340  000060                     __pbssBANK0:
   341                           	opt stack 0
   342  000060                     _dataToSend:
   343                           	opt stack 0
   344  000060                     	ds	32
   345  000080                     _adc_values:
   346                           	opt stack 0
   347  000080                     	ds	20
   348  000094                     _bytesSent:
   349                           	opt stack 0
   350  000094                     	ds	2
   351  000096                     _nbBytesToSend:
   352                           	opt stack 0
   353  000096                     	ds	2
   354  000098                     _readIndex:
   355                           	opt stack 0
   356  000098                     	ds	2
   357  00009A                     _TMR1_InterruptHandler:
   358                           	opt stack 0
   359  00009A                     	ds	2
   360  00009C                     _timer1ReloadVal:
   361                           	opt stack 0
   362  00009C                     	ds	2
   363  00009E                     _index_i2c:
   364                           	opt stack 0
   365  00009E                     	ds	2
   366  0000A0                     _parameter6:
   367                           	opt stack 0
   368  0000A0                     	ds	1
   369  0000A1                     _parameter5:
   370                           	opt stack 0
   371  0000A1                     	ds	1
   372  0000A2                     _parameter4:
   373                           	opt stack 0
   374  0000A2                     	ds	1
   375  0000A3                     _parameter3:
   376                           	opt stack 0
   377  0000A3                     	ds	1
   378  0000A4                     _parameter2:
   379                           	opt stack 0
   380  0000A4                     	ds	1
   381  0000A5                     _junk:
   382                           	opt stack 0
   383  0000A5                     	ds	1
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	dataBANK0
   392  0000E7                     __pdataBANK0:
   393                           	opt stack 0
   394  0000E7                     _currentCommand:
   395                           	opt stack 0
   396  0000E7                     	ds	1
   397  0000E8                     _first:
   398                           	opt stack 0
   399  0000E8                     	ds	1
   400  0000E9                     _I2C_slaveWriteData:
   401                           	opt stack 0
   402  0000E9                     	ds	1
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410                           	psect	cstackBANK0
   411  0000A6                     __pcstackBANK0:
   412                           	opt stack 0
   413  0000A6                     ??_INTERRUPT_InterruptManager:
   414                           
   415                           ; 1 bytes @ 0x0
   416  0000A6                     	ds	14
   417  0000B4                     ??_TMR1_Initialize:
   418  0000B4                     ?_ADC_GetConversion:
   419                           	opt stack 0
   420  0000B4                     ?___awdiv:
   421                           	opt stack 0
   422  0000B4                     ?___lldiv:
   423                           	opt stack 0
   424  0000B4                     EUSART2_Write@txData:
   425                           	opt stack 0
   426  0000B4                     ___awdiv@dividend:
   427                           	opt stack 0
   428  0000B4                     ___lldiv@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0xE
   432  0000B4                     	ds	1
   433  0000B5                     putch@txData:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0xF
   437  0000B5                     	ds	1
   438  0000B6                     ??_ADC_GetConversion:
   439  0000B6                     ___awdiv@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x10
   443  0000B6                     	ds	2
   444  0000B8                     ADC_GetConversion@channel:
   445                           	opt stack 0
   446  0000B8                     ___awdiv@counter:
   447                           	opt stack 0
   448  0000B8                     ___lldiv@divisor:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x12
   452  0000B8                     	ds	1
   453  0000B9                     ___awdiv@sign:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x13
   457  0000B9                     	ds	1
   458  0000BA                     ___awdiv@quotient:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x14
   462  0000BA                     	ds	2
   463  0000BC                     delay_ms@ms:
   464                           	opt stack 0
   465  0000BC                     ___lldiv@quotient:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x16
   469  0000BC                     	ds	2
   470  0000BE                     ??_delay_ms:
   471                           
   472                           ; 1 bytes @ 0x18
   473  0000BE                     	ds	1
   474  0000BF                     delay_ms@n:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x19
   478  0000BF                     	ds	1
   479  0000C0                     ___lldiv@counter:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x1A
   483  0000C0                     	ds	1
   484  0000C1                     ?___llmod:
   485                           	opt stack 0
   486  0000C1                     delay_ms@i:
   487                           	opt stack 0
   488  0000C1                     ___llmod@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x1B
   492  0000C1                     	ds	4
   493  0000C5                     ___llmod@divisor:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x1F
   497  0000C5                     	ds	4
   498  0000C9                     ___llmod@counter:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x23
   502  0000C9                     	ds	1
   503  0000CA                     ?_printf:
   504                           	opt stack 0
   505  0000CA                     printf@f:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x24
   509  0000CA                     	ds	6
   510  0000D0                     ??_printf:
   511                           
   512                           ; 1 bytes @ 0x2A
   513  0000D0                     	ds	2
   514  0000D2                     printf@prec:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x2C
   518  0000D2                     	ds	2
   519  0000D4                     printf@ap:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x2E
   523  0000D4                     	ds	2
   524  0000D6                     printf@flag:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x30
   528  0000D6                     	ds	1
   529  0000D7                     printf@val:
   530                           	opt stack 0
   531                           
   532                           ; 4 bytes @ 0x31
   533  0000D7                     	ds	4
   534  0000DB                     printf@c:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x35
   538  0000DB                     	ds	1
   539  0000DC                     ??_main:
   540                           
   541                           ; 1 bytes @ 0x36
   542  0000DC                     	ds	1
   543  0000DD                     main@i:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x37
   547  0000DD                     	ds	2
   548  0000DF                     main@i_1270:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x39
   552  0000DF                     	ds	2
   553  0000E1                     main@adc:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x3B
   557  0000E1                     	ds	2
   558  0000E3                     main@adc_1272:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x3D
   562  0000E3                     	ds	2
   563  0000E5                     main@delay:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x3F
   567  0000E5                     	ds	2
   568                           tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           
   575                           	psect	cstackCOMRAM
   576  000001                     __pcstackCOMRAM:
   577                           	opt stack 0
   578  000001                     ?_getAddressSize:
   579                           	opt stack 0
   580  000001                     ?i2_ADC_GetConversion:
   581                           	opt stack 0
   582  000001                     ?i2___lldiv:
   583                           	opt stack 0
   584  000001                     EUSART1_Write@txData:
   585                           	opt stack 0
   586  000001                     i2EUSART2_Write@txData:
   587                           	opt stack 0
   588  000001                     getAddressSize@address:
   589                           	opt stack 0
   590  000001                     setLedOn@led:
   591                           	opt stack 0
   592  000001                     setLedOff@led:
   593                           	opt stack 0
   594  000001                     i2___lldiv@dividend:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x0
   598  000001                     	ds	1
   599  000002                     i2putch@txData:
   600                           	opt stack 0
   601  000002                     sendAX@buffer:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x1
   605  000002                     	ds	1
   606  000003                     ??_getAddressSize:
   607  000003                     ??_setLedOn:
   608  000003                     ??_setLedOff:
   609  000003                     ??i2_ADC_GetConversion:
   610                           
   611                           ; 1 bytes @ 0x2
   612  000003                     	ds	1
   613  000004                     sendAX@packetSize:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x3
   617  000004                     	ds	1
   618  000005                     i2ADC_GetConversion@channel:
   619                           	opt stack 0
   620  000005                     handleByteReceived@i:
   621                           	opt stack 0
   622  000005                     i2___lldiv@divisor:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x4
   626  000005                     	ds	1
   627  000006                     sendAX@result:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x5
   631  000006                     	ds	1
   632  000007                     handleByteReceived@data:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x6
   636  000007                     	ds	1
   637  000008                     sendAX@parametersToRead:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x7
   641  000008                     	ds	1
   642  000009                     i2___lldiv@quotient:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x8
   646  000009                     	ds	1
   647  00000A                     ??_sendAX:
   648                           
   649                           ; 1 bytes @ 0x9
   650  00000A                     	ds	1
   651  00000B                     sendAX@stop:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0xA
   655  00000B                     	ds	2
   656  00000D                     i2___lldiv@counter:
   657                           	opt stack 0
   658  00000D                     sendAX@i:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0xC
   662  00000D                     	ds	1
   663  00000E                     ?i2___llmod:
   664                           	opt stack 0
   665  00000E                     i2___llmod@dividend:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0xD
   669  00000E                     	ds	1
   670  00000F                     sendAX@i_1375:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0xE
   674  00000F                     	ds	2
   675  000011                     sendAX@i_1378:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x10
   679  000011                     	ds	1
   680  000012                     i2___llmod@divisor:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x11
   684  000012                     	ds	1
   685  000013                     sendAX@r0:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x12
   689  000013                     	ds	2
   690  000015                     sendAX@i_1381:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x14
   694  000015                     	ds	1
   695  000016                     i2___llmod@counter:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x15
   699  000016                     	ds	1
   700  000017                     ?i2_printf:
   701                           	opt stack 0
   702  000017                     sendAX@checksum:
   703                           	opt stack 0
   704  000017                     i2printf@f:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x16
   708  000017                     	ds	1
   709  000018                     ?_pingAX:
   710                           	opt stack 0
   711  000018                     ?_readAXData:
   712                           	opt stack 0
   713  000018                     ?_writeAXData:
   714                           	opt stack 0
   715  000018                     pingAX@id:
   716                           	opt stack 0
   717  000018                     readAXData@id:
   718                           	opt stack 0
   719  000018                     writeAXData@id:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x17
   723  000018                     	ds	1
   724  000019                     ??i2_printf:
   725                           
   726                           ; 1 bytes @ 0x18
   727  000019                     	ds	1
   728  00001A                     ??_pingAX:
   729  00001A                     readAXData@address:
   730                           	opt stack 0
   731  00001A                     writeAXData@address:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x19
   735  00001A                     	ds	1
   736  00001B                     i2printf@prec:
   737                           	opt stack 0
   738  00001B                     pingAX@result:
   739                           	opt stack 0
   740                           
   741                           ; 20 bytes @ 0x1A
   742  00001B                     	ds	1
   743  00001C                     ??_readAXData:
   744  00001C                     writeAXData@data:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x1B
   748  00001C                     	ds	1
   749  00001D                     i2printf@ap:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x1C
   753  00001D                     	ds	1
   754  00001E                     ??_writeAXData:
   755  00001E                     readAXData@result:
   756                           	opt stack 0
   757                           
   758                           ; 20 bytes @ 0x1D
   759  00001E                     	ds	1
   760  00001F                     i2printf@flag:
   761                           	opt stack 0
   762  00001F                     writeAXData@result:
   763                           	opt stack 0
   764                           
   765                           ; 20 bytes @ 0x1E
   766  00001F                     	ds	1
   767  000020                     i2printf@val:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x1F
   771  000020                     	ds	4
   772  000024                     i2printf@c:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x23
   776  000024                     	ds	11
   777  00002F                     pingAX@packet:
   778                           	opt stack 0
   779                           
   780                           ; 20 bytes @ 0x2E
   781  00002F                     	ds	3
   782  000032                     readAXData@error:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x31
   786  000032                     	ds	1
   787  000033                     writeAXData@packet:
   788                           	opt stack 0
   789                           
   790                           ; 20 bytes @ 0x32
   791  000033                     	ds	1
   792  000034                     readAXData@packet:
   793                           	opt stack 0
   794                           
   795                           ; 20 bytes @ 0x33
   796  000034                     	ds	15
   797  000043                     pingAX@nbParameters:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x42
   801  000043                     	ds	2
   802  000045                     pingAX@length:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x44
   806  000045                     	ds	2
   807  000047                     pingAX@instruction:
   808                           	opt stack 0
   809  000047                     writeAXData@length:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x46
   813  000047                     	ds	1
   814  000048                     readAXData@nbParameters:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x47
   818  000048                     	ds	1
   819  000049                     pingAX@error:
   820                           	opt stack 0
   821  000049                     writeAXData@instruction:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x48
   825  000049                     	ds	1
   826  00004A                     readAXData@length:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x49
   830  00004A                     	ds	1
   831  00004B                     writeAXData@error:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x4A
   835  00004B                     	ds	1
   836  00004C                     readAXData@instruction:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x4B
   840  00004C                     	ds	1
   841  00004D                     writeAXData@size:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x4C
   845  00004D                     	ds	1
   846  00004E                     readAXData@size:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x4D
   850  00004E                     	ds	2
   851  000050                     ??_getByteToSend:
   852                           
   853                           ; 1 bytes @ 0x4F
   854  000050                     	ds	1
   855  000051                     getByteToSend@error:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x50
   859  000051                     	ds	2
   860  000053                     getByteToSend@error_1438:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x52
   864  000053                     	ds	2
   865  000055                     getByteToSend@xlow:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x54
   869  000055                     	ds	1
   870  000056                     getByteToSend@xhigh:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x55
   874  000056                     	ds	1
   875  000057                     getByteToSend@xlow_1441:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x56
   879  000057                     	ds	1
   880  000058                     getByteToSend@xhigh_1442:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x57
   884  000058                     	ds	1
   885  000059                     getByteToSend@d:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x58
   889  000059                     	ds	1
   890  00005A                     getByteToSend@value:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x59
   894  00005A                     	ds	2
   895  00005C                     getByteToSend@value_1440:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x5B
   899  00005C                     	ds	2
   900  00005E                     tblptru	equ	0xFF8
   901                           tblptrh	equ	0xFF7
   902                           tblptrl	equ	0xFF6
   903                           tablat	equ	0xFF5
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           
   907                           ; 1 bytes @ 0x5D
   908 ;;
   909 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   910 ;;
   911 ;; *************** function _main *****************
   912 ;; Defined at:
   913 ;;		line 52 in file "main.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;		None
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  adc             2   61[BANK0 ] int 
   918 ;;  i               2   57[BANK0 ] int 
   919 ;;  i               2   55[BANK0 ] int 
   920 ;;  adc             2   59[BANK0 ] int 
   921 ;;  delay           2   63[BANK0 ] int 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   932 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   934 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   935 ;;Total ram usage:       11 bytes
   936 ;; Hardware stack levels required when called:    9
   937 ;; This function calls:
   938 ;;		_ADC_GetConversion
   939 ;;		_SYSTEM_Initialize
   940 ;;		_delay_ms
   941 ;;		_printf
   942 ;; This function is called by:
   943 ;;		Startup code after reset
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text0
   948  000F74                     __ptext0:
   949                           	opt stack 0
   950  000F74                     _main:
   951                           	opt stack 22
   952                           
   953                           ;main.c: 54: for (int adc = 0; adc < 10; adc++) {
   954                           
   955                           ;incstack = 0
   956  000F74  0E00               	movlw	0
   957  000F76  0100               	movlb	0	; () banked
   958  000F78  6FE2               	movwf	(main@adc+1)& (0+255),b
   959  000F7A  0E00               	movlw	0
   960  000F7C  6FE1               	movwf	main@adc& (0+255),b
   961  000F7E                     l3036:
   962                           
   963                           ; BSR set to: 0
   964  000F7E  0100               	movlb	0	; () banked
   965  000F80  BFE2               	btfsc	(main@adc+1)& (0+255),7,b
   966  000F82  D008               	goto	l3040
   967  000F84  0100               	movlb	0	; () banked
   968  000F86  51E2               	movf	(main@adc+1)& (0+255),w,b
   969  000F88  E118               	bnz	l3046
   970  000F8A  0E0A               	movlw	10
   971  000F8C  0100               	movlb	0	; () banked
   972  000F8E  5DE1               	subwf	main@adc& (0+255),w,b
   973  000F90  B0D8               	btfsc	status,0,c
   974  000F92  D013               	goto	l3046
   975  000F94                     l3040:
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 55: adc_values[adc] = 0;
   979  000F94  90D8               	bcf	status,0,c
   980  000F96  0100               	movlb	0	; () banked
   981  000F98  35E1               	rlcf	main@adc& (0+255),w,b
   982  000F9A  6ED9               	movwf	fsr2l,c
   983  000F9C  0100               	movlb	0	; () banked
   984  000F9E  35E2               	rlcf	(main@adc+1)& (0+255),w,b
   985  000FA0  6EDA               	movwf	fsr2h,c
   986  000FA2  0E80               	movlw	low _adc_values
   987  000FA4  26D9               	addwf	fsr2l,f,c
   988  000FA6  0E00               	movlw	high _adc_values
   989  000FA8  22DA               	addwfc	fsr2h,f,c
   990  000FAA  0E00               	movlw	0
   991  000FAC  6EDE               	movwf	postinc2,c
   992  000FAE  0E00               	movlw	0
   993  000FB0  6EDD               	movwf	postdec2,c
   994                           
   995                           ; BSR set to: 0
   996  000FB2  0100               	movlb	0	; () banked
   997  000FB4  4BE1               	infsnz	main@adc& (0+255),f,b
   998  000FB6  2BE2               	incf	(main@adc+1)& (0+255),f,b
   999  000FB8  D7E2               	goto	l3036
  1000  000FBA                     l3046:
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 56: }
  1004                           ;main.c: 59: SYSTEM_Initialize();
  1005  000FBA  ECF6  F010         	call	_SYSTEM_Initialize	;wreg free
  1006                           
  1007                           ;main.c: 60: do { LATDbits.LATD3 = 1; } while(0);
  1008  000FBE  868C               	bsf	3980,3,c	;volatile
  1009                           
  1010                           ;main.c: 78: (INTCONbits.GIE = 1);
  1011  000FC0  8EF2               	bsf	intcon,7,c	;volatile
  1012                           
  1013                           ;main.c: 79: do { LATDbits.LATD2 = 1; } while(0);
  1014  000FC2  848C               	bsf	3980,2,c	;volatile
  1015                           
  1016                           ;main.c: 81: (INTCONbits.PEIE = 1);
  1017  000FC4  8CF2               	bsf	intcon,6,c	;volatile
  1018                           
  1019                           ;main.c: 88: printf("PM Robotix\r\n");
  1020  000FC6  0E5B               	movlw	low STR_2
  1021  000FC8  0100               	movlb	0	; () banked
  1022  000FCA  6FCA               	movwf	printf@f& (0+255),b
  1023  000FCC  0E0F               	movlw	high STR_2
  1024  000FCE  0100               	movlb	0	; () banked
  1025  000FD0  6FCB               	movwf	(printf@f+1)& (0+255),b
  1026  000FD2  ECE2  F008         	call	_printf	;wreg free
  1027                           
  1028                           ;main.c: 89: printf("Init completed\r\n");
  1029  000FD6  0E3B               	movlw	low STR_3
  1030  000FD8  0100               	movlb	0	; () banked
  1031  000FDA  6FCA               	movwf	printf@f& (0+255),b
  1032  000FDC  0E0F               	movlw	high STR_3
  1033  000FDE  0100               	movlb	0	; () banked
  1034  000FE0  6FCB               	movwf	(printf@f+1)& (0+255),b
  1035  000FE2  ECE2  F008         	call	_printf	;wreg free
  1036                           
  1037                           ;main.c: 91: int delay = 10;
  1038  000FE6  0E00               	movlw	0
  1039  000FE8  0100               	movlb	0	; () banked
  1040  000FEA  6FE6               	movwf	(main@delay+1)& (0+255),b
  1041  000FEC  0E0A               	movlw	10
  1042  000FEE  6FE5               	movwf	main@delay& (0+255),b
  1043                           
  1044                           ; BSR set to: 0
  1045                           
  1046                           ; BSR set to: 0
  1047                           
  1048                           ;main.c: 92: do { LATDbits.LATD1 = 1; } while(0);
  1049  000FF0  828C               	bsf	3980,1,c	;volatile
  1050                           
  1051                           ; BSR set to: 0
  1052                           
  1053                           ; BSR set to: 0
  1054                           
  1055                           ;main.c: 93: do { LATDbits.LATD0 = 1; } while(0);
  1056                           
  1057                           ; BSR set to: 0
  1058  000FF2  808C               	bsf	3980,0,c	;volatile
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 94: for (int i = 0; i < 2; i++) {
  1062                           
  1063                           ; BSR set to: 0
  1064  000FF4  0E00               	movlw	0
  1065  000FF6  0100               	movlb	0	; () banked
  1066  000FF8  6FDE               	movwf	(main@i+1)& (0+255),b
  1067  000FFA  0E00               	movlw	0
  1068  000FFC  6FDD               	movwf	main@i& (0+255),b
  1069  000FFE                     l3068:
  1070                           
  1071                           ; BSR set to: 0
  1072  000FFE  0100               	movlb	0	; () banked
  1073  001000  BFDE               	btfsc	(main@i+1)& (0+255),7,b
  1074  001002  D008               	goto	l342
  1075  001004  0100               	movlb	0	; () banked
  1076  001006  51DE               	movf	(main@i+1)& (0+255),w,b
  1077  001008  E15F               	bnz	l382
  1078  00100A  0E02               	movlw	2
  1079  00100C  0100               	movlb	0	; () banked
  1080  00100E  5DDD               	subwf	main@i& (0+255),w,b
  1081  001010  B0D8               	btfsc	status,0,c
  1082  001012  D05A               	goto	l382
  1083  001014                     l342:
  1084                           
  1085                           ; BSR set to: 0
  1086  001014  868C               	bsf	3980,3,c	;volatile
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;main.c: 97: delay_ms(delay);
  1090                           
  1091                           ; BSR set to: 0
  1092  001016  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1093  00101A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1094  00101E  EC63  F00E         	call	_delay_ms	;wreg free
  1095                           
  1096                           ;main.c: 98: do { LATDbits.LATD3 = 0; } while(0);
  1097  001022  968C               	bcf	3980,3,c	;volatile
  1098                           
  1099                           ;main.c: 99: do { LATDbits.LATD2 = 1; } while(0);
  1100  001024  848C               	bsf	3980,2,c	;volatile
  1101                           
  1102                           ;main.c: 100: delay_ms(delay);
  1103  001026  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1104  00102A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1105  00102E  EC63  F00E         	call	_delay_ms	;wreg free
  1106                           
  1107                           ;main.c: 101: do { LATDbits.LATD2 = 0; } while(0);
  1108  001032  948C               	bcf	3980,2,c	;volatile
  1109                           
  1110                           ;main.c: 102: do { LATDbits.LATD1 = 1; } while(0);
  1111  001034  828C               	bsf	3980,1,c	;volatile
  1112                           
  1113                           ;main.c: 103: delay_ms(delay);
  1114  001036  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1115  00103A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1116  00103E  EC63  F00E         	call	_delay_ms	;wreg free
  1117                           
  1118                           ;main.c: 104: do { LATDbits.LATD1 = 0; } while(0);
  1119  001042  928C               	bcf	3980,1,c	;volatile
  1120                           
  1121                           ;main.c: 105: do { LATDbits.LATD0 = 1; } while(0);
  1122  001044  808C               	bsf	3980,0,c	;volatile
  1123                           
  1124                           ;main.c: 106: delay_ms(delay);
  1125  001046  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1126  00104A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1127  00104E  EC63  F00E         	call	_delay_ms	;wreg free
  1128                           
  1129                           ;main.c: 107: do { LATDbits.LATD0 = 0; } while(0);
  1130  001052  908C               	bcf	3980,0,c	;volatile
  1131                           
  1132                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  1133  001054  848B               	bsf	3979,2,c	;volatile
  1134                           
  1135                           ;main.c: 109: delay_ms(delay);
  1136  001056  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1137  00105A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1138  00105E  EC63  F00E         	call	_delay_ms	;wreg free
  1139                           
  1140                           ;main.c: 110: do { LATCbits.LATC2 = 0; } while(0);
  1141  001062  948B               	bcf	3979,2,c	;volatile
  1142                           
  1143                           ;main.c: 111: do { LATCbits.LATC1 = 1; } while(0);
  1144  001064  828B               	bsf	3979,1,c	;volatile
  1145                           
  1146                           ;main.c: 112: delay_ms(delay);
  1147  001066  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1148  00106A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1149  00106E  EC63  F00E         	call	_delay_ms	;wreg free
  1150                           
  1151                           ;main.c: 113: do { LATCbits.LATC1 = 0; } while(0);
  1152  001072  928B               	bcf	3979,1,c	;volatile
  1153                           
  1154                           ;main.c: 114: do { LATCbits.LATC0 = 1; } while(0);
  1155  001074  808B               	bsf	3979,0,c	;volatile
  1156                           
  1157                           ;main.c: 115: delay_ms(delay);
  1158  001076  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1159  00107A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1160  00107E  EC63  F00E         	call	_delay_ms	;wreg free
  1161                           
  1162                           ;main.c: 116: do { LATCbits.LATC0 = 0; } while(0);
  1163  001082  908B               	bcf	3979,0,c	;volatile
  1164                           
  1165                           ;main.c: 117: do { LATBbits.LATB0 = 1; } while(0);
  1166  001084  808A               	bsf	3978,0,c	;volatile
  1167                           
  1168                           ;main.c: 118: delay_ms(delay);
  1169  001086  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1170  00108A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1171  00108E  EC63  F00E         	call	_delay_ms	;wreg free
  1172                           
  1173                           ;main.c: 119: do { LATBbits.LATB0 = 0; } while(0);
  1174  001092  908A               	bcf	3978,0,c	;volatile
  1175                           
  1176                           ;main.c: 120: do { LATBbits.LATB2 = 1; } while(0);
  1177  001094  848A               	bsf	3978,2,c	;volatile
  1178                           
  1179                           ;main.c: 121: delay_ms(delay);
  1180  001096  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1181  00109A  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1182  00109E  EC63  F00E         	call	_delay_ms	;wreg free
  1183                           
  1184                           ;main.c: 122: do { LATBbits.LATB2 = 0; } while(0);
  1185  0010A2  948A               	bcf	3978,2,c	;volatile
  1186                           
  1187                           ;main.c: 123: do { LATBbits.LATB3 = 1; } while(0);
  1188  0010A4  868A               	bsf	3978,3,c	;volatile
  1189                           
  1190                           ;main.c: 124: delay_ms(delay);
  1191  0010A6  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1192  0010AA  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1193  0010AE  EC63  F00E         	call	_delay_ms	;wreg free
  1194                           
  1195                           ;main.c: 125: do { LATBbits.LATB3 = 0; } while(0);
  1196  0010B2  968A               	bcf	3978,3,c	;volatile
  1197                           
  1198                           ;main.c: 126: delay_ms(delay);
  1199  0010B4  C0E5  F0BC         	movff	main@delay,delay_ms@ms
  1200  0010B8  C0E6  F0BD         	movff	main@delay+1,delay_ms@ms+1
  1201  0010BC  EC63  F00E         	call	_delay_ms	;wreg free
  1202  0010C0  0100               	movlb	0	; () banked
  1203  0010C2  4BDD               	infsnz	main@i& (0+255),f,b
  1204  0010C4  2BDE               	incf	(main@i+1)& (0+255),f,b
  1205  0010C6  D79B               	goto	l3068
  1206  0010C8                     l382:
  1207                           
  1208                           ; BSR set to: 0
  1209  0010C8  988C               	bcf	3980,4,c	;volatile
  1210  0010CA                     l385:
  1211  0010CA  868A               	bsf	3978,3,c	;volatile
  1212                           
  1213                           ;main.c: 134: if(0){
  1214  0010CC  D06B               	goto	l3144
  1215  0010CE                     l3118:
  1216                           
  1217                           ; BSR set to: 0
  1218  0010CE  0100               	movlb	0	; () banked
  1219  0010D0  BFE0               	btfsc	(main@i_1270+1)& (0+255),7,b
  1220  0010D2  D007               	goto	l3122
  1221  0010D4  0100               	movlb	0	; () banked
  1222  0010D6  51E0               	movf	(main@i_1270+1)& (0+255),w,b
  1223  0010D8  E165               	bnz	l3144
  1224  0010DA  0100               	movlb	0	; () banked
  1225  0010DC  05DF               	decf	main@i_1270& (0+255),w,b
  1226  0010DE  B0D8               	btfsc	status,0,c
  1227  0010E0  D061               	goto	l3144
  1228  0010E2                     l3122:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 137: printf("Reading all ADC\r\n");
  1232  0010E2  0E29               	movlw	low STR_4
  1233  0010E4  0100               	movlb	0	; () banked
  1234  0010E6  6FCA               	movwf	printf@f& (0+255),b
  1235  0010E8  0E0F               	movlw	high STR_4
  1236  0010EA  0100               	movlb	0	; () banked
  1237  0010EC  6FCB               	movwf	(printf@f+1)& (0+255),b
  1238  0010EE  ECE2  F008         	call	_printf	;wreg free
  1239                           
  1240                           ;main.c: 138: for (int adc = 0; adc < 10; adc++) {
  1241  0010F2  0E00               	movlw	0
  1242  0010F4  0100               	movlb	0	; () banked
  1243  0010F6  6FE4               	movwf	(main@adc_1272+1)& (0+255),b
  1244  0010F8  0E00               	movlw	0
  1245  0010FA  6FE3               	movwf	main@adc_1272& (0+255),b
  1246  0010FC                     l3126:
  1247                           
  1248                           ; BSR set to: 0
  1249  0010FC  0100               	movlb	0	; () banked
  1250  0010FE  BFE4               	btfsc	(main@adc_1272+1)& (0+255),7,b
  1251  001100  D008               	goto	l3130
  1252  001102  0100               	movlb	0	; () banked
  1253  001104  51E4               	movf	(main@adc_1272+1)& (0+255),w,b
  1254  001106  E143               	bnz	l3138
  1255  001108  0E0A               	movlw	10
  1256  00110A  0100               	movlb	0	; () banked
  1257  00110C  5DE3               	subwf	main@adc_1272& (0+255),w,b
  1258  00110E  B0D8               	btfsc	status,0,c
  1259  001110  D03E               	goto	l3138
  1260  001112                     l3130:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 139: adc_values[adc] = ADC_GetConversion(adc) / 16;
  1264  001112  0100               	movlb	0	; () banked
  1265  001114  51E3               	movf	main@adc_1272& (0+255),w,b
  1266  001116  EC4B  F010         	call	_ADC_GetConversion
  1267  00111A  0E04               	movlw	4
  1268  00111C  0100               	movlb	0	; () banked
  1269  00111E  6FDC               	movwf	??_main& (0+255),b
  1270  001120                     u2055:
  1271  001120  0100               	movlb	0	; () banked
  1272  001122  90D8               	bcf	status,0,c
  1273  001124  33B5               	rrcf	(?_ADC_GetConversion+1)& (0+255),f,b
  1274  001126  33B4               	rrcf	?_ADC_GetConversion& (0+255),f,b
  1275  001128  0100               	movlb	0	; () banked
  1276  00112A  2FDC               	decfsz	??_main& (0+255),f,b
  1277  00112C  D7F9               	goto	u2055
  1278  00112E  90D8               	bcf	status,0,c
  1279  001130  0100               	movlb	0	; () banked
  1280  001132  35E3               	rlcf	main@adc_1272& (0+255),w,b
  1281  001134  6ED9               	movwf	fsr2l,c
  1282  001136  0100               	movlb	0	; () banked
  1283  001138  35E4               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1284  00113A  6EDA               	movwf	fsr2h,c
  1285  00113C  0E80               	movlw	low _adc_values
  1286  00113E  26D9               	addwf	fsr2l,f,c
  1287  001140  0E00               	movlw	high _adc_values
  1288  001142  22DA               	addwfc	fsr2h,f,c
  1289  001144  0100               	movlb	0	; () banked
  1290  001146  C0B4  FFDE         	movff	?_ADC_GetConversion,postinc2
  1291  00114A  0100               	movlb	0	; () banked
  1292  00114C  C0B5  FFDD         	movff	?_ADC_GetConversion+1,postdec2
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 140: printf("ADC %d : %ld\r\n", adc, adc_values[adc]);
  1296  001150  0E4C               	movlw	low STR_5
  1297  001152  0100               	movlb	0	; () banked
  1298  001154  6FCA               	movwf	printf@f& (0+255),b
  1299  001156  0E0F               	movlw	high STR_5
  1300  001158  0100               	movlb	0	; () banked
  1301  00115A  6FCB               	movwf	(printf@f+1)& (0+255),b
  1302  00115C  C0E3  F0CC         	movff	main@adc_1272,?_printf+2
  1303  001160  C0E4  F0CD         	movff	main@adc_1272+1,?_printf+3
  1304  001164  90D8               	bcf	status,0,c
  1305  001166  0100               	movlb	0	; () banked
  1306  001168  35E3               	rlcf	main@adc_1272& (0+255),w,b
  1307  00116A  6ED9               	movwf	fsr2l,c
  1308  00116C  0100               	movlb	0	; () banked
  1309  00116E  35E4               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1310  001170  6EDA               	movwf	fsr2h,c
  1311  001172  0E80               	movlw	low _adc_values
  1312  001174  26D9               	addwf	fsr2l,f,c
  1313  001176  0E00               	movlw	high _adc_values
  1314  001178  22DA               	addwfc	fsr2h,f,c
  1315  00117A  CFDE F0CE          	movff	postinc2,?_printf+4
  1316  00117E  CFDD F0CF          	movff	postdec2,?_printf+5
  1317  001182  ECE2  F008         	call	_printf	;wreg free
  1318  001186  0100               	movlb	0	; () banked
  1319  001188  4BE3               	infsnz	main@adc_1272& (0+255),f,b
  1320  00118A  2BE4               	incf	(main@adc_1272+1)& (0+255),f,b
  1321  00118C  D7B7               	goto	l3126
  1322  00118E                     l3138:
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 141: }
  1326                           ;main.c: 142: delay_ms(50);
  1327  00118E  0E00               	movlw	0
  1328  001190  0100               	movlb	0	; () banked
  1329  001192  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  1330  001194  0E32               	movlw	50
  1331  001196  6FBC               	movwf	delay_ms@ms& (0+255),b
  1332  001198  EC63  F00E         	call	_delay_ms	;wreg free
  1333  00119C  0100               	movlb	0	; () banked
  1334  00119E  4BDF               	infsnz	main@i_1270& (0+255),f,b
  1335  0011A0  2BE0               	incf	(main@i_1270+1)& (0+255),f,b
  1336  0011A2  D795               	goto	l3118
  1337  0011A4                     l3144:
  1338                           
  1339                           ;main.c: 143: }}
  1340                           ;main.c: 144: delay_ms(500);
  1341  0011A4  0E01               	movlw	1
  1342  0011A6  0100               	movlb	0	; () banked
  1343  0011A8  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  1344  0011AA  0EF4               	movlw	244
  1345  0011AC  6FBC               	movwf	delay_ms@ms& (0+255),b
  1346  0011AE  EC63  F00E         	call	_delay_ms	;wreg free
  1347                           
  1348                           ;main.c: 145: do { LATBbits.LATB3 = 0; } while(0);
  1349  0011B2  968A               	bcf	3978,3,c	;volatile
  1350                           
  1351                           ;main.c: 146: delay_ms(500);
  1352  0011B4  0E01               	movlw	1
  1353  0011B6  0100               	movlb	0	; () banked
  1354  0011B8  6FBD               	movwf	(delay_ms@ms+1)& (0+255),b
  1355  0011BA  0EF4               	movlw	244
  1356  0011BC  6FBC               	movwf	delay_ms@ms& (0+255),b
  1357  0011BE  EC63  F00E         	call	_delay_ms	;wreg free
  1358  0011C2  D783               	goto	l385
  1359  0011C4                     __end_of_main:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           intcon	equ	0xFF2
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postinc2	equ	0xFDE
  1369                           postdec2	equ	0xFDD
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _printf *****************
  1375 ;; Defined at:
  1376 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1379 ;;		 -> STR_5(15), STR_4(18), STR_3(17), STR_2(13), 
  1380 ;;		 -> STR_1(10), 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  val             4   49[BANK0 ] unsigned long 
  1383 ;;  tmpval          4    0        struct .
  1384 ;;  cp              3    0        PTR const unsigned char 
  1385 ;;  ap              2   46[BANK0 ] PTR void [1]
  1386 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1387 ;;  prec            2   44[BANK0 ] int 
  1388 ;;  len             2    0        unsigned int 
  1389 ;;  c               1   53[BANK0 ] char 
  1390 ;;  flag            1   48[BANK0 ] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  2   36[BANK0 ] int 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1400 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1401 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1403 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;Total ram usage:       18 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    8
  1407 ;; This function calls:
  1408 ;;		___lldiv
  1409 ;;		___llmod
  1410 ;;		_putch
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text1
  1417  0011C4                     __ptext1:
  1418                           	opt stack 0
  1419  0011C4                     _printf:
  1420                           	opt stack 22
  1421                           
  1422                           ;doprnt.c: 466: va_list ap;
  1423                           ;doprnt.c: 499: signed char c;
  1424                           ;doprnt.c: 504: int prec;
  1425                           ;doprnt.c: 508: unsigned char flag;
  1426                           ;doprnt.c: 523: union {
  1427                           ;doprnt.c: 524: unsigned long vd;
  1428                           ;doprnt.c: 525: double integ;
  1429                           ;doprnt.c: 526: } tmpval;
  1430                           ;doprnt.c: 528: unsigned long val;
  1431                           ;doprnt.c: 529: unsigned len;
  1432                           ;doprnt.c: 530: const char * cp;
  1433                           ;doprnt.c: 533: *ap = __va_start();
  1434                           
  1435                           ;incstack = 0
  1436  0011C4  0ECC               	movlw	low (?_printf+2)
  1437  0011C6  0100               	movlb	0	; () banked
  1438  0011C8  6FD4               	movwf	printf@ap& (0+255),b
  1439  0011CA  0E00               	movlw	high (?_printf+2)
  1440  0011CC  0100               	movlb	0	; () banked
  1441  0011CE  6FD5               	movwf	(printf@ap+1)& (0+255),b
  1442                           
  1443                           ;doprnt.c: 536: while(c = *f++) {
  1444  0011D0  D0EB               	goto	l2956
  1445  0011D2                     l2904:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;doprnt.c: 538: if(c != '%')
  1449  0011D2  0E25               	movlw	37
  1450  0011D4  0100               	movlb	0	; () banked
  1451  0011D6  19DB               	xorwf	printf@c& (0+255),w,b
  1452  0011D8  B4D8               	btfsc	status,2,c
  1453  0011DA  D005               	goto	l2908
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 540: {
  1457                           ;doprnt.c: 541: (putch(c) );
  1458  0011DC  0100               	movlb	0	; () banked
  1459  0011DE  51DB               	movf	printf@c& (0+255),w,b
  1460  0011E0  EC47  F011         	call	_putch
  1461                           
  1462                           ;doprnt.c: 542: continue;
  1463  0011E4  D0E1               	goto	l2956
  1464  0011E6                     l2908:
  1465                           
  1466                           ;doprnt.c: 543: }
  1467                           ;doprnt.c: 548: flag = 0;
  1468  0011E6  0E00               	movlw	0
  1469  0011E8  0100               	movlb	0	; () banked
  1470  0011EA  6FD6               	movwf	printf@flag& (0+255),b
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;doprnt.c: 635: switch(c = *f++) {
  1474                           
  1475                           ;doprnt.c: 633: loop:
  1476  0011EC  D002               	goto	l2914
  1477  0011EE                     l2910:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 643: flag |= 0x10;
  1481  0011EE  0100               	movlb	0	; () banked
  1482  0011F0  89D6               	bsf	printf@flag& (0+255),4,b
  1483  0011F2                     l2914:
  1484                           
  1485                           ; BSR set to: 0
  1486  0011F2  C0CA  FFF6         	movff	printf@f,tblptrl
  1487  0011F6  C0CB  FFF7         	movff	printf@f+1,tblptrh
  1488  0011FA  0100               	movlb	0	; () banked
  1489  0011FC  4BCA               	infsnz	printf@f& (0+255),f,b
  1490  0011FE  2BCB               	incf	(printf@f+1)& (0+255),f,b
  1491  001200                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1492  001200  6AF8               	clrf	tblptru,c
  1493  001202                     	endif
  1494  001202                     	if	0	;tblptru may be non-zero
  1495  001202                     	endif
  1496  001202  0008               	tblrd		*
  1497  001204  CFF5 F0DB          	movff	tablat,printf@c
  1498  001208  0100               	movlb	0	; () banked
  1499  00120A  51DB               	movf	printf@c& (0+255),w,b
  1500                           
  1501                           ; Switch size 1, requested type "space"
  1502                           ; Number of cases is 4, Range of values is 0 to 108
  1503                           ; switch strategies available:
  1504                           ; Name         Instructions Cycles
  1505                           ; simple_byte           13     7 (average)
  1506                           ;	Chosen strategy is simple_byte
  1507  00120C  0A00               	xorlw	0	; case 0
  1508  00120E  B4D8               	btfsc	status,2,c
  1509  001210  0012               	return	
  1510  001212  0A64               	xorlw	100	; case 100
  1511  001214  B4D8               	btfsc	status,2,c
  1512  001216  D007               	goto	l627
  1513  001218  0A0D               	xorlw	13	; case 105
  1514  00121A  B4D8               	btfsc	status,2,c
  1515  00121C  D004               	goto	l627
  1516  00121E  0A05               	xorlw	5	; case 108
  1517  001220  B4D8               	btfsc	status,2,c
  1518  001222  D7E5               	goto	l2910
  1519  001224  D0C1               	goto	l2956
  1520  001226                     l627:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;doprnt.c: 1253: {
  1524                           ;doprnt.c: 1255: if(flag & 0x10)
  1525  001226  0100               	movlb	0	; () banked
  1526  001228  A9D6               	btfss	printf@flag& (0+255),4,b
  1527  00122A  D00E               	goto	l2920
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1531  00122C  C0D4  FFD9         	movff	printf@ap,fsr2l
  1532  001230  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1533  001234  CFDE F0D7          	movff	postinc2,printf@val
  1534  001238  CFDE F0D8          	movff	postinc2,printf@val+1
  1535  00123C  CFDE F0D9          	movff	postinc2,printf@val+2
  1536  001240  CFDE F0DA          	movff	postinc2,printf@val+3
  1537                           
  1538                           ; BSR set to: 0
  1539  001244  0E04               	movlw	4
  1540  001246  D00F               	goto	L3
  1541  001248                     l2920:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;doprnt.c: 1257: else
  1545                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1546  001248  C0D4  FFD9         	movff	printf@ap,fsr2l
  1547  00124C  C0D5  FFDA         	movff	printf@ap+1,fsr2h
  1548  001250  CFDE F0D7          	movff	postinc2,printf@val
  1549  001254  CFDD F0D8          	movff	postdec2,printf@val+1
  1550  001258  0100               	movlb	0	; () banked
  1551  00125A  0E00               	movlw	0
  1552  00125C  BFD8               	btfsc	(printf@val+1)& (0+255),7,b
  1553  00125E  0EFF               	movlw	-1
  1554  001260  6FD9               	movwf	(printf@val+2)& (0+255),b
  1555  001262  6FDA               	movwf	(printf@val+3)& (0+255),b
  1556                           
  1557                           ; BSR set to: 0
  1558  001264  0E02               	movlw	2
  1559  001266                     L3:
  1560  001266  0100               	movlb	0	; () banked
  1561  001268  27D4               	addwf	printf@ap& (0+255),f,b
  1562  00126A  0E00               	movlw	0
  1563  00126C  23D5               	addwfc	(printf@ap+1)& (0+255),f,b
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 1261: if((long)val < 0) {
  1567                           
  1568                           ; BSR set to: 0
  1569  00126E  0100               	movlb	0	; () banked
  1570  001270  AFDA               	btfss	(printf@val+3)& (0+255),7,b
  1571  001272  D00C               	goto	l2930
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;doprnt.c: 1262: flag |= 0x03;
  1575  001274  0E03               	movlw	3
  1576  001276  0100               	movlb	0	; () banked
  1577  001278  13D6               	iorwf	printf@flag& (0+255),f,b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;doprnt.c: 1263: val = -val;
  1581  00127A  0100               	movlb	0	; () banked
  1582  00127C  1FDA               	comf	(printf@val+3)& (0+255),f,b
  1583  00127E  1FD9               	comf	(printf@val+2)& (0+255),f,b
  1584  001280  1FD8               	comf	(printf@val+1)& (0+255),f,b
  1585  001282  6DD7               	negf	printf@val& (0+255),b
  1586  001284  0E00               	movlw	0
  1587  001286  23D8               	addwfc	(printf@val+1)& (0+255),f,b
  1588  001288  23D9               	addwfc	(printf@val+2)& (0+255),f,b
  1589  00128A  23DA               	addwfc	(printf@val+3)& (0+255),f,b
  1590  00128C                     l2930:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;doprnt.c: 1264: }
  1594                           ;doprnt.c: 1266: }
  1595                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1596  00128C  0E01               	movlw	1
  1597  00128E  0100               	movlb	0	; () banked
  1598  001290  6FDB               	movwf	printf@c& (0+255),b
  1599  001292                     l2932:
  1600                           
  1601                           ; BSR set to: 0
  1602  001292  0E0A               	movlw	10
  1603  001294  0100               	movlb	0	; () banked
  1604  001296  19DB               	xorwf	printf@c& (0+255),w,b
  1605  001298  B4D8               	btfsc	status,2,c
  1606  00129A  D021               	goto	l2944
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;doprnt.c: 1306: if(val < dpowers[c])
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614  00129C  0100               	movlb	0	; () banked
  1615  00129E  51DB               	movf	printf@c& (0+255),w,b
  1616  0012A0  0D04               	mullw	4
  1617  0012A2  0E01               	movlw	low _dpowers
  1618  0012A4  24F3               	addwf	prodl,w,c
  1619  0012A6  6EF6               	movwf	tblptrl,c
  1620  0012A8  0E0F               	movlw	high _dpowers
  1621  0012AA  20F4               	addwfc	prodh,w,c
  1622  0012AC  6EF7               	movwf	tblptrh,c
  1623  0012AE                     	if	1	;There are 3 active tblptr bytes
  1624  0012AE  6AF8               	clrf	tblptru,c
  1625  0012B0  0E00               	movlw	low (__mediumconst shr (0+16))
  1626  0012B2  22F8               	addwfc	tblptru,f,c
  1627  0012B4                     	endif
  1628  0012B4  0009               	tblrd		*+
  1629  0012B6  50F5               	movf	tablat,w,c
  1630  0012B8  0100               	movlb	0	; () banked
  1631  0012BA  5DD7               	subwf	printf@val& (0+255),w,b
  1632  0012BC  0009               	tblrd		*+
  1633  0012BE  50F5               	movf	tablat,w,c
  1634  0012C0  0100               	movlb	0	; () banked
  1635  0012C2  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  1636  0012C4  0009               	tblrd		*+
  1637  0012C6  50F5               	movf	tablat,w,c
  1638  0012C8  0100               	movlb	0	; () banked
  1639  0012CA  59D9               	subwfb	(printf@val+2)& (0+255),w,b
  1640  0012CC  0009               	tblrd		*+
  1641  0012CE  50F5               	movf	tablat,w,c
  1642  0012D0  0100               	movlb	0	; () banked
  1643  0012D2  59DA               	subwfb	(printf@val+3)& (0+255),w,b
  1644  0012D4  A0D8               	btfss	status,0,c
  1645  0012D6  D003               	goto	l2944
  1646                           
  1647                           ; BSR set to: 0
  1648                           
  1649                           ; BSR set to: 0
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;doprnt.c: 1307: break;
  1653  0012D8  0100               	movlb	0	; () banked
  1654  0012DA  2BDB               	incf	printf@c& (0+255),f,b
  1655  0012DC  D7DA               	goto	l2932
  1656  0012DE                     l2944:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;doprnt.c: 1422: {
  1660                           ;doprnt.c: 1438: if(flag & 0x03)
  1661  0012DE  C0D6  F0D0         	movff	printf@flag,??_printf
  1662  0012E2  0E03               	movlw	3
  1663  0012E4  0100               	movlb	0	; () banked
  1664  0012E6  17D0               	andwf	??_printf& (0+255),f,b
  1665  0012E8  B4D8               	btfsc	status,2,c
  1666  0012EA  D003               	goto	l2948
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;doprnt.c: 1439: (putch('-') );
  1670  0012EC  0E2D               	movlw	45
  1671  0012EE  EC47  F011         	call	_putch
  1672  0012F2                     l2948:
  1673                           
  1674                           ;doprnt.c: 1469: }
  1675                           ;doprnt.c: 1472: prec = c;
  1676  0012F2  0100               	movlb	0	; () banked
  1677  0012F4  51DB               	movf	printf@c& (0+255),w,b
  1678  0012F6  0100               	movlb	0	; () banked
  1679  0012F8  6FD2               	movwf	printf@prec& (0+255),b
  1680  0012FA  6BD3               	clrf	(printf@prec+1)& (0+255),b
  1681  0012FC  BFD2               	btfsc	printf@prec& (0+255),7,b
  1682  0012FE  07D3               	decf	(printf@prec+1)& (0+255),f,b
  1683                           
  1684                           ;doprnt.c: 1474: while(prec--) {
  1685  001300  D048               	goto	l2954
  1686  001302                     l2950:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 1478: {
  1690                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1691  001302  C0D2  F0D0         	movff	printf@prec,??_printf
  1692  001306  C0D3  F0D1         	movff	printf@prec+1,??_printf+1
  1693  00130A  0100               	movlb	0	; () banked
  1694  00130C  90D8               	bcf	status,0,c
  1695  00130E  37D0               	rlcf	??_printf& (0+255),f,b
  1696  001310  37D1               	rlcf	(??_printf+1)& (0+255),f,b
  1697  001312  0100               	movlb	0	; () banked
  1698  001314  90D8               	bcf	status,0,c
  1699  001316  37D0               	rlcf	??_printf& (0+255),f,b
  1700  001318  37D1               	rlcf	(??_printf+1)& (0+255),f,b
  1701  00131A  0E01               	movlw	low _dpowers
  1702  00131C  0100               	movlb	0	; () banked
  1703  00131E  25D0               	addwf	??_printf& (0+255),w,b
  1704  001320  6EF6               	movwf	tblptrl,c
  1705  001322  0E0F               	movlw	high _dpowers
  1706  001324  21D1               	addwfc	(??_printf+1)& (0+255),w,b
  1707  001326  6EF7               	movwf	tblptrh,c
  1708  001328                     	if	1	;There are 3 active tblptr bytes
  1709  001328  6AF8               	clrf	tblptru,c
  1710  00132A  0E00               	movlw	low (__mediumconst shr (0+16))
  1711  00132C  22F8               	addwfc	tblptru,f,c
  1712  00132E                     	endif
  1713  00132E  0009               	tblrd		*+
  1714  001330  CFF5 F0B8          	movff	tablat,___lldiv@divisor
  1715  001334  0009               	tblrd		*+
  1716  001336  CFF5 F0B9          	movff	tablat,___lldiv@divisor+1
  1717  00133A  0009               	tblrd		*+
  1718  00133C  CFF5 F0BA          	movff	tablat,___lldiv@divisor+2
  1719  001340  000A               	tblrd		*-
  1720  001342  CFF5 F0BB          	movff	tablat,___lldiv@divisor+3
  1721  001346  C0D7  F0B4         	movff	printf@val,___lldiv@dividend
  1722  00134A  C0D8  F0B5         	movff	printf@val+1,___lldiv@dividend+1
  1723  00134E  C0D9  F0B6         	movff	printf@val+2,___lldiv@dividend+2
  1724  001352  C0DA  F0B7         	movff	printf@val+3,___lldiv@dividend+3
  1725  001356  EC16  F00D         	call	___lldiv	;wreg free
  1726  00135A  C0B4  F0C1         	movff	?___lldiv,___llmod@dividend
  1727  00135E  C0B5  F0C2         	movff	?___lldiv+1,___llmod@dividend+1
  1728  001362  C0B6  F0C3         	movff	?___lldiv+2,___llmod@dividend+2
  1729  001366  C0B7  F0C4         	movff	?___lldiv+3,___llmod@dividend+3
  1730  00136A  0E0A               	movlw	10
  1731  00136C  0100               	movlb	0	; () banked
  1732  00136E  6FC5               	movwf	___llmod@divisor& (0+255),b
  1733  001370  0E00               	movlw	0
  1734  001372  6FC6               	movwf	(___llmod@divisor+1)& (0+255),b
  1735  001374  0E00               	movlw	0
  1736  001376  6FC7               	movwf	(___llmod@divisor+2)& (0+255),b
  1737  001378  0E00               	movlw	0
  1738  00137A  6FC8               	movwf	(___llmod@divisor+3)& (0+255),b
  1739  00137C  ECCA  F00D         	call	___llmod	;wreg free
  1740  001380  0100               	movlb	0	; () banked
  1741  001382  51C1               	movf	?___llmod& (0+255),w,b
  1742  001384  0F30               	addlw	48
  1743  001386  0100               	movlb	0	; () banked
  1744  001388  6FDB               	movwf	printf@c& (0+255),b
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1523: }
  1748                           ;doprnt.c: 1524: (putch(c) );
  1749  00138A  0100               	movlb	0	; () banked
  1750  00138C  51DB               	movf	printf@c& (0+255),w,b
  1751  00138E  EC47  F011         	call	_putch
  1752  001392                     l2954:
  1753  001392  0100               	movlb	0	; () banked
  1754  001394  07D2               	decf	printf@prec& (0+255),f,b
  1755  001396  A0D8               	btfss	status,0,c
  1756  001398  07D3               	decf	(printf@prec+1)& (0+255),f,b
  1757  00139A  0100               	movlb	0	; () banked
  1758  00139C  29D2               	incf	printf@prec& (0+255),w,b
  1759  00139E  E1B1               	bnz	l2950
  1760  0013A0  0100               	movlb	0	; () banked
  1761  0013A2  29D3               	incf	(printf@prec+1)& (0+255),w,b
  1762  0013A4  A4D8               	btfss	status,2,c
  1763  0013A6  D7AD               	goto	l2950
  1764  0013A8                     l2956:
  1765  0013A8  C0CA  FFF6         	movff	printf@f,tblptrl
  1766  0013AC  C0CB  FFF7         	movff	printf@f+1,tblptrh
  1767  0013B0  0100               	movlb	0	; () banked
  1768  0013B2  4BCA               	infsnz	printf@f& (0+255),f,b
  1769  0013B4  2BCB               	incf	(printf@f+1)& (0+255),f,b
  1770  0013B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1771  0013B6  6AF8               	clrf	tblptru,c
  1772  0013B8                     	endif
  1773  0013B8                     	if	0	;tblptru may be non-zero
  1774  0013B8                     	endif
  1775  0013B8  0008               	tblrd		*
  1776  0013BA  CFF5 F0DB          	movff	tablat,printf@c
  1777  0013BE  0100               	movlb	0	; () banked
  1778  0013C0  51DB               	movf	printf@c& (0+255),w,b
  1779  0013C2  B4D8               	btfsc	status,2,c
  1780  0013C4  0012               	return	
  1781  0013C6  D705               	goto	l2904
  1782  0013C8                     __end_of_printf:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           intcon	equ	0xFF2
  1791                           postinc0	equ	0xFEE
  1792                           wreg	equ	0xFE8
  1793                           postinc2	equ	0xFDE
  1794                           postdec2	equ	0xFDD
  1795                           fsr2h	equ	0xFDA
  1796                           fsr2l	equ	0xFD9
  1797                           status	equ	0xFD8
  1798                           
  1799 ;; *************** function _putch *****************
  1800 ;; Defined at:
  1801 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  txData          1    wreg     unsigned char 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  txData          1   15[BANK0 ] unsigned char 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1819 ;;Total ram usage:        1 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    7
  1822 ;; This function calls:
  1823 ;;		_EUSART2_Write
  1824 ;; This function is called by:
  1825 ;;		_printf
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text2
  1830  00228E                     __ptext2:
  1831                           	opt stack 0
  1832  00228E                     _putch:
  1833                           	opt stack 22
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;incstack = 0
  1837                           ;putch@txData stored from wreg
  1838  00228E  0100               	movlb	0	; () banked
  1839  002290  6FB5               	movwf	putch@txData& (0+255),b
  1840                           
  1841                           ;eusart2.c: 112: EUSART2_Write(txData);
  1842  002292  0100               	movlb	0	; () banked
  1843  002294  51B5               	movf	putch@txData& (0+255),w,b
  1844  002296  EC4E  F011         	call	_EUSART2_Write
  1845  00229A  0012               	return		;funcret
  1846  00229C                     __end_of_putch:
  1847                           	opt stack 0
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           intcon	equ	0xFF2
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postinc2	equ	0xFDE
  1858                           postdec2	equ	0xFDD
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _EUSART2_Write *****************
  1864 ;; Defined at:
  1865 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  txData          1    wreg     unsigned char 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  txData          1   14[BANK0 ] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    6
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_putch
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text3
  1894  00229C                     __ptext3:
  1895                           	opt stack 0
  1896  00229C                     _EUSART2_Write:
  1897                           	opt stack 22
  1898                           
  1899                           ;incstack = 0
  1900                           ;EUSART2_Write@txData stored from wreg
  1901  00229C  0100               	movlb	0	; () banked
  1902  00229E  6FB4               	movwf	EUSART2_Write@txData& (0+255),b
  1903  0022A0                     l31:
  1904  0022A0  A8A4               	btfss	4004,4,c	;volatile
  1905  0022A2  D7FE               	goto	l31
  1906                           
  1907                           ;eusart2.c: 100: }
  1908                           ;eusart2.c: 102: TXREG2 = txData;
  1909  0022A4  C0B4  FF79         	movff	EUSART2_Write@txData,3961	;volatile
  1910  0022A8  0012               	return		;funcret
  1911  0022AA                     __end_of_EUSART2_Write:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           fsr2h	equ	0xFDA
  1925                           fsr2l	equ	0xFD9
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function ___llmod *****************
  1929 ;; Defined at:
  1930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  dividend        4   27[BANK0 ] unsigned long 
  1933 ;;  divisor         4   31[BANK0 ] unsigned long 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  counter         1   35[BANK0 ] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  4   27[BANK0 ] unsigned long 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1945 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1949 ;;Total ram usage:        9 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    6
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_printf
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text4
  1960  001B94                     __ptext4:
  1961                           	opt stack 0
  1962  001B94                     ___llmod:
  1963                           	opt stack 23
  1964                           
  1965                           ;incstack = 0
  1966  001B94  0100               	movlb	0	; () banked
  1967  001B96  51C5               	movf	___llmod@divisor& (0+255),w,b
  1968  001B98  0100               	movlb	0	; () banked
  1969  001B9A  11C6               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  1970  001B9C  0100               	movlb	0	; () banked
  1971  001B9E  11C7               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  1972  001BA0  0100               	movlb	0	; () banked
  1973  001BA2  11C8               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  1974  001BA4  B4D8               	btfsc	status,2,c
  1975  001BA6  D03A               	goto	l1000
  1976                           
  1977                           ; BSR set to: 0
  1978  001BA8  0E01               	movlw	1
  1979  001BAA  0100               	movlb	0	; () banked
  1980  001BAC  6FC9               	movwf	___llmod@counter& (0+255),b
  1981  001BAE  D008               	goto	l2770
  1982  001BB0                     l2768:
  1983                           
  1984                           ; BSR set to: 0
  1985  001BB0  0100               	movlb	0	; () banked
  1986  001BB2  90D8               	bcf	status,0,c
  1987  001BB4  37C5               	rlcf	___llmod@divisor& (0+255),f,b
  1988  001BB6  37C6               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  1989  001BB8  37C7               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  1990  001BBA  37C8               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  1991  001BBC  0100               	movlb	0	; () banked
  1992  001BBE  2BC9               	incf	___llmod@counter& (0+255),f,b
  1993  001BC0                     l2770:
  1994                           
  1995                           ; BSR set to: 0
  1996  001BC0  0100               	movlb	0	; () banked
  1997  001BC2  AFC8               	btfss	(___llmod@divisor+3)& (0+255),7,b
  1998  001BC4  D7F5               	goto	l2768
  1999  001BC6                     l2772:
  2000                           
  2001                           ; BSR set to: 0
  2002  001BC6  0100               	movlb	0	; () banked
  2003  001BC8  51C5               	movf	___llmod@divisor& (0+255),w,b
  2004  001BCA  0100               	movlb	0	; () banked
  2005  001BCC  5DC1               	subwf	___llmod@dividend& (0+255),w,b
  2006  001BCE  0100               	movlb	0	; () banked
  2007  001BD0  51C6               	movf	(___llmod@divisor+1)& (0+255),w,b
  2008  001BD2  0100               	movlb	0	; () banked
  2009  001BD4  59C2               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2010  001BD6  0100               	movlb	0	; () banked
  2011  001BD8  51C7               	movf	(___llmod@divisor+2)& (0+255),w,b
  2012  001BDA  0100               	movlb	0	; () banked
  2013  001BDC  59C3               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2014  001BDE  0100               	movlb	0	; () banked
  2015  001BE0  51C8               	movf	(___llmod@divisor+3)& (0+255),w,b
  2016  001BE2  0100               	movlb	0	; () banked
  2017  001BE4  59C4               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2018  001BE6  A0D8               	btfss	status,0,c
  2019  001BE8  D010               	goto	l2776
  2020                           
  2021                           ; BSR set to: 0
  2022  001BEA  0100               	movlb	0	; () banked
  2023  001BEC  51C5               	movf	___llmod@divisor& (0+255),w,b
  2024  001BEE  0100               	movlb	0	; () banked
  2025  001BF0  5FC1               	subwf	___llmod@dividend& (0+255),f,b
  2026  001BF2  0100               	movlb	0	; () banked
  2027  001BF4  51C6               	movf	(___llmod@divisor+1)& (0+255),w,b
  2028  001BF6  0100               	movlb	0	; () banked
  2029  001BF8  5BC2               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2030  001BFA  0100               	movlb	0	; () banked
  2031  001BFC  51C7               	movf	(___llmod@divisor+2)& (0+255),w,b
  2032  001BFE  0100               	movlb	0	; () banked
  2033  001C00  5BC3               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2034  001C02  0100               	movlb	0	; () banked
  2035  001C04  51C8               	movf	(___llmod@divisor+3)& (0+255),w,b
  2036  001C06  0100               	movlb	0	; () banked
  2037  001C08  5BC4               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2038  001C0A                     l2776:
  2039                           
  2040                           ; BSR set to: 0
  2041  001C0A  0100               	movlb	0	; () banked
  2042  001C0C  90D8               	bcf	status,0,c
  2043  001C0E  33C8               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2044  001C10  33C7               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2045  001C12  33C6               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2046  001C14  33C5               	rrcf	___llmod@divisor& (0+255),f,b
  2047                           
  2048                           ; BSR set to: 0
  2049  001C16  0100               	movlb	0	; () banked
  2050  001C18  2FC9               	decfsz	___llmod@counter& (0+255),f,b
  2051  001C1A  D7D5               	goto	l2772
  2052  001C1C                     l1000:
  2053                           
  2054                           ; BSR set to: 0
  2055  001C1C  C0C1  F0C1         	movff	___llmod@dividend,?___llmod
  2056  001C20  C0C2  F0C2         	movff	___llmod@dividend+1,?___llmod+1
  2057  001C24  C0C3  F0C3         	movff	___llmod@dividend+2,?___llmod+2
  2058  001C28  C0C4  F0C4         	movff	___llmod@dividend+3,?___llmod+3
  2059                           
  2060                           ; BSR set to: 0
  2061  001C2C  0012               	return		;funcret
  2062  001C2E                     __end_of___llmod:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           prodh	equ	0xFF4
  2069                           prodl	equ	0xFF3
  2070                           intcon	equ	0xFF2
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function ___lldiv *****************
  2080 ;; Defined at:
  2081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  dividend        4   14[BANK0 ] unsigned long 
  2084 ;;  divisor         4   18[BANK0 ] unsigned long 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  quotient        4   22[BANK0 ] unsigned long 
  2087 ;;  counter         1   26[BANK0 ] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  4   14[BANK0 ] unsigned long 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2097 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2098 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2100 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2101 ;;Total ram usage:       13 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    6
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_printf
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text5
  2112  001A2C                     __ptext5:
  2113                           	opt stack 0
  2114  001A2C                     ___lldiv:
  2115                           	opt stack 23
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;incstack = 0
  2119  001A2C  0E00               	movlw	0
  2120  001A2E  0100               	movlb	0	; () banked
  2121  001A30  6FBC               	movwf	___lldiv@quotient& (0+255),b
  2122  001A32  0E00               	movlw	0
  2123  001A34  6FBD               	movwf	(___lldiv@quotient+1)& (0+255),b
  2124  001A36  0E00               	movlw	0
  2125  001A38  6FBE               	movwf	(___lldiv@quotient+2)& (0+255),b
  2126  001A3A  0E00               	movlw	0
  2127  001A3C  6FBF               	movwf	(___lldiv@quotient+3)& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130  001A3E  0100               	movlb	0	; () banked
  2131  001A40  51B8               	movf	___lldiv@divisor& (0+255),w,b
  2132  001A42  0100               	movlb	0	; () banked
  2133  001A44  11B9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2134  001A46  0100               	movlb	0	; () banked
  2135  001A48  11BA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2136  001A4A  0100               	movlb	0	; () banked
  2137  001A4C  11BB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2138  001A4E  B4D8               	btfsc	status,2,c
  2139  001A50  D042               	goto	l990
  2140                           
  2141                           ; BSR set to: 0
  2142  001A52  0E01               	movlw	1
  2143  001A54  0100               	movlb	0	; () banked
  2144  001A56  6FC0               	movwf	___lldiv@counter& (0+255),b
  2145  001A58  D008               	goto	l2750
  2146  001A5A                     l2748:
  2147                           
  2148                           ; BSR set to: 0
  2149  001A5A  0100               	movlb	0	; () banked
  2150  001A5C  90D8               	bcf	status,0,c
  2151  001A5E  37B8               	rlcf	___lldiv@divisor& (0+255),f,b
  2152  001A60  37B9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2153  001A62  37BA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2154  001A64  37BB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2155  001A66  0100               	movlb	0	; () banked
  2156  001A68  2BC0               	incf	___lldiv@counter& (0+255),f,b
  2157  001A6A                     l2750:
  2158                           
  2159                           ; BSR set to: 0
  2160  001A6A  0100               	movlb	0	; () banked
  2161  001A6C  AFBB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2162  001A6E  D7F5               	goto	l2748
  2163  001A70                     l2752:
  2164                           
  2165                           ; BSR set to: 0
  2166  001A70  0100               	movlb	0	; () banked
  2167  001A72  90D8               	bcf	status,0,c
  2168  001A74  37BC               	rlcf	___lldiv@quotient& (0+255),f,b
  2169  001A76  37BD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2170  001A78  37BE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2171  001A7A  37BF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2172                           
  2173                           ; BSR set to: 0
  2174  001A7C  0100               	movlb	0	; () banked
  2175  001A7E  51B8               	movf	___lldiv@divisor& (0+255),w,b
  2176  001A80  0100               	movlb	0	; () banked
  2177  001A82  5DB4               	subwf	___lldiv@dividend& (0+255),w,b
  2178  001A84  0100               	movlb	0	; () banked
  2179  001A86  51B9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2180  001A88  0100               	movlb	0	; () banked
  2181  001A8A  59B5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2182  001A8C  0100               	movlb	0	; () banked
  2183  001A8E  51BA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2184  001A90  0100               	movlb	0	; () banked
  2185  001A92  59B6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2186  001A94  0100               	movlb	0	; () banked
  2187  001A96  51BB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2188  001A98  0100               	movlb	0	; () banked
  2189  001A9A  59B7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2190  001A9C  A0D8               	btfss	status,0,c
  2191  001A9E  D012               	goto	l2760
  2192                           
  2193                           ; BSR set to: 0
  2194  001AA0  0100               	movlb	0	; () banked
  2195  001AA2  51B8               	movf	___lldiv@divisor& (0+255),w,b
  2196  001AA4  0100               	movlb	0	; () banked
  2197  001AA6  5FB4               	subwf	___lldiv@dividend& (0+255),f,b
  2198  001AA8  0100               	movlb	0	; () banked
  2199  001AAA  51B9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2200  001AAC  0100               	movlb	0	; () banked
  2201  001AAE  5BB5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2202  001AB0  0100               	movlb	0	; () banked
  2203  001AB2  51BA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2204  001AB4  0100               	movlb	0	; () banked
  2205  001AB6  5BB6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2206  001AB8  0100               	movlb	0	; () banked
  2207  001ABA  51BB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2208  001ABC  0100               	movlb	0	; () banked
  2209  001ABE  5BB7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2210                           
  2211                           ; BSR set to: 0
  2212  001AC0  0100               	movlb	0	; () banked
  2213  001AC2  81BC               	bsf	___lldiv@quotient& (0+255),0,b
  2214  001AC4                     l2760:
  2215                           
  2216                           ; BSR set to: 0
  2217  001AC4  0100               	movlb	0	; () banked
  2218  001AC6  90D8               	bcf	status,0,c
  2219  001AC8  33BB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2220  001ACA  33BA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2221  001ACC  33B9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2222  001ACE  33B8               	rrcf	___lldiv@divisor& (0+255),f,b
  2223                           
  2224                           ; BSR set to: 0
  2225  001AD0  0100               	movlb	0	; () banked
  2226  001AD2  2FC0               	decfsz	___lldiv@counter& (0+255),f,b
  2227  001AD4  D7CD               	goto	l2752
  2228  001AD6                     l990:
  2229                           
  2230                           ; BSR set to: 0
  2231  001AD6  C0BC  F0B4         	movff	___lldiv@quotient,?___lldiv
  2232  001ADA  C0BD  F0B5         	movff	___lldiv@quotient+1,?___lldiv+1
  2233  001ADE  C0BE  F0B6         	movff	___lldiv@quotient+2,?___lldiv+2
  2234  001AE2  C0BF  F0B7         	movff	___lldiv@quotient+3,?___lldiv+3
  2235                           
  2236                           ; BSR set to: 0
  2237  001AE6  0012               	return		;funcret
  2238  001AE8                     __end_of___lldiv:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           prodh	equ	0xFF4
  2245                           prodl	equ	0xFF3
  2246                           intcon	equ	0xFF2
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postinc2	equ	0xFDE
  2250                           postdec2	equ	0xFDD
  2251                           fsr2h	equ	0xFDA
  2252                           fsr2l	equ	0xFD9
  2253                           status	equ	0xFD8
  2254                           
  2255 ;; *************** function _delay_ms *****************
  2256 ;; Defined at:
  2257 ;;		line 13 in file "ax.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  ms              2   22[BANK0 ] int 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  i               2   27[BANK0 ] int 
  2262 ;;  n               2   25[BANK0 ] int 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2272 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2275 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2276 ;;Total ram usage:        7 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    7
  2279 ;; This function calls:
  2280 ;;		___awdiv
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text6
  2287  001CC6                     __ptext6:
  2288                           	opt stack 0
  2289  001CC6                     _delay_ms:
  2290                           	opt stack 23
  2291                           
  2292                           ;ax.c: 14: if (ms < 10) {
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;incstack = 0
  2296  001CC6  0100               	movlb	0	; () banked
  2297  001CC8  BFBD               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  2298  001CCA  D008               	goto	l2986
  2299  001CCC  0100               	movlb	0	; () banked
  2300  001CCE  51BD               	movf	(delay_ms@ms+1)& (0+255),w,b
  2301  001CD0  E10F               	bnz	l2988
  2302  001CD2  0E0A               	movlw	10
  2303  001CD4  0100               	movlb	0	; () banked
  2304  001CD6  5DBC               	subwf	delay_ms@ms& (0+255),w,b
  2305  001CD8  B0D8               	btfsc	status,0,c
  2306  001CDA  D00A               	goto	l2988
  2307  001CDC                     l2986:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  2311  001CDC  0ED0               	movlw	208
  2312  001CDE  0100               	movlb	0	; () banked
  2313  001CE0  6FBE               	movwf	??_delay_ms& (0+255),b
  2314  001CE2  0EC9               	movlw	201
  2315  001CE4                     u2087:
  2316  001CE4  2EE8               	decfsz	wreg,f,c
  2317  001CE6  D7FE               	bra	u2087
  2318  001CE8  2FBE               	decfsz	??_delay_ms& (0+255),f,b
  2319  001CEA  D7FC               	bra	u2087
  2320  001CEC  D000               	nop2	
  2321                           
  2322                           ;ax.c: 16: } else {
  2323  001CEE  0012               	return	
  2324  001CF0                     l2988:
  2325                           
  2326                           ;ax.c: 17: int n = ms / 10;
  2327  001CF0  C0BC  F0B4         	movff	delay_ms@ms,___awdiv@dividend
  2328  001CF4  C0BD  F0B5         	movff	delay_ms@ms+1,___awdiv@dividend+1
  2329  001CF8  0E00               	movlw	0
  2330  001CFA  0100               	movlb	0	; () banked
  2331  001CFC  6FB7               	movwf	(___awdiv@divisor+1)& (0+255),b
  2332  001CFE  0E0A               	movlw	10
  2333  001D00  6FB6               	movwf	___awdiv@divisor& (0+255),b
  2334  001D02  ECB7  F00C         	call	___awdiv	;wreg free
  2335  001D06  C0B4  F0BF         	movff	?___awdiv,delay_ms@n
  2336  001D0A  C0B5  F0C0         	movff	?___awdiv+1,delay_ms@n+1
  2337                           
  2338                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  2339  001D0E  0E00               	movlw	0
  2340  001D10  0100               	movlb	0	; () banked
  2341  001D12  6FC2               	movwf	(delay_ms@i+1)& (0+255),b
  2342  001D14  0E00               	movlw	0
  2343  001D16  6FC1               	movwf	delay_ms@i& (0+255),b
  2344  001D18  D00C               	goto	l417
  2345  001D1A                     l2992:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  2349  001D1A  0ED0               	movlw	208
  2350  001D1C  0100               	movlb	0	; () banked
  2351  001D1E  6FBE               	movwf	??_delay_ms& (0+255),b
  2352  001D20  0EC9               	movlw	201
  2353  001D22                     u2097:
  2354  001D22  2EE8               	decfsz	wreg,f,c
  2355  001D24  D7FE               	bra	u2097
  2356  001D26  2FBE               	decfsz	??_delay_ms& (0+255),f,b
  2357  001D28  D7FC               	bra	u2097
  2358  001D2A  D000               	nop2	
  2359  001D2C  0100               	movlb	0	; () banked
  2360  001D2E  4BC1               	infsnz	delay_ms@i& (0+255),f,b
  2361  001D30  2BC2               	incf	(delay_ms@i+1)& (0+255),f,b
  2362  001D32                     l417:
  2363                           
  2364                           ; BSR set to: 0
  2365  001D32  0100               	movlb	0	; () banked
  2366  001D34  51BF               	movf	delay_ms@n& (0+255),w,b
  2367  001D36  0100               	movlb	0	; () banked
  2368  001D38  5DC1               	subwf	delay_ms@i& (0+255),w,b
  2369  001D3A  0100               	movlb	0	; () banked
  2370  001D3C  51C2               	movf	(delay_ms@i+1)& (0+255),w,b
  2371  001D3E  0A80               	xorlw	128
  2372  001D40  0100               	movlb	0	; () banked
  2373  001D42  6FBE               	movwf	??_delay_ms& (0+255),b
  2374  001D44  0100               	movlb	0	; () banked
  2375  001D46  51C0               	movf	(delay_ms@n+1)& (0+255),w,b
  2376  001D48  0A80               	xorlw	128
  2377  001D4A  0100               	movlb	0	; () banked
  2378  001D4C  59BE               	subwfb	??_delay_ms& (0+255),w,b
  2379  001D4E  B0D8               	btfsc	status,0,c
  2380  001D50  0012               	return	
  2381  001D52  D7E3               	goto	l2992
  2382  001D54                     __end_of_delay_ms:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postinc2	equ	0xFDE
  2394                           postdec2	equ	0xFDD
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function ___awdiv *****************
  2400 ;; Defined at:
  2401 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  dividend        2   14[BANK0 ] int 
  2404 ;;  divisor         2   16[BANK0 ] int 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  quotient        2   20[BANK0 ] int 
  2407 ;;  sign            1   19[BANK0 ] unsigned char 
  2408 ;;  counter         1   18[BANK0 ] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  2   14[BANK0 ] int 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2418 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2419 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2421 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2422 ;;Total ram usage:        8 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    6
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_delay_ms
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text7
  2433  00196E                     __ptext7:
  2434                           	opt stack 0
  2435  00196E                     ___awdiv:
  2436                           	opt stack 23
  2437                           
  2438                           ;incstack = 0
  2439  00196E  0E00               	movlw	0
  2440  001970  0100               	movlb	0	; () banked
  2441  001972  6FB9               	movwf	___awdiv@sign& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444  001974  0100               	movlb	0	; () banked
  2445  001976  AFB7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2446  001978  D008               	goto	l2706
  2447                           
  2448                           ; BSR set to: 0
  2449  00197A  0100               	movlb	0	; () banked
  2450  00197C  6DB6               	negf	___awdiv@divisor& (0+255),b
  2451  00197E  1FB7               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2452  001980  B0D8               	btfsc	status,0,c
  2453  001982  2BB7               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2454                           
  2455                           ; BSR set to: 0
  2456  001984  0E01               	movlw	1
  2457  001986  0100               	movlb	0	; () banked
  2458  001988  6FB9               	movwf	___awdiv@sign& (0+255),b
  2459  00198A                     l2706:
  2460                           
  2461                           ; BSR set to: 0
  2462  00198A  0100               	movlb	0	; () banked
  2463  00198C  AFB5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2464  00198E  D008               	goto	l2712
  2465                           
  2466                           ; BSR set to: 0
  2467  001990  0100               	movlb	0	; () banked
  2468  001992  6DB4               	negf	___awdiv@dividend& (0+255),b
  2469  001994  1FB5               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2470  001996  B0D8               	btfsc	status,0,c
  2471  001998  2BB5               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2472                           
  2473                           ; BSR set to: 0
  2474  00199A  0E01               	movlw	1
  2475  00199C  0100               	movlb	0	; () banked
  2476  00199E  1BB9               	xorwf	___awdiv@sign& (0+255),f,b
  2477  0019A0                     l2712:
  2478                           
  2479                           ; BSR set to: 0
  2480  0019A0  0E00               	movlw	0
  2481  0019A2  0100               	movlb	0	; () banked
  2482  0019A4  6FBB               	movwf	(___awdiv@quotient+1)& (0+255),b
  2483  0019A6  0E00               	movlw	0
  2484  0019A8  6FBA               	movwf	___awdiv@quotient& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487  0019AA  0100               	movlb	0	; () banked
  2488  0019AC  51B6               	movf	___awdiv@divisor& (0+255),w,b
  2489  0019AE  0100               	movlb	0	; () banked
  2490  0019B0  11B7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2491  0019B2  B4D8               	btfsc	status,2,c
  2492  0019B4  D02C               	goto	l2734
  2493                           
  2494                           ; BSR set to: 0
  2495  0019B6  0E01               	movlw	1
  2496  0019B8  0100               	movlb	0	; () banked
  2497  0019BA  6FB8               	movwf	___awdiv@counter& (0+255),b
  2498  0019BC  D006               	goto	l2720
  2499  0019BE                     l2718:
  2500                           
  2501                           ; BSR set to: 0
  2502  0019BE  0100               	movlb	0	; () banked
  2503  0019C0  90D8               	bcf	status,0,c
  2504  0019C2  37B6               	rlcf	___awdiv@divisor& (0+255),f,b
  2505  0019C4  37B7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2506  0019C6  0100               	movlb	0	; () banked
  2507  0019C8  2BB8               	incf	___awdiv@counter& (0+255),f,b
  2508  0019CA                     l2720:
  2509                           
  2510                           ; BSR set to: 0
  2511  0019CA  0100               	movlb	0	; () banked
  2512  0019CC  AFB7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2513  0019CE  D7F7               	goto	l2718
  2514  0019D0                     l2722:
  2515                           
  2516                           ; BSR set to: 0
  2517  0019D0  0100               	movlb	0	; () banked
  2518  0019D2  90D8               	bcf	status,0,c
  2519  0019D4  37BA               	rlcf	___awdiv@quotient& (0+255),f,b
  2520  0019D6  37BB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2521                           
  2522                           ; BSR set to: 0
  2523  0019D8  0100               	movlb	0	; () banked
  2524  0019DA  51B6               	movf	___awdiv@divisor& (0+255),w,b
  2525  0019DC  0100               	movlb	0	; () banked
  2526  0019DE  5DB4               	subwf	___awdiv@dividend& (0+255),w,b
  2527  0019E0  0100               	movlb	0	; () banked
  2528  0019E2  51B7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2529  0019E4  0100               	movlb	0	; () banked
  2530  0019E6  59B5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2531  0019E8  A0D8               	btfss	status,0,c
  2532  0019EA  D00A               	goto	l2730
  2533                           
  2534                           ; BSR set to: 0
  2535  0019EC  0100               	movlb	0	; () banked
  2536  0019EE  51B6               	movf	___awdiv@divisor& (0+255),w,b
  2537  0019F0  0100               	movlb	0	; () banked
  2538  0019F2  5FB4               	subwf	___awdiv@dividend& (0+255),f,b
  2539  0019F4  0100               	movlb	0	; () banked
  2540  0019F6  51B7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2541  0019F8  0100               	movlb	0	; () banked
  2542  0019FA  5BB5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2543                           
  2544                           ; BSR set to: 0
  2545  0019FC  0100               	movlb	0	; () banked
  2546  0019FE  81BA               	bsf	___awdiv@quotient& (0+255),0,b
  2547  001A00                     l2730:
  2548                           
  2549                           ; BSR set to: 0
  2550  001A00  0100               	movlb	0	; () banked
  2551  001A02  90D8               	bcf	status,0,c
  2552  001A04  33B7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2553  001A06  33B6               	rrcf	___awdiv@divisor& (0+255),f,b
  2554                           
  2555                           ; BSR set to: 0
  2556  001A08  0100               	movlb	0	; () banked
  2557  001A0A  2FB8               	decfsz	___awdiv@counter& (0+255),f,b
  2558  001A0C  D7E1               	goto	l2722
  2559  001A0E                     l2734:
  2560                           
  2561                           ; BSR set to: 0
  2562  001A0E  0100               	movlb	0	; () banked
  2563  001A10  51B9               	movf	___awdiv@sign& (0+255),w,b
  2564  001A12  0100               	movlb	0	; () banked
  2565  001A14  B4D8               	btfsc	status,2,c
  2566  001A16  D005               	goto	l2738
  2567                           
  2568                           ; BSR set to: 0
  2569  001A18  0100               	movlb	0	; () banked
  2570  001A1A  6DBA               	negf	___awdiv@quotient& (0+255),b
  2571  001A1C  1FBB               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2572  001A1E  B0D8               	btfsc	status,0,c
  2573  001A20  2BBB               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2574  001A22                     l2738:
  2575                           
  2576                           ; BSR set to: 0
  2577  001A22  C0BA  F0B4         	movff	___awdiv@quotient,?___awdiv
  2578  001A26  C0BB  F0B5         	movff	___awdiv@quotient+1,?___awdiv+1
  2579  001A2A  0012               	return	
  2580  001A2C                     __end_of___awdiv:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _SYSTEM_Initialize *****************
  2598 ;; Defined at:
  2599 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2617 ;;Total ram usage:        0 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    8
  2620 ;; This function calls:
  2621 ;;		_ADC_Initialize
  2622 ;;		_EUSART1_Initialize
  2623 ;;		_EUSART2_Initialize
  2624 ;;		_I2C_Initialize
  2625 ;;		_INTERRUPT_Initialize
  2626 ;;		_OSCILLATOR_Initialize
  2627 ;;		_PIN_MANAGER_Initialize
  2628 ;;		_TMR1_Initialize
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text8
  2635  0021EC                     __ptext8:
  2636                           	opt stack 0
  2637  0021EC                     _SYSTEM_Initialize:
  2638                           	opt stack 22
  2639                           
  2640                           ;mcc.c: 114: INTERRUPT_Initialize();
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;incstack = 0
  2644  0021EC  EC68  F011         	call	_INTERRUPT_Initialize	;wreg free
  2645                           
  2646                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2647  0021F0  ECA6  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  2648                           
  2649                           ;mcc.c: 116: OSCILLATOR_Initialize();
  2650  0021F4  EC36  F011         	call	_OSCILLATOR_Initialize	;wreg free
  2651                           
  2652                           ;mcc.c: 117: I2C_Initialize();
  2653  0021F8  EC07  F011         	call	_I2C_Initialize	;wreg free
  2654                           
  2655                           ;mcc.c: 118: ADC_Initialize();
  2656  0021FC  EC14  F011         	call	_ADC_Initialize	;wreg free
  2657                           
  2658                           ;mcc.c: 119: TMR1_Initialize();
  2659  002200  EC89  F010         	call	_TMR1_Initialize	;wreg free
  2660                           
  2661                           ;mcc.c: 120: EUSART1_Initialize();
  2662  002204  EC2B  F011         	call	_EUSART1_Initialize	;wreg free
  2663                           
  2664                           ;mcc.c: 121: EUSART2_Initialize();
  2665  002208  EC20  F011         	call	_EUSART2_Initialize	;wreg free
  2666  00220C  0012               	return		;funcret
  2667  00220E                     __end_of_SYSTEM_Initialize:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postinc2	equ	0xFDE
  2679                           postdec2	equ	0xFDD
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _TMR1_Initialize *****************
  2685 ;; Defined at:
  2686 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;Total ram usage:        2 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    7
  2707 ;; This function calls:
  2708 ;;		_TMR1_StartTimer
  2709 ;; This function is called by:
  2710 ;;		_SYSTEM_Initialize
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text9
  2715  002112                     __ptext9:
  2716                           	opt stack 0
  2717  002112                     _TMR1_Initialize:
  2718                           	opt stack 22
  2719                           
  2720                           ;tmr1.c: 68: T1CON = 0x30;
  2721                           
  2722                           ;incstack = 0
  2723  002112  0E30               	movlw	48
  2724  002114  6ECD               	movwf	4045,c	;volatile
  2725                           
  2726                           ;tmr1.c: 71: T1GCON = 0x00;
  2727  002116  0E00               	movlw	0
  2728  002118  6EAA               	movwf	4010,c	;volatile
  2729                           
  2730                           ;tmr1.c: 74: TMR1H = 0xF8;
  2731  00211A  0EF8               	movlw	248
  2732  00211C  6ECF               	movwf	4047,c	;volatile
  2733                           
  2734                           ;tmr1.c: 77: TMR1L = 0x30;
  2735  00211E  0E30               	movlw	48
  2736  002120  6ECE               	movwf	4046,c	;volatile
  2737                           
  2738                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2739  002122  50CE               	movf	4046,w,c	;volatile
  2740  002124  CFCF F0B4          	movff	4047,??_TMR1_Initialize	;volatile
  2741  002128  0100               	movlb	0	; () banked
  2742  00212A  6BB5               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  2743  00212C  C0B4  F0B5         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  2744  002130  0100               	movlb	0	; () banked
  2745  002132  6BB4               	clrf	??_TMR1_Initialize& (0+255),b
  2746  002134  0100               	movlb	0	; () banked
  2747  002136  11B4               	iorwf	??_TMR1_Initialize& (0+255),w,b
  2748  002138  0100               	movlb	0	; () banked
  2749  00213A  6F9C               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  2750  00213C  0100               	movlb	0	; () banked
  2751  00213E  51B5               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  2752  002140  0100               	movlb	0	; () banked
  2753  002142  6F9D               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  2757  002144  909E               	bcf	3998,0,c	;volatile
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;tmr1.c: 86: TMR1_StartTimer();
  2761  002146  EC66  F011         	call	_TMR1_StartTimer	;wreg free
  2762  00214A  0012               	return		;funcret
  2763  00214C                     __end_of_TMR1_Initialize:
  2764                           	opt stack 0
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           prodh	equ	0xFF4
  2770                           prodl	equ	0xFF3
  2771                           intcon	equ	0xFF2
  2772                           postinc0	equ	0xFEE
  2773                           wreg	equ	0xFE8
  2774                           postinc2	equ	0xFDE
  2775                           postdec2	equ	0xFDD
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _TMR1_StartTimer *****************
  2781 ;; Defined at:
  2782 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;		None
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		None
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;Total ram usage:        0 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    6
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_TMR1_Initialize
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text10
  2811  0022CC                     __ptext10:
  2812                           	opt stack 0
  2813  0022CC                     _TMR1_StartTimer:
  2814                           	opt stack 22
  2815                           
  2816                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  2817                           
  2818                           ;incstack = 0
  2819  0022CC  80CD               	bsf	4045,0,c	;volatile
  2820  0022CE  0012               	return		;funcret
  2821  0022D0                     __end_of_TMR1_StartTimer:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _PIN_MANAGER_Initialize *****************
  2839 ;; Defined at:
  2840 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    6
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_SYSTEM_Initialize
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text11
  2869  00214C                     __ptext11:
  2870                           	opt stack 0
  2871  00214C                     _PIN_MANAGER_Initialize:
  2872                           	opt stack 23
  2873                           
  2874                           ;pin_manager.c: 56: LATE = 0x00;
  2875                           
  2876                           ;incstack = 0
  2877  00214C  0E00               	movlw	0
  2878  00214E  6E8D               	movwf	3981,c	;volatile
  2879                           
  2880                           ;pin_manager.c: 57: LATD = 0x00;
  2881  002150  0E00               	movlw	0
  2882  002152  6E8C               	movwf	3980,c	;volatile
  2883                           
  2884                           ;pin_manager.c: 58: LATA = 0x00;
  2885  002154  0E00               	movlw	0
  2886  002156  6E89               	movwf	3977,c	;volatile
  2887                           
  2888                           ;pin_manager.c: 59: LATB = 0x00;
  2889  002158  0E00               	movlw	0
  2890  00215A  6E8A               	movwf	3978,c	;volatile
  2891                           
  2892                           ;pin_manager.c: 60: LATC = 0x00;
  2893  00215C  0E00               	movlw	0
  2894  00215E  6E8B               	movwf	3979,c	;volatile
  2895                           
  2896                           ;pin_manager.c: 65: TRISE = 0x07;
  2897  002160  0E07               	movlw	7
  2898  002162  6E96               	movwf	3990,c	;volatile
  2899                           
  2900                           ;pin_manager.c: 66: TRISA = 0xEF;
  2901  002164  0EEF               	movlw	239
  2902  002166  6E92               	movwf	3986,c	;volatile
  2903                           
  2904                           ;pin_manager.c: 67: TRISB = 0xF2;
  2905  002168  0EF2               	movlw	242
  2906  00216A  6E93               	movwf	3987,c	;volatile
  2907                           
  2908                           ;pin_manager.c: 68: TRISC = 0xB8;
  2909  00216C  0EB8               	movlw	184
  2910  00216E  6E94               	movwf	3988,c	;volatile
  2911                           
  2912                           ;pin_manager.c: 69: TRISD = 0xA0;
  2913  002170  0EA0               	movlw	160
  2914  002172  6E95               	movwf	3989,c	;volatile
  2915                           
  2916                           ;pin_manager.c: 74: ANCON0 = 0xFF;
  2917  002174  010F               	movlb	15	; () banked
  2918  002176  695D               	setf	93,b	;volatile
  2919                           
  2920                           ;pin_manager.c: 75: ANCON1 = 0x7B;
  2921  002178  0E7B               	movlw	123
  2922  00217A  010F               	movlb	15	; () banked
  2923  00217C  6F5C               	movwf	92,b	;volatile
  2924                           
  2925                           ;pin_manager.c: 80: WPUB = 0xFE;
  2926  00217E  0EFE               	movlw	254
  2927  002180  010F               	movlb	15	; () banked
  2928  002182  6F5B               	movwf	91,b	;volatile
  2929                           
  2930                           ; BSR set to: 15
  2931  002184  0012               	return		;funcret
  2932  002186                     __end_of_PIN_MANAGER_Initialize:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           intcon	equ	0xFF2
  2941                           postinc0	equ	0xFEE
  2942                           wreg	equ	0xFE8
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _OSCILLATOR_Initialize *****************
  2950 ;; Defined at:
  2951 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    6
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_SYSTEM_Initialize
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text12
  2980  00226C                     __ptext12:
  2981                           	opt stack 0
  2982  00226C                     _OSCILLATOR_Initialize:
  2983                           	opt stack 23
  2984                           
  2985                           ;mcc.c: 127: OSCCON = 0x60;
  2986                           
  2987                           ; BSR set to: 15
  2988                           ;incstack = 0
  2989  00226C  0E60               	movlw	96
  2990  00226E  6ED3               	movwf	4051,c	;volatile
  2991                           
  2992                           ;mcc.c: 129: OSCCON2 = 0x00;
  2993  002270  0E00               	movlw	0
  2994  002272  6ED2               	movwf	4050,c	;volatile
  2995                           
  2996                           ;mcc.c: 131: OSCTUNE = 0x00;
  2997  002274  0E00               	movlw	0
  2998  002276  6E9B               	movwf	3995,c	;volatile
  2999                           
  3000                           ;mcc.c: 133: REFOCON = 0x00;
  3001  002278  0E00               	movlw	0
  3002  00227A  6E9A               	movwf	3994,c	;volatile
  3003  00227C  0012               	return		;funcret
  3004  00227E                     __end_of_OSCILLATOR_Initialize:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           intcon	equ	0xFF2
  3013                           postinc0	equ	0xFEE
  3014                           wreg	equ	0xFE8
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _INTERRUPT_Initialize *****************
  3022 ;; Defined at:
  3023 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;		None
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		None
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3041 ;;Total ram usage:        0 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    6
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_SYSTEM_Initialize
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text13
  3052  0022D0                     __ptext13:
  3053                           	opt stack 0
  3054  0022D0                     _INTERRUPT_Initialize:
  3055                           	opt stack 23
  3056                           
  3057                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3058                           
  3059                           ;incstack = 0
  3060  0022D0  9ED0               	bcf	4048,7,c	;volatile
  3061  0022D2  0012               	return		;funcret
  3062  0022D4                     __end_of_INTERRUPT_Initialize:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon	equ	0xFF2
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           postinc2	equ	0xFDE
  3074                           postdec2	equ	0xFDD
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _I2C_Initialize *****************
  3080 ;; Defined at:
  3081 ;;		line 79 in file "mcc_generated_files/i2c.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    6
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_SYSTEM_Initialize
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text14
  3110  00220E                     __ptext14:
  3111                           	opt stack 0
  3112  00220E                     _I2C_Initialize:
  3113                           	opt stack 23
  3114                           
  3115                           ;i2c.c: 82: SSPSTAT = 0x00;
  3116                           
  3117                           ;incstack = 0
  3118  00220E  0E00               	movlw	0
  3119  002210  6EC7               	movwf	4039,c	;volatile
  3120                           
  3121                           ;i2c.c: 84: SSPCON1 = 0x3E;
  3122  002212  0E3E               	movlw	62
  3123  002214  6EC6               	movwf	4038,c	;volatile
  3124                           
  3125                           ;i2c.c: 86: SSPCON2 = 0x01;
  3126  002216  0E01               	movlw	1
  3127  002218  6EC5               	movwf	4037,c	;volatile
  3128                           
  3129                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  3130  00221A  0EFE               	movlw	254
  3131  00221C  6EC8               	movwf	4040,c	;volatile
  3132                           
  3133                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  3134  00221E  0E10               	movlw	16
  3135  002220  6EC8               	movwf	4040,c	;volatile
  3136                           
  3137                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  3138  002222  969E               	bcf	3998,3,c	;volatile
  3139                           
  3140                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  3141  002224  869D               	bsf	3997,3,c	;volatile
  3142  002226  0012               	return		;funcret
  3143  002228                     __end_of_I2C_Initialize:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           postinc2	equ	0xFDE
  3155                           postdec2	equ	0xFDD
  3156                           fsr2h	equ	0xFDA
  3157                           fsr2l	equ	0xFD9
  3158                           status	equ	0xFD8
  3159                           
  3160 ;; *************** function _EUSART2_Initialize *****************
  3161 ;; Defined at:
  3162 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;Total ram usage:        0 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    6
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_SYSTEM_Initialize
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text15
  3191  002240                     __ptext15:
  3192                           	opt stack 0
  3193  002240                     _EUSART2_Initialize:
  3194                           	opt stack 23
  3195                           
  3196                           ;eusart2.c: 60: BAUDCON2 = 0x18;
  3197                           
  3198                           ;incstack = 0
  3199  002240  0E18               	movlw	24
  3200  002242  6EB9               	movwf	4025,c	;volatile
  3201                           
  3202                           ;eusart2.c: 63: RCSTA2 = 0x90;
  3203  002244  0E90               	movlw	144
  3204  002246  6EA6               	movwf	4006,c	;volatile
  3205                           
  3206                           ;eusart2.c: 66: TXSTA2 = 0xA6;
  3207  002248  0EA6               	movlw	166
  3208  00224A  6EBA               	movwf	4026,c	;volatile
  3209                           
  3210                           ;eusart2.c: 69: SPBRG2 = 0x8A;
  3211  00224C  0E8A               	movlw	138
  3212  00224E  6E7B               	movwf	3963,c	;volatile
  3213                           
  3214                           ;eusart2.c: 72: SPBRGH2 = 0x00;
  3215  002250  0E00               	movlw	0
  3216  002252  6E7C               	movwf	3964,c	;volatile
  3217  002254  0012               	return		;funcret
  3218  002256                     __end_of_EUSART2_Initialize:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           intcon	equ	0xFF2
  3227                           postinc0	equ	0xFEE
  3228                           wreg	equ	0xFE8
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _EUSART1_Initialize *****************
  3236 ;; Defined at:
  3237 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    6
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_SYSTEM_Initialize
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text16
  3266  002256                     __ptext16:
  3267                           	opt stack 0
  3268  002256                     _EUSART1_Initialize:
  3269                           	opt stack 23
  3270                           
  3271                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  3272                           
  3273                           ;incstack = 0
  3274  002256  0E08               	movlw	8
  3275  002258  6EA7               	movwf	4007,c	;volatile
  3276                           
  3277                           ;eusart1.c: 63: RCSTA1 = 0x90;
  3278  00225A  0E90               	movlw	144
  3279  00225C  6EAB               	movwf	4011,c	;volatile
  3280                           
  3281                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  3282  00225E  0EA4               	movlw	164
  3283  002260  6EAC               	movwf	4012,c	;volatile
  3284                           
  3285                           ;eusart1.c: 69: SPBRG1 = 0x0F;
  3286  002262  0E0F               	movlw	15
  3287  002264  6EAF               	movwf	4015,c	;volatile
  3288                           
  3289                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  3290  002266  0E00               	movlw	0
  3291  002268  6E7D               	movwf	3965,c	;volatile
  3292  00226A  0012               	return		;funcret
  3293  00226C                     __end_of_EUSART1_Initialize:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           prodh	equ	0xFF4
  3300                           prodl	equ	0xFF3
  3301                           intcon	equ	0xFF2
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _ADC_Initialize *****************
  3311 ;; Defined at:
  3312 ;;		line 58 in file "mcc_generated_files/adc.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    6
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_SYSTEM_Initialize
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text17
  3341  002228                     __ptext17:
  3342                           	opt stack 0
  3343  002228                     _ADC_Initialize:
  3344                           	opt stack 23
  3345                           
  3346                           ;adc.c: 63: ADCON0 = 0x01;
  3347                           
  3348                           ;incstack = 0
  3349  002228  0E01               	movlw	1
  3350  00222A  6EC2               	movwf	4034,c	;volatile
  3351                           
  3352                           ;adc.c: 66: ADCON1 = 0x80;
  3353  00222C  0E80               	movlw	128
  3354  00222E  6EC1               	movwf	4033,c	;volatile
  3355                           
  3356                           ;adc.c: 69: ADCON2 = 0x16;
  3357  002230  0E16               	movlw	22
  3358  002232  6EC0               	movwf	4032,c	;volatile
  3359                           
  3360                           ;adc.c: 72: ADRESH = 0x00;
  3361  002234  0E00               	movlw	0
  3362  002236  6EC4               	movwf	4036,c	;volatile
  3363                           
  3364                           ;adc.c: 75: ADRESL = 0x00;
  3365  002238  0E00               	movlw	0
  3366  00223A  6EC3               	movwf	4035,c	;volatile
  3367                           
  3368                           ;adc.c: 78: PIE1bits.ADIE = 1;
  3369  00223C  8C9D               	bsf	3997,6,c	;volatile
  3370  00223E  0012               	return		;funcret
  3371  002240                     __end_of_ADC_Initialize:
  3372                           	opt stack 0
  3373                           tblptru	equ	0xFF8
  3374                           tblptrh	equ	0xFF7
  3375                           tblptrl	equ	0xFF6
  3376                           tablat	equ	0xFF5
  3377                           prodh	equ	0xFF4
  3378                           prodl	equ	0xFF3
  3379                           intcon	equ	0xFF2
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _ADC_GetConversion *****************
  3389 ;; Defined at:
  3390 ;;		line 106 in file "mcc_generated_files/adc.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  channel         1    wreg     enum E15092
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  channel         1   18[BANK0 ] enum E15092
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  2   14[BANK0 ] unsigned int 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3407 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3408 ;;Total ram usage:        5 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    6
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;;		_getADC
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text18
  3420  002096                     __ptext18:
  3421                           	opt stack 0
  3422  002096                     _ADC_GetConversion:
  3423                           	opt stack 24
  3424                           
  3425                           ;incstack = 0
  3426                           ;ADC_GetConversion@channel stored from wreg
  3427  002096  0100               	movlb	0	; () banked
  3428  002098  6FB8               	movwf	ADC_GetConversion@channel& (0+255),b
  3429                           
  3430                           ;adc.c: 109: ADCON0bits.CHS = channel;
  3431  00209A  C0B8  F0B6         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3432  00209E  0100               	movlb	0	; () banked
  3433  0020A0  47B6               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3434  0020A2  47B6               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3435  0020A4  50C2               	movf	4034,w,c	;volatile
  3436  0020A6  0100               	movlb	0	; () banked
  3437  0020A8  19B6               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3438  0020AA  0B83               	andlw	-125
  3439  0020AC  19B6               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3440  0020AE  6EC2               	movwf	4034,c	;volatile
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;adc.c: 112: ADCON0bits.ADON = 1;
  3444  0020B0  80C2               	bsf	4034,0,c	;volatile
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;adc.c: 116: ADCON0bits.GO_nDONE = 1;
  3448  0020B2  82C2               	bsf	4034,1,c	;volatile
  3449  0020B4                     l253:
  3450  0020B4  B2C2               	btfsc	4034,1,c	;volatile
  3451  0020B6  D7FE               	goto	l253
  3452                           
  3453                           ;adc.c: 121: }
  3454                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  3455  0020B8  50C4               	movf	4036,w,c	;volatile
  3456  0020BA  0100               	movlb	0	; () banked
  3457  0020BC  6FB7               	movwf	(??_ADC_GetConversion+1)& (0+255),b
  3458  0020BE  6BB6               	clrf	??_ADC_GetConversion& (0+255),b
  3459  0020C0  50C3               	movf	4035,w,c	;volatile
  3460  0020C2  0100               	movlb	0	; () banked
  3461  0020C4  25B6               	addwf	??_ADC_GetConversion& (0+255),w,b
  3462  0020C6  0100               	movlb	0	; () banked
  3463  0020C8  6FB4               	movwf	?_ADC_GetConversion& (0+255),b
  3464  0020CA  0E00               	movlw	0
  3465  0020CC  0100               	movlb	0	; () banked
  3466  0020CE  21B7               	addwfc	(??_ADC_GetConversion+1)& (0+255),w,b
  3467  0020D0  0100               	movlb	0	; () banked
  3468  0020D2  6FB5               	movwf	(?_ADC_GetConversion+1)& (0+255),b
  3469  0020D4  0012               	return	
  3470  0020D6                     __end_of_ADC_GetConversion:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _INTERRUPT_InterruptManager *****************
  3488 ;; Defined at:
  3489 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;		None
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3505 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3506 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3507 ;;Total ram usage:       14 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    5
  3510 ;; This function calls:
  3511 ;;		_ADC_ISR
  3512 ;;		_I2C_ISR
  3513 ;; This function is called by:
  3514 ;;		Interrupt level 2
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	intcode
  3519  000008                     __pintcode:
  3520                           	opt stack 0
  3521  000008                     _INTERRUPT_InterruptManager:
  3522                           	opt stack 22
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;incstack = 0
  3526  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3527  00000A  CFFA F0A6          	movff	pclath,??_INTERRUPT_InterruptManager
  3528  00000E  CFFB F0A7          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3529  000012  CFE9 F0A8          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3530  000016  CFEA F0A9          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3531  00001A  CFE1 F0AA          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3532  00001E  CFE2 F0AB          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3533  000022  CFD9 F0AC          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3534  000026  CFDA F0AD          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3535  00002A  CFF3 F0AE          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3536  00002E  CFF4 F0AF          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3537  000032  CFF6 F0B0          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3538  000036  CFF7 F0B1          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3539  00003A  CFF8 F0B2          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3540  00003E  CFF5 F0B3          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3541                           
  3542                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  3543  000042  BCF2               	btfsc	intcon,6,c	;volatile
  3544  000044  AC9D               	btfss	3997,6,c	;volatile
  3545  000046  D003               	goto	i2l3026
  3546  000048  BC9E               	btfsc	3998,6,c	;volatile
  3547                           
  3548                           ;interrupt_manager.c: 61: {
  3549                           ;interrupt_manager.c: 62: ADC_ISR();
  3550  00004A  EC6A  F011         	call	_ADC_ISR	;wreg free
  3551  00004E                     i2l3026:
  3552                           
  3553                           ;interrupt_manager.c: 63: }
  3554                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  3555  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  3556  000050  A69D               	btfss	3997,3,c	;volatile
  3557  000052  D003               	goto	i2l309
  3558  000054  B69E               	btfsc	3998,3,c	;volatile
  3559                           
  3560                           ;interrupt_manager.c: 65: {
  3561                           ;interrupt_manager.c: 66: I2C_ISR();
  3562  000056  EC74  F00D         	call	_I2C_ISR	;wreg free
  3563  00005A                     i2l309:
  3564  00005A  C0B3  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3565  00005E  C0B2  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3566  000062  C0B1  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3567  000066  C0B0  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3568  00006A  C0AF  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3569  00006E  C0AE  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3570  000072  C0AD  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3571  000076  C0AC  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3572  00007A  C0AB  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3573  00007E  C0AA  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3574  000082  C0A9  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3575  000086  C0A8  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3576  00008A  C0A7  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3577  00008E  C0A6  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3578  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3579  000094  0011               	retfie		f
  3580  000096                     __end_of_INTERRUPT_InterruptManager:
  3581                           	opt stack 0
  3582                           pclatu	equ	0xFFB
  3583                           pclath	equ	0xFFA
  3584                           tblptru	equ	0xFF8
  3585                           tblptrh	equ	0xFF7
  3586                           tblptrl	equ	0xFF6
  3587                           tablat	equ	0xFF5
  3588                           prodh	equ	0xFF4
  3589                           prodl	equ	0xFF3
  3590                           intcon	equ	0xFF2
  3591                           postinc0	equ	0xFEE
  3592                           fsr0h	equ	0xFEA
  3593                           fsr0l	equ	0xFE9
  3594                           wreg	equ	0xFE8
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _I2C_ISR *****************
  3604 ;; Defined at:
  3605 ;;		line 102 in file "mcc_generated_files/i2c.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;Total ram usage:        0 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    4
  3626 ;; This function calls:
  3627 ;;		_getByteToSend
  3628 ;;		_handleByteReceived
  3629 ;;		i2_printf
  3630 ;; This function is called by:
  3631 ;;		_INTERRUPT_InterruptManager
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text20
  3636  001AE8                     __ptext20:
  3637                           	opt stack 0
  3638  001AE8                     _I2C_ISR:
  3639                           	opt stack 22
  3640                           
  3641                           ;i2c.c: 103: if (SSPSTATbits.BF == 0 && SSPSTATbits.BF == 0) {
  3642                           
  3643                           ;incstack = 0
  3644  001AE8  A0C7               	btfss	4039,0,c	;volatile
  3645  001AEA  B0C7               	btfsc	4039,0,c	;volatile
  3646  001AEC  D002               	goto	i2l152
  3647                           
  3648                           ;i2c.c: 105: SSPIF = 0;
  3649  001AEE  969E               	bcf	3998,3,c	;volatile
  3650                           
  3651                           ;i2c.c: 106: return;
  3652  001AF0  0012               	return	
  3653  001AF2                     i2l152:
  3654                           
  3655                           ;i2c.c: 107: }
  3656                           ;i2c.c: 109: if (SSPIF)
  3657  001AF2  A69E               	btfss	3998,3,c	;volatile
  3658  001AF4  D041               	goto	i2l2890
  3659                           
  3660                           ;i2c.c: 110: {
  3661                           ;i2c.c: 111: if (SSPSTATbits.R_nW)
  3662  001AF6  A4C7               	btfss	4039,2,c	;volatile
  3663  001AF8  D016               	goto	i2l2860
  3664                           
  3665                           ;i2c.c: 112: {
  3666                           ;i2c.c: 113: if (!SSPSTATbits.D_nA)
  3667  001AFA  BAC7               	btfsc	4039,5,c	;volatile
  3668  001AFC  D009               	goto	i2l2852
  3669                           
  3670                           ;i2c.c: 114: {
  3671                           ;i2c.c: 115: SSPBUF = getByteToSend(index_i2c);
  3672  001AFE  0100               	movlb	0	; () banked
  3673  001B00  519E               	movf	_index_i2c& (0+255),w,b
  3674  001B02  ECC1  F00A         	call	_getByteToSend
  3675  001B06  6EC9               	movwf	4041,c	;volatile
  3676                           
  3677                           ;i2c.c: 116: index_i2c++;
  3678  001B08  0100               	movlb	0	; () banked
  3679  001B0A  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3680  001B0C  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;i2c.c: 117: SSPCON1bits.CKP = 1;
  3684  001B0E  88C6               	bsf	4038,4,c	;volatile
  3685  001B10                     i2l2852:
  3686                           
  3687                           ;i2c.c: 118: }
  3688                           ;i2c.c: 119: if (SSPSTATbits.D_nA)
  3689  001B10  AAC7               	btfss	4039,5,c	;volatile
  3690  001B12  D009               	goto	i2l2860
  3691                           
  3692                           ;i2c.c: 120: {
  3693                           ;i2c.c: 121: SSPBUF = getByteToSend(index_i2c);
  3694  001B14  0100               	movlb	0	; () banked
  3695  001B16  519E               	movf	_index_i2c& (0+255),w,b
  3696  001B18  ECC1  F00A         	call	_getByteToSend
  3697  001B1C  6EC9               	movwf	4041,c	;volatile
  3698                           
  3699                           ;i2c.c: 122: index_i2c++;
  3700  001B1E  0100               	movlb	0	; () banked
  3701  001B20  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3702  001B22  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;i2c.c: 123: SSPCON1bits.CKP = 1;
  3706  001B24  88C6               	bsf	4038,4,c	;volatile
  3707  001B26                     i2l2860:
  3708                           
  3709                           ;i2c.c: 124: }
  3710                           ;i2c.c: 126: }
  3711                           ;i2c.c: 127: if (!SSPSTATbits.R_nW)
  3712  001B26  B4C7               	btfsc	4039,2,c	;volatile
  3713  001B28  D027               	goto	i2l2890
  3714                           
  3715                           ;i2c.c: 128: {
  3716                           ;i2c.c: 129: if (!SSPSTATbits.D_nA)
  3717  001B2A  BAC7               	btfsc	4039,5,c	;volatile
  3718  001B2C  D006               	goto	i2l2870
  3719                           
  3720                           ;i2c.c: 130: {
  3721                           ;i2c.c: 131: first = 1;
  3722  001B2E  0E01               	movlw	1
  3723  001B30  0100               	movlb	0	; () banked
  3724  001B32  6FE8               	movwf	_first& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;i2c.c: 132: junk = SSPBUF;
  3728  001B34  CFC9 F0A5          	movff	4041,_junk	;volatile
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;i2c.c: 134: SSPCON1bits.CKP = 1;
  3732  001B38  88C6               	bsf	4038,4,c	;volatile
  3733  001B3A                     i2l2870:
  3734                           
  3735                           ;i2c.c: 135: }
  3736                           ;i2c.c: 136: if (SSPSTATbits.D_nA)
  3737  001B3A  AAC7               	btfss	4039,5,c	;volatile
  3738  001B3C  D01D               	goto	i2l2890
  3739                           
  3740                           ;i2c.c: 137: {
  3741                           ;i2c.c: 138: if (first) {
  3742  001B3E  0100               	movlb	0	; () banked
  3743  001B40  51E8               	movf	_first& (0+255),w,b
  3744  001B42  B4D8               	btfsc	status,2,c
  3745  001B44  D00C               	goto	i2l2880
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;i2c.c: 139: index_i2c = SSPBUF;
  3749  001B46  CFC9 F09E          	movff	4041,_index_i2c	;volatile
  3750  001B4A  0100               	movlb	0	; () banked
  3751  001B4C  6B9F               	clrf	(_index_i2c+1)& (0+255),b
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;i2c.c: 140: handleByteReceived(index_i2c);
  3755  001B4E  0100               	movlb	0	; () banked
  3756  001B50  519E               	movf	_index_i2c& (0+255),w,b
  3757  001B52  EC1D  F00C         	call	_handleByteReceived
  3758                           
  3759                           ;i2c.c: 141: first = 0;
  3760  001B56  0E00               	movlw	0
  3761  001B58  0100               	movlb	0	; () banked
  3762  001B5A  6FE8               	movwf	_first& (0+255),b
  3763                           
  3764                           ;i2c.c: 142: }
  3765  001B5C  D003               	goto	i2l2882
  3766  001B5E                     i2l2880:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;i2c.c: 144: else {
  3770                           ;i2c.c: 146: handleByteReceived(SSPBUF);
  3771  001B5E  50C9               	movf	4041,w,c	;volatile
  3772  001B60  EC1D  F00C         	call	_handleByteReceived
  3773  001B64                     i2l2882:
  3774                           
  3775                           ;i2c.c: 148: }
  3776                           ;i2c.c: 149: if (SSPCON1bits.WCOL)
  3777  001B64  AEC6               	btfss	4038,7,c	;volatile
  3778  001B66  D007               	goto	i2l2888
  3779                           
  3780                           ;i2c.c: 150: {
  3781                           ;i2c.c: 151: SSPCON1bits.WCOL = 0;
  3782  001B68  9EC6               	bcf	4038,7,c	;volatile
  3783                           
  3784                           ;i2c.c: 152: junk = SSPBUF;
  3785  001B6A  CFC9 F0A5          	movff	4041,_junk	;volatile
  3786                           
  3787                           ;i2c.c: 153: handleByteReceived(junk);
  3788  001B6E  0100               	movlb	0	; () banked
  3789  001B70  51A5               	movf	_junk& (0+255),w,b
  3790  001B72  EC1D  F00C         	call	_handleByteReceived
  3791  001B76                     i2l2888:
  3792                           
  3793                           ;i2c.c: 154: }
  3794                           ;i2c.c: 155: SSPCON1bits.CKP = 1;
  3795  001B76  88C6               	bsf	4038,4,c	;volatile
  3796  001B78                     i2l2890:
  3797                           
  3798                           ;i2c.c: 156: }
  3799                           ;i2c.c: 157: }
  3800                           ;i2c.c: 158: }
  3801                           ;i2c.c: 159: if (BCLIF)
  3802  001B78  A6A1               	btfss	4001,3,c	;volatile
  3803  001B7A  D00A               	goto	i2l2900
  3804                           
  3805                           ;i2c.c: 160: {
  3806                           ;i2c.c: 161: printf("collide\r\n");
  3807  001B7C  0E68               	movlw	low STR_1
  3808  001B7E  6E17               	movwf	i2printf@f,c
  3809  001B80  0E0F               	movlw	high STR_1
  3810  001B82  6E18               	movwf	i2printf@f+1,c
  3811  001B84  ECE4  F009         	call	i2_printf	;wreg free
  3812                           
  3813                           ;i2c.c: 162: junk = SSPBUF;
  3814  001B88  CFC9 F0A5          	movff	4041,_junk	;volatile
  3815                           
  3816                           ;i2c.c: 163: BCLIF = 0;
  3817  001B8C  96A1               	bcf	4001,3,c	;volatile
  3818                           
  3819                           ;i2c.c: 164: SSPCON1bits.CKP = 1;
  3820  001B8E  88C6               	bsf	4038,4,c	;volatile
  3821  001B90                     i2l2900:
  3822                           
  3823                           ;i2c.c: 165: }
  3824                           ;i2c.c: 166: SSPIF = 0;
  3825  001B90  969E               	bcf	3998,3,c	;volatile
  3826  001B92  0012               	return		;funcret
  3827  001B94                     __end_of_I2C_ISR:
  3828                           	opt stack 0
  3829                           pclatu	equ	0xFFB
  3830                           pclath	equ	0xFFA
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           intcon	equ	0xFF2
  3838                           postinc0	equ	0xFEE
  3839                           fsr0h	equ	0xFEA
  3840                           fsr0l	equ	0xFE9
  3841                           wreg	equ	0xFE8
  3842                           fsr1h	equ	0xFE2
  3843                           fsr1l	equ	0xFE1
  3844                           postinc2	equ	0xFDE
  3845                           postdec2	equ	0xFDD
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function i2_printf *****************
  3851 ;; Defined at:
  3852 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  f               2   22[COMRAM] PTR const unsigned char 
  3855 ;;		 -> STR_5(15), STR_4(18), STR_3(17), STR_2(13), 
  3856 ;;		 -> STR_1(10), 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  printf          4   31[COMRAM] unsigned long 
  3859 ;;  printf          4    0        struct .
  3860 ;;  printf          3    0        PTR const unsigned char 
  3861 ;;  printf          2   28[COMRAM] PTR void [1]
  3862 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3863 ;;  printf          2   26[COMRAM] int 
  3864 ;;  printf          2    0        unsigned int 
  3865 ;;  printf          1   35[COMRAM] char 
  3866 ;;  printf          1   30[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  2   22[COMRAM] int 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3877 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;Total ram usage:       14 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    2
  3883 ;; This function calls:
  3884 ;;		i2___lldiv
  3885 ;;		i2___llmod
  3886 ;;		i2_putch
  3887 ;; This function is called by:
  3888 ;;		_I2C_ISR
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text21
  3893  0013C8                     __ptext21:
  3894                           	opt stack 0
  3895  0013C8                     i2_printf:
  3896                           	opt stack 23
  3897                           
  3898                           ;doprnt.c: 466: va_list ap;
  3899                           ;doprnt.c: 499: signed char c;
  3900                           ;doprnt.c: 504: int prec;
  3901                           ;doprnt.c: 508: unsigned char flag;
  3902                           ;doprnt.c: 523: union {
  3903                           ;doprnt.c: 524: unsigned long vd;
  3904                           ;doprnt.c: 525: double integ;
  3905                           ;doprnt.c: 526: } tmpval;
  3906                           ;doprnt.c: 528: unsigned long val;
  3907                           ;doprnt.c: 529: unsigned len;
  3908                           ;doprnt.c: 530: const char * cp;
  3909                           ;doprnt.c: 533: *ap = __va_start();
  3910                           
  3911                           ;incstack = 0
  3912  0013C8  0E19               	movlw	low (?i2_printf+2)
  3913  0013CA  6E1D               	movwf	i2printf@ap,c
  3914  0013CC  0E00               	movlw	high (?i2_printf+2)
  3915  0013CE  6E1E               	movwf	i2printf@ap+1,c
  3916                           
  3917                           ;doprnt.c: 536: while(c = *f++) {
  3918  0013D0  D0CA               	goto	i2l2834
  3919  0013D2                     i2l2782:
  3920                           
  3921                           ;doprnt.c: 538: if(c != '%')
  3922  0013D2  0E25               	movlw	37
  3923  0013D4  1824               	xorwf	i2printf@c,w,c
  3924  0013D6  B4D8               	btfsc	status,2,c
  3925  0013D8  D004               	goto	i2l2786
  3926                           
  3927                           ;doprnt.c: 540: {
  3928                           ;doprnt.c: 541: (putch(c) );
  3929  0013DA  5024               	movf	i2printf@c,w,c
  3930  0013DC  EC61  F011         	call	i2_putch
  3931                           
  3932                           ;doprnt.c: 542: continue;
  3933  0013E0  D0C2               	goto	i2l2834
  3934  0013E2                     i2l2786:
  3935                           
  3936                           ;doprnt.c: 543: }
  3937                           ;doprnt.c: 548: flag = 0;
  3938  0013E2  0E00               	movlw	0
  3939  0013E4  6E1F               	movwf	i2printf@flag,c
  3940                           
  3941                           ;doprnt.c: 635: switch(c = *f++) {
  3942                           
  3943                           ;doprnt.c: 633: loop:
  3944  0013E6  D001               	goto	i2l2792
  3945  0013E8                     i2l2788:
  3946                           
  3947                           ;doprnt.c: 643: flag |= 0x10;
  3948  0013E8  881F               	bsf	i2printf@flag,4,c
  3949  0013EA                     i2l2792:
  3950  0013EA  C017  FFF6         	movff	i2printf@f,tblptrl
  3951  0013EE  C018  FFF7         	movff	i2printf@f+1,tblptrh
  3952  0013F2  4A17               	infsnz	i2printf@f,f,c
  3953  0013F4  2A18               	incf	i2printf@f+1,f,c
  3954  0013F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3955  0013F6  6AF8               	clrf	tblptru,c
  3956  0013F8                     	endif
  3957  0013F8                     	if	0	;tblptru may be non-zero
  3958  0013F8                     	endif
  3959  0013F8  0008               	tblrd		*
  3960  0013FA  CFF5 F024          	movff	tablat,i2printf@c
  3961  0013FE  5024               	movf	i2printf@c,w,c
  3962                           
  3963                           ; Switch size 1, requested type "space"
  3964                           ; Number of cases is 4, Range of values is 0 to 108
  3965                           ; switch strategies available:
  3966                           ; Name         Instructions Cycles
  3967                           ; simple_byte           13     7 (average)
  3968                           ;	Chosen strategy is simple_byte
  3969  001400  0A00               	xorlw	0	; case 0
  3970  001402  B4D8               	btfsc	status,2,c
  3971  001404  0012               	return	
  3972  001406  0A64               	xorlw	100	; case 100
  3973  001408  B4D8               	btfsc	status,2,c
  3974  00140A  D007               	goto	i2l627
  3975  00140C  0A0D               	xorlw	13	; case 105
  3976  00140E  B4D8               	btfsc	status,2,c
  3977  001410  D004               	goto	i2l627
  3978  001412  0A05               	xorlw	5	; case 108
  3979  001414  B4D8               	btfsc	status,2,c
  3980  001416  D7E8               	goto	i2l2788
  3981  001418  D0A6               	goto	i2l2834
  3982  00141A                     i2l627:
  3983                           
  3984                           ;doprnt.c: 1253: {
  3985                           ;doprnt.c: 1255: if(flag & 0x10)
  3986  00141A  A81F               	btfss	i2printf@flag,4,c
  3987  00141C  D00E               	goto	i2l2798
  3988                           
  3989                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3990  00141E  C01D  FFD9         	movff	i2printf@ap,fsr2l
  3991  001422  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  3992  001426  CFDE F020          	movff	postinc2,i2printf@val
  3993  00142A  CFDE F021          	movff	postinc2,i2printf@val+1
  3994  00142E  CFDE F022          	movff	postinc2,i2printf@val+2
  3995  001432  CFDE F023          	movff	postinc2,i2printf@val+3
  3996  001436  0E04               	movlw	4
  3997  001438  D00E               	goto	L4
  3998  00143A                     i2l2798:
  3999                           
  4000                           ;doprnt.c: 1257: else
  4001                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4002  00143A  C01D  FFD9         	movff	i2printf@ap,fsr2l
  4003  00143E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  4004  001442  CFDE F020          	movff	postinc2,i2printf@val
  4005  001446  CFDD F021          	movff	postdec2,i2printf@val+1
  4006  00144A  0E00               	movlw	0
  4007  00144C  BE21               	btfsc	i2printf@val+1,7,c
  4008  00144E  0EFF               	movlw	-1
  4009  001450  6E22               	movwf	i2printf@val+2,c
  4010  001452  6E23               	movwf	i2printf@val+3,c
  4011  001454  0E02               	movlw	2
  4012  001456                     L4:
  4013  001456  261D               	addwf	i2printf@ap,f,c
  4014  001458  0E00               	movlw	0
  4015  00145A  221E               	addwfc	i2printf@ap+1,f,c
  4016                           
  4017                           ;doprnt.c: 1261: if((long)val < 0) {
  4018  00145C  AE23               	btfss	i2printf@val+3,7,c
  4019  00145E  D00A               	goto	i2l2808
  4020                           
  4021                           ;doprnt.c: 1262: flag |= 0x03;
  4022  001460  0E03               	movlw	3
  4023  001462  121F               	iorwf	i2printf@flag,f,c
  4024                           
  4025                           ;doprnt.c: 1263: val = -val;
  4026  001464  1E23               	comf	i2printf@val+3,f,c
  4027  001466  1E22               	comf	i2printf@val+2,f,c
  4028  001468  1E21               	comf	i2printf@val+1,f,c
  4029  00146A  6C20               	negf	i2printf@val,c
  4030  00146C  0E00               	movlw	0
  4031  00146E  2221               	addwfc	i2printf@val+1,f,c
  4032  001470  2222               	addwfc	i2printf@val+2,f,c
  4033  001472  2223               	addwfc	i2printf@val+3,f,c
  4034  001474                     i2l2808:
  4035                           
  4036                           ;doprnt.c: 1264: }
  4037                           ;doprnt.c: 1266: }
  4038                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4039  001474  0E01               	movlw	1
  4040  001476  6E24               	movwf	i2printf@c,c
  4041  001478                     i2l2810:
  4042  001478  0E0A               	movlw	10
  4043  00147A  1824               	xorwf	i2printf@c,w,c
  4044  00147C  B4D8               	btfsc	status,2,c
  4045  00147E  D01B               	goto	i2l2822
  4046                           
  4047                           ;doprnt.c: 1306: if(val < dpowers[c])
  4048  001480  5024               	movf	i2printf@c,w,c
  4049  001482  0D04               	mullw	4
  4050  001484  0E01               	movlw	low _dpowers
  4051  001486  24F3               	addwf	prodl,w,c
  4052  001488  6EF6               	movwf	tblptrl,c
  4053  00148A  0E0F               	movlw	high _dpowers
  4054  00148C  20F4               	addwfc	prodh,w,c
  4055  00148E  6EF7               	movwf	tblptrh,c
  4056  001490                     	if	1	;There are 3 active tblptr bytes
  4057  001490  6AF8               	clrf	tblptru,c
  4058  001492  0E00               	movlw	low (__mediumconst shr (0+16))
  4059  001494  22F8               	addwfc	tblptru,f,c
  4060  001496                     	endif
  4061  001496  0009               	tblrd		*+
  4062  001498  50F5               	movf	tablat,w,c
  4063  00149A  5C20               	subwf	i2printf@val,w,c
  4064  00149C  0009               	tblrd		*+
  4065  00149E  50F5               	movf	tablat,w,c
  4066  0014A0  5821               	subwfb	i2printf@val+1,w,c
  4067  0014A2  0009               	tblrd		*+
  4068  0014A4  50F5               	movf	tablat,w,c
  4069  0014A6  5822               	subwfb	i2printf@val+2,w,c
  4070  0014A8  0009               	tblrd		*+
  4071  0014AA  50F5               	movf	tablat,w,c
  4072  0014AC  5823               	subwfb	i2printf@val+3,w,c
  4073  0014AE  A0D8               	btfss	status,0,c
  4074  0014B0  D002               	goto	i2l2822
  4075                           
  4076                           ;doprnt.c: 1307: break;
  4077  0014B2  2A24               	incf	i2printf@c,f,c
  4078  0014B4  D7E1               	goto	i2l2810
  4079  0014B6                     i2l2822:
  4080                           
  4081                           ;doprnt.c: 1422: {
  4082                           ;doprnt.c: 1438: if(flag & 0x03)
  4083  0014B6  C01F  F019         	movff	i2printf@flag,??i2_printf
  4084  0014BA  0E03               	movlw	3
  4085  0014BC  1619               	andwf	??i2_printf,f,c
  4086  0014BE  B4D8               	btfsc	status,2,c
  4087  0014C0  D003               	goto	i2l2826
  4088                           
  4089                           ;doprnt.c: 1439: (putch('-') );
  4090  0014C2  0E2D               	movlw	45
  4091  0014C4  EC61  F011         	call	i2_putch
  4092  0014C8                     i2l2826:
  4093                           
  4094                           ;doprnt.c: 1469: }
  4095                           ;doprnt.c: 1472: prec = c;
  4096  0014C8  5024               	movf	i2printf@c,w,c
  4097  0014CA  6E1B               	movwf	i2printf@prec,c
  4098  0014CC  6A1C               	clrf	i2printf@prec+1,c
  4099  0014CE  BE1B               	btfsc	i2printf@prec,7,c
  4100  0014D0  061C               	decf	i2printf@prec+1,f,c
  4101                           
  4102                           ;doprnt.c: 1474: while(prec--) {
  4103  0014D2  D041               	goto	i2l2832
  4104  0014D4                     i2l2828:
  4105                           
  4106                           ;doprnt.c: 1478: {
  4107                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4108  0014D4  C01B  F019         	movff	i2printf@prec,??i2_printf
  4109  0014D8  C01C  F01A         	movff	i2printf@prec+1,??i2_printf+1
  4110  0014DC  90D8               	bcf	status,0,c
  4111  0014DE  3619               	rlcf	??i2_printf,f,c
  4112  0014E0  361A               	rlcf	??i2_printf+1,f,c
  4113  0014E2  90D8               	bcf	status,0,c
  4114  0014E4  3619               	rlcf	??i2_printf,f,c
  4115  0014E6  361A               	rlcf	??i2_printf+1,f,c
  4116  0014E8  0E01               	movlw	low _dpowers
  4117  0014EA  2419               	addwf	??i2_printf,w,c
  4118  0014EC  6EF6               	movwf	tblptrl,c
  4119  0014EE  0E0F               	movlw	high _dpowers
  4120  0014F0  201A               	addwfc	??i2_printf+1,w,c
  4121  0014F2  6EF7               	movwf	tblptrh,c
  4122  0014F4                     	if	1	;There are 3 active tblptr bytes
  4123  0014F4  6AF8               	clrf	tblptru,c
  4124  0014F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4125  0014F8  22F8               	addwfc	tblptru,f,c
  4126  0014FA                     	endif
  4127  0014FA  0009               	tblrd		*+
  4128  0014FC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  4129  001500  0009               	tblrd		*+
  4130  001502  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  4131  001506  0009               	tblrd		*+
  4132  001508  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  4133  00150C  000A               	tblrd		*-
  4134  00150E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  4135  001512  C020  F001         	movff	i2printf@val,i2___lldiv@dividend
  4136  001516  C021  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  4137  00151A  C022  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  4138  00151E  C023  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  4139  001522  ECF0  F00E         	call	i2___lldiv	;wreg free
  4140  001526  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  4141  00152A  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  4142  00152E  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  4143  001532  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  4144  001536  0E0A               	movlw	10
  4145  001538  6E12               	movwf	i2___llmod@divisor,c
  4146  00153A  0E00               	movlw	0
  4147  00153C  6E13               	movwf	i2___llmod@divisor+1,c
  4148  00153E  0E00               	movlw	0
  4149  001540  6E14               	movwf	i2___llmod@divisor+2,c
  4150  001542  0E00               	movlw	0
  4151  001544  6E15               	movwf	i2___llmod@divisor+3,c
  4152  001546  ECE7  F00F         	call	i2___llmod	;wreg free
  4153  00154A  500E               	movf	?i2___llmod,w,c
  4154  00154C  0F30               	addlw	48
  4155  00154E  6E24               	movwf	i2printf@c,c
  4156                           
  4157                           ;doprnt.c: 1523: }
  4158                           ;doprnt.c: 1524: (putch(c) );
  4159  001550  5024               	movf	i2printf@c,w,c
  4160  001552  EC61  F011         	call	i2_putch
  4161  001556                     i2l2832:
  4162  001556  061B               	decf	i2printf@prec,f,c
  4163  001558  A0D8               	btfss	status,0,c
  4164  00155A  061C               	decf	i2printf@prec+1,f,c
  4165  00155C  281B               	incf	i2printf@prec,w,c
  4166  00155E  E1BA               	bnz	i2l2828
  4167  001560  281C               	incf	i2printf@prec+1,w,c
  4168  001562  A4D8               	btfss	status,2,c
  4169  001564  D7B7               	goto	i2l2828
  4170  001566                     i2l2834:
  4171  001566  C017  FFF6         	movff	i2printf@f,tblptrl
  4172  00156A  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4173  00156E  4A17               	infsnz	i2printf@f,f,c
  4174  001570  2A18               	incf	i2printf@f+1,f,c
  4175  001572                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4176  001572  6AF8               	clrf	tblptru,c
  4177  001574                     	endif
  4178  001574                     	if	0	;tblptru may be non-zero
  4179  001574                     	endif
  4180  001574  0008               	tblrd		*
  4181  001576  CFF5 F024          	movff	tablat,i2printf@c
  4182  00157A  5024               	movf	i2printf@c,w,c
  4183  00157C  B4D8               	btfsc	status,2,c
  4184  00157E  0012               	return	
  4185  001580  D728               	goto	i2l2782
  4186  001582                     __end_ofi2_printf:
  4187                           	opt stack 0
  4188                           pclatu	equ	0xFFB
  4189                           pclath	equ	0xFFA
  4190                           tblptru	equ	0xFF8
  4191                           tblptrh	equ	0xFF7
  4192                           tblptrl	equ	0xFF6
  4193                           tablat	equ	0xFF5
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           intcon	equ	0xFF2
  4197                           postinc0	equ	0xFEE
  4198                           fsr0h	equ	0xFEA
  4199                           fsr0l	equ	0xFE9
  4200                           wreg	equ	0xFE8
  4201                           fsr1h	equ	0xFE2
  4202                           fsr1l	equ	0xFE1
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function i2_putch *****************
  4210 ;; Defined at:
  4211 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  txData          1    wreg     unsigned char 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  txData          1    1[COMRAM] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      void 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;Total ram usage:        1 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    1
  4232 ;; This function calls:
  4233 ;;		i2_EUSART2_Write
  4234 ;; This function is called by:
  4235 ;;		i2_printf
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text22
  4240  0022C2                     __ptext22:
  4241                           	opt stack 0
  4242  0022C2                     i2_putch:
  4243                           	opt stack 23
  4244                           
  4245                           ;incstack = 0
  4246                           ;i2putch@txData stored from wreg
  4247  0022C2  6E02               	movwf	i2putch@txData,c
  4248                           
  4249                           ;eusart2.c: 112: EUSART2_Write(txData);
  4250  0022C4  5002               	movf	i2putch@txData,w,c
  4251  0022C6  EC55  F011         	call	i2_EUSART2_Write
  4252  0022CA  0012               	return		;funcret
  4253  0022CC                     __end_ofi2_putch:
  4254                           	opt stack 0
  4255                           pclatu	equ	0xFFB
  4256                           pclath	equ	0xFFA
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           postinc0	equ	0xFEE
  4265                           fsr0h	equ	0xFEA
  4266                           fsr0l	equ	0xFE9
  4267                           wreg	equ	0xFE8
  4268                           fsr1h	equ	0xFE2
  4269                           fsr1l	equ	0xFE1
  4270                           postinc2	equ	0xFDE
  4271                           postdec2	equ	0xFDD
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function i2_EUSART2_Write *****************
  4277 ;; Defined at:
  4278 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  txData          1    wreg     unsigned char 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  txData          1    0[COMRAM] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4296 ;;Total ram usage:        1 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		i2_putch
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text23
  4306  0022AA                     __ptext23:
  4307                           	opt stack 0
  4308  0022AA                     i2_EUSART2_Write:
  4309                           	opt stack 23
  4310                           
  4311                           ;incstack = 0
  4312                           ;i2EUSART2_Write@txData stored from wreg
  4313  0022AA  6E01               	movwf	i2EUSART2_Write@txData,c
  4314  0022AC                     i2l31:
  4315  0022AC  A8A4               	btfss	4004,4,c	;volatile
  4316  0022AE  D7FE               	goto	i2l31
  4317                           
  4318                           ;eusart2.c: 100: }
  4319                           ;eusart2.c: 102: TXREG2 = txData;
  4320  0022B0  C001  FF79         	movff	i2EUSART2_Write@txData,3961	;volatile
  4321  0022B4  0012               	return		;funcret
  4322  0022B6                     __end_ofi2_EUSART2_Write:
  4323                           	opt stack 0
  4324                           pclatu	equ	0xFFB
  4325                           pclath	equ	0xFFA
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           postinc0	equ	0xFEE
  4334                           fsr0h	equ	0xFEA
  4335                           fsr0l	equ	0xFE9
  4336                           wreg	equ	0xFE8
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function i2___llmod *****************
  4346 ;; Defined at:
  4347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  dividend        4   13[COMRAM] unsigned long 
  4350 ;;  divisor         4   17[COMRAM] unsigned long 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  __llmod         1   21[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  4   13[COMRAM] unsigned long 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4362 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4366 ;;Total ram usage:        9 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		i2_printf
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text24
  4376  001FCE                     __ptext24:
  4377                           	opt stack 0
  4378  001FCE                     i2___llmod:
  4379                           	opt stack 24
  4380                           
  4381                           ;incstack = 0
  4382  001FCE  5012               	movf	i2___llmod@divisor,w,c
  4383  001FD0  1013               	iorwf	i2___llmod@divisor+1,w,c
  4384  001FD2  1014               	iorwf	i2___llmod@divisor+2,w,c
  4385  001FD4  1015               	iorwf	i2___llmod@divisor+3,w,c
  4386  001FD6  B4D8               	btfsc	status,2,c
  4387  001FD8  D024               	goto	i2l1000
  4388  001FDA  0E01               	movlw	1
  4389  001FDC  6E16               	movwf	i2___llmod@counter,c
  4390  001FDE  D006               	goto	i2l2506
  4391  001FE0                     i2l2504:
  4392  001FE0  90D8               	bcf	status,0,c
  4393  001FE2  3612               	rlcf	i2___llmod@divisor,f,c
  4394  001FE4  3613               	rlcf	i2___llmod@divisor+1,f,c
  4395  001FE6  3614               	rlcf	i2___llmod@divisor+2,f,c
  4396  001FE8  3615               	rlcf	i2___llmod@divisor+3,f,c
  4397  001FEA  2A16               	incf	i2___llmod@counter,f,c
  4398  001FEC                     i2l2506:
  4399  001FEC  AE15               	btfss	i2___llmod@divisor+3,7,c
  4400  001FEE  D7F8               	goto	i2l2504
  4401  001FF0                     i2l2508:
  4402  001FF0  5012               	movf	i2___llmod@divisor,w,c
  4403  001FF2  5C0E               	subwf	i2___llmod@dividend,w,c
  4404  001FF4  5013               	movf	i2___llmod@divisor+1,w,c
  4405  001FF6  580F               	subwfb	i2___llmod@dividend+1,w,c
  4406  001FF8  5014               	movf	i2___llmod@divisor+2,w,c
  4407  001FFA  5810               	subwfb	i2___llmod@dividend+2,w,c
  4408  001FFC  5015               	movf	i2___llmod@divisor+3,w,c
  4409  001FFE  5811               	subwfb	i2___llmod@dividend+3,w,c
  4410  002000  A0D8               	btfss	status,0,c
  4411  002002  D008               	goto	i2l2512
  4412  002004  5012               	movf	i2___llmod@divisor,w,c
  4413  002006  5E0E               	subwf	i2___llmod@dividend,f,c
  4414  002008  5013               	movf	i2___llmod@divisor+1,w,c
  4415  00200A  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  4416  00200C  5014               	movf	i2___llmod@divisor+2,w,c
  4417  00200E  5A10               	subwfb	i2___llmod@dividend+2,f,c
  4418  002010  5015               	movf	i2___llmod@divisor+3,w,c
  4419  002012  5A11               	subwfb	i2___llmod@dividend+3,f,c
  4420  002014                     i2l2512:
  4421  002014  90D8               	bcf	status,0,c
  4422  002016  3215               	rrcf	i2___llmod@divisor+3,f,c
  4423  002018  3214               	rrcf	i2___llmod@divisor+2,f,c
  4424  00201A  3213               	rrcf	i2___llmod@divisor+1,f,c
  4425  00201C  3212               	rrcf	i2___llmod@divisor,f,c
  4426  00201E  2E16               	decfsz	i2___llmod@counter,f,c
  4427  002020  D7E7               	goto	i2l2508
  4428  002022                     i2l1000:
  4429  002022  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  4430  002026  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  4431  00202A  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  4432  00202E  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  4433  002032  0012               	return		;funcret
  4434  002034                     __end_ofi2___llmod:
  4435                           	opt stack 0
  4436                           pclatu	equ	0xFFB
  4437                           pclath	equ	0xFFA
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           postinc0	equ	0xFEE
  4446                           fsr0h	equ	0xFEA
  4447                           fsr0l	equ	0xFE9
  4448                           wreg	equ	0xFE8
  4449                           fsr1h	equ	0xFE2
  4450                           fsr1l	equ	0xFE1
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function i2___lldiv *****************
  4458 ;; Defined at:
  4459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  dividend        4    0[COMRAM] unsigned long 
  4462 ;;  divisor         4    4[COMRAM] unsigned long 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  __lldiv         4    8[COMRAM] unsigned long 
  4465 ;;  __lldiv         1   12[COMRAM] unsigned char 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  4    0[COMRAM] unsigned long 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4475 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4476 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4478 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4479 ;;Total ram usage:       13 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		i2_printf
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text25
  4489  001DE0                     __ptext25:
  4490                           	opt stack 0
  4491  001DE0                     i2___lldiv:
  4492                           	opt stack 24
  4493                           
  4494                           ;incstack = 0
  4495  001DE0  0E00               	movlw	0
  4496  001DE2  6E09               	movwf	i2___lldiv@quotient,c
  4497  001DE4  0E00               	movlw	0
  4498  001DE6  6E0A               	movwf	i2___lldiv@quotient+1,c
  4499  001DE8  0E00               	movlw	0
  4500  001DEA  6E0B               	movwf	i2___lldiv@quotient+2,c
  4501  001DEC  0E00               	movlw	0
  4502  001DEE  6E0C               	movwf	i2___lldiv@quotient+3,c
  4503  001DF0  5005               	movf	i2___lldiv@divisor,w,c
  4504  001DF2  1006               	iorwf	i2___lldiv@divisor+1,w,c
  4505  001DF4  1007               	iorwf	i2___lldiv@divisor+2,w,c
  4506  001DF6  1008               	iorwf	i2___lldiv@divisor+3,w,c
  4507  001DF8  B4D8               	btfsc	status,2,c
  4508  001DFA  D02A               	goto	i2l990
  4509  001DFC  0E01               	movlw	1
  4510  001DFE  6E0D               	movwf	i2___lldiv@counter,c
  4511  001E00  D006               	goto	i2l2486
  4512  001E02                     i2l2484:
  4513  001E02  90D8               	bcf	status,0,c
  4514  001E04  3605               	rlcf	i2___lldiv@divisor,f,c
  4515  001E06  3606               	rlcf	i2___lldiv@divisor+1,f,c
  4516  001E08  3607               	rlcf	i2___lldiv@divisor+2,f,c
  4517  001E0A  3608               	rlcf	i2___lldiv@divisor+3,f,c
  4518  001E0C  2A0D               	incf	i2___lldiv@counter,f,c
  4519  001E0E                     i2l2486:
  4520  001E0E  AE08               	btfss	i2___lldiv@divisor+3,7,c
  4521  001E10  D7F8               	goto	i2l2484
  4522  001E12                     i2l2488:
  4523  001E12  90D8               	bcf	status,0,c
  4524  001E14  3609               	rlcf	i2___lldiv@quotient,f,c
  4525  001E16  360A               	rlcf	i2___lldiv@quotient+1,f,c
  4526  001E18  360B               	rlcf	i2___lldiv@quotient+2,f,c
  4527  001E1A  360C               	rlcf	i2___lldiv@quotient+3,f,c
  4528  001E1C  5005               	movf	i2___lldiv@divisor,w,c
  4529  001E1E  5C01               	subwf	i2___lldiv@dividend,w,c
  4530  001E20  5006               	movf	i2___lldiv@divisor+1,w,c
  4531  001E22  5802               	subwfb	i2___lldiv@dividend+1,w,c
  4532  001E24  5007               	movf	i2___lldiv@divisor+2,w,c
  4533  001E26  5803               	subwfb	i2___lldiv@dividend+2,w,c
  4534  001E28  5008               	movf	i2___lldiv@divisor+3,w,c
  4535  001E2A  5804               	subwfb	i2___lldiv@dividend+3,w,c
  4536  001E2C  A0D8               	btfss	status,0,c
  4537  001E2E  D009               	goto	i2l2496
  4538  001E30  5005               	movf	i2___lldiv@divisor,w,c
  4539  001E32  5E01               	subwf	i2___lldiv@dividend,f,c
  4540  001E34  5006               	movf	i2___lldiv@divisor+1,w,c
  4541  001E36  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  4542  001E38  5007               	movf	i2___lldiv@divisor+2,w,c
  4543  001E3A  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  4544  001E3C  5008               	movf	i2___lldiv@divisor+3,w,c
  4545  001E3E  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  4546  001E40  8009               	bsf	i2___lldiv@quotient,0,c
  4547  001E42                     i2l2496:
  4548  001E42  90D8               	bcf	status,0,c
  4549  001E44  3208               	rrcf	i2___lldiv@divisor+3,f,c
  4550  001E46  3207               	rrcf	i2___lldiv@divisor+2,f,c
  4551  001E48  3206               	rrcf	i2___lldiv@divisor+1,f,c
  4552  001E4A  3205               	rrcf	i2___lldiv@divisor,f,c
  4553  001E4C  2E0D               	decfsz	i2___lldiv@counter,f,c
  4554  001E4E  D7E1               	goto	i2l2488
  4555  001E50                     i2l990:
  4556  001E50  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  4557  001E54  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  4558  001E58  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  4559  001E5C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  4560  001E60  0012               	return		;funcret
  4561  001E62                     __end_ofi2___lldiv:
  4562                           	opt stack 0
  4563                           pclatu	equ	0xFFB
  4564                           pclath	equ	0xFFA
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           fsr0h	equ	0xFEA
  4574                           fsr0l	equ	0xFE9
  4575                           wreg	equ	0xFE8
  4576                           fsr1h	equ	0xFE2
  4577                           fsr1l	equ	0xFE1
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _handleByteReceived *****************
  4585 ;; Defined at:
  4586 ;;		line 265 in file "ax.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  data            1    wreg     unsigned char 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  data            1    6[COMRAM] unsigned char 
  4591 ;;  i               2    4[COMRAM] int 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4605 ;;Total ram usage:        3 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    1
  4608 ;; This function calls:
  4609 ;;		_setLedOff
  4610 ;;		_setLedOn
  4611 ;; This function is called by:
  4612 ;;		_I2C_ISR
  4613 ;;		_I2C_ISR_bad
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text26
  4618  00183A                     __ptext26:
  4619                           	opt stack 0
  4620  00183A                     _handleByteReceived:
  4621                           	opt stack 24
  4622                           
  4623                           ;incstack = 0
  4624                           ;handleByteReceived@data stored from wreg
  4625  00183A  6E07               	movwf	handleByteReceived@data,c
  4626                           
  4627                           ;ax.c: 267: if (readIndex == 0) {
  4628  00183C  0100               	movlb	0	; () banked
  4629  00183E  5198               	movf	_readIndex& (0+255),w,b	;volatile
  4630  001840  0100               	movlb	0	; () banked
  4631  001842  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4632  001844  A4D8               	btfss	status,2,c
  4633  001846  D023               	goto	i2l2632
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;ax.c: 268: currentCommand = data;
  4637  001848  C007  F0E7         	movff	handleByteReceived@data,_currentCommand	;volatile
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;ax.c: 269: readIndex++;
  4641  00184C  0100               	movlb	0	; () banked
  4642  00184E  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4643  001850  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;ax.c: 271: for (int i = 0; i < 32; i++) {
  4647  001852  0E00               	movlw	0
  4648  001854  6E06               	movwf	handleByteReceived@i+1,c
  4649  001856  0E00               	movlw	0
  4650  001858  6E05               	movwf	handleByteReceived@i,c
  4651                           
  4652                           ; BSR set to: 0
  4653  00185A  BE06               	btfsc	handleByteReceived@i+1,7,c
  4654  00185C  D008               	goto	i2l2626
  4655  00185E  5006               	movf	handleByteReceived@i+1,w,c
  4656  001860  E105               	bnz	i2u133_40
  4657  001862  0E20               	movlw	32
  4658  001864  5C05               	subwf	handleByteReceived@i,w,c
  4659  001866  B0D8               	btfsc	status,0,c
  4660  001868  0012               	return	
  4661  00186A  D001               	goto	i2l2626
  4662  00186C                     i2u133_40:
  4663                           
  4664                           ; BSR set to: 0
  4665  00186C  0012               	return	
  4666  00186E                     i2l2626:
  4667                           
  4668                           ;ax.c: 272: dataToSend[i] = 66;
  4669  00186E  0E60               	movlw	low _dataToSend
  4670  001870  2405               	addwf	handleByteReceived@i,w,c
  4671  001872  6ED9               	movwf	fsr2l,c
  4672  001874  0E00               	movlw	high _dataToSend
  4673  001876  2006               	addwfc	handleByteReceived@i+1,w,c
  4674  001878  6EDA               	movwf	fsr2h,c
  4675  00187A  0E42               	movlw	66
  4676  00187C  6EDF               	movwf	indf2,c
  4677  00187E  4A05               	infsnz	handleByteReceived@i,f,c
  4678  001880  2A06               	incf	handleByteReceived@i+1,f,c
  4679  001882  BE06               	btfsc	handleByteReceived@i+1,7,c
  4680  001884  D7F4               	goto	i2l2626
  4681  001886  5006               	movf	handleByteReceived@i+1,w,c
  4682  001888  E101               	bnz	i2u134_40
  4683  00188A  D7EB               	goto	L5
  4684  00188C                     i2u134_40:
  4685                           
  4686                           ;ax.c: 273: }
  4687                           ;ax.c: 274: } else if (readIndex == 1) {
  4688  00188C  0012               	return	
  4689  00188E                     i2l2632:
  4690  00188E  0100               	movlb	0	; () banked
  4691  001890  0598               	decf	_readIndex& (0+255),w,b	;volatile
  4692  001892  0100               	movlb	0	; () banked
  4693  001894  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4694  001896  A4D8               	btfss	status,2,c
  4695  001898  D025               	goto	i2l2650
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;ax.c: 275: parameter1 = data;
  4699  00189A  C007  F05E         	movff	handleByteReceived@data,_parameter1	;volatile
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;ax.c: 276: readIndex++;
  4703  00189E  0100               	movlb	0	; () banked
  4704  0018A0  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4705  0018A2  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;ax.c: 277: if (currentCommand == 10) {
  4709  0018A4  0E0A               	movlw	10
  4710  0018A6  0100               	movlb	0	; () banked
  4711  0018A8  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4712  0018AA  A4D8               	btfss	status,2,c
  4713  0018AC  D00B               	goto	i2l2644
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;ax.c: 278: setLedOn(parameter1);
  4717  0018AE  C05E  F001         	movff	_parameter1,setLedOn@led	;volatile
  4718  0018B2  6A02               	clrf	setLedOn@led+1,c
  4719  0018B4  EC31  F00F         	call	_setLedOn	;wreg free
  4720                           
  4721                           ;ax.c: 279: readIndex = 0;
  4722  0018B8  0E00               	movlw	0
  4723  0018BA  0100               	movlb	0	; () banked
  4724  0018BC  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4725  0018BE  0E00               	movlw	0
  4726  0018C0  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4727                           
  4728                           ;ax.c: 280: } else if (currentCommand == 11) {
  4729  0018C2  0012               	return	
  4730  0018C4                     i2l2644:
  4731                           
  4732                           ; BSR set to: 0
  4733  0018C4  0E0B               	movlw	11
  4734  0018C6  0100               	movlb	0	; () banked
  4735  0018C8  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4736  0018CA  A4D8               	btfss	status,2,c
  4737  0018CC  0012               	return	
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;ax.c: 281: setLedOff(parameter1);
  4741  0018CE  C05E  F001         	movff	_parameter1,setLedOff@led	;volatile
  4742  0018D2  6A02               	clrf	setLedOff@led+1,c
  4743  0018D4  EC6E  F00F         	call	_setLedOff	;wreg free
  4744                           
  4745                           ;ax.c: 282: readIndex = 0;
  4746  0018D8  0E00               	movlw	0
  4747  0018DA  0100               	movlb	0	; () banked
  4748  0018DC  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4749  0018DE  0E00               	movlw	0
  4750  0018E0  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;ax.c: 283: }
  4754                           ;ax.c: 285: } else if (readIndex == 2) {
  4755                           
  4756                           ; BSR set to: 0
  4757  0018E2  0012               	return	
  4758  0018E4                     i2l2650:
  4759                           
  4760                           ; BSR set to: 0
  4761  0018E4  0E02               	movlw	2
  4762  0018E6  0100               	movlb	0	; () banked
  4763  0018E8  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4764  0018EA  0100               	movlb	0	; () banked
  4765  0018EC  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4766  0018EE  A4D8               	btfss	status,2,c
  4767  0018F0  D006               	goto	i2l2656
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;ax.c: 286: parameter2 = data;
  4771  0018F2  C007  F0A4         	movff	handleByteReceived@data,_parameter2	;volatile
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;ax.c: 287: readIndex++;
  4775  0018F6  0100               	movlb	0	; () banked
  4776  0018F8  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4777  0018FA  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4778                           
  4779                           ;ax.c: 288: } else if (readIndex == 3) {
  4780  0018FC  0012               	return	
  4781  0018FE                     i2l2656:
  4782                           
  4783                           ; BSR set to: 0
  4784  0018FE  0E03               	movlw	3
  4785  001900  0100               	movlb	0	; () banked
  4786  001902  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4787  001904  0100               	movlb	0	; () banked
  4788  001906  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4789  001908  A4D8               	btfss	status,2,c
  4790  00190A  D006               	goto	i2l2662
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;ax.c: 289: parameter3 = data;
  4794  00190C  C007  F0A3         	movff	handleByteReceived@data,_parameter3	;volatile
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;ax.c: 290: readIndex++;
  4798  001910  0100               	movlb	0	; () banked
  4799  001912  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4800  001914  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4801                           
  4802                           ;ax.c: 291: } else if (readIndex == 4) {
  4803  001916  0012               	return	
  4804  001918                     i2l2662:
  4805                           
  4806                           ; BSR set to: 0
  4807  001918  0E04               	movlw	4
  4808  00191A  0100               	movlb	0	; () banked
  4809  00191C  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4810  00191E  0100               	movlb	0	; () banked
  4811  001920  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4812  001922  A4D8               	btfss	status,2,c
  4813  001924  D006               	goto	i2l2668
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;ax.c: 292: parameter4 = data;
  4817  001926  C007  F0A2         	movff	handleByteReceived@data,_parameter4	;volatile
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;ax.c: 293: readIndex++;
  4821  00192A  0100               	movlb	0	; () banked
  4822  00192C  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4823  00192E  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4824                           
  4825                           ;ax.c: 294: } else if (readIndex == 5) {
  4826  001930  0012               	return	
  4827  001932                     i2l2668:
  4828                           
  4829                           ; BSR set to: 0
  4830  001932  0E05               	movlw	5
  4831  001934  0100               	movlb	0	; () banked
  4832  001936  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4833  001938  0100               	movlb	0	; () banked
  4834  00193A  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4835  00193C  A4D8               	btfss	status,2,c
  4836  00193E  D006               	goto	i2l2674
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;ax.c: 295: parameter5 = data;
  4840  001940  C007  F0A1         	movff	handleByteReceived@data,_parameter5	;volatile
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;ax.c: 296: readIndex++;
  4844  001944  0100               	movlb	0	; () banked
  4845  001946  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4846  001948  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4847                           
  4848                           ;ax.c: 297: } else if (readIndex == 6) {
  4849  00194A  0012               	return	
  4850  00194C                     i2l2674:
  4851                           
  4852                           ; BSR set to: 0
  4853  00194C  0E06               	movlw	6
  4854  00194E  0100               	movlb	0	; () banked
  4855  001950  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4856  001952  0100               	movlb	0	; () banked
  4857  001954  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4858  001956  A4D8               	btfss	status,2,c
  4859  001958  D006               	goto	i2l2680
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;ax.c: 298: parameter6 = data;
  4863  00195A  C007  F0A0         	movff	handleByteReceived@data,_parameter6	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;ax.c: 299: readIndex++;
  4867  00195E  0100               	movlb	0	; () banked
  4868  001960  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4869  001962  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4870                           
  4871                           ;ax.c: 300: } else {
  4872  001964  0012               	return	
  4873  001966                     i2l2680:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;ax.c: 301: readIndex++;
  4877  001966  0100               	movlb	0	; () banked
  4878  001968  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4879  00196A  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4880                           
  4881                           ; BSR set to: 0
  4882                           
  4883                           ; BSR set to: 0
  4884                           
  4885                           ; BSR set to: 0
  4886                           
  4887                           ; BSR set to: 0
  4888                           
  4889                           ; BSR set to: 0
  4890                           
  4891                           ; BSR set to: 0
  4892  00196C  0012               	return	
  4893  00196E                     __end_of_handleByteReceived:
  4894                           	opt stack 0
  4895                           pclatu	equ	0xFFB
  4896                           pclath	equ	0xFFA
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           postinc0	equ	0xFEE
  4905                           fsr0h	equ	0xFEA
  4906                           fsr0l	equ	0xFE9
  4907                           wreg	equ	0xFE8
  4908                           fsr1h	equ	0xFE2
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _setLedOn *****************
  4918 ;; Defined at:
  4919 ;;		line 45 in file "ax.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  led             2    0[COMRAM] int 
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4935 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4937 ;;Total ram usage:        4 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; This function calls:
  4940 ;;		Nothing
  4941 ;; This function is called by:
  4942 ;;		_handleByteReceived
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text27
  4947  001E62                     __ptext27:
  4948                           	opt stack 0
  4949  001E62                     _setLedOn:
  4950                           	opt stack 24
  4951                           
  4952                           ;ax.c: 46: switch (led) {
  4953                           
  4954                           ;incstack = 0
  4955  001E62  D014               	goto	i2l2364
  4956  001E64                     i2l444:
  4957  001E64  868C               	bsf	3980,3,c	;volatile
  4958                           
  4959                           ;ax.c: 49: break;
  4960  001E66  0012               	return	
  4961  001E68                     i2l448:
  4962  001E68  848C               	bsf	3980,2,c	;volatile
  4963                           
  4964                           ;ax.c: 52: break;
  4965  001E6A  0012               	return	
  4966  001E6C                     i2l451:
  4967  001E6C  828C               	bsf	3980,1,c	;volatile
  4968                           
  4969                           ;ax.c: 55: break;
  4970  001E6E  0012               	return	
  4971  001E70                     i2l454:
  4972  001E70  808C               	bsf	3980,0,c	;volatile
  4973                           
  4974                           ;ax.c: 58: break;
  4975  001E72  0012               	return	
  4976  001E74                     i2l457:
  4977  001E74  848B               	bsf	3979,2,c	;volatile
  4978                           
  4979                           ;ax.c: 61: break;
  4980  001E76  0012               	return	
  4981  001E78                     i2l460:
  4982  001E78  828B               	bsf	3979,1,c	;volatile
  4983                           
  4984                           ;ax.c: 64: break;
  4985  001E7A  0012               	return	
  4986  001E7C                     i2l463:
  4987  001E7C  808B               	bsf	3979,0,c	;volatile
  4988                           
  4989                           ;ax.c: 67: break;
  4990  001E7E  0012               	return	
  4991  001E80                     i2l466:
  4992  001E80  808A               	bsf	3978,0,c	;volatile
  4993                           
  4994                           ;ax.c: 70: break;
  4995  001E82  0012               	return	
  4996  001E84                     i2l469:
  4997  001E84  848A               	bsf	3978,2,c	;volatile
  4998                           
  4999                           ;ax.c: 73: break;
  5000  001E86  0012               	return	
  5001  001E88                     i2l472:
  5002  001E88  868A               	bsf	3978,3,c	;volatile
  5003                           
  5004                           ;ax.c: 77: }
  5005                           
  5006                           ;ax.c: 76: break;
  5007  001E8A  0012               	return	
  5008  001E8C                     i2l2364:
  5009  001E8C  C001  F003         	movff	setLedOn@led,??_setLedOn
  5010  001E90  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  5011                           
  5012                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5013                           ; Switch size 1, requested type "space"
  5014                           ; Number of cases is 1, Range of values is 0 to 0
  5015                           ; switch strategies available:
  5016                           ; Name         Instructions Cycles
  5017                           ; simple_byte            4     3 (average)
  5018                           ;	Chosen strategy is simple_byte
  5019  001E94  5004               	movf	??_setLedOn+1,w,c
  5020  001E96  0A00               	xorlw	0	; case 0
  5021  001E98  A4D8               	btfss	status,2,c
  5022  001E9A  0012               	return	
  5023                           
  5024                           ; Switch size 1, requested type "space"
  5025                           ; Number of cases is 10, Range of values is 1 to 10
  5026                           ; switch strategies available:
  5027                           ; Name         Instructions Cycles
  5028                           ; simple_byte           31    16 (average)
  5029                           ;	Chosen strategy is simple_byte
  5030  001E9C  5003               	movf	??_setLedOn,w,c
  5031  001E9E  0A01               	xorlw	1	; case 1
  5032  001EA0  B4D8               	btfsc	status,2,c
  5033  001EA2  D7E0               	goto	i2l444
  5034  001EA4  0A03               	xorlw	3	; case 2
  5035  001EA6  B4D8               	btfsc	status,2,c
  5036  001EA8  D7DF               	goto	i2l448
  5037  001EAA  0A01               	xorlw	1	; case 3
  5038  001EAC  B4D8               	btfsc	status,2,c
  5039  001EAE  D7DE               	goto	i2l451
  5040  001EB0  0A07               	xorlw	7	; case 4
  5041  001EB2  B4D8               	btfsc	status,2,c
  5042  001EB4  D7DD               	goto	i2l454
  5043  001EB6  0A01               	xorlw	1	; case 5
  5044  001EB8  B4D8               	btfsc	status,2,c
  5045  001EBA  D7DC               	goto	i2l457
  5046  001EBC  0A03               	xorlw	3	; case 6
  5047  001EBE  B4D8               	btfsc	status,2,c
  5048  001EC0  D7DB               	goto	i2l460
  5049  001EC2  0A01               	xorlw	1	; case 7
  5050  001EC4  B4D8               	btfsc	status,2,c
  5051  001EC6  D7DA               	goto	i2l463
  5052  001EC8  0A0F               	xorlw	15	; case 8
  5053  001ECA  B4D8               	btfsc	status,2,c
  5054  001ECC  D7D9               	goto	i2l466
  5055  001ECE  0A01               	xorlw	1	; case 9
  5056  001ED0  B4D8               	btfsc	status,2,c
  5057  001ED2  D7D8               	goto	i2l469
  5058  001ED4  0A03               	xorlw	3	; case 10
  5059  001ED6  A4D8               	btfss	status,2,c
  5060  001ED8  0012               	return	
  5061  001EDA  D7D6               	goto	i2l472
  5062  001EDC                     __end_of_setLedOn:
  5063                           	opt stack 0
  5064                           pclatu	equ	0xFFB
  5065                           pclath	equ	0xFFA
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           postinc0	equ	0xFEE
  5074                           fsr0h	equ	0xFEA
  5075                           fsr0l	equ	0xFE9
  5076                           wreg	equ	0xFE8
  5077                           fsr1h	equ	0xFE2
  5078                           fsr1l	equ	0xFE1
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _setLedOff *****************
  5087 ;; Defined at:
  5088 ;;		line 80 in file "ax.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  led             2    0[COMRAM] int 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5104 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5105 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5106 ;;Total ram usage:        4 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_handleByteReceived
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text28
  5116  001EDC                     __ptext28:
  5117                           	opt stack 0
  5118  001EDC                     _setLedOff:
  5119                           	opt stack 24
  5120                           
  5121                           ;ax.c: 81: switch (led) {
  5122                           
  5123                           ;incstack = 0
  5124  001EDC  D014               	goto	i2l2374
  5125  001EDE                     i2l479:
  5126  001EDE  968C               	bcf	3980,3,c	;volatile
  5127                           
  5128                           ;ax.c: 84: break;
  5129  001EE0  0012               	return	
  5130  001EE2                     i2l483:
  5131  001EE2  948C               	bcf	3980,2,c	;volatile
  5132                           
  5133                           ;ax.c: 87: break;
  5134  001EE4  0012               	return	
  5135  001EE6                     i2l486:
  5136  001EE6  928C               	bcf	3980,1,c	;volatile
  5137                           
  5138                           ;ax.c: 90: break;
  5139  001EE8  0012               	return	
  5140  001EEA                     i2l489:
  5141  001EEA  908C               	bcf	3980,0,c	;volatile
  5142                           
  5143                           ;ax.c: 93: break;
  5144  001EEC  0012               	return	
  5145  001EEE                     i2l492:
  5146  001EEE  948B               	bcf	3979,2,c	;volatile
  5147                           
  5148                           ;ax.c: 96: break;
  5149  001EF0  0012               	return	
  5150  001EF2                     i2l495:
  5151  001EF2  928B               	bcf	3979,1,c	;volatile
  5152                           
  5153                           ;ax.c: 99: break;
  5154  001EF4  0012               	return	
  5155  001EF6                     i2l498:
  5156  001EF6  908B               	bcf	3979,0,c	;volatile
  5157                           
  5158                           ;ax.c: 102: break;
  5159  001EF8  0012               	return	
  5160  001EFA                     i2l501:
  5161  001EFA  908A               	bcf	3978,0,c	;volatile
  5162                           
  5163                           ;ax.c: 105: break;
  5164  001EFC  0012               	return	
  5165  001EFE                     i2l504:
  5166  001EFE  948A               	bcf	3978,2,c	;volatile
  5167                           
  5168                           ;ax.c: 108: break;
  5169  001F00  0012               	return	
  5170  001F02                     i2l507:
  5171  001F02  968A               	bcf	3978,3,c	;volatile
  5172                           
  5173                           ;ax.c: 112: }
  5174                           
  5175                           ;ax.c: 111: break;
  5176  001F04  0012               	return	
  5177  001F06                     i2l2374:
  5178  001F06  C001  F003         	movff	setLedOff@led,??_setLedOff
  5179  001F0A  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  5180                           
  5181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5182                           ; Switch size 1, requested type "space"
  5183                           ; Number of cases is 1, Range of values is 0 to 0
  5184                           ; switch strategies available:
  5185                           ; Name         Instructions Cycles
  5186                           ; simple_byte            4     3 (average)
  5187                           ;	Chosen strategy is simple_byte
  5188  001F0E  5004               	movf	??_setLedOff+1,w,c
  5189  001F10  0A00               	xorlw	0	; case 0
  5190  001F12  A4D8               	btfss	status,2,c
  5191  001F14  0012               	return	
  5192                           
  5193                           ; Switch size 1, requested type "space"
  5194                           ; Number of cases is 10, Range of values is 1 to 10
  5195                           ; switch strategies available:
  5196                           ; Name         Instructions Cycles
  5197                           ; simple_byte           31    16 (average)
  5198                           ;	Chosen strategy is simple_byte
  5199  001F16  5003               	movf	??_setLedOff,w,c
  5200  001F18  0A01               	xorlw	1	; case 1
  5201  001F1A  B4D8               	btfsc	status,2,c
  5202  001F1C  D7E0               	goto	i2l479
  5203  001F1E  0A03               	xorlw	3	; case 2
  5204  001F20  B4D8               	btfsc	status,2,c
  5205  001F22  D7DF               	goto	i2l483
  5206  001F24  0A01               	xorlw	1	; case 3
  5207  001F26  B4D8               	btfsc	status,2,c
  5208  001F28  D7DE               	goto	i2l486
  5209  001F2A  0A07               	xorlw	7	; case 4
  5210  001F2C  B4D8               	btfsc	status,2,c
  5211  001F2E  D7DD               	goto	i2l489
  5212  001F30  0A01               	xorlw	1	; case 5
  5213  001F32  B4D8               	btfsc	status,2,c
  5214  001F34  D7DC               	goto	i2l492
  5215  001F36  0A03               	xorlw	3	; case 6
  5216  001F38  B4D8               	btfsc	status,2,c
  5217  001F3A  D7DB               	goto	i2l495
  5218  001F3C  0A01               	xorlw	1	; case 7
  5219  001F3E  B4D8               	btfsc	status,2,c
  5220  001F40  D7DA               	goto	i2l498
  5221  001F42  0A0F               	xorlw	15	; case 8
  5222  001F44  B4D8               	btfsc	status,2,c
  5223  001F46  D7D9               	goto	i2l501
  5224  001F48  0A01               	xorlw	1	; case 9
  5225  001F4A  B4D8               	btfsc	status,2,c
  5226  001F4C  D7D8               	goto	i2l504
  5227  001F4E  0A03               	xorlw	3	; case 10
  5228  001F50  A4D8               	btfss	status,2,c
  5229  001F52  0012               	return	
  5230  001F54  D7D6               	goto	i2l507
  5231  001F56                     __end_of_setLedOff:
  5232                           	opt stack 0
  5233                           pclatu	equ	0xFFB
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           fsr0h	equ	0xFEA
  5244                           fsr0l	equ	0xFE9
  5245                           wreg	equ	0xFE8
  5246                           fsr1h	equ	0xFE2
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _getByteToSend *****************
  5256 ;; Defined at:
  5257 ;;		line 320 in file "ax.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;  i2c_data_rec    1    wreg     unsigned char 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  i2c_data_rec    1    0[COMRAM] unsigned char 
  5262 ;;  value           2   91[COMRAM] int 
  5263 ;;  xhigh           1   87[COMRAM] unsigned char 
  5264 ;;  xlow            1   86[COMRAM] unsigned char 
  5265 ;;  error           2   82[COMRAM] int 
  5266 ;;  value           2   89[COMRAM] int 
  5267 ;;  xhigh           1   85[COMRAM] unsigned char 
  5268 ;;  xlow            1   84[COMRAM] unsigned char 
  5269 ;;  error           2   80[COMRAM] int 
  5270 ;;  d               1   88[COMRAM] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      unsigned char 
  5273 ;; Registers used:
  5274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5281 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5283 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5284 ;;Total ram usage:       14 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    3
  5287 ;; This function calls:
  5288 ;;		_clearState
  5289 ;;		_pingAX
  5290 ;;		_readAXData
  5291 ;;		_writeAXData
  5292 ;;		i2_ADC_GetConversion
  5293 ;; This function is called by:
  5294 ;;		_I2C_ISR
  5295 ;;		_I2C_ISR_bad
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           	psect	text29
  5300  001582                     __ptext29:
  5301                           	opt stack 0
  5302  001582                     _getByteToSend:
  5303                           	opt stack 22
  5304                           
  5305                           ;ax.c: 323: if (currentCommand == 20) {
  5306                           
  5307                           ;incstack = 0
  5308  001582  0E14               	movlw	20
  5309  001584  0100               	movlb	0	; () banked
  5310  001586  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5311  001588  A4D8               	btfss	status,2,c
  5312  00158A  D016               	goto	i2l2544
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;ax.c: 324: int error = pingAX(parameter1);
  5316  00158C  C05E  F018         	movff	_parameter1,pingAX@id	;volatile
  5317  001590  6A19               	clrf	pingAX@id+1,c
  5318  001592  EC1A  F010         	call	_pingAX	;wreg free
  5319  001596  C018  F051         	movff	?_pingAX,getByteToSend@error
  5320  00159A  C019  F052         	movff	?_pingAX+1,getByteToSend@error+1
  5321                           
  5322                           ;ax.c: 326: nbBytesToSend = 2;
  5323  00159E  0E00               	movlw	0
  5324  0015A0  0100               	movlb	0	; () banked
  5325  0015A2  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5326  0015A4  0E02               	movlw	2
  5327  0015A6  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;ax.c: 327: dataToSend[0] = error;
  5331  0015A8  C051  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;ax.c: 328: dataToSend[1] = 0;
  5335  0015AC  0E00               	movlw	0
  5336  0015AE  0100               	movlb	0	; () banked
  5337  0015B0  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;ax.c: 330: clearState();
  5341  0015B2  EC6B  F010         	call	_clearState	;wreg free
  5342                           
  5343                           ;ax.c: 331: } else if (currentCommand == 21) {
  5344  0015B6  D078               	goto	i2l2590
  5345  0015B8                     i2l2544:
  5346  0015B8  0E15               	movlw	21
  5347  0015BA  0100               	movlb	0	; () banked
  5348  0015BC  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5349  0015BE  A4D8               	btfss	status,2,c
  5350  0015C0  D01C               	goto	i2l2560
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;ax.c: 333: int value = readAXData(parameter1, parameter2);
  5354  0015C2  C05E  F018         	movff	_parameter1,readAXData@id	;volatile
  5355  0015C6  6A19               	clrf	readAXData@id+1,c
  5356  0015C8  C0A4  F01A         	movff	_parameter2,readAXData@address	;volatile
  5357  0015CC  6A1B               	clrf	readAXData@address+1,c
  5358  0015CE  EC17  F00E         	call	_readAXData	;wreg free
  5359  0015D2  C018  F05A         	movff	?_readAXData,getByteToSend@value
  5360  0015D6  C019  F05B         	movff	?_readAXData+1,getByteToSend@value+1
  5361                           
  5362                           ;ax.c: 335: nbBytesToSend = 2;
  5363  0015DA  0E00               	movlw	0
  5364  0015DC  0100               	movlb	0	; () banked
  5365  0015DE  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5366  0015E0  0E02               	movlw	2
  5367  0015E2  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;ax.c: 336: uint8_t xlow = value & 0xff;
  5371  0015E4  C05A  F055         	movff	getByteToSend@value,getByteToSend@xlow
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;ax.c: 337: uint8_t xhigh = (value >> 8);
  5375  0015E8  505B               	movf	getByteToSend@value+1,w,c
  5376  0015EA  6E56               	movwf	getByteToSend@xhigh,c
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;ax.c: 338: dataToSend[0] = xlow;
  5380  0015EC  C055  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;ax.c: 339: dataToSend[1] = xhigh;
  5384  0015F0  C056  F061         	movff	getByteToSend@xhigh,_dataToSend+1	;volatile
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;ax.c: 342: clearState();
  5388  0015F4  EC6B  F010         	call	_clearState	;wreg free
  5389                           
  5390                           ;ax.c: 343: } else if (currentCommand == 22) {
  5391  0015F8  D057               	goto	i2l2590
  5392  0015FA                     i2l2560:
  5393  0015FA  0E16               	movlw	22
  5394  0015FC  0100               	movlb	0	; () banked
  5395  0015FE  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5396  001600  A4D8               	btfss	status,2,c
  5397  001602  D01C               	goto	i2l2572
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;ax.c: 344: int error = writeAXData(parameter1, parameter2, parameter3);
  5401  001604  C05E  F018         	movff	_parameter1,writeAXData@id	;volatile
  5402  001608  6A19               	clrf	writeAXData@id+1,c
  5403  00160A  C0A4  F01A         	movff	_parameter2,writeAXData@address	;volatile
  5404  00160E  6A1B               	clrf	writeAXData@address+1,c
  5405  001610  C0A3  F01C         	movff	_parameter3,writeAXData@data	;volatile
  5406  001614  6A1D               	clrf	writeAXData@data+1,c
  5407  001616  ECAA  F00E         	call	_writeAXData	;wreg free
  5408  00161A  C018  F053         	movff	?_writeAXData,getByteToSend@error_1438
  5409  00161E  C019  F054         	movff	?_writeAXData+1,getByteToSend@error_1438+1
  5410                           
  5411                           ;ax.c: 346: nbBytesToSend = 2;
  5412  001622  0E00               	movlw	0
  5413  001624  0100               	movlb	0	; () banked
  5414  001626  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5415  001628  0E02               	movlw	2
  5416  00162A  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;ax.c: 347: dataToSend[0] = error;
  5420  00162C  C053  F060         	movff	getByteToSend@error_1438,_dataToSend	;volatile
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;ax.c: 348: dataToSend[1] = 0;
  5424  001630  0E00               	movlw	0
  5425  001632  0100               	movlb	0	; () banked
  5426  001634  6F61               	movwf	(_dataToSend+1)& (0+255),b	;volatile
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;ax.c: 350: clearState();
  5430  001636  EC6B  F010         	call	_clearState	;wreg free
  5431                           
  5432                           ;ax.c: 351: } else if (currentCommand == 12) {
  5433  00163A  D036               	goto	i2l2590
  5434  00163C                     i2l2572:
  5435  00163C  0E0C               	movlw	12
  5436  00163E  0100               	movlb	0	; () banked
  5437  001640  19E7               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5438  001642  A4D8               	btfss	status,2,c
  5439  001644  D031               	goto	i2l2590
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;ax.c: 354: adc_values[parameter1] = ADC_GetConversion(parameter1) / 16;
  5443  001646  505E               	movf	_parameter1,w,c	;volatile
  5444  001648  ECDE  F010         	call	i2_ADC_GetConversion
  5445  00164C  0E04               	movlw	4
  5446  00164E  6E50               	movwf	??_getByteToSend& (0+255),c
  5447  001650                     i2u129_45:
  5448  001650  90D8               	bcf	status,0,c
  5449  001652  3202               	rrcf	?i2_ADC_GetConversion+1,f,c
  5450  001654  3201               	rrcf	?i2_ADC_GetConversion,f,c
  5451  001656  2E50               	decfsz	??_getByteToSend& (0+255),f,c
  5452  001658  D7FB               	goto	i2u129_45
  5453  00165A  505E               	movf	_parameter1,w,c	;volatile
  5454  00165C  0D02               	mullw	2
  5455  00165E  0E80               	movlw	low _adc_values
  5456  001660  24F3               	addwf	prodl,w,c
  5457  001662  6ED9               	movwf	fsr2l,c
  5458  001664  0E00               	movlw	high _adc_values
  5459  001666  20F4               	addwfc	prodh,w,c
  5460  001668  6EDA               	movwf	fsr2h,c
  5461  00166A  C001  FFDE         	movff	?i2_ADC_GetConversion,postinc2
  5462  00166E  C002  FFDD         	movff	?i2_ADC_GetConversion+1,postdec2
  5463                           
  5464                           ;ax.c: 356: int value = adc_values[parameter1];
  5465  001672  505E               	movf	_parameter1,w,c	;volatile
  5466  001674  0D02               	mullw	2
  5467  001676  0E80               	movlw	low _adc_values
  5468  001678  24F3               	addwf	prodl,w,c
  5469  00167A  6ED9               	movwf	fsr2l,c
  5470  00167C  0E00               	movlw	high _adc_values
  5471  00167E  20F4               	addwfc	prodh,w,c
  5472  001680  6EDA               	movwf	fsr2h,c
  5473  001682  CFDE F05C          	movff	postinc2,getByteToSend@value_1440
  5474  001686  CFDD F05D          	movff	postdec2,getByteToSend@value_1440+1
  5475                           
  5476                           ;ax.c: 358: nbBytesToSend = 2;
  5477  00168A  0E00               	movlw	0
  5478  00168C  0100               	movlb	0	; () banked
  5479  00168E  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5480  001690  0E02               	movlw	2
  5481  001692  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;ax.c: 359: uint8_t xlow = value & 0xff;
  5485  001694  C05C  F057         	movff	getByteToSend@value_1440,getByteToSend@xlow_1441
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;ax.c: 360: uint8_t xhigh = (value >> 8);
  5489  001698  505D               	movf	getByteToSend@value_1440+1,w,c
  5490  00169A  6E58               	movwf	getByteToSend@xhigh_1442,c
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;ax.c: 361: dataToSend[0] = xlow;
  5494  00169C  C057  F060         	movff	getByteToSend@xlow_1441,_dataToSend	;volatile
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;ax.c: 362: dataToSend[1] = xhigh;
  5498  0016A0  C058  F061         	movff	getByteToSend@xhigh_1442,_dataToSend+1	;volatile
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;ax.c: 366: clearState();
  5502  0016A4  EC6B  F010         	call	_clearState	;wreg free
  5503  0016A8                     i2l2590:
  5504                           
  5505                           ;ax.c: 367: }
  5506                           ;ax.c: 368: if (nbBytesToSend == 0) {
  5507  0016A8  0100               	movlb	0	; () banked
  5508  0016AA  5196               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  5509  0016AC  0100               	movlb	0	; () banked
  5510  0016AE  1197               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  5511  0016B0  A4D8               	btfss	status,2,c
  5512  0016B2  D004               	goto	i2l2598
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;ax.c: 370: clearState();
  5516  0016B4  EC6B  F010         	call	_clearState	;wreg free
  5517                           
  5518                           ;ax.c: 371: return 0;
  5519  0016B8  0E00               	movlw	0
  5520  0016BA  0012               	return	
  5521  0016BC                     i2l2598:
  5522                           
  5523                           ;ax.c: 372: }
  5524                           ;ax.c: 373: uint8_t d = dataToSend[bytesSent];
  5525  0016BC  0E60               	movlw	low _dataToSend
  5526  0016BE  0100               	movlb	0	; () banked
  5527  0016C0  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  5528  0016C2  6ED9               	movwf	fsr2l,c
  5529  0016C4  0E00               	movlw	high _dataToSend
  5530  0016C6  0100               	movlb	0	; () banked
  5531  0016C8  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  5532  0016CA  6EDA               	movwf	fsr2h,c
  5533  0016CC  50DF               	movf	indf2,w,c
  5534  0016CE  6E59               	movwf	getByteToSend@d,c
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;ax.c: 374: bytesSent++;
  5538  0016D0  0100               	movlb	0	; () banked
  5539  0016D2  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  5540  0016D4  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;ax.c: 376: if (bytesSent > nbBytesToSend) {
  5544  0016D6  0100               	movlb	0	; () banked
  5545  0016D8  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  5546  0016DA  0100               	movlb	0	; () banked
  5547  0016DC  5D96               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  5548  0016DE  0100               	movlb	0	; () banked
  5549  0016E0  5197               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  5550  0016E2  0A80               	xorlw	128
  5551  0016E4  6E50               	movwf	??_getByteToSend& (0+255),c
  5552  0016E6  0100               	movlb	0	; () banked
  5553  0016E8  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  5554  0016EA  0A80               	xorlw	128
  5555  0016EC  5850               	subwfb	??_getByteToSend& (0+255),w,c
  5556  0016EE  B0D8               	btfsc	status,0,c
  5557  0016F0  D004               	goto	i2l2610
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;ax.c: 378: clearState();
  5561  0016F2  EC6B  F010         	call	_clearState	;wreg free
  5562                           
  5563                           ;ax.c: 379: return 111;
  5564  0016F6  0E6F               	movlw	111
  5565  0016F8  0012               	return	
  5566  0016FA                     i2l2610:
  5567                           
  5568                           ;ax.c: 380: }
  5569                           ;ax.c: 382: return d;
  5570  0016FA  5059               	movf	getByteToSend@d,w,c
  5571  0016FC  0012               	return	
  5572  0016FE                     __end_of_getByteToSend:
  5573                           	opt stack 0
  5574                           pclatu	equ	0xFFB
  5575                           pclath	equ	0xFFA
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           postinc0	equ	0xFEE
  5584                           fsr0h	equ	0xFEA
  5585                           fsr0l	equ	0xFE9
  5586                           wreg	equ	0xFE8
  5587                           fsr1h	equ	0xFE2
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function i2_ADC_GetConversion *****************
  5597 ;; Defined at:
  5598 ;;		line 106 in file "mcc_generated_files/adc.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  channel         1    wreg     enum E15092
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  channel         1    4[COMRAM] enum E15092
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  2    0[COMRAM] unsigned int 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5615 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5616 ;;Total ram usage:        5 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; This function calls:
  5619 ;;		Nothing
  5620 ;; This function is called by:
  5621 ;;		_getByteToSend
  5622 ;; This function uses a non-reentrant model
  5623 ;;
  5624                           
  5625                           	psect	text30
  5626  0021BC                     __ptext30:
  5627                           	opt stack 0
  5628  0021BC                     i2_ADC_GetConversion:
  5629                           	opt stack 24
  5630                           
  5631                           ;incstack = 0
  5632                           ;i2ADC_GetConversion@channel stored from wreg
  5633  0021BC  6E05               	movwf	i2ADC_GetConversion@channel,c
  5634                           
  5635                           ;adc.c: 109: ADCON0bits.CHS = channel;
  5636  0021BE  C005  F003         	movff	i2ADC_GetConversion@channel,??i2_ADC_GetConversion
  5637  0021C2  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5638  0021C4  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5639  0021C6  50C2               	movf	4034,w,c	;volatile
  5640  0021C8  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5641  0021CA  0B83               	andlw	-125
  5642  0021CC  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5643  0021CE  6EC2               	movwf	4034,c	;volatile
  5644                           
  5645                           ;adc.c: 112: ADCON0bits.ADON = 1;
  5646  0021D0  80C2               	bsf	4034,0,c	;volatile
  5647                           
  5648                           ;adc.c: 116: ADCON0bits.GO_nDONE = 1;
  5649  0021D2  82C2               	bsf	4034,1,c	;volatile
  5650  0021D4                     i2l253:
  5651  0021D4  B2C2               	btfsc	4034,1,c	;volatile
  5652  0021D6  D7FE               	goto	i2l253
  5653                           
  5654                           ;adc.c: 121: }
  5655                           ;adc.c: 124: return ((ADRESH << 8) + ADRESL);
  5656  0021D8  50C4               	movf	4036,w,c	;volatile
  5657  0021DA  6E04               	movwf	(??i2_ADC_GetConversion+1)& (0+255),c
  5658  0021DC  6A03               	clrf	??i2_ADC_GetConversion& (0+255),c
  5659  0021DE  50C3               	movf	4035,w,c	;volatile
  5660  0021E0  2403               	addwf	??i2_ADC_GetConversion,w,c
  5661  0021E2  6E01               	movwf	?i2_ADC_GetConversion,c
  5662  0021E4  0E00               	movlw	0
  5663  0021E6  2004               	addwfc	??i2_ADC_GetConversion+1,w,c
  5664  0021E8  6E02               	movwf	?i2_ADC_GetConversion+1,c
  5665  0021EA  0012               	return	
  5666  0021EC                     __end_ofi2_ADC_GetConversion:
  5667                           	opt stack 0
  5668                           pclatu	equ	0xFFB
  5669                           pclath	equ	0xFFA
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           intcon	equ	0xFF2
  5677                           postinc0	equ	0xFEE
  5678                           fsr0h	equ	0xFEA
  5679                           fsr0l	equ	0xFE9
  5680                           wreg	equ	0xFE8
  5681                           fsr1h	equ	0xFE2
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _writeAXData *****************
  5691 ;; Defined at:
  5692 ;;		line 226 in file "ax.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  id              2   23[COMRAM] int 
  5695 ;;  address         2   25[COMRAM] int 
  5696 ;;  data            2   27[COMRAM] int 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  packet         20   50[COMRAM] unsigned char [20]
  5699 ;;  result         20   30[COMRAM] unsigned char [20]
  5700 ;;  size            2   76[COMRAM] int 
  5701 ;;  error           2   74[COMRAM] int 
  5702 ;;  instruction     2   72[COMRAM] int 
  5703 ;;  length          2   70[COMRAM] int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  2   23[COMRAM] int 
  5706 ;; Registers used:
  5707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5713 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5714 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5716 ;;      Totals:        55       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5717 ;;Total ram usage:       55 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    2
  5720 ;; This function calls:
  5721 ;;		_getAddressSize
  5722 ;;		_sendAX
  5723 ;; This function is called by:
  5724 ;;		_getByteToSend
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text31
  5729  001D54                     __ptext31:
  5730                           	opt stack 0
  5731  001D54                     _writeAXData:
  5732                           	opt stack 22
  5733                           
  5734                           ;ax.c: 227: int size = getAddressSize(address);
  5735                           
  5736                           ;incstack = 0
  5737  001D54  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  5738  001D58  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  5739  001D5C  ECAB  F00F         	call	_getAddressSize	;wreg free
  5740  001D60  C001  F04D         	movff	?_getAddressSize,writeAXData@size
  5741  001D64  C002  F04E         	movff	?_getAddressSize+1,writeAXData@size+1
  5742                           
  5743                           ;ax.c: 229: uint8_t packet[20];
  5744                           ;ax.c: 230: uint8_t result[20];
  5745                           ;ax.c: 231: packet[0] = 0xFF;
  5746  001D68  6833               	setf	writeAXData@packet,c
  5747                           
  5748                           ;ax.c: 232: packet[1] = 0xFF;
  5749  001D6A  6834               	setf	writeAXData@packet+1,c
  5750                           
  5751                           ;ax.c: 233: packet[2] = id;
  5752  001D6C  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  5753                           
  5754                           ;ax.c: 234: int length = size + 3;
  5755  001D70  0E03               	movlw	3
  5756  001D72  244D               	addwf	writeAXData@size,w,c
  5757  001D74  6E47               	movwf	writeAXData@length,c
  5758  001D76  0E00               	movlw	0
  5759  001D78  204E               	addwfc	writeAXData@size+1,w,c
  5760  001D7A  6E48               	movwf	writeAXData@length+1,c
  5761                           
  5762                           ;ax.c: 235: packet[3] = length;
  5763  001D7C  C047  F036         	movff	writeAXData@length,writeAXData@packet+3
  5764                           
  5765                           ;ax.c: 236: int instruction = 0x03;
  5766  001D80  0E00               	movlw	0
  5767  001D82  6E4A               	movwf	writeAXData@instruction+1,c
  5768  001D84  0E03               	movlw	3
  5769  001D86  6E49               	movwf	writeAXData@instruction,c
  5770                           
  5771                           ;ax.c: 237: packet[4] = instruction;
  5772  001D88  C049  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  5773                           
  5774                           ;ax.c: 238: packet[5] = address;
  5775  001D8C  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  5776                           
  5777                           ;ax.c: 239: if (size == 1) {
  5778  001D90  044D               	decf	writeAXData@size,w,c
  5779  001D92  104E               	iorwf	writeAXData@size+1,w,c
  5780  001D94  A4D8               	btfss	status,2,c
  5781  001D96  D003               	goto	i2l545
  5782                           
  5783                           ;ax.c: 240: packet[6] = data;
  5784  001D98  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5785                           
  5786                           ;ax.c: 241: } else {
  5787  001D9C  D004               	goto	i2l2456
  5788  001D9E                     i2l545:
  5789                           
  5790                           ;ax.c: 242: packet[6] = data & 0xff;
  5791  001D9E  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5792                           
  5793                           ;ax.c: 243: packet[7] = (data >> 8);
  5794  001DA2  501D               	movf	writeAXData@data+1,w,c
  5795  001DA4  6E3A               	movwf	writeAXData@packet+7,c
  5796  001DA6                     i2l2456:
  5797                           
  5798                           ;ax.c: 244: }
  5799                           ;ax.c: 247: int error = sendAX(packet, 6 + size, result, 0);
  5800  001DA6  0E33               	movlw	low writeAXData@packet
  5801  001DA8  6E02               	movwf	sendAX@buffer,c
  5802  001DAA  0E00               	movlw	high writeAXData@packet
  5803  001DAC  6E03               	movwf	sendAX@buffer+1,c
  5804  001DAE  0E06               	movlw	6
  5805  001DB0  244D               	addwf	writeAXData@size,w,c
  5806  001DB2  6E04               	movwf	sendAX@packetSize,c
  5807  001DB4  0E00               	movlw	0
  5808  001DB6  204E               	addwfc	writeAXData@size+1,w,c
  5809  001DB8  6E05               	movwf	sendAX@packetSize+1,c
  5810  001DBA  0E1F               	movlw	low writeAXData@result
  5811  001DBC  6E06               	movwf	sendAX@result,c
  5812  001DBE  0E00               	movlw	high writeAXData@result
  5813  001DC0  6E07               	movwf	sendAX@result+1,c
  5814  001DC2  0E00               	movlw	0
  5815  001DC4  6E09               	movwf	sendAX@parametersToRead+1,c
  5816  001DC6  0E00               	movlw	0
  5817  001DC8  6E08               	movwf	sendAX@parametersToRead,c
  5818  001DCA  EC7F  F00B         	call	_sendAX	;wreg free
  5819  001DCE  6E1E               	movwf	??_writeAXData& (0+255),c
  5820  001DD0  501E               	movf	??_writeAXData,w,c
  5821  001DD2  6E4B               	movwf	writeAXData@error,c
  5822  001DD4  6A4C               	clrf	writeAXData@error+1,c
  5823                           
  5824                           ;ax.c: 248: return error;
  5825  001DD6  C04B  F018         	movff	writeAXData@error,?_writeAXData
  5826  001DDA  C04C  F019         	movff	writeAXData@error+1,?_writeAXData+1
  5827  001DDE  0012               	return	
  5828  001DE0                     __end_of_writeAXData:
  5829                           	opt stack 0
  5830                           pclatu	equ	0xFFB
  5831                           pclath	equ	0xFFA
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           intcon	equ	0xFF2
  5839                           postinc0	equ	0xFEE
  5840                           fsr0h	equ	0xFEA
  5841                           fsr0l	equ	0xFE9
  5842                           wreg	equ	0xFE8
  5843                           fsr1h	equ	0xFE2
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _readAXData *****************
  5853 ;; Defined at:
  5854 ;;		line 199 in file "ax.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  id              2   23[COMRAM] int 
  5857 ;;  address         2   25[COMRAM] int 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  packet         20   51[COMRAM] unsigned char [20]
  5860 ;;  result         20   29[COMRAM] unsigned char [20]
  5861 ;;  size            2   77[COMRAM] int 
  5862 ;;  instruction     2   75[COMRAM] int 
  5863 ;;  length          2   73[COMRAM] int 
  5864 ;;  nbParameters    2   71[COMRAM] int 
  5865 ;;  error           2   49[COMRAM] int 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  2   23[COMRAM] int 
  5868 ;; Registers used:
  5869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5875 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5876 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5878 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5879 ;;Total ram usage:       56 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    2
  5882 ;; This function calls:
  5883 ;;		_getAddressSize
  5884 ;;		_sendAX
  5885 ;; This function is called by:
  5886 ;;		_getByteToSend
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text32
  5891  001C2E                     __ptext32:
  5892                           	opt stack 0
  5893  001C2E                     _readAXData:
  5894                           	opt stack 22
  5895                           
  5896                           ;ax.c: 200: int size = getAddressSize(address);
  5897                           
  5898                           ;incstack = 0
  5899  001C2E  C01A  F001         	movff	readAXData@address,getAddressSize@address
  5900  001C32  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  5901  001C36  ECAB  F00F         	call	_getAddressSize	;wreg free
  5902  001C3A  C001  F04E         	movff	?_getAddressSize,readAXData@size
  5903  001C3E  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  5904                           
  5905                           ;ax.c: 202: uint8_t packet[20];
  5906                           ;ax.c: 203: uint8_t result[20];
  5907                           ;ax.c: 204: packet[0] = 0xFF;
  5908  001C42  6834               	setf	readAXData@packet,c
  5909                           
  5910                           ;ax.c: 205: packet[1] = 0xFF;
  5911  001C44  6835               	setf	readAXData@packet+1,c
  5912                           
  5913                           ;ax.c: 206: packet[2] = id;
  5914  001C46  C018  F036         	movff	readAXData@id,readAXData@packet+2
  5915                           
  5916                           ;ax.c: 207: int nbParameters = 2;
  5917  001C4A  0E00               	movlw	0
  5918  001C4C  6E49               	movwf	readAXData@nbParameters+1,c
  5919  001C4E  0E02               	movlw	2
  5920  001C50  6E48               	movwf	readAXData@nbParameters,c
  5921                           
  5922                           ;ax.c: 208: int length = nbParameters + 2;
  5923  001C52  0E02               	movlw	2
  5924  001C54  2448               	addwf	readAXData@nbParameters,w,c
  5925  001C56  6E4A               	movwf	readAXData@length,c
  5926  001C58  0E00               	movlw	0
  5927  001C5A  2049               	addwfc	readAXData@nbParameters+1,w,c
  5928  001C5C  6E4B               	movwf	readAXData@length+1,c
  5929                           
  5930                           ;ax.c: 209: packet[3] = length;
  5931  001C5E  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  5932                           
  5933                           ;ax.c: 210: int instruction = 0x02;
  5934  001C62  0E00               	movlw	0
  5935  001C64  6E4D               	movwf	readAXData@instruction+1,c
  5936  001C66  0E02               	movlw	2
  5937  001C68  6E4C               	movwf	readAXData@instruction,c
  5938                           
  5939                           ;ax.c: 211: packet[4] = instruction;
  5940  001C6A  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  5941                           
  5942                           ;ax.c: 212: packet[5] = address;
  5943  001C6E  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  5944                           
  5945                           ;ax.c: 213: packet[6] = size;
  5946  001C72  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  5947                           
  5948                           ;ax.c: 216: int error = sendAX(packet, 7, result, 1);
  5949  001C76  0E34               	movlw	low readAXData@packet
  5950  001C78  6E02               	movwf	sendAX@buffer,c
  5951  001C7A  0E00               	movlw	high readAXData@packet
  5952  001C7C  6E03               	movwf	sendAX@buffer+1,c
  5953  001C7E  0E00               	movlw	0
  5954  001C80  6E05               	movwf	sendAX@packetSize+1,c
  5955  001C82  0E07               	movlw	7
  5956  001C84  6E04               	movwf	sendAX@packetSize,c
  5957  001C86  0E1E               	movlw	low readAXData@result
  5958  001C88  6E06               	movwf	sendAX@result,c
  5959  001C8A  0E00               	movlw	high readAXData@result
  5960  001C8C  6E07               	movwf	sendAX@result+1,c
  5961  001C8E  0E00               	movlw	0
  5962  001C90  6E09               	movwf	sendAX@parametersToRead+1,c
  5963  001C92  0E01               	movlw	1
  5964  001C94  6E08               	movwf	sendAX@parametersToRead,c
  5965  001C96  EC7F  F00B         	call	_sendAX	;wreg free
  5966  001C9A  6E1C               	movwf	??_readAXData& (0+255),c
  5967  001C9C  501C               	movf	??_readAXData,w,c
  5968  001C9E  6E32               	movwf	readAXData@error,c
  5969  001CA0  6A33               	clrf	readAXData@error+1,c
  5970                           
  5971                           ;ax.c: 217: if (size == 1) {
  5972  001CA2  044E               	decf	readAXData@size,w,c
  5973  001CA4  104F               	iorwf	readAXData@size+1,w,c
  5974  001CA6  A4D8               	btfss	status,2,c
  5975  001CA8  D004               	goto	i2l2428
  5976                           
  5977                           ;ax.c: 219: return result[5];
  5978  001CAA  C023  F018         	movff	readAXData@result+5,?_readAXData
  5979  001CAE  6A19               	clrf	?_readAXData+1,c
  5980                           
  5981                           ;ax.c: 220: } else {
  5982  001CB0  0012               	return	
  5983  001CB2                     i2l2428:
  5984                           
  5985                           ;ax.c: 222: return result[5] + result[6]*256;
  5986  001CB2  5024               	movf	readAXData@result+6,w,c
  5987  001CB4  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  5988  001CB6  6A1C               	clrf	??_readAXData& (0+255),c
  5989  001CB8  5023               	movf	readAXData@result+5,w,c
  5990  001CBA  241C               	addwf	??_readAXData,w,c
  5991  001CBC  6E18               	movwf	?_readAXData,c
  5992  001CBE  0E00               	movlw	0
  5993  001CC0  201D               	addwfc	??_readAXData+1,w,c
  5994  001CC2  6E19               	movwf	?_readAXData+1,c
  5995  001CC4  0012               	return	
  5996  001CC6                     __end_of_readAXData:
  5997                           	opt stack 0
  5998                           pclatu	equ	0xFFB
  5999                           pclath	equ	0xFFA
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           intcon	equ	0xFF2
  6007                           postinc0	equ	0xFEE
  6008                           fsr0h	equ	0xFEA
  6009                           fsr0l	equ	0xFE9
  6010                           wreg	equ	0xFE8
  6011                           fsr1h	equ	0xFE2
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           fsr2h	equ	0xFDA
  6017                           fsr2l	equ	0xFD9
  6018                           status	equ	0xFD8
  6019                           
  6020 ;; *************** function _getAddressSize *****************
  6021 ;; Defined at:
  6022 ;;		line 24 in file "ax.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  address         2    0[COMRAM] int 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  2    0[COMRAM] int 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6036 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6038 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6039 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6040 ;;Total ram usage:        4 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_readAXData
  6046 ;;		_writeAXData
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text33
  6051  001F56                     __ptext33:
  6052                           	opt stack 0
  6053  001F56                     _getAddressSize:
  6054                           	opt stack 23
  6055                           
  6056                           ;ax.c: 25: switch (address) {
  6057                           
  6058                           ;incstack = 0
  6059  001F56  D00A               	goto	i2l2286
  6060  001F58                     i2l2276:
  6061                           
  6062                           ;ax.c: 27: case 6:
  6063                           ;ax.c: 28: case 8:
  6064                           ;ax.c: 29: case 14:
  6065                           ;ax.c: 30: case 20:
  6066                           ;ax.c: 31: case 22:
  6067                           ;ax.c: 32: case 30:
  6068                           ;ax.c: 33: case 32:
  6069                           ;ax.c: 34: case 34:
  6070                           ;ax.c: 35: case 36:
  6071                           ;ax.c: 36: case 38:
  6072                           ;ax.c: 37: case 40:
  6073                           ;ax.c: 38: case 48:
  6074                           ;ax.c: 39: return 2;
  6075  001F58  0E00               	movlw	0
  6076  001F5A  6E02               	movwf	?_getAddressSize+1,c
  6077  001F5C  0E02               	movlw	2
  6078  001F5E  6E01               	movwf	?_getAddressSize,c
  6079  001F60  0012               	return	
  6080  001F62                     i2l2280:
  6081                           
  6082                           ;ax.c: 41: return 1;
  6083  001F62  0E00               	movlw	0
  6084  001F64  6E02               	movwf	?_getAddressSize+1,c
  6085  001F66  0E01               	movlw	1
  6086  001F68  6E01               	movwf	?_getAddressSize,c
  6087                           
  6088                           ;ax.c: 42: }
  6089  001F6A  0012               	return	
  6090  001F6C                     i2l2286:
  6091  001F6C  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  6092  001F70  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  6093                           
  6094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6095                           ; Switch size 1, requested type "space"
  6096                           ; Number of cases is 1, Range of values is 0 to 0
  6097                           ; switch strategies available:
  6098                           ; Name         Instructions Cycles
  6099                           ; simple_byte            4     3 (average)
  6100                           ;	Chosen strategy is simple_byte
  6101  001F74  5004               	movf	??_getAddressSize+1,w,c
  6102  001F76  0A00               	xorlw	0	; case 0
  6103  001F78  A4D8               	btfss	status,2,c
  6104  001F7A  D7F3               	goto	i2l2280
  6105                           
  6106                           ; Switch size 1, requested type "space"
  6107                           ; Number of cases is 13, Range of values is 0 to 48
  6108                           ; switch strategies available:
  6109                           ; Name         Instructions Cycles
  6110                           ; simple_byte           40    21 (average)
  6111                           ;	Chosen strategy is simple_byte
  6112  001F7C  5003               	movf	??_getAddressSize,w,c
  6113  001F7E  0A00               	xorlw	0	; case 0
  6114  001F80  B4D8               	btfsc	status,2,c
  6115  001F82  D7EA               	goto	i2l2276
  6116  001F84  0A06               	xorlw	6	; case 6
  6117  001F86  B4D8               	btfsc	status,2,c
  6118  001F88  D7E7               	goto	i2l2276
  6119  001F8A  0A0E               	xorlw	14	; case 8
  6120  001F8C  B4D8               	btfsc	status,2,c
  6121  001F8E  D7E4               	goto	i2l2276
  6122  001F90  0A06               	xorlw	6	; case 14
  6123  001F92  B4D8               	btfsc	status,2,c
  6124  001F94  D7E1               	goto	i2l2276
  6125  001F96  0A1A               	xorlw	26	; case 20
  6126  001F98  B4D8               	btfsc	status,2,c
  6127  001F9A  D7DE               	goto	i2l2276
  6128  001F9C  0A02               	xorlw	2	; case 22
  6129  001F9E  B4D8               	btfsc	status,2,c
  6130  001FA0  D7DB               	goto	i2l2276
  6131  001FA2  0A08               	xorlw	8	; case 30
  6132  001FA4  B4D8               	btfsc	status,2,c
  6133  001FA6  D7D8               	goto	i2l2276
  6134  001FA8  0A3E               	xorlw	62	; case 32
  6135  001FAA  B4D8               	btfsc	status,2,c
  6136  001FAC  D7D5               	goto	i2l2276
  6137  001FAE  0A02               	xorlw	2	; case 34
  6138  001FB0  B4D8               	btfsc	status,2,c
  6139  001FB2  D7D2               	goto	i2l2276
  6140  001FB4  0A06               	xorlw	6	; case 36
  6141  001FB6  B4D8               	btfsc	status,2,c
  6142  001FB8  D7CF               	goto	i2l2276
  6143  001FBA  0A02               	xorlw	2	; case 38
  6144  001FBC  B4D8               	btfsc	status,2,c
  6145  001FBE  D7CC               	goto	i2l2276
  6146  001FC0  0A0E               	xorlw	14	; case 40
  6147  001FC2  B4D8               	btfsc	status,2,c
  6148  001FC4  D7C9               	goto	i2l2276
  6149  001FC6  0A18               	xorlw	24	; case 48
  6150  001FC8  B4D8               	btfsc	status,2,c
  6151  001FCA  D7C6               	goto	i2l2276
  6152  001FCC  D7CA               	goto	i2l2280
  6153  001FCE                     __end_of_getAddressSize:
  6154                           	opt stack 0
  6155                           pclatu	equ	0xFFB
  6156                           pclath	equ	0xFFA
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           postinc0	equ	0xFEE
  6165                           fsr0h	equ	0xFEA
  6166                           fsr0l	equ	0xFE9
  6167                           wreg	equ	0xFE8
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function _pingAX *****************
  6178 ;; Defined at:
  6179 ;;		line 182 in file "ax.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  id              2   23[COMRAM] int 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  packet         20   46[COMRAM] unsigned char [20]
  6184 ;;  result         20   26[COMRAM] unsigned char [20]
  6185 ;;  error           2   72[COMRAM] int 
  6186 ;;  instruction     2   70[COMRAM] int 
  6187 ;;  length          2   68[COMRAM] int 
  6188 ;;  nbParameters    2   66[COMRAM] int 
  6189 ;; Return value:  Size  Location     Type
  6190 ;;                  2   23[COMRAM] int 
  6191 ;; Registers used:
  6192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6193 ;; Tracked objects:
  6194 ;;		On entry : 0/0
  6195 ;;		On exit  : 0/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6199 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6201 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6202 ;;Total ram usage:       51 bytes
  6203 ;; Hardware stack levels used:    1
  6204 ;; Hardware stack levels required when called:    2
  6205 ;; This function calls:
  6206 ;;		_sendAX
  6207 ;; This function is called by:
  6208 ;;		_getByteToSend
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text34
  6213  002034                     __ptext34:
  6214                           	opt stack 0
  6215  002034                     _pingAX:
  6216                           	opt stack 22
  6217                           
  6218                           ;ax.c: 183: uint8_t packet[20];
  6219                           ;ax.c: 184: uint8_t result[20];
  6220                           ;ax.c: 185: packet[0] = 0xFF;
  6221                           
  6222                           ;incstack = 0
  6223  002034  682F               	setf	pingAX@packet,c
  6224                           
  6225                           ;ax.c: 186: packet[1] = 0xFF;
  6226  002036  6830               	setf	pingAX@packet+1,c
  6227                           
  6228                           ;ax.c: 187: packet[2] = id;
  6229  002038  C018  F031         	movff	pingAX@id,pingAX@packet+2
  6230                           
  6231                           ;ax.c: 188: int nbParameters = 0;
  6232  00203C  0E00               	movlw	0
  6233  00203E  6E44               	movwf	pingAX@nbParameters+1,c
  6234  002040  0E00               	movlw	0
  6235  002042  6E43               	movwf	pingAX@nbParameters,c
  6236                           
  6237                           ;ax.c: 189: int length = nbParameters + 2;
  6238  002044  0E02               	movlw	2
  6239  002046  2443               	addwf	pingAX@nbParameters,w,c
  6240  002048  6E45               	movwf	pingAX@length,c
  6241  00204A  0E00               	movlw	0
  6242  00204C  2044               	addwfc	pingAX@nbParameters+1,w,c
  6243  00204E  6E46               	movwf	pingAX@length+1,c
  6244                           
  6245                           ;ax.c: 190: packet[3] = length;
  6246  002050  C045  F032         	movff	pingAX@length,pingAX@packet+3
  6247                           
  6248                           ;ax.c: 191: int instruction = 0x01;
  6249  002054  0E00               	movlw	0
  6250  002056  6E48               	movwf	pingAX@instruction+1,c
  6251  002058  0E01               	movlw	1
  6252  00205A  6E47               	movwf	pingAX@instruction,c
  6253                           
  6254                           ;ax.c: 192: packet[4] = instruction;
  6255  00205C  C047  F033         	movff	pingAX@instruction,pingAX@packet+4
  6256                           
  6257                           ;ax.c: 195: int error = sendAX(packet, 5, result, 0);
  6258  002060  0E2F               	movlw	low pingAX@packet
  6259  002062  6E02               	movwf	sendAX@buffer,c
  6260  002064  0E00               	movlw	high pingAX@packet
  6261  002066  6E03               	movwf	sendAX@buffer+1,c
  6262  002068  0E00               	movlw	0
  6263  00206A  6E05               	movwf	sendAX@packetSize+1,c
  6264  00206C  0E05               	movlw	5
  6265  00206E  6E04               	movwf	sendAX@packetSize,c
  6266  002070  0E1B               	movlw	low pingAX@result
  6267  002072  6E06               	movwf	sendAX@result,c
  6268  002074  0E00               	movlw	high pingAX@result
  6269  002076  6E07               	movwf	sendAX@result+1,c
  6270  002078  0E00               	movlw	0
  6271  00207A  6E09               	movwf	sendAX@parametersToRead+1,c
  6272  00207C  0E00               	movlw	0
  6273  00207E  6E08               	movwf	sendAX@parametersToRead,c
  6274  002080  EC7F  F00B         	call	_sendAX	;wreg free
  6275  002084  6E1A               	movwf	??_pingAX& (0+255),c
  6276  002086  501A               	movf	??_pingAX,w,c
  6277  002088  6E49               	movwf	pingAX@error,c
  6278  00208A  6A4A               	clrf	pingAX@error+1,c
  6279                           
  6280                           ;ax.c: 196: return error;
  6281  00208C  C049  F018         	movff	pingAX@error,?_pingAX
  6282  002090  C04A  F019         	movff	pingAX@error+1,?_pingAX+1
  6283  002094  0012               	return	
  6284  002096                     __end_of_pingAX:
  6285                           	opt stack 0
  6286                           pclatu	equ	0xFFB
  6287                           pclath	equ	0xFFA
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           intcon	equ	0xFF2
  6295                           postinc0	equ	0xFEE
  6296                           fsr0h	equ	0xFEA
  6297                           fsr0l	equ	0xFE9
  6298                           wreg	equ	0xFE8
  6299                           fsr1h	equ	0xFE2
  6300                           fsr1l	equ	0xFE1
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           fsr2h	equ	0xFDA
  6305                           fsr2l	equ	0xFD9
  6306                           status	equ	0xFD8
  6307                           
  6308 ;; *************** function _sendAX *****************
  6309 ;; Defined at:
  6310 ;;		line 131 in file "ax.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  6313 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  6314 ;;  packetSize      2    3[COMRAM] int 
  6315 ;;  result          2    5[COMRAM] PTR unsigned char 
  6316 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  6317 ;;  parametersTo    2    7[COMRAM] int 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  i               2   20[COMRAM] int 
  6320 ;;  i               2   16[COMRAM] int 
  6321 ;;  i               2   14[COMRAM] int 
  6322 ;;  i               2   12[COMRAM] int 
  6323 ;;  r0              2   18[COMRAM] int 
  6324 ;;  stop            2   10[COMRAM] int 
  6325 ;;  checksum        1   22[COMRAM] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      unsigned char 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6335 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6338 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6339 ;;Total ram usage:       22 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    1
  6342 ;; This function calls:
  6343 ;;		_EUSART1_Read
  6344 ;;		_EUSART1_Write
  6345 ;; This function is called by:
  6346 ;;		_pingAX
  6347 ;;		_readAXData
  6348 ;;		_writeAXData
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text35
  6353  0016FE                     __ptext35:
  6354                           	opt stack 0
  6355  0016FE                     _sendAX:
  6356                           	opt stack 22
  6357                           
  6358                           ;ax.c: 132: uint8_t checksum = 0;
  6359                           
  6360                           ;incstack = 0
  6361  0016FE  0E00               	movlw	0
  6362  001700  6E17               	movwf	sendAX@checksum,c
  6363                           
  6364                           ;ax.c: 134: for (int i = 2; i < packetSize; i++) {
  6365  001702  0E00               	movlw	0
  6366  001704  6E0E               	movwf	sendAX@i+1,c
  6367  001706  0E02               	movlw	2
  6368  001708  6E0D               	movwf	sendAX@i,c
  6369  00170A  D00A               	goto	i2l2298
  6370  00170C                     i2l2294:
  6371                           
  6372                           ;ax.c: 135: checksum += buffer[i];
  6373  00170C  500D               	movf	sendAX@i,w,c
  6374  00170E  2402               	addwf	sendAX@buffer,w,c
  6375  001710  6ED9               	movwf	fsr2l,c
  6376  001712  500E               	movf	sendAX@i+1,w,c
  6377  001714  2003               	addwfc	sendAX@buffer+1,w,c
  6378  001716  6EDA               	movwf	fsr2h,c
  6379  001718  50DF               	movf	indf2,w,c
  6380  00171A  2617               	addwf	sendAX@checksum,f,c
  6381  00171C  4A0D               	infsnz	sendAX@i,f,c
  6382  00171E  2A0E               	incf	sendAX@i+1,f,c
  6383  001720                     i2l2298:
  6384  001720  5004               	movf	sendAX@packetSize,w,c
  6385  001722  5C0D               	subwf	sendAX@i,w,c
  6386  001724  500E               	movf	sendAX@i+1,w,c
  6387  001726  0A80               	xorlw	128
  6388  001728  6E0A               	movwf	??_sendAX& (0+255),c
  6389  00172A  5005               	movf	sendAX@packetSize+1,w,c
  6390  00172C  0A80               	xorlw	128
  6391  00172E  580A               	subwfb	??_sendAX& (0+255),w,c
  6392  001730  A0D8               	btfss	status,0,c
  6393  001732  D7EC               	goto	i2l2294
  6394                           
  6395                           ;ax.c: 136: }
  6396                           ;ax.c: 137: checksum = ~checksum;
  6397  001734  1E17               	comf	sendAX@checksum,f,c
  6398                           
  6399                           ;ax.c: 139: do { LATDbits.LATD4 = 1; } while(0);
  6400  001736  888C               	bsf	3980,4,c	;volatile
  6401                           
  6402                           ;ax.c: 140: for (int i = 0; i < packetSize; i++) {
  6403  001738  0E00               	movlw	0
  6404  00173A  6E10               	movwf	sendAX@i_1375+1,c
  6405  00173C  0E00               	movlw	0
  6406  00173E  6E0F               	movwf	sendAX@i_1375,c
  6407  001740  D00B               	goto	i2l2310
  6408  001742                     i2l2306:
  6409                           
  6410                           ;ax.c: 141: EUSART1_Write(buffer[i]);
  6411  001742  500F               	movf	sendAX@i_1375,w,c
  6412  001744  2402               	addwf	sendAX@buffer,w,c
  6413  001746  6ED9               	movwf	fsr2l,c
  6414  001748  5010               	movf	sendAX@i_1375+1,w,c
  6415  00174A  2003               	addwfc	sendAX@buffer+1,w,c
  6416  00174C  6EDA               	movwf	fsr2h,c
  6417  00174E  50DF               	movf	indf2,w,c
  6418  001750  EC5B  F011         	call	_EUSART1_Write
  6419  001754  4A0F               	infsnz	sendAX@i_1375,f,c
  6420  001756  2A10               	incf	sendAX@i_1375+1,f,c
  6421  001758                     i2l2310:
  6422  001758  5004               	movf	sendAX@packetSize,w,c
  6423  00175A  5C0F               	subwf	sendAX@i_1375,w,c
  6424  00175C  5010               	movf	sendAX@i_1375+1,w,c
  6425  00175E  0A80               	xorlw	128
  6426  001760  6E0A               	movwf	??_sendAX& (0+255),c
  6427  001762  5005               	movf	sendAX@packetSize+1,w,c
  6428  001764  0A80               	xorlw	128
  6429  001766  580A               	subwfb	??_sendAX& (0+255),w,c
  6430  001768  A0D8               	btfss	status,0,c
  6431  00176A  D7EB               	goto	i2l2306
  6432                           
  6433                           ;ax.c: 142: }
  6434                           ;ax.c: 143: EUSART1_Write(checksum);
  6435  00176C  5017               	movf	sendAX@checksum,w,c
  6436  00176E  EC5B  F011         	call	_EUSART1_Write
  6437                           
  6438                           ;ax.c: 144: _delay((unsigned long)((100)*(64000000/4000000.0)));
  6439  001772  0EE4               	movlw	228
  6440  001774                     i2u210_47:
  6441  001774  D000               	nop2	
  6442  001776  D000               	nop2	
  6443  001778  2EE8               	decfsz	wreg,f,c
  6444  00177A  D7FC               	bra	i2u210_47
  6445  00177C  D000               	nop2	
  6446  00177E  D000               	nop2	
  6447                           
  6448                           ;ax.c: 145: do { LATDbits.LATD4 = 0; } while(0);
  6449  001780  988C               	bcf	3980,4,c	;volatile
  6450                           
  6451                           ;ax.c: 161: int stop = 6 + parametersToRead;
  6452  001782  0E06               	movlw	6
  6453  001784  2408               	addwf	sendAX@parametersToRead,w,c
  6454  001786  6E0B               	movwf	sendAX@stop,c
  6455  001788  0E00               	movlw	0
  6456  00178A  2009               	addwfc	sendAX@parametersToRead+1,w,c
  6457  00178C  6E0C               	movwf	sendAX@stop+1,c
  6458                           
  6459                           ;ax.c: 163: for (int i = 0; i < stop; i++) {
  6460  00178E  0E00               	movlw	0
  6461  001790  6E12               	movwf	sendAX@i_1378+1,c
  6462  001792  0E00               	movlw	0
  6463  001794  6E11               	movwf	sendAX@i_1378,c
  6464  001796  D00A               	goto	i2l2326
  6465  001798                     i2l2322:
  6466                           
  6467                           ;ax.c: 164: result[i] = 122;
  6468  001798  5011               	movf	sendAX@i_1378,w,c
  6469  00179A  2406               	addwf	sendAX@result,w,c
  6470  00179C  6ED9               	movwf	fsr2l,c
  6471  00179E  5012               	movf	sendAX@i_1378+1,w,c
  6472  0017A0  2007               	addwfc	sendAX@result+1,w,c
  6473  0017A2  6EDA               	movwf	fsr2h,c
  6474  0017A4  0E7A               	movlw	122
  6475  0017A6  6EDF               	movwf	indf2,c
  6476  0017A8  4A11               	infsnz	sendAX@i_1378,f,c
  6477  0017AA  2A12               	incf	sendAX@i_1378+1,f,c
  6478  0017AC                     i2l2326:
  6479  0017AC  500B               	movf	sendAX@stop,w,c
  6480  0017AE  5C11               	subwf	sendAX@i_1378,w,c
  6481  0017B0  5012               	movf	sendAX@i_1378+1,w,c
  6482  0017B2  0A80               	xorlw	128
  6483  0017B4  6E0A               	movwf	??_sendAX& (0+255),c
  6484  0017B6  500C               	movf	sendAX@stop+1,w,c
  6485  0017B8  0A80               	xorlw	128
  6486  0017BA  580A               	subwfb	??_sendAX& (0+255),w,c
  6487  0017BC  A0D8               	btfss	status,0,c
  6488  0017BE  D7EC               	goto	i2l2322
  6489                           
  6490                           ;ax.c: 165: }
  6491                           ;ax.c: 167: int r0 = EUSART1_Read();
  6492  0017C0  EC3F  F011         	call	_EUSART1_Read	;wreg free
  6493  0017C4  D002               	goto	L6
  6494  0017C6                     i2l2330:
  6495                           
  6496                           ;ax.c: 169: r0 = EUSART1_Read();
  6497  0017C6  EC3F  F011         	call	_EUSART1_Read	;wreg free
  6498  0017CA                     L6:
  6499  0017CA  6E0A               	movwf	??_sendAX& (0+255),c
  6500  0017CC  500A               	movf	??_sendAX,w,c
  6501  0017CE  6E13               	movwf	sendAX@r0,c
  6502  0017D0  6A14               	clrf	sendAX@r0+1,c
  6503  0017D2  2813               	incf	sendAX@r0,w,c
  6504  0017D4  1014               	iorwf	sendAX@r0+1,w,c
  6505  0017D6  A4D8               	btfss	status,2,c
  6506  0017D8  D7F6               	goto	i2l2330
  6507                           
  6508                           ;ax.c: 170: }
  6509                           ;ax.c: 171: result[0] = r0;
  6510  0017DA  C006  FFD9         	movff	sendAX@result,fsr2l
  6511  0017DE  C007  FFDA         	movff	sendAX@result+1,fsr2h
  6512  0017E2  C013  FFDF         	movff	sendAX@r0,indf2
  6513                           
  6514                           ;ax.c: 172: for (int i = 1; i < stop; i++) {
  6515  0017E6  0E00               	movlw	0
  6516  0017E8  6E16               	movwf	sendAX@i_1381+1,c
  6517  0017EA  0E01               	movlw	1
  6518  0017EC  6E15               	movwf	sendAX@i_1381,c
  6519  0017EE  D00B               	goto	i2l2342
  6520  0017F0                     i2l2338:
  6521                           
  6522                           ;ax.c: 173: result[i] = EUSART1_Read();
  6523  0017F0  5015               	movf	sendAX@i_1381,w,c
  6524  0017F2  2406               	addwf	sendAX@result,w,c
  6525  0017F4  6ED9               	movwf	fsr2l,c
  6526  0017F6  5016               	movf	sendAX@i_1381+1,w,c
  6527  0017F8  2007               	addwfc	sendAX@result+1,w,c
  6528  0017FA  6EDA               	movwf	fsr2h,c
  6529  0017FC  EC3F  F011         	call	_EUSART1_Read	;wreg free
  6530  001800  6EDF               	movwf	indf2,c
  6531  001802  4A15               	infsnz	sendAX@i_1381,f,c
  6532  001804  2A16               	incf	sendAX@i_1381+1,f,c
  6533  001806                     i2l2342:
  6534  001806  500B               	movf	sendAX@stop,w,c
  6535  001808  5C15               	subwf	sendAX@i_1381,w,c
  6536  00180A  5016               	movf	sendAX@i_1381+1,w,c
  6537  00180C  0A80               	xorlw	128
  6538  00180E  6E0A               	movwf	??_sendAX& (0+255),c
  6539  001810  500C               	movf	sendAX@stop+1,w,c
  6540  001812  0A80               	xorlw	128
  6541  001814  580A               	subwfb	??_sendAX& (0+255),w,c
  6542  001816  A0D8               	btfss	status,0,c
  6543  001818  D7EB               	goto	i2l2338
  6544                           
  6545                           ;ax.c: 174: }
  6546                           ;ax.c: 177: _delay((unsigned long)((200)*(64000000/4000000.0)));
  6547  00181A  0E05               	movlw	5
  6548  00181C  6E0A               	movwf	??_sendAX& (0+255),c
  6549  00181E  0E26               	movlw	38
  6550  001820                     i2u211_47:
  6551  001820  2EE8               	decfsz	wreg,f,c
  6552  001822  D7FE               	bra	i2u211_47
  6553  001824  2E0A               	decfsz	??_sendAX& (0+255),f,c
  6554  001826  D7FC               	bra	i2u211_47
  6555  001828  D000               	nop2	
  6556                           
  6557                           ;ax.c: 178: return result[4];
  6558  00182A  EE20 F004          	lfsr	2,4
  6559  00182E  5006               	movf	sendAX@result,w,c
  6560  001830  26D9               	addwf	fsr2l,f,c
  6561  001832  5007               	movf	sendAX@result+1,w,c
  6562  001834  22DA               	addwfc	fsr2h,f,c
  6563  001836  50DF               	movf	indf2,w,c
  6564  001838  0012               	return	
  6565  00183A                     __end_of_sendAX:
  6566                           	opt stack 0
  6567                           pclatu	equ	0xFFB
  6568                           pclath	equ	0xFFA
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           postinc0	equ	0xFEE
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _EUSART1_Write *****************
  6590 ;; Defined at:
  6591 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  txData          1    wreg     unsigned char 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  txData          1    0[COMRAM] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6609 ;;Total ram usage:        1 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_sendAX
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text36
  6619  0022B6                     __ptext36:
  6620                           	opt stack 0
  6621  0022B6                     _EUSART1_Write:
  6622                           	opt stack 22
  6623                           
  6624                           ;incstack = 0
  6625                           ;EUSART1_Write@txData stored from wreg
  6626  0022B6  6E01               	movwf	EUSART1_Write@txData,c
  6627  0022B8                     i2l103:
  6628  0022B8  A89E               	btfss	3998,4,c	;volatile
  6629  0022BA  D7FE               	goto	i2l103
  6630                           
  6631                           ;eusart1.c: 100: }
  6632                           ;eusart1.c: 102: TXREG1 = txData;
  6633  0022BC  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6634  0022C0  0012               	return		;funcret
  6635  0022C2                     __end_of_EUSART1_Write:
  6636                           	opt stack 0
  6637                           pclatu	equ	0xFFB
  6638                           pclath	equ	0xFFA
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           intcon	equ	0xFF2
  6646                           postinc0	equ	0xFEE
  6647                           fsr0h	equ	0xFEA
  6648                           fsr0l	equ	0xFE9
  6649                           wreg	equ	0xFE8
  6650                           fsr1h	equ	0xFE2
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           fsr2h	equ	0xFDA
  6656                           fsr2l	equ	0xFD9
  6657                           status	equ	0xFD8
  6658                           
  6659 ;; *************** function _EUSART1_Read *****************
  6660 ;; Defined at:
  6661 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;		None
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;		None
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  1    wreg      unsigned char 
  6668 ;; Registers used:
  6669 ;;		wreg, status,2
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6679 ;;Total ram usage:        0 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_sendAX
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text37
  6689  00227E                     __ptext37:
  6690                           	opt stack 0
  6691  00227E                     _EUSART1_Read:
  6692                           	opt stack 22
  6693  00227E                     i2l96:
  6694  00227E  AA9E               	btfss	3998,5,c	;volatile
  6695  002280  D7FE               	goto	i2l96
  6696                           
  6697                           ;eusart1.c: 82: }
  6698                           ;eusart1.c: 85: if(1 == RCSTA1bits.OERR)
  6699  002282  A2AB               	btfss	4011,1,c	;volatile
  6700  002284  D002               	goto	i2l2266
  6701                           
  6702                           ;eusart1.c: 86: {
  6703                           ;eusart1.c: 89: RCSTA1bits.SPEN = 0;
  6704  002286  9EAB               	bcf	4011,7,c	;volatile
  6705                           
  6706                           ;eusart1.c: 90: RCSTA1bits.SPEN = 1;
  6707  002288  8EAB               	bsf	4011,7,c	;volatile
  6708  00228A                     i2l2266:
  6709                           
  6710                           ;eusart1.c: 91: }
  6711                           ;eusart1.c: 93: return RCREG1;
  6712  00228A  50AE               	movf	4014,w,c	;volatile
  6713  00228C  0012               	return	
  6714  00228E                     __end_of_EUSART1_Read:
  6715                           	opt stack 0
  6716                           pclatu	equ	0xFFB
  6717                           pclath	equ	0xFFA
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           prodh	equ	0xFF4
  6723                           prodl	equ	0xFF3
  6724                           intcon	equ	0xFF2
  6725                           postinc0	equ	0xFEE
  6726                           fsr0h	equ	0xFEA
  6727                           fsr0l	equ	0xFE9
  6728                           wreg	equ	0xFE8
  6729                           fsr1h	equ	0xFE2
  6730                           fsr1l	equ	0xFE1
  6731                           indf2	equ	0xFDF
  6732                           postinc2	equ	0xFDE
  6733                           postdec2	equ	0xFDD
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _clearState *****************
  6739 ;; Defined at:
  6740 ;;		line 308 in file "ax.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;		None
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6758 ;;Total ram usage:        0 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; This function calls:
  6761 ;;		Nothing
  6762 ;; This function is called by:
  6763 ;;		_getByteToSend
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           	psect	text38
  6768  0020D6                     __ptext38:
  6769                           	opt stack 0
  6770  0020D6                     _clearState:
  6771                           	opt stack 24
  6772                           
  6773                           ;ax.c: 309: bytesSent = 0;
  6774                           
  6775                           ;incstack = 0
  6776  0020D6  0E00               	movlw	0
  6777  0020D8  0100               	movlb	0	; () banked
  6778  0020DA  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  6779  0020DC  0E00               	movlw	0
  6780  0020DE  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;ax.c: 310: currentCommand = -1;
  6784  0020E0  0100               	movlb	0	; () banked
  6785  0020E2  69E7               	setf	_currentCommand& (0+255),b	;volatile
  6786                           
  6787                           ;ax.c: 311: parameter1 = 0;
  6788  0020E4  0E00               	movlw	0
  6789  0020E6  6E5E               	movwf	_parameter1,c	;volatile
  6790                           
  6791                           ;ax.c: 312: parameter2 = 0;
  6792  0020E8  0E00               	movlw	0
  6793  0020EA  0100               	movlb	0	; () banked
  6794  0020EC  6FA4               	movwf	_parameter2& (0+255),b	;volatile
  6795                           
  6796                           ;ax.c: 313: parameter3 = 0;
  6797  0020EE  0E00               	movlw	0
  6798  0020F0  0100               	movlb	0	; () banked
  6799  0020F2  6FA3               	movwf	_parameter3& (0+255),b	;volatile
  6800                           
  6801                           ;ax.c: 314: parameter4 = 0;
  6802  0020F4  0E00               	movlw	0
  6803  0020F6  0100               	movlb	0	; () banked
  6804  0020F8  6FA2               	movwf	_parameter4& (0+255),b	;volatile
  6805                           
  6806                           ;ax.c: 315: parameter5 = 0;
  6807  0020FA  0E00               	movlw	0
  6808  0020FC  0100               	movlb	0	; () banked
  6809  0020FE  6FA1               	movwf	_parameter5& (0+255),b	;volatile
  6810                           
  6811                           ;ax.c: 316: parameter6 = 0;
  6812  002100  0E00               	movlw	0
  6813  002102  0100               	movlb	0	; () banked
  6814  002104  6FA0               	movwf	_parameter6& (0+255),b	;volatile
  6815                           
  6816                           ;ax.c: 317: readIndex = 0;
  6817  002106  0E00               	movlw	0
  6818  002108  0100               	movlb	0	; () banked
  6819  00210A  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  6820  00210C  0E00               	movlw	0
  6821  00210E  6F98               	movwf	_readIndex& (0+255),b	;volatile
  6822                           
  6823                           ; BSR set to: 0
  6824  002110  0012               	return		;funcret
  6825  002112                     __end_of_clearState:
  6826                           	opt stack 0
  6827                           pclatu	equ	0xFFB
  6828                           pclath	equ	0xFFA
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           postinc0	equ	0xFEE
  6837                           fsr0h	equ	0xFEA
  6838                           fsr0l	equ	0xFE9
  6839                           wreg	equ	0xFE8
  6840                           fsr1h	equ	0xFE2
  6841                           fsr1l	equ	0xFE1
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _ADC_ISR *****************
  6850 ;; Defined at:
  6851 ;;		line 127 in file "mcc_generated_files/adc.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		None
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; This function calls:
  6872 ;;		Nothing
  6873 ;; This function is called by:
  6874 ;;		_INTERRUPT_InterruptManager
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text39
  6879  0022D4                     __ptext39:
  6880                           	opt stack 0
  6881  0022D4                     _ADC_ISR:
  6882                           	opt stack 26
  6883                           
  6884                           ;adc.c: 130: PIR1bits.ADIF = 0;
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;incstack = 0
  6888  0022D4  9C9E               	bcf	3998,6,c	;volatile
  6889  0022D6  0012               	return		;funcret
  6890  0022D8                     __end_of_ADC_ISR:
  6891                           	opt stack 0
  6892                           pclatu	equ	0xFFB
  6893                           pclath	equ	0xFFA
  6894                           tblptru	equ	0xFF8
  6895                           tblptrh	equ	0xFF7
  6896                           tblptrl	equ	0xFF6
  6897                           tablat	equ	0xFF5
  6898                           prodh	equ	0xFF4
  6899                           prodl	equ	0xFF3
  6900                           intcon	equ	0xFF2
  6901                           postinc0	equ	0xFEE
  6902                           fsr0h	equ	0xFEA
  6903                           fsr0l	equ	0xFE9
  6904                           wreg	equ	0xFE8
  6905                           fsr1h	equ	0xFE2
  6906                           fsr1l	equ	0xFE1
  6907                           indf2	equ	0xFDF
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           pclatu	equ	0xFFB
  6914                           pclath	equ	0xFFA
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodh	equ	0xFF4
  6920                           prodl	equ	0xFF3
  6921                           intcon	equ	0xFF2
  6922                           postinc0	equ	0xFEE
  6923                           fsr0h	equ	0xFEA
  6924                           fsr0l	equ	0xFE9
  6925                           wreg	equ	0xFE8
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935                           	psect	rparam
  6936  0000                     pclatu	equ	0xFFB
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           postinc0	equ	0xFEE
  6946                           fsr0h	equ	0xFEA
  6947                           fsr0l	equ	0xFE9
  6948                           wreg	equ	0xFE8
  6949                           fsr1h	equ	0xFE2
  6950                           fsr1l	equ	0xFE1
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958                           	psect	temp
  6959  00005F                     btemp:
  6960                           	opt stack 0
  6961  00005F                     	ds	1
  6962  0000                     int$flags	set	btemp
  6963                           pclatu	equ	0xFFB
  6964                           pclath	equ	0xFFA
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           postinc0	equ	0xFEE
  6973                           fsr0h	equ	0xFEA
  6974                           fsr0l	equ	0xFE9
  6975                           wreg	equ	0xFE8
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8


Data Sizes:
    Strings     73
    Constant    40
    Data        3
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     93      94
    BANK0           160     65     138
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_5(CODE[15]), STR_4(CODE[18]), STR_3(CODE[17]), STR_2(CODE[13]), 
		 -> STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(COMRAM[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_ISR->_getByteToSend
    i2_printf->i2___llmod
    i2_putch->i2_EUSART2_Write
    i2___llmod->i2___lldiv
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_readAXData
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3322
                                             54 BANK0     11    11      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    1348
                                             36 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             15 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             27 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             14 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1415
                                             22 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             14 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             14 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             14 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    7438
                                              0 BANK0     14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              0     0      0    7438
                      _getByteToSend
                 _handleByteReceived
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            23    21      2     928
                                             22 COMRAM    14    12      2
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (8) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2___llmod                                            9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0     394
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _getByteToSend                                       15    15      0    6116
                                             79 COMRAM    14    14      0
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
                i2_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (7) i2_ADC_GetConversion                                  5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _writeAXData                                         55    49      6    2167
                                             23 COMRAM    55    49      6
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (7) _readAXData                                          56    52      4    2037
                                             23 COMRAM    56    52      4
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _pingAX                                              51    49      2    1639
                                             23 COMRAM    51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _sendAX                                              22    14      8    1310
                                              1 COMRAM    22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _getByteToSend
       _clearState
       _pingAX
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _readAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _writeAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       i2_ADC_GetConversion
     _handleByteReceived
       _setLedOff
       _setLedOn
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_EUSART2_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      8A       5       86.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5D      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E8       6        0.0%
DATA                 0      0      E8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 01 23:40:02 2017

                        _SSPSTATbits 000FC7                                   l31 22A0  
                       ___awdiv@sign 00B9                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l253 20B4                                  l342 1014  
                                l417 1D32                                  l382 10C8  
                                l385 10CA                                  l627 1226  
                                l990 1AD6                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000           __end_of_handleByteReceived 196E  
                    __end_of_I2C_ISR 1B94                      _timer1ReloadVal 009C  
                    __end_of_ADC_ISR 22D8                                  prod 000FF3  
                                wreg 000FE8                                 l1000 1C1C  
                               l3040 0F94                                 l3130 1112  
                               l3122 10E2                                 l3036 0F7E  
                               l3126 10FC                                 l3118 10CE  
                               l3046 0FBA                                 l3144 11A4  
                               l3138 118E                                 l3068 0FFE  
                               l2720 19CA                                 l2712 19A0  
                               l2730 1A00                                 l2722 19D0  
                               l2706 198A                                 l2718 19BE  
                               l2734 1A0E                                 l2750 1A6A  
                               l2910 11EE                                 l2760 1AC4  
                               l2752 1A70                                 l2920 1248  
                               l2904 11D2                                 l2738 1A22  
                               l2770 1BC0                                 l2930 128C  
                               l2914 11F2                                 l2748 1A5A  
                               l2772 1BC6                                 l2932 1292  
                               l2908 11E6                                 l2950 1302  
                               l2776 1C0A                                 l2768 1BB0  
                               l2944 12DE                                 l2954 1392  
                               l2948 12F2                                 l2956 13A8  
                               l2992 1D1A                                 l2986 1CDC  
                               l2988 1CF0                                 STR_1 0F68  
                               STR_2 0F5B                                 STR_3 0F3B  
                               STR_4 0F29                                 STR_5 0F4C  
                               _LATA 000F89                                 _LATB 000F8A  
                               u2055 1120                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u2087 1CE4                                 u2097 1D22  
                               i2l31 22AC                                 i2l96 227E  
                       main@adc_1272 00E3                                 _WPUB 000F5B  
                      _EUSART1_Write 22B6                        _EUSART2_Write 229C  
                               _main 0F74                        ?_EUSART1_Read 0001  
                               _junk 00A5                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005F                                 prodh 000FF4  
                               prodl 000FF3                                 start 0096  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                    __end_ofi2_putch 22CC                       readAXData@size 004E  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                        _writeAXData 1D54             __size_ofi2_EUSART2_Write 000C  
                 writeAXData@address 001A              __size_of_getAddressSize 0078  
     __size_of_OSCILLATOR_Initialize 0012        __end_of_OSCILLATOR_Initialize 227E  
                              ?_main 0001                                _BCLIF 007D0B  
                    __end_of___awdiv 1A2C                      _TMR1_StartTimer 22CC  
                    __end_of___lldiv 1AE8                      ___awdiv@divisor 00B6  
                              _T1CON 000FCD                      __end_of___llmod 1C2E  
                              i2l103 22B8                                i2l152 1AF2  
                              i2l253 21D4                                i2l501 1EFA  
                              i2l309 005A                                i2l504 1EFE  
                              i2l507 1F02                                i2l451 1E6C  
                              i2l460 1E78                                i2l444 1E64  
                              i2l454 1E70                                i2l463 1E7C  
                              i2l472 1E88                                i2l448 1E68  
                              i2l545 1D9E                                i2l457 1E74  
                              i2l466 1E80                                i2l483 1EE2  
                              i2l627 141A                                i2l492 1EEE  
                              i2l469 1E84                                i2l486 1EE6  
                              i2l495 1EF2                                i2l479 1EDE  
                              i2l489 1EEA                                i2l498 1EF6  
                    ___awdiv@counter 00B8                                i2l990 1E50  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _SSPIF 007CF3  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                      __end_of_dpowers 0F29  
                              _first 00E8                    getByteToSend@xlow 0055  
                              _putch 228E                                main@i 00DD  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 214C  
                     ?_EUSART2_Write 0001                                pclath 000FFA  
                              tablat 000FF5               readAXData@nbParameters 0048  
                     ??_EUSART1_Read 0001                                status 000FD8  
                 __size_ofi2___lldiv 0082                   __size_ofi2___llmod 0066  
                    readAXData@error 0032                     __end_ofi2_printf 1582  
                    __initialization 2186                    i2___lldiv@divisor 0005  
         __end_of_EUSART1_Initialize 226C                         __end_of_main 11C4  
                  i2___lldiv@counter 000D                           i2printf@ap 001D  
                          ??_I2C_ISR 005E                            ??_ADC_ISR 0001  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 00DC  
                      __activetblptr 000003                       __CFG_PLLCFG$ON 000000  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 2256  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     ___llmod@dividend 00C1  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ANCON0 000F5D                               _ANCON1 000F5C  
                   ___awdiv@dividend 00B4                               ?_putch 0001  
                             _T1GCON 000FAA                               i2l1000 2022  
                    __CFG_BBSIZ$BB2K 000000                               i2l2310 1758  
                             i2l2330 17C6                               i2l2322 1798  
                             i2l2306 1742                               i2l3026 004E  
                             i2l2342 1806                               i2l2326 17AC  
                             i2l2280 1F62                               i2l2512 2014  
                             i2l2504 1FE0                               i2l2266 228A  
                             i2l2338 17F0                               i2l2610 16FA  
                             i2l2506 1FEC                               i2l2276 1F58  
                             i2l2428 1CB2                               i2l2364 1E8C  
                             i2l2508 1FF0                               i2l2294 170C  
                             i2l2286 1F6C                               i2l2374 1F06  
                     __CFG_WDTEN$OFF 000000                               i2l2456 1DA6  
                             i2l2560 15FA                               i2l2544 15B8  
                             i2l2632 188E                               i2l2298 1720  
                             i2l2650 18E4                               i2l2626 186E  
                             i2l2810 1478                               i2l2572 163C  
                             i2l2644 18C4                               i2l2484 1E02  
                             i2l2900 1B90                               i2l2590 16A8  
                             i2l2662 1918                               i2l2486 1E0E  
                             i2l2822 14B6                               i2l2680 1966  
                             i2l2656 18FE                               i2l2496 1E42  
                             i2l2488 1E12                               i2l2832 1556  
                             i2l2808 1474                               i2l2674 194C  
                             i2l2826 14C8                               i2l2834 1566  
                             i2l2668 1932                               i2l2828 14D4  
                             i2l2852 1B10                               i2l2860 1B26  
                             i2l2598 16BC                               i2l2782 13D2  
                             i2l2870 1B3A                               i2l2792 13EA  
                             i2l2880 1B5E                               i2l2786 13E2  
                             i2l2882 1B64                               i2l2890 1B78  
                             i2l2788 13E8                               i2l2798 143A  
                             i2l2888 1B76                        i2putch@txData 0002  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                            ??i2_putch 0002  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _TXREG1 000FAD                               _TXREG2 000F79  
                             _TXSTA1 000FAC                               _TXSTA2 000FBA  
                   __end_of_delay_ms 1D54                       __CFG_XINST$OFF 000000  
                     sendAX@checksum 0017              __end_of_TMR1_StartTimer 22D0  
                          ??___awdiv 00B8                       __CFG_STVREN$ON 000000  
                          ??___lldiv 00BC                   getByteToSend@error 0051  
                          ??___llmod 00C9                   getByteToSend@value 005A  
                 getByteToSend@xhigh 0056                               _pingAX 2034  
                             _sendAX 16FE                               clear_0 21AA  
                   ___awdiv@quotient 00BA              __size_of_I2C_Initialize 001A  
                             _printf 11C4                     __end_of_setLedOn 1EDC  
                  ??i2_EUSART2_Write 0001                    __end_ofi2___lldiv 1E62  
                  __end_ofi2___llmod 2034                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 00B8  
                    ??_EUSART1_Write 0001                      ??_EUSART2_Write 00B4  
      __size_of_INTERRUPT_Initialize 0004                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 21EC                           __accesstop 0060  
            __end_of__initialization 21B2                     readAXData@packet 0034  
                   readAXData@length 004A                   ?_SYSTEM_Initialize 0001  
                        pingAX@error 0049                        ___rparam_used 000001  
                   readAXData@result 001E                    i2___llmod@divisor 0012  
                  i2___llmod@counter 0016                         readAXData@id 0018  
       __size_ofi2_ADC_GetConversion 0030                       __pcstackCOMRAM 0001  
                 i2___lldiv@dividend 0001                         __pidataBANK0 22D8  
              readAXData@instruction 004C                  ??_SYSTEM_Initialize 00B6  
              __end_of_getByteToSend 16FE                       _getAddressSize 1F56  
                         _adc_values 0080                        __end_of_putch 229C  
                        i2printf@val 0020                 __end_of_EUSART1_Read 228E  
                          ?i2_printf 0017            __end_of_SYSTEM_Initialize 220E  
                            ??_putch 00B5                   i2___lldiv@quotient 0009  
                         _dataToSend 0060                           __pbssBANK0 0060  
             sendAX@parametersToRead 0008                   _handleByteReceived 183A  
                        setLedOn@led 0001                           _clearState 20D6  
                ?_handleByteReceived 0001               __end_of_getAddressSize 1FCE  
                       ?_writeAXData 0018                   __size_of_setLedOff 007A  
                   ?_TMR1_StartTimer 0001                              _I2C_ISR 1AE8  
                            _ADC_ISR 22D4                              ?_pingAX 0018  
                            ?_sendAX 0002                              ?_printf 00CA  
            __size_of_ADC_Initialize 0018                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                              _OSCCON2 000FD2  
                          ?_delay_ms 00BC                 ??_handleByteReceived 0005  
                         ??i2_printf 0019                              _OSCTUNE 000F9B  
                            _SPBRGH1 000F7D                              _SPBRGH2 000F7C  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                              i2_putch 22C2  
                    writeAXData@data 001C               getByteToSend@xlow_1441 0057  
                    writeAXData@size 004D                           _readAXData 1C2E  
                          ?_setLedOn 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                getAddressSize@address 0001  
                            __Lparam 0000                      ?_getAddressSize 0001  
                            ___awdiv 196E                              ___lldiv 1A2C  
                            ___llmod 1B94                         __psmallconst 0F00  
                            __pcinit 2186                       _I2C_Initialize 220E  
                    __size_of_pingAX 0062                              __ramtop 0F00  
                    __size_of_sendAX 013C                              __ptext0 0F74  
                            __ptext1 11C4                              __ptext2 228E  
                            __ptext3 229C                              __ptext4 1B94  
                            __ptext5 1A2C                              __ptext6 1CC6  
                            __ptext7 196E                              __ptext8 21EC  
                            __ptext9 2112                      __size_of_printf 0204  
                         _parameter1 005E                           _parameter2 00A4  
                         _parameter3 00A3                           _parameter4 00A2  
                         _parameter5 00A1                           _parameter6 00A0  
                          _T1CONbits 000FCD                              _dpowers 0F01  
              _OSCILLATOR_Initialize 226C                   _EUSART1_Initialize 2256  
           ??_PIN_MANAGER_Initialize 00B4                    __CFG_MSSPMSK$MSK7 000000  
                         ??_delay_ms 00BE                              main@adc 00E1  
                  __end_of_setLedOff 1F56           __size_of_SYSTEM_Initialize 0022  
              i2EUSART2_Write@txData 0001                           delay_ms@ms 00BC  
               end_of_initialization 21B2                  ?_EUSART1_Initialize 0001  
             handleByteReceived@data 0007                              sendAX@i 000D  
                         ??_setLedOn 0003                      ___lldiv@divisor 00B8  
                        ?_clearState 0001                      ___lldiv@counter 00C0  
                 _EUSART2_Initialize 2240                      i2_EUSART2_Write 22AA  
                            printf@c 00DB                              printf@f 00CA  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                __size_of_EUSART1_Read 0010  
             __end_of_I2C_Initialize 2228                 ??_EUSART1_Initialize 00B4  
                ?_EUSART2_Initialize 0001                            _PORTCbits 000F82  
                  readAXData@address 001A                  i2_ADC_GetConversion 21BC  
                         main@i_1270 00DF                  EUSART1_Write@txData 0001  
                          i2___lldiv 1DE0                            i2___llmod 1FCE  
               ??_EUSART2_Initialize 00B4                       getByteToSend@d 0059  
                       pingAX@packet 002F                         pingAX@length 0045  
                  pingAX@instruction 0047                         pingAX@result 001B  
             writeAXData@instruction 0049                         _EUSART1_Read 227E  
                 i2___llmod@dividend 000E                          ?_readAXData 0018  
               ?i2_ADC_GetConversion 0001                         sendAX@i_1381 0015  
                       sendAX@i_1375 000F                         sendAX@i_1378 0011  
       __end_of_INTERRUPT_Initialize 22D4                      ?_I2C_Initialize 0001  
                  writeAXData@packet 0033                    writeAXData@length 0047  
               __size_of_writeAXData 008C                    writeAXData@result 001F  
                     _ADC_Initialize 2228               ?_OSCILLATOR_Initialize 0001  
                       sendAX@buffer 0002                       __end_of_pingAX 2096  
                     __end_of_sendAX 183A                  handleByteReceived@i 0005  
                     __end_of_printf 13C8                         sendAX@result 0006  
                       i2printf@flag 001F                         i2printf@prec 001B  
                start_initialization 2186      __size_of_PIN_MANAGER_Initialize 003A  
                __size_of_clearState 003C                            i2printf@c 0024  
                          i2printf@f 0017                           ?i2___lldiv 0001  
                         ?i2___llmod 000E                          putch@txData 00B5  
                  __size_ofi2_printf 01BA                __end_of_EUSART1_Write 22C2  
              __end_of_EUSART2_Write 22AA              __end_ofi2_EUSART2_Write 22B6  
                    ___llmod@divisor 00C5                      ___llmod@counter 00C9  
              ??i2_ADC_GetConversion 0003                       _currentCommand 00E7  
           __size_of_TMR1_Initialize 003A                   pingAX@nbParameters 0043  
             __end_of_ADC_Initialize 2240                          __pdataBANK0 00E7  
                           ?_I2C_ISR 0001                             ?_ADC_ISR 0001  
                           ??_pingAX 001A                             ??_sendAX 000A  
                           ??_printf 00D0                          __pbssCOMRAM 005E  
                __size_of_readAXData 0098                        __pcstackBANK0 00A6  
                       setLedOff@led 0001                           sendAX@stop 000B  
                  __size_of_delay_ms 008E                  EUSART2_Write@txData 00B4  
             __size_of_getByteToSend 017C                             ?i2_putch 0001  
                   ??_getAddressSize 0003              getByteToSend@error_1438 0053  
             _PIN_MANAGER_Initialize 214C                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 00B4  
                           ?___lldiv 00B4                             ?___llmod 00C1  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 00A6  
                        __smallconst 0F00                             _BAUDCON1 000FA7  
                           _BAUDCON2 000FB9             __size_of_TMR1_StartTimer 0004  
                          _index_i2c 009E                        _nbBytesToSend 0096  
        __size_of_handleByteReceived 0134                            _readIndex 0098  
                          _bytesSent 0094       getByteToSend@i2c_data_received 0001  
                        ??i2___lldiv 0009                          ??i2___llmod 0016  
                     __size_of_putch 000E                 _INTERRUPT_Initialize 22D0  
            getByteToSend@value_1440 005C                            _setLedOff 1EDC  
                   ?i2_EUSART2_Write 0001                             _LATBbits 000F8A  
                           _LATCbits 000F8B                             _LATDbits 000F8C  
                          delay_ms@i 00C1                            delay_ms@n 00BF  
                           _PIE1bits 000F9D                         ??_clearState 0001  
                           i2u210_47 1774                             i2u211_47 1820  
                           i2u133_40 186C                             i2u134_40 188C  
__size_of_INTERRUPT_InterruptManager 008E                             i2u129_45 1650  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _RCONbits 000FD0                        _getByteToSend 1582  
            getByteToSend@xhigh_1442 0058                     __size_of_I2C_ISR 00AC  
                  ??_TMR1_Initialize 00B4                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                     __CFG_SOSCSEL$DIG 000000  
                         printf@flag 00D6                            main@delay 00E5  
                         printf@prec 00D2                             i2_printf 13C8  
                 __end_of_clearState 2112                     writeAXData@error 004B  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                   __size_ofi2_putch 000A                         ??_readAXData 001C  
                   ??_I2C_Initialize 00B4                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 2096  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 00B4                   ?_ADC_GetConversion 00B4  
                   __size_of___awdiv 00BE                     __size_of___lldiv 00BC  
                   __size_of___llmod 009A          __size_of_EUSART1_Initialize 0016  
              _TMR1_InterruptHandler 009A                  ??_ADC_GetConversion 00B6  
                           _delay_ms 1CC6                   __end_of_readAXData 1CC6  
                           __ptext10 22CC                             __ptext11 214C  
                           __ptext20 1AE8                             __ptext12 226C  
                           __ptext21 13C8                             __ptext13 22D0  
                         _T1GCONbits 000FAA                             __ptext30 21BC  
                           __ptext22 22C2                             __ptext14 220E  
                           __ptext31 1D54                             __ptext23 22AA  
                           __ptext15 2240                             __ptext32 1C2E  
                           __ptext24 1FCE                             __ptext16 2256  
                           __ptext33 1F56                             __ptext25 1DE0  
                           __ptext17 2228                             __ptext34 2034  
                           __ptext26 183A                             __ptext18 2096  
                           __ptext35 16FE                             __ptext27 1E62  
                           __ptext36 22B6                             __ptext28 1EDC  
                           __ptext37 227E                             __ptext29 1582  
                           __ptext38 20D6                             __ptext39 22D4  
                  ??_TMR1_StartTimer 00B4                        writeAXData@id 0018  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 0250  
                           _setLedOn 1E62            __end_of_ADC_GetConversion 20D6  
                      ??_writeAXData 001E                             int$flags 005F  
 __end_of_INTERRUPT_InterruptManager 0096           _INTERRUPT_InterruptManager 0008  
                          printf@val 00D7                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0004                   _I2C_slaveWriteData 00E9  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 00B4  
                           pingAX@id 0018                             sendAX@r0 0013  
                           intlevel2 0000          __end_ofi2_ADC_GetConversion 21EC  
                        ??_setLedOff 0003                     ___lldiv@dividend 00B4  
            ?_PIN_MANAGER_Initialize 0001                           _RCSTA1bits 000FAB  
                         _RCSTA2bits 000FA6                     ??_ADC_Initialize 00B4  
                    ??_getByteToSend 0050                             printf@ap 00D4  
                 __CFG_WDTPS$1048576 000000               __size_of_EUSART1_Write 000C  
             __size_of_EUSART2_Write 000E                  __end_of_writeAXData 1DE0  
                   ___lldiv@quotient 00BC           i2ADC_GetConversion@channel 0005  
                        _SSPCON1bits 000FC6       __end_of_PIN_MANAGER_Initialize 2186  
                __CFG_BORPWR$ZPBORMV 000000           __size_of_ADC_GetConversion 0040  
                    _TMR1_Initialize 2112  
