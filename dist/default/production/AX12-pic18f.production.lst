

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat May 06 22:22:50 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F46K80 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataBANK0
    92  0022CC                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _currentCommand
    96  0022CC  FF                 	db	255
    97                           
    98                           ;initializer for _first
    99  0022CD  01                 	db	1
   100                           
   101                           ;initializer for _I2C_slaveWriteData
   102  0022CE  55                 	db	85
   103                           
   104                           	psect	smallconst
   105  000F00                     __psmallconst:
   106                           	opt stack 0
   107  000F00  00                 	db	0
   108  000F01                     _dpowers:
   109                           	opt stack 0
   110  000F01  0001               	dw	1
   111  000F03  0000               	dw	0
   112  000F05  000A               	dw	10
   113  000F07  0000               	dw	0
   114  000F09  0064               	dw	100
   115  000F0B  0000               	dw	0
   116  000F0D  03E8               	dw	1000
   117  000F0F  0000               	dw	0
   118  000F11  2710               	dw	10000
   119  000F13  0000               	dw	0
   120  000F15  86A0               	dw	34464
   121  000F17  0001               	dw	1
   122  000F19  4240               	dw	16960
   123  000F1B  000F               	dw	15
   124  000F1D  9680               	dw	38528
   125  000F1F  0098               	dw	152
   126  000F21  E100               	dw	57600
   127  000F23  05F5               	dw	1525
   128  000F25  CA00               	dw	51712
   129  000F27  3B9A               	dw	15258
   130  000F29                     __end_of_dpowers:
   131                           	opt stack 0
   132  0000                     _WPUB	set	3931
   133  0000                     _ANCON1	set	3932
   134  0000                     _ANCON0	set	3933
   135  0000                     _LATBbits	set	3978
   136  0000                     _LATCbits	set	3979
   137  0000                     _LATDbits	set	3980
   138  0000                     _INTCONbits	set	4082
   139  0000                     _RCONbits	set	4048
   140  0000                     _REFOCON	set	3994
   141  0000                     _OSCTUNE	set	3995
   142  0000                     _OSCCON2	set	4050
   143  0000                     _OSCCON	set	4051
   144  0000                     _ADCON0bits	set	4034
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADCON2	set	4032
   148  0000                     _ADCON1	set	4033
   149  0000                     _ADCON0	set	4034
   150  0000                     _T1GCONbits	set	4010
   151  0000                     _T1CONbits	set	4045
   152  0000                     _TMR1L	set	4046
   153  0000                     _TMR1H	set	4047
   154  0000                     _T1GCON	set	4010
   155  0000                     _T1CON	set	4045
   156  0000                     _PORTCbits	set	3970
   157  0000                     _SSPCON1bits	set	4038
   158  0000                     _SSPBUF	set	4041
   159  0000                     _SSPSTATbits	set	4039
   160  0000                     _PIE1bits	set	3997
   161  0000                     _SSPADD	set	4040
   162  0000                     _SSPCON2	set	4037
   163  0000                     _SSPCON1	set	4038
   164  0000                     _SSPSTAT	set	4039
   165  0000                     _TXREG1	set	4013
   166  0000                     _RCREG1	set	4014
   167  0000                     _RCSTA1bits	set	4011
   168  0000                     _PIR1bits	set	3998
   169  0000                     _SPBRGH1	set	3965
   170  0000                     _SPBRG1	set	4015
   171  0000                     _TXSTA1	set	4012
   172  0000                     _RCSTA1	set	4011
   173  0000                     _BAUDCON1	set	4007
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISC	set	3988
   176  0000                     _TRISB	set	3987
   177  0000                     _TRISA	set	3986
   178  0000                     _TRISE	set	3990
   179  0000                     _LATC	set	3979
   180  0000                     _LATB	set	3978
   181  0000                     _LATA	set	3977
   182  0000                     _LATD	set	3980
   183  0000                     _LATE	set	3981
   184  0000                     _TXREG2	set	3961
   185  0000                     _RCREG2	set	3962
   186  0000                     _RCSTA2bits	set	4006
   187  0000                     _PIR3bits	set	4004
   188  0000                     _SPBRGH2	set	3964
   189  0000                     _SPBRG2	set	3963
   190  0000                     _TXSTA2	set	4026
   191  0000                     _RCSTA2	set	4006
   192  0000                     _BAUDCON2	set	4025
   193  0000                     _BCLIF	set	32011
   194  0000                     _SSPIF	set	31987
   195  000F29                     STR_4:
   196  000F29  52                 	db	82	;'R'
   197  000F2A  65                 	db	101	;'e'
   198  000F2B  61                 	db	97	;'a'
   199  000F2C  64                 	db	100	;'d'
   200  000F2D  69                 	db	105	;'i'
   201  000F2E  6E                 	db	110	;'n'
   202  000F2F  67                 	db	103	;'g'
   203  000F30  20                 	db	32
   204  000F31  61                 	db	97	;'a'
   205  000F32  6C                 	db	108	;'l'
   206  000F33  6C                 	db	108	;'l'
   207  000F34  20                 	db	32
   208  000F35  41                 	db	65	;'A'
   209  000F36  44                 	db	68	;'D'
   210  000F37  43                 	db	67	;'C'
   211  000F38  0D                 	db	13
   212  000F39  0A                 	db	10
   213  000F3A  00                 	db	0
   214  000F3B                     STR_3:
   215  000F3B  49                 	db	73	;'I'
   216  000F3C  6E                 	db	110	;'n'
   217  000F3D  69                 	db	105	;'i'
   218  000F3E  74                 	db	116	;'t'
   219  000F3F  20                 	db	32
   220  000F40  63                 	db	99	;'c'
   221  000F41  6F                 	db	111	;'o'
   222  000F42  6D                 	db	109	;'m'
   223  000F43  70                 	db	112	;'p'
   224  000F44  6C                 	db	108	;'l'
   225  000F45  65                 	db	101	;'e'
   226  000F46  74                 	db	116	;'t'
   227  000F47  65                 	db	101	;'e'
   228  000F48  64                 	db	100	;'d'
   229  000F49  0D                 	db	13
   230  000F4A  0A                 	db	10
   231  000F4B  00                 	db	0
   232  000F4C                     STR_5:
   233  000F4C  41                 	db	65	;'A'
   234  000F4D  44                 	db	68	;'D'
   235  000F4E  43                 	db	67	;'C'
   236  000F4F  20                 	db	32
   237  000F50  25                 	db	37
   238  000F51  64                 	db	100	;'d'
   239  000F52  20                 	db	32
   240  000F53  3A                 	db	58	;':'
   241  000F54  20                 	db	32
   242  000F55  25                 	db	37
   243  000F56  6C                 	db	108	;'l'
   244  000F57  64                 	db	100	;'d'
   245  000F58  0D                 	db	13
   246  000F59  0A                 	db	10
   247  000F5A  00                 	db	0
   248  000F5B                     STR_2:
   249  000F5B  50                 	db	80	;'P'
   250  000F5C  4D                 	db	77	;'M'
   251  000F5D  20                 	db	32
   252  000F5E  52                 	db	82	;'R'
   253  000F5F  6F                 	db	111	;'o'
   254  000F60  62                 	db	98	;'b'
   255  000F61  6F                 	db	111	;'o'
   256  000F62  74                 	db	116	;'t'
   257  000F63  69                 	db	105	;'i'
   258  000F64  78                 	db	120	;'x'
   259  000F65  0D                 	db	13
   260  000F66  0A                 	db	10
   261  000F67  00                 	db	0
   262  000F68                     STR_1:
   263  000F68  63                 	db	99	;'c'
   264  000F69  6F                 	db	111	;'o'
   265  000F6A  6C                 	db	108	;'l'
   266  000F6B  6C                 	db	108	;'l'
   267  000F6C  69                 	db	105	;'i'
   268  000F6D  64                 	db	100	;'d'
   269  000F6E  65                 	db	101	;'e'
   270  000F6F  0D                 	db	13
   271  000F70  0A                 	db	10
   272  000F71  00                 	db	0
   273                           
   274                           ; #config settings
   275  000F72  00                 	db	0	; dummy byte at the end
   276  0000                     
   277                           	psect	cinit
   278  00217C                     __pcinit:
   279                           	opt stack 0
   280  00217C                     start_initialization:
   281                           	opt stack 0
   282  00217C                     __initialization:
   283                           	opt stack 0
   284                           
   285                           ; Initialize objects allocated to BANK0 (3 bytes)
   286                           ; load TBLPTR registers with __pidataBANK0
   287  00217C  0ECC               	movlw	low __pidataBANK0
   288  00217E  6EF6               	movwf	tblptrl,c
   289  002180  0E22               	movlw	high __pidataBANK0
   290  002182  6EF7               	movwf	tblptrh,c
   291  002184  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   292  002186  6EF8               	movwf	tblptru,c
   293  002188  0009               	tblrd		*+	;fetch initializer
   294  00218A  CFF5 F0E8          	movff	tablat,__pdataBANK0
   295  00218E  0009               	tblrd		*+	;fetch initializer
   296  002190  CFF5 F0E9          	movff	tablat,__pdataBANK0+1
   297  002194  0009               	tblrd		*+	;fetch initializer
   298  002196  CFF5 F0EA          	movff	tablat,__pdataBANK0+2
   299                           
   300                           ; Clear objects allocated to BANK0 (71 bytes)
   301  00219A  EE00  F060         	lfsr	0,__pbssBANK0
   302  00219E  0E47               	movlw	71
   303  0021A0                     clear_0:
   304  0021A0  6AEE               	clrf	postinc0,c
   305  0021A2  06E8               	decf	wreg,f,c
   306  0021A4  E1FD               	bnz	clear_0
   307  0021A6                     end_of_initialization:
   308                           	opt stack 0
   309  0021A6                     __end_of__initialization:
   310                           	opt stack 0
   311  0021A6  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   312  0021A8  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   313  0021AA  0100               	movlb	0
   314  0021AC  EFBA  F007         	goto	_main	;jump to C main() function
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           
   322                           	psect	bssBANK0
   323  000060                     __pbssBANK0:
   324                           	opt stack 0
   325  000060                     _dataToSend:
   326                           	opt stack 0
   327  000060                     	ds	32
   328  000080                     _adc_values:
   329                           	opt stack 0
   330  000080                     	ds	20
   331  000094                     _bytesSent:
   332                           	opt stack 0
   333  000094                     	ds	2
   334  000096                     _nbBytesToSend:
   335                           	opt stack 0
   336  000096                     	ds	2
   337  000098                     _readIndex:
   338                           	opt stack 0
   339  000098                     	ds	2
   340  00009A                     _TMR1_InterruptHandler:
   341                           	opt stack 0
   342  00009A                     	ds	2
   343  00009C                     _timer1ReloadVal:
   344                           	opt stack 0
   345  00009C                     	ds	2
   346  00009E                     _index_i2c:
   347                           	opt stack 0
   348  00009E                     	ds	2
   349  0000A0                     _parameter6:
   350                           	opt stack 0
   351  0000A0                     	ds	1
   352  0000A1                     _parameter5:
   353                           	opt stack 0
   354  0000A1                     	ds	1
   355  0000A2                     _parameter4:
   356                           	opt stack 0
   357  0000A2                     	ds	1
   358  0000A3                     _parameter3:
   359                           	opt stack 0
   360  0000A3                     	ds	1
   361  0000A4                     _parameter2:
   362                           	opt stack 0
   363  0000A4                     	ds	1
   364  0000A5                     _parameter1:
   365                           	opt stack 0
   366  0000A5                     	ds	1
   367  0000A6                     _junk:
   368                           	opt stack 0
   369  0000A6                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	dataBANK0
   378  0000E8                     __pdataBANK0:
   379                           	opt stack 0
   380  0000E8                     _currentCommand:
   381                           	opt stack 0
   382  0000E8                     	ds	1
   383  0000E9                     _first:
   384                           	opt stack 0
   385  0000E9                     	ds	1
   386  0000EA                     _I2C_slaveWriteData:
   387                           	opt stack 0
   388  0000EA                     	ds	1
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           
   396                           	psect	cstackBANK0
   397  0000A7                     __pcstackBANK0:
   398                           	opt stack 0
   399  0000A7                     ??_INTERRUPT_InterruptManager:
   400                           
   401                           ; 1 bytes @ 0x0
   402  0000A7                     	ds	14
   403  0000B5                     ??_TMR1_Initialize:
   404  0000B5                     ?_ADC_GetConversion:
   405                           	opt stack 0
   406  0000B5                     ?___awdiv:
   407                           	opt stack 0
   408  0000B5                     ?___lldiv:
   409                           	opt stack 0
   410  0000B5                     EUSART2_Write@txData:
   411                           	opt stack 0
   412  0000B5                     ___awdiv@dividend:
   413                           	opt stack 0
   414  0000B5                     ___lldiv@dividend:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0xE
   418  0000B5                     	ds	1
   419  0000B6                     putch@txData:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0xF
   423  0000B6                     	ds	1
   424  0000B7                     ??_ADC_GetConversion:
   425  0000B7                     ___awdiv@divisor:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x10
   429  0000B7                     	ds	2
   430  0000B9                     ADC_GetConversion@channel:
   431                           	opt stack 0
   432  0000B9                     ___awdiv@counter:
   433                           	opt stack 0
   434  0000B9                     ___lldiv@divisor:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x12
   438  0000B9                     	ds	1
   439  0000BA                     ___awdiv@sign:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x13
   443  0000BA                     	ds	1
   444  0000BB                     ___awdiv@quotient:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x14
   448  0000BB                     	ds	2
   449  0000BD                     delay_ms@ms:
   450                           	opt stack 0
   451  0000BD                     ___lldiv@quotient:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x16
   455  0000BD                     	ds	2
   456  0000BF                     ??_delay_ms:
   457                           
   458                           ; 1 bytes @ 0x18
   459  0000BF                     	ds	1
   460  0000C0                     delay_ms@n:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x19
   464  0000C0                     	ds	1
   465  0000C1                     ___lldiv@counter:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x1A
   469  0000C1                     	ds	1
   470  0000C2                     ?___llmod:
   471                           	opt stack 0
   472  0000C2                     delay_ms@i:
   473                           	opt stack 0
   474  0000C2                     ___llmod@dividend:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x1B
   478  0000C2                     	ds	4
   479  0000C6                     ___llmod@divisor:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x1F
   483  0000C6                     	ds	4
   484  0000CA                     ___llmod@counter:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x23
   488  0000CA                     	ds	1
   489  0000CB                     ?_printf:
   490                           	opt stack 0
   491  0000CB                     printf@f:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x24
   495  0000CB                     	ds	6
   496  0000D1                     ??_printf:
   497                           
   498                           ; 1 bytes @ 0x2A
   499  0000D1                     	ds	2
   500  0000D3                     printf@prec:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x2C
   504  0000D3                     	ds	2
   505  0000D5                     printf@ap:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x2E
   509  0000D5                     	ds	2
   510  0000D7                     printf@flag:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x30
   514  0000D7                     	ds	1
   515  0000D8                     printf@val:
   516                           	opt stack 0
   517                           
   518                           ; 4 bytes @ 0x31
   519  0000D8                     	ds	4
   520  0000DC                     printf@c:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x35
   524  0000DC                     	ds	1
   525  0000DD                     ??_main:
   526                           
   527                           ; 1 bytes @ 0x36
   528  0000DD                     	ds	1
   529  0000DE                     main@i:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x37
   533  0000DE                     	ds	2
   534  0000E0                     main@i_1270:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x39
   538  0000E0                     	ds	2
   539  0000E2                     main@adc:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x3B
   543  0000E2                     	ds	2
   544  0000E4                     main@adc_1272:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x3D
   548  0000E4                     	ds	2
   549  0000E6                     main@delay:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x3F
   553  0000E6                     	ds	2
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           
   561                           	psect	cstackCOMRAM
   562  000001                     __pcstackCOMRAM:
   563                           	opt stack 0
   564  000001                     ?_getAddressSize:
   565                           	opt stack 0
   566  000001                     ?i2_ADC_GetConversion:
   567                           	opt stack 0
   568  000001                     ?i2___lldiv:
   569                           	opt stack 0
   570  000001                     EUSART1_Write@txData:
   571                           	opt stack 0
   572  000001                     i2EUSART2_Write@txData:
   573                           	opt stack 0
   574  000001                     getAddressSize@address:
   575                           	opt stack 0
   576  000001                     setLedOn@led:
   577                           	opt stack 0
   578  000001                     setLedOff@led:
   579                           	opt stack 0
   580  000001                     i2___lldiv@dividend:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x0
   584  000001                     	ds	1
   585  000002                     i2putch@txData:
   586                           	opt stack 0
   587  000002                     sendAX@buffer:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1
   591  000002                     	ds	1
   592  000003                     ??_getAddressSize:
   593  000003                     ??_setLedOn:
   594  000003                     ??_setLedOff:
   595  000003                     ??i2_ADC_GetConversion:
   596                           
   597                           ; 1 bytes @ 0x2
   598  000003                     	ds	1
   599  000004                     sendAX@packetSize:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x3
   603  000004                     	ds	1
   604  000005                     i2ADC_GetConversion@channel:
   605                           	opt stack 0
   606  000005                     handleByteReceived@i:
   607                           	opt stack 0
   608  000005                     i2___lldiv@divisor:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x4
   612  000005                     	ds	1
   613  000006                     sendAX@result:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x5
   617  000006                     	ds	1
   618  000007                     handleByteReceived@data:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x6
   622  000007                     	ds	1
   623  000008                     sendAX@parametersToRead:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x7
   627  000008                     	ds	1
   628  000009                     i2___lldiv@quotient:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x8
   632  000009                     	ds	1
   633  00000A                     ??_sendAX:
   634                           
   635                           ; 1 bytes @ 0x9
   636  00000A                     	ds	1
   637  00000B                     sendAX@stop:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0xA
   641  00000B                     	ds	2
   642  00000D                     i2___lldiv@counter:
   643                           	opt stack 0
   644  00000D                     sendAX@i:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0xC
   648  00000D                     	ds	1
   649  00000E                     ?i2___llmod:
   650                           	opt stack 0
   651  00000E                     i2___llmod@dividend:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xD
   655  00000E                     	ds	1
   656  00000F                     sendAX@i_1375:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0xE
   660  00000F                     	ds	2
   661  000011                     sendAX@i_1378:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x10
   665  000011                     	ds	1
   666  000012                     i2___llmod@divisor:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x11
   670  000012                     	ds	1
   671  000013                     sendAX@r0:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x12
   675  000013                     	ds	2
   676  000015                     sendAX@i_1381:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x14
   680  000015                     	ds	1
   681  000016                     i2___llmod@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x15
   685  000016                     	ds	1
   686  000017                     ?i2_printf:
   687                           	opt stack 0
   688  000017                     sendAX@checksum:
   689                           	opt stack 0
   690  000017                     i2printf@f:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x16
   694  000017                     	ds	1
   695  000018                     ?_pingAX:
   696                           	opt stack 0
   697  000018                     ?_readAXData:
   698                           	opt stack 0
   699  000018                     ?_writeAXData:
   700                           	opt stack 0
   701  000018                     pingAX@id:
   702                           	opt stack 0
   703  000018                     readAXData@id:
   704                           	opt stack 0
   705  000018                     writeAXData@id:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x17
   709  000018                     	ds	1
   710  000019                     ??i2_printf:
   711                           
   712                           ; 1 bytes @ 0x18
   713  000019                     	ds	1
   714  00001A                     ??_pingAX:
   715  00001A                     readAXData@address:
   716                           	opt stack 0
   717  00001A                     writeAXData@address:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x19
   721  00001A                     	ds	1
   722  00001B                     i2printf@prec:
   723                           	opt stack 0
   724  00001B                     pingAX@result:
   725                           	opt stack 0
   726                           
   727                           ; 20 bytes @ 0x1A
   728  00001B                     	ds	1
   729  00001C                     ??_readAXData:
   730  00001C                     writeAXData@data:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x1B
   734  00001C                     	ds	1
   735  00001D                     i2printf@ap:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1C
   739  00001D                     	ds	1
   740  00001E                     ??_writeAXData:
   741  00001E                     readAXData@result:
   742                           	opt stack 0
   743                           
   744                           ; 20 bytes @ 0x1D
   745  00001E                     	ds	1
   746  00001F                     i2printf@flag:
   747                           	opt stack 0
   748  00001F                     writeAXData@result:
   749                           	opt stack 0
   750                           
   751                           ; 20 bytes @ 0x1E
   752  00001F                     	ds	1
   753  000020                     i2printf@val:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x1F
   757  000020                     	ds	4
   758  000024                     i2printf@c:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x23
   762  000024                     	ds	11
   763  00002F                     pingAX@packet:
   764                           	opt stack 0
   765                           
   766                           ; 20 bytes @ 0x2E
   767  00002F                     	ds	3
   768  000032                     readAXData@error:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x31
   772  000032                     	ds	1
   773  000033                     writeAXData@packet:
   774                           	opt stack 0
   775                           
   776                           ; 20 bytes @ 0x32
   777  000033                     	ds	1
   778  000034                     readAXData@packet:
   779                           	opt stack 0
   780                           
   781                           ; 20 bytes @ 0x33
   782  000034                     	ds	15
   783  000043                     pingAX@nbParameters:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x42
   787  000043                     	ds	2
   788  000045                     pingAX@length:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x44
   792  000045                     	ds	2
   793  000047                     pingAX@instruction:
   794                           	opt stack 0
   795  000047                     writeAXData@length:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x46
   799  000047                     	ds	1
   800  000048                     readAXData@nbParameters:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x47
   804  000048                     	ds	1
   805  000049                     pingAX@error:
   806                           	opt stack 0
   807  000049                     writeAXData@instruction:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x48
   811  000049                     	ds	1
   812  00004A                     readAXData@length:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x49
   816  00004A                     	ds	1
   817  00004B                     writeAXData@error:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x4A
   821  00004B                     	ds	1
   822  00004C                     readAXData@instruction:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x4B
   826  00004C                     	ds	1
   827  00004D                     writeAXData@size:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x4C
   831  00004D                     	ds	1
   832  00004E                     readAXData@size:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x4D
   836  00004E                     	ds	2
   837  000050                     ??_getByteToSend:
   838                           
   839                           ; 1 bytes @ 0x4F
   840  000050                     	ds	2
   841  000052                     getByteToSend@error:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x51
   845  000052                     	ds	2
   846  000054                     getByteToSend@error_1438:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x53
   850  000054                     	ds	2
   851  000056                     getByteToSend@xlow:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x55
   855  000056                     	ds	1
   856  000057                     getByteToSend@xhigh:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x56
   860  000057                     	ds	1
   861  000058                     getByteToSend@xlow_1441:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x57
   865  000058                     	ds	1
   866  000059                     getByteToSend@xhigh_1442:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x58
   870  000059                     	ds	1
   871  00005A                     getByteToSend@d:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x59
   875  00005A                     	ds	1
   876  00005B                     getByteToSend@value:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x5A
   880  00005B                     	ds	2
   881  00005D                     getByteToSend@value_1440:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x5C
   885  00005D                     	ds	2
   886  00005F                     tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           postinc0	equ	0xFEE
   891                           wreg	equ	0xFE8
   892                           
   893                           ; 1 bytes @ 0x5E
   894 ;;
   895 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   896 ;;
   897 ;; *************** function _main *****************
   898 ;; Defined at:
   899 ;;		line 52 in file "main.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  adc             2   61[BANK0 ] int 
   904 ;;  i               2   57[BANK0 ] int 
   905 ;;  i               2   55[BANK0 ] int 
   906 ;;  adc             2   59[BANK0 ] int 
   907 ;;  delay           2   63[BANK0 ] int 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   918 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   920 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   921 ;;Total ram usage:       11 bytes
   922 ;; Hardware stack levels required when called:    9
   923 ;; This function calls:
   924 ;;		_ADC_GetConversion
   925 ;;		_SYSTEM_Initialize
   926 ;;		_delay_ms
   927 ;;		_printf
   928 ;; This function is called by:
   929 ;;		Startup code after reset
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text0
   934  000F74                     __ptext0:
   935                           	opt stack 0
   936  000F74                     _main:
   937                           	opt stack 22
   938                           
   939                           ;main.c: 54: for (int adc = 0; adc < 10; adc++) {
   940                           
   941                           ;incstack = 0
   942  000F74  0E00               	movlw	0
   943  000F76  0100               	movlb	0	; () banked
   944  000F78  6FE3               	movwf	(main@adc+1)& (0+255),b
   945  000F7A  0E00               	movlw	0
   946  000F7C  6FE2               	movwf	main@adc& (0+255),b
   947  000F7E                     l3024:
   948                           
   949                           ; BSR set to: 0
   950  000F7E  0100               	movlb	0	; () banked
   951  000F80  BFE3               	btfsc	(main@adc+1)& (0+255),7,b
   952  000F82  D008               	goto	l3028
   953  000F84  0100               	movlb	0	; () banked
   954  000F86  51E3               	movf	(main@adc+1)& (0+255),w,b
   955  000F88  E118               	bnz	l3034
   956  000F8A  0E0A               	movlw	10
   957  000F8C  0100               	movlb	0	; () banked
   958  000F8E  5DE2               	subwf	main@adc& (0+255),w,b
   959  000F90  B0D8               	btfsc	status,0,c
   960  000F92  D013               	goto	l3034
   961  000F94                     l3028:
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 55: adc_values[adc] = 0;
   965  000F94  90D8               	bcf	status,0,c
   966  000F96  0100               	movlb	0	; () banked
   967  000F98  35E2               	rlcf	main@adc& (0+255),w,b
   968  000F9A  6ED9               	movwf	fsr2l,c
   969  000F9C  0100               	movlb	0	; () banked
   970  000F9E  35E3               	rlcf	(main@adc+1)& (0+255),w,b
   971  000FA0  6EDA               	movwf	fsr2h,c
   972  000FA2  0E80               	movlw	low _adc_values
   973  000FA4  26D9               	addwf	fsr2l,f,c
   974  000FA6  0E00               	movlw	high _adc_values
   975  000FA8  22DA               	addwfc	fsr2h,f,c
   976  000FAA  0E00               	movlw	0
   977  000FAC  6EDE               	movwf	postinc2,c
   978  000FAE  0E00               	movlw	0
   979  000FB0  6EDD               	movwf	postdec2,c
   980                           
   981                           ; BSR set to: 0
   982  000FB2  0100               	movlb	0	; () banked
   983  000FB4  4BE2               	infsnz	main@adc& (0+255),f,b
   984  000FB6  2BE3               	incf	(main@adc+1)& (0+255),f,b
   985  000FB8  D7E2               	goto	l3024
   986  000FBA                     l3034:
   987                           
   988                           ; BSR set to: 0
   989                           ;main.c: 56: }
   990                           ;main.c: 59: SYSTEM_Initialize();
   991  000FBA  ECF0  F010         	call	_SYSTEM_Initialize	;wreg free
   992                           
   993                           ;main.c: 60: do { LATDbits.LATD3 = 1; } while(0);
   994  000FBE  868C               	bsf	3980,3,c	;volatile
   995                           
   996                           ;main.c: 78: (INTCONbits.GIE = 1);
   997  000FC0  8EF2               	bsf	intcon,7,c	;volatile
   998                           
   999                           ;main.c: 79: do { LATDbits.LATD2 = 1; } while(0);
  1000  000FC2  848C               	bsf	3980,2,c	;volatile
  1001                           
  1002                           ;main.c: 81: (INTCONbits.PEIE = 1);
  1003  000FC4  8CF2               	bsf	intcon,6,c	;volatile
  1004                           
  1005                           ;main.c: 88: printf("PM Robotix\r\n");
  1006  000FC6  0E5B               	movlw	low STR_2
  1007  000FC8  0100               	movlb	0	; () banked
  1008  000FCA  6FCB               	movwf	printf@f& (0+255),b
  1009  000FCC  0E0F               	movlw	high STR_2
  1010  000FCE  0100               	movlb	0	; () banked
  1011  000FD0  6FCC               	movwf	(printf@f+1)& (0+255),b
  1012  000FD2  ECE2  F008         	call	_printf	;wreg free
  1013                           
  1014                           ;main.c: 89: printf("Init completed\r\n");
  1015  000FD6  0E3B               	movlw	low STR_3
  1016  000FD8  0100               	movlb	0	; () banked
  1017  000FDA  6FCB               	movwf	printf@f& (0+255),b
  1018  000FDC  0E0F               	movlw	high STR_3
  1019  000FDE  0100               	movlb	0	; () banked
  1020  000FE0  6FCC               	movwf	(printf@f+1)& (0+255),b
  1021  000FE2  ECE2  F008         	call	_printf	;wreg free
  1022                           
  1023                           ;main.c: 91: int delay = 10;
  1024  000FE6  0E00               	movlw	0
  1025  000FE8  0100               	movlb	0	; () banked
  1026  000FEA  6FE7               	movwf	(main@delay+1)& (0+255),b
  1027  000FEC  0E0A               	movlw	10
  1028  000FEE  6FE6               	movwf	main@delay& (0+255),b
  1029                           
  1030                           ; BSR set to: 0
  1031                           
  1032                           ; BSR set to: 0
  1033                           
  1034                           ;main.c: 92: do { LATDbits.LATD1 = 1; } while(0);
  1035  000FF0  828C               	bsf	3980,1,c	;volatile
  1036                           
  1037                           ; BSR set to: 0
  1038                           
  1039                           ; BSR set to: 0
  1040                           
  1041                           ;main.c: 93: do { LATDbits.LATD0 = 1; } while(0);
  1042                           
  1043                           ; BSR set to: 0
  1044  000FF2  808C               	bsf	3980,0,c	;volatile
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;main.c: 94: for (int i = 0; i < 2; i++) {
  1048                           
  1049                           ; BSR set to: 0
  1050  000FF4  0E00               	movlw	0
  1051  000FF6  0100               	movlb	0	; () banked
  1052  000FF8  6FDF               	movwf	(main@i+1)& (0+255),b
  1053  000FFA  0E00               	movlw	0
  1054  000FFC  6FDE               	movwf	main@i& (0+255),b
  1055  000FFE                     l3056:
  1056                           
  1057                           ; BSR set to: 0
  1058  000FFE  0100               	movlb	0	; () banked
  1059  001000  BFDF               	btfsc	(main@i+1)& (0+255),7,b
  1060  001002  D008               	goto	l342
  1061  001004  0100               	movlb	0	; () banked
  1062  001006  51DF               	movf	(main@i+1)& (0+255),w,b
  1063  001008  E15F               	bnz	l382
  1064  00100A  0E02               	movlw	2
  1065  00100C  0100               	movlb	0	; () banked
  1066  00100E  5DDE               	subwf	main@i& (0+255),w,b
  1067  001010  B0D8               	btfsc	status,0,c
  1068  001012  D05A               	goto	l382
  1069  001014                     l342:
  1070                           
  1071                           ; BSR set to: 0
  1072  001014  868C               	bsf	3980,3,c	;volatile
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;main.c: 97: delay_ms(delay);
  1076                           
  1077                           ; BSR set to: 0
  1078  001016  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1079  00101A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1080  00101E  EC5D  F00E         	call	_delay_ms	;wreg free
  1081                           
  1082                           ;main.c: 98: do { LATDbits.LATD3 = 0; } while(0);
  1083  001022  968C               	bcf	3980,3,c	;volatile
  1084                           
  1085                           ;main.c: 99: do { LATDbits.LATD2 = 1; } while(0);
  1086  001024  848C               	bsf	3980,2,c	;volatile
  1087                           
  1088                           ;main.c: 100: delay_ms(delay);
  1089  001026  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1090  00102A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1091  00102E  EC5D  F00E         	call	_delay_ms	;wreg free
  1092                           
  1093                           ;main.c: 101: do { LATDbits.LATD2 = 0; } while(0);
  1094  001032  948C               	bcf	3980,2,c	;volatile
  1095                           
  1096                           ;main.c: 102: do { LATDbits.LATD1 = 1; } while(0);
  1097  001034  828C               	bsf	3980,1,c	;volatile
  1098                           
  1099                           ;main.c: 103: delay_ms(delay);
  1100  001036  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1101  00103A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1102  00103E  EC5D  F00E         	call	_delay_ms	;wreg free
  1103                           
  1104                           ;main.c: 104: do { LATDbits.LATD1 = 0; } while(0);
  1105  001042  928C               	bcf	3980,1,c	;volatile
  1106                           
  1107                           ;main.c: 105: do { LATDbits.LATD0 = 1; } while(0);
  1108  001044  808C               	bsf	3980,0,c	;volatile
  1109                           
  1110                           ;main.c: 106: delay_ms(delay);
  1111  001046  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1112  00104A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1113  00104E  EC5D  F00E         	call	_delay_ms	;wreg free
  1114                           
  1115                           ;main.c: 107: do { LATDbits.LATD0 = 0; } while(0);
  1116  001052  908C               	bcf	3980,0,c	;volatile
  1117                           
  1118                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  1119  001054  848B               	bsf	3979,2,c	;volatile
  1120                           
  1121                           ;main.c: 109: delay_ms(delay);
  1122  001056  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1123  00105A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1124  00105E  EC5D  F00E         	call	_delay_ms	;wreg free
  1125                           
  1126                           ;main.c: 110: do { LATCbits.LATC2 = 0; } while(0);
  1127  001062  948B               	bcf	3979,2,c	;volatile
  1128                           
  1129                           ;main.c: 111: do { LATCbits.LATC1 = 1; } while(0);
  1130  001064  828B               	bsf	3979,1,c	;volatile
  1131                           
  1132                           ;main.c: 112: delay_ms(delay);
  1133  001066  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1134  00106A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1135  00106E  EC5D  F00E         	call	_delay_ms	;wreg free
  1136                           
  1137                           ;main.c: 113: do { LATCbits.LATC1 = 0; } while(0);
  1138  001072  928B               	bcf	3979,1,c	;volatile
  1139                           
  1140                           ;main.c: 114: do { LATCbits.LATC0 = 1; } while(0);
  1141  001074  808B               	bsf	3979,0,c	;volatile
  1142                           
  1143                           ;main.c: 115: delay_ms(delay);
  1144  001076  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1145  00107A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1146  00107E  EC5D  F00E         	call	_delay_ms	;wreg free
  1147                           
  1148                           ;main.c: 116: do { LATCbits.LATC0 = 0; } while(0);
  1149  001082  908B               	bcf	3979,0,c	;volatile
  1150                           
  1151                           ;main.c: 117: do { LATBbits.LATB0 = 1; } while(0);
  1152  001084  808A               	bsf	3978,0,c	;volatile
  1153                           
  1154                           ;main.c: 118: delay_ms(delay);
  1155  001086  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1156  00108A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1157  00108E  EC5D  F00E         	call	_delay_ms	;wreg free
  1158                           
  1159                           ;main.c: 119: do { LATBbits.LATB0 = 0; } while(0);
  1160  001092  908A               	bcf	3978,0,c	;volatile
  1161                           
  1162                           ;main.c: 120: do { LATBbits.LATB2 = 1; } while(0);
  1163  001094  848A               	bsf	3978,2,c	;volatile
  1164                           
  1165                           ;main.c: 121: delay_ms(delay);
  1166  001096  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1167  00109A  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1168  00109E  EC5D  F00E         	call	_delay_ms	;wreg free
  1169                           
  1170                           ;main.c: 122: do { LATBbits.LATB2 = 0; } while(0);
  1171  0010A2  948A               	bcf	3978,2,c	;volatile
  1172                           
  1173                           ;main.c: 123: do { LATBbits.LATB3 = 1; } while(0);
  1174  0010A4  868A               	bsf	3978,3,c	;volatile
  1175                           
  1176                           ;main.c: 124: delay_ms(delay);
  1177  0010A6  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1178  0010AA  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1179  0010AE  EC5D  F00E         	call	_delay_ms	;wreg free
  1180                           
  1181                           ;main.c: 125: do { LATBbits.LATB3 = 0; } while(0);
  1182  0010B2  968A               	bcf	3978,3,c	;volatile
  1183                           
  1184                           ;main.c: 126: delay_ms(delay);
  1185  0010B4  C0E6  F0BD         	movff	main@delay,delay_ms@ms
  1186  0010B8  C0E7  F0BE         	movff	main@delay+1,delay_ms@ms+1
  1187  0010BC  EC5D  F00E         	call	_delay_ms	;wreg free
  1188  0010C0  0100               	movlb	0	; () banked
  1189  0010C2  4BDE               	infsnz	main@i& (0+255),f,b
  1190  0010C4  2BDF               	incf	(main@i+1)& (0+255),f,b
  1191  0010C6  D79B               	goto	l3056
  1192  0010C8                     l382:
  1193                           
  1194                           ; BSR set to: 0
  1195  0010C8  988C               	bcf	3980,4,c	;volatile
  1196  0010CA                     l385:
  1197  0010CA  868A               	bsf	3978,3,c	;volatile
  1198                           
  1199                           ;main.c: 135: if(0){
  1200  0010CC  D06B               	goto	l3132
  1201  0010CE                     l3106:
  1202                           
  1203                           ; BSR set to: 0
  1204  0010CE  0100               	movlb	0	; () banked
  1205  0010D0  BFE1               	btfsc	(main@i_1270+1)& (0+255),7,b
  1206  0010D2  D007               	goto	l3110
  1207  0010D4  0100               	movlb	0	; () banked
  1208  0010D6  51E1               	movf	(main@i_1270+1)& (0+255),w,b
  1209  0010D8  E165               	bnz	l3132
  1210  0010DA  0100               	movlb	0	; () banked
  1211  0010DC  05E0               	decf	main@i_1270& (0+255),w,b
  1212  0010DE  B0D8               	btfsc	status,0,c
  1213  0010E0  D061               	goto	l3132
  1214  0010E2                     l3110:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;main.c: 138: printf("Reading all ADC\r\n");
  1218  0010E2  0E29               	movlw	low STR_4
  1219  0010E4  0100               	movlb	0	; () banked
  1220  0010E6  6FCB               	movwf	printf@f& (0+255),b
  1221  0010E8  0E0F               	movlw	high STR_4
  1222  0010EA  0100               	movlb	0	; () banked
  1223  0010EC  6FCC               	movwf	(printf@f+1)& (0+255),b
  1224  0010EE  ECE2  F008         	call	_printf	;wreg free
  1225                           
  1226                           ;main.c: 139: for (int adc = 0; adc < 10; adc++) {
  1227  0010F2  0E00               	movlw	0
  1228  0010F4  0100               	movlb	0	; () banked
  1229  0010F6  6FE5               	movwf	(main@adc_1272+1)& (0+255),b
  1230  0010F8  0E00               	movlw	0
  1231  0010FA  6FE4               	movwf	main@adc_1272& (0+255),b
  1232  0010FC                     l3114:
  1233                           
  1234                           ; BSR set to: 0
  1235  0010FC  0100               	movlb	0	; () banked
  1236  0010FE  BFE5               	btfsc	(main@adc_1272+1)& (0+255),7,b
  1237  001100  D008               	goto	l3118
  1238  001102  0100               	movlb	0	; () banked
  1239  001104  51E5               	movf	(main@adc_1272+1)& (0+255),w,b
  1240  001106  E143               	bnz	l3126
  1241  001108  0E0A               	movlw	10
  1242  00110A  0100               	movlb	0	; () banked
  1243  00110C  5DE4               	subwf	main@adc_1272& (0+255),w,b
  1244  00110E  B0D8               	btfsc	status,0,c
  1245  001110  D03E               	goto	l3126
  1246  001112                     l3118:
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 140: adc_values[adc] = ADC_GetConversion(adc) / 16;
  1250  001112  0100               	movlb	0	; () banked
  1251  001114  51E4               	movf	main@adc_1272& (0+255),w,b
  1252  001116  EC45  F010         	call	_ADC_GetConversion
  1253  00111A  0E04               	movlw	4
  1254  00111C  0100               	movlb	0	; () banked
  1255  00111E  6FDD               	movwf	??_main& (0+255),b
  1256  001120                     u2055:
  1257  001120  0100               	movlb	0	; () banked
  1258  001122  90D8               	bcf	status,0,c
  1259  001124  33B6               	rrcf	(?_ADC_GetConversion+1)& (0+255),f,b
  1260  001126  33B5               	rrcf	?_ADC_GetConversion& (0+255),f,b
  1261  001128  0100               	movlb	0	; () banked
  1262  00112A  2FDD               	decfsz	??_main& (0+255),f,b
  1263  00112C  D7F9               	goto	u2055
  1264  00112E  90D8               	bcf	status,0,c
  1265  001130  0100               	movlb	0	; () banked
  1266  001132  35E4               	rlcf	main@adc_1272& (0+255),w,b
  1267  001134  6ED9               	movwf	fsr2l,c
  1268  001136  0100               	movlb	0	; () banked
  1269  001138  35E5               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1270  00113A  6EDA               	movwf	fsr2h,c
  1271  00113C  0E80               	movlw	low _adc_values
  1272  00113E  26D9               	addwf	fsr2l,f,c
  1273  001140  0E00               	movlw	high _adc_values
  1274  001142  22DA               	addwfc	fsr2h,f,c
  1275  001144  0100               	movlb	0	; () banked
  1276  001146  C0B5  FFDE         	movff	?_ADC_GetConversion,postinc2
  1277  00114A  0100               	movlb	0	; () banked
  1278  00114C  C0B6  FFDD         	movff	?_ADC_GetConversion+1,postdec2
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 141: printf("ADC %d : %ld\r\n", adc, adc_values[adc]);
  1282  001150  0E4C               	movlw	low STR_5
  1283  001152  0100               	movlb	0	; () banked
  1284  001154  6FCB               	movwf	printf@f& (0+255),b
  1285  001156  0E0F               	movlw	high STR_5
  1286  001158  0100               	movlb	0	; () banked
  1287  00115A  6FCC               	movwf	(printf@f+1)& (0+255),b
  1288  00115C  C0E4  F0CD         	movff	main@adc_1272,?_printf+2
  1289  001160  C0E5  F0CE         	movff	main@adc_1272+1,?_printf+3
  1290  001164  90D8               	bcf	status,0,c
  1291  001166  0100               	movlb	0	; () banked
  1292  001168  35E4               	rlcf	main@adc_1272& (0+255),w,b
  1293  00116A  6ED9               	movwf	fsr2l,c
  1294  00116C  0100               	movlb	0	; () banked
  1295  00116E  35E5               	rlcf	(main@adc_1272+1)& (0+255),w,b
  1296  001170  6EDA               	movwf	fsr2h,c
  1297  001172  0E80               	movlw	low _adc_values
  1298  001174  26D9               	addwf	fsr2l,f,c
  1299  001176  0E00               	movlw	high _adc_values
  1300  001178  22DA               	addwfc	fsr2h,f,c
  1301  00117A  CFDE F0CF          	movff	postinc2,?_printf+4
  1302  00117E  CFDD F0D0          	movff	postdec2,?_printf+5
  1303  001182  ECE2  F008         	call	_printf	;wreg free
  1304  001186  0100               	movlb	0	; () banked
  1305  001188  4BE4               	infsnz	main@adc_1272& (0+255),f,b
  1306  00118A  2BE5               	incf	(main@adc_1272+1)& (0+255),f,b
  1307  00118C  D7B7               	goto	l3114
  1308  00118E                     l3126:
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;main.c: 142: }
  1312                           ;main.c: 143: delay_ms(50);
  1313  00118E  0E00               	movlw	0
  1314  001190  0100               	movlb	0	; () banked
  1315  001192  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1316  001194  0E32               	movlw	50
  1317  001196  6FBD               	movwf	delay_ms@ms& (0+255),b
  1318  001198  EC5D  F00E         	call	_delay_ms	;wreg free
  1319  00119C  0100               	movlb	0	; () banked
  1320  00119E  4BE0               	infsnz	main@i_1270& (0+255),f,b
  1321  0011A0  2BE1               	incf	(main@i_1270+1)& (0+255),f,b
  1322  0011A2  D795               	goto	l3106
  1323  0011A4                     l3132:
  1324                           
  1325                           ;main.c: 144: }}
  1326                           ;main.c: 145: delay_ms(500);
  1327  0011A4  0E01               	movlw	1
  1328  0011A6  0100               	movlb	0	; () banked
  1329  0011A8  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1330  0011AA  0EF4               	movlw	244
  1331  0011AC  6FBD               	movwf	delay_ms@ms& (0+255),b
  1332  0011AE  EC5D  F00E         	call	_delay_ms	;wreg free
  1333                           
  1334                           ;main.c: 146: do { LATBbits.LATB3 = 0; } while(0);
  1335  0011B2  968A               	bcf	3978,3,c	;volatile
  1336                           
  1337                           ;main.c: 147: delay_ms(500);
  1338  0011B4  0E01               	movlw	1
  1339  0011B6  0100               	movlb	0	; () banked
  1340  0011B8  6FBE               	movwf	(delay_ms@ms+1)& (0+255),b
  1341  0011BA  0EF4               	movlw	244
  1342  0011BC  6FBD               	movwf	delay_ms@ms& (0+255),b
  1343  0011BE  EC5D  F00E         	call	_delay_ms	;wreg free
  1344  0011C2  D783               	goto	l385
  1345  0011C4                     __end_of_main:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           intcon	equ	0xFF2
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           postinc2	equ	0xFDE
  1355                           postdec2	equ	0xFDD
  1356                           fsr2h	equ	0xFDA
  1357                           fsr2l	equ	0xFD9
  1358                           status	equ	0xFD8
  1359                           
  1360 ;; *************** function _printf *****************
  1361 ;; Defined at:
  1362 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  1365 ;;		 -> STR_5(15), STR_4(18), STR_3(17), STR_2(13), 
  1366 ;;		 -> STR_1(10), 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  val             4   49[BANK0 ] unsigned long 
  1369 ;;  tmpval          4    0        struct .
  1370 ;;  cp              3    0        PTR const unsigned char 
  1371 ;;  ap              2   46[BANK0 ] PTR void [1]
  1372 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1373 ;;  prec            2   44[BANK0 ] int 
  1374 ;;  len             2    0        unsigned int 
  1375 ;;  c               1   53[BANK0 ] char 
  1376 ;;  flag            1   48[BANK0 ] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  2   36[BANK0 ] int 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1386 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1387 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1388 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1389 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1390 ;;Total ram usage:       18 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    8
  1393 ;; This function calls:
  1394 ;;		___lldiv
  1395 ;;		___llmod
  1396 ;;		_putch
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text1
  1403  0011C4                     __ptext1:
  1404                           	opt stack 0
  1405  0011C4                     _printf:
  1406                           	opt stack 22
  1407                           
  1408                           ;doprnt.c: 466: va_list ap;
  1409                           ;doprnt.c: 499: signed char c;
  1410                           ;doprnt.c: 504: int prec;
  1411                           ;doprnt.c: 508: unsigned char flag;
  1412                           ;doprnt.c: 523: union {
  1413                           ;doprnt.c: 524: unsigned long vd;
  1414                           ;doprnt.c: 525: double integ;
  1415                           ;doprnt.c: 526: } tmpval;
  1416                           ;doprnt.c: 528: unsigned long val;
  1417                           ;doprnt.c: 529: unsigned len;
  1418                           ;doprnt.c: 530: const char * cp;
  1419                           ;doprnt.c: 533: *ap = __va_start();
  1420                           
  1421                           ;incstack = 0
  1422  0011C4  0ECD               	movlw	low (?_printf+2)
  1423  0011C6  0100               	movlb	0	; () banked
  1424  0011C8  6FD5               	movwf	printf@ap& (0+255),b
  1425  0011CA  0E00               	movlw	high (?_printf+2)
  1426  0011CC  0100               	movlb	0	; () banked
  1427  0011CE  6FD6               	movwf	(printf@ap+1)& (0+255),b
  1428                           
  1429                           ;doprnt.c: 536: while(c = *f++) {
  1430  0011D0  D0EB               	goto	l2944
  1431  0011D2                     l2892:
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;doprnt.c: 538: if(c != '%')
  1435  0011D2  0E25               	movlw	37
  1436  0011D4  0100               	movlb	0	; () banked
  1437  0011D6  19DC               	xorwf	printf@c& (0+255),w,b
  1438  0011D8  B4D8               	btfsc	status,2,c
  1439  0011DA  D005               	goto	l2896
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 540: {
  1443                           ;doprnt.c: 541: (putch(c) );
  1444  0011DC  0100               	movlb	0	; () banked
  1445  0011DE  51DC               	movf	printf@c& (0+255),w,b
  1446  0011E0  EC41  F011         	call	_putch
  1447                           
  1448                           ;doprnt.c: 542: continue;
  1449  0011E4  D0E1               	goto	l2944
  1450  0011E6                     l2896:
  1451                           
  1452                           ;doprnt.c: 543: }
  1453                           ;doprnt.c: 548: flag = 0;
  1454  0011E6  0E00               	movlw	0
  1455  0011E8  0100               	movlb	0	; () banked
  1456  0011EA  6FD7               	movwf	printf@flag& (0+255),b
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;doprnt.c: 635: switch(c = *f++) {
  1460                           
  1461                           ;doprnt.c: 633: loop:
  1462  0011EC  D002               	goto	l2902
  1463  0011EE                     l2898:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;doprnt.c: 643: flag |= 0x10;
  1467  0011EE  0100               	movlb	0	; () banked
  1468  0011F0  89D7               	bsf	printf@flag& (0+255),4,b
  1469  0011F2                     l2902:
  1470                           
  1471                           ; BSR set to: 0
  1472  0011F2  C0CB  FFF6         	movff	printf@f,tblptrl
  1473  0011F6  C0CC  FFF7         	movff	printf@f+1,tblptrh
  1474  0011FA  0100               	movlb	0	; () banked
  1475  0011FC  4BCB               	infsnz	printf@f& (0+255),f,b
  1476  0011FE  2BCC               	incf	(printf@f+1)& (0+255),f,b
  1477  001200                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1478  001200  6AF8               	clrf	tblptru,c
  1479  001202                     	endif
  1480  001202                     	if	0	;tblptru may be non-zero
  1481  001202                     	endif
  1482  001202  0008               	tblrd		*
  1483  001204  CFF5 F0DC          	movff	tablat,printf@c
  1484  001208  0100               	movlb	0	; () banked
  1485  00120A  51DC               	movf	printf@c& (0+255),w,b
  1486                           
  1487                           ; Switch size 1, requested type "space"
  1488                           ; Number of cases is 4, Range of values is 0 to 108
  1489                           ; switch strategies available:
  1490                           ; Name         Instructions Cycles
  1491                           ; simple_byte           13     7 (average)
  1492                           ;	Chosen strategy is simple_byte
  1493  00120C  0A00               	xorlw	0	; case 0
  1494  00120E  B4D8               	btfsc	status,2,c
  1495  001210  0012               	return	
  1496  001212  0A64               	xorlw	100	; case 100
  1497  001214  B4D8               	btfsc	status,2,c
  1498  001216  D007               	goto	l627
  1499  001218  0A0D               	xorlw	13	; case 105
  1500  00121A  B4D8               	btfsc	status,2,c
  1501  00121C  D004               	goto	l627
  1502  00121E  0A05               	xorlw	5	; case 108
  1503  001220  B4D8               	btfsc	status,2,c
  1504  001222  D7E5               	goto	l2898
  1505  001224  D0C1               	goto	l2944
  1506  001226                     l627:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;doprnt.c: 1253: {
  1510                           ;doprnt.c: 1255: if(flag & 0x10)
  1511  001226  0100               	movlb	0	; () banked
  1512  001228  A9D7               	btfss	printf@flag& (0+255),4,b
  1513  00122A  D00E               	goto	l2908
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1517  00122C  C0D5  FFD9         	movff	printf@ap,fsr2l
  1518  001230  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  1519  001234  CFDE F0D8          	movff	postinc2,printf@val
  1520  001238  CFDE F0D9          	movff	postinc2,printf@val+1
  1521  00123C  CFDE F0DA          	movff	postinc2,printf@val+2
  1522  001240  CFDE F0DB          	movff	postinc2,printf@val+3
  1523                           
  1524                           ; BSR set to: 0
  1525  001244  0E04               	movlw	4
  1526  001246  D00F               	goto	L3
  1527  001248                     l2908:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 1257: else
  1531                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1532  001248  C0D5  FFD9         	movff	printf@ap,fsr2l
  1533  00124C  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  1534  001250  CFDE F0D8          	movff	postinc2,printf@val
  1535  001254  CFDD F0D9          	movff	postdec2,printf@val+1
  1536  001258  0100               	movlb	0	; () banked
  1537  00125A  0E00               	movlw	0
  1538  00125C  BFD9               	btfsc	(printf@val+1)& (0+255),7,b
  1539  00125E  0EFF               	movlw	-1
  1540  001260  6FDA               	movwf	(printf@val+2)& (0+255),b
  1541  001262  6FDB               	movwf	(printf@val+3)& (0+255),b
  1542                           
  1543                           ; BSR set to: 0
  1544  001264  0E02               	movlw	2
  1545  001266                     L3:
  1546  001266  0100               	movlb	0	; () banked
  1547  001268  27D5               	addwf	printf@ap& (0+255),f,b
  1548  00126A  0E00               	movlw	0
  1549  00126C  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;doprnt.c: 1261: if((long)val < 0) {
  1553                           
  1554                           ; BSR set to: 0
  1555  00126E  0100               	movlb	0	; () banked
  1556  001270  AFDB               	btfss	(printf@val+3)& (0+255),7,b
  1557  001272  D00C               	goto	l2918
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;doprnt.c: 1262: flag |= 0x03;
  1561  001274  0E03               	movlw	3
  1562  001276  0100               	movlb	0	; () banked
  1563  001278  13D7               	iorwf	printf@flag& (0+255),f,b
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;doprnt.c: 1263: val = -val;
  1567  00127A  0100               	movlb	0	; () banked
  1568  00127C  1FDB               	comf	(printf@val+3)& (0+255),f,b
  1569  00127E  1FDA               	comf	(printf@val+2)& (0+255),f,b
  1570  001280  1FD9               	comf	(printf@val+1)& (0+255),f,b
  1571  001282  6DD8               	negf	printf@val& (0+255),b
  1572  001284  0E00               	movlw	0
  1573  001286  23D9               	addwfc	(printf@val+1)& (0+255),f,b
  1574  001288  23DA               	addwfc	(printf@val+2)& (0+255),f,b
  1575  00128A  23DB               	addwfc	(printf@val+3)& (0+255),f,b
  1576  00128C                     l2918:
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;doprnt.c: 1264: }
  1580                           ;doprnt.c: 1266: }
  1581                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1582  00128C  0E01               	movlw	1
  1583  00128E  0100               	movlb	0	; () banked
  1584  001290  6FDC               	movwf	printf@c& (0+255),b
  1585  001292                     l2920:
  1586                           
  1587                           ; BSR set to: 0
  1588  001292  0E0A               	movlw	10
  1589  001294  0100               	movlb	0	; () banked
  1590  001296  19DC               	xorwf	printf@c& (0+255),w,b
  1591  001298  B4D8               	btfsc	status,2,c
  1592  00129A  D021               	goto	l2932
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;doprnt.c: 1306: if(val < dpowers[c])
  1596                           
  1597                           ; BSR set to: 0
  1598                           
  1599                           ; BSR set to: 0
  1600  00129C  0100               	movlb	0	; () banked
  1601  00129E  51DC               	movf	printf@c& (0+255),w,b
  1602  0012A0  0D04               	mullw	4
  1603  0012A2  0E01               	movlw	low _dpowers
  1604  0012A4  24F3               	addwf	prodl,w,c
  1605  0012A6  6EF6               	movwf	tblptrl,c
  1606  0012A8  0E0F               	movlw	high _dpowers
  1607  0012AA  20F4               	addwfc	prodh,w,c
  1608  0012AC  6EF7               	movwf	tblptrh,c
  1609  0012AE                     	if	1	;There are 3 active tblptr bytes
  1610  0012AE  6AF8               	clrf	tblptru,c
  1611  0012B0  0E00               	movlw	low (__mediumconst shr (0+16))
  1612  0012B2  22F8               	addwfc	tblptru,f,c
  1613  0012B4                     	endif
  1614  0012B4  0009               	tblrd		*+
  1615  0012B6  50F5               	movf	tablat,w,c
  1616  0012B8  0100               	movlb	0	; () banked
  1617  0012BA  5DD8               	subwf	printf@val& (0+255),w,b
  1618  0012BC  0009               	tblrd		*+
  1619  0012BE  50F5               	movf	tablat,w,c
  1620  0012C0  0100               	movlb	0	; () banked
  1621  0012C2  59D9               	subwfb	(printf@val+1)& (0+255),w,b
  1622  0012C4  0009               	tblrd		*+
  1623  0012C6  50F5               	movf	tablat,w,c
  1624  0012C8  0100               	movlb	0	; () banked
  1625  0012CA  59DA               	subwfb	(printf@val+2)& (0+255),w,b
  1626  0012CC  0009               	tblrd		*+
  1627  0012CE  50F5               	movf	tablat,w,c
  1628  0012D0  0100               	movlb	0	; () banked
  1629  0012D2  59DB               	subwfb	(printf@val+3)& (0+255),w,b
  1630  0012D4  A0D8               	btfss	status,0,c
  1631  0012D6  D003               	goto	l2932
  1632                           
  1633                           ; BSR set to: 0
  1634                           
  1635                           ; BSR set to: 0
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;doprnt.c: 1307: break;
  1639  0012D8  0100               	movlb	0	; () banked
  1640  0012DA  2BDC               	incf	printf@c& (0+255),f,b
  1641  0012DC  D7DA               	goto	l2920
  1642  0012DE                     l2932:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;doprnt.c: 1422: {
  1646                           ;doprnt.c: 1438: if(flag & 0x03)
  1647  0012DE  C0D7  F0D1         	movff	printf@flag,??_printf
  1648  0012E2  0E03               	movlw	3
  1649  0012E4  0100               	movlb	0	; () banked
  1650  0012E6  17D1               	andwf	??_printf& (0+255),f,b
  1651  0012E8  B4D8               	btfsc	status,2,c
  1652  0012EA  D003               	goto	l2936
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;doprnt.c: 1439: (putch('-') );
  1656  0012EC  0E2D               	movlw	45
  1657  0012EE  EC41  F011         	call	_putch
  1658  0012F2                     l2936:
  1659                           
  1660                           ;doprnt.c: 1469: }
  1661                           ;doprnt.c: 1472: prec = c;
  1662  0012F2  0100               	movlb	0	; () banked
  1663  0012F4  51DC               	movf	printf@c& (0+255),w,b
  1664  0012F6  0100               	movlb	0	; () banked
  1665  0012F8  6FD3               	movwf	printf@prec& (0+255),b
  1666  0012FA  6BD4               	clrf	(printf@prec+1)& (0+255),b
  1667  0012FC  BFD3               	btfsc	printf@prec& (0+255),7,b
  1668  0012FE  07D4               	decf	(printf@prec+1)& (0+255),f,b
  1669                           
  1670                           ;doprnt.c: 1474: while(prec--) {
  1671  001300  D048               	goto	l2942
  1672  001302                     l2938:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;doprnt.c: 1478: {
  1676                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1677  001302  C0D3  F0D1         	movff	printf@prec,??_printf
  1678  001306  C0D4  F0D2         	movff	printf@prec+1,??_printf+1
  1679  00130A  0100               	movlb	0	; () banked
  1680  00130C  90D8               	bcf	status,0,c
  1681  00130E  37D1               	rlcf	??_printf& (0+255),f,b
  1682  001310  37D2               	rlcf	(??_printf+1)& (0+255),f,b
  1683  001312  0100               	movlb	0	; () banked
  1684  001314  90D8               	bcf	status,0,c
  1685  001316  37D1               	rlcf	??_printf& (0+255),f,b
  1686  001318  37D2               	rlcf	(??_printf+1)& (0+255),f,b
  1687  00131A  0E01               	movlw	low _dpowers
  1688  00131C  0100               	movlb	0	; () banked
  1689  00131E  25D1               	addwf	??_printf& (0+255),w,b
  1690  001320  6EF6               	movwf	tblptrl,c
  1691  001322  0E0F               	movlw	high _dpowers
  1692  001324  21D2               	addwfc	(??_printf+1)& (0+255),w,b
  1693  001326  6EF7               	movwf	tblptrh,c
  1694  001328                     	if	1	;There are 3 active tblptr bytes
  1695  001328  6AF8               	clrf	tblptru,c
  1696  00132A  0E00               	movlw	low (__mediumconst shr (0+16))
  1697  00132C  22F8               	addwfc	tblptru,f,c
  1698  00132E                     	endif
  1699  00132E  0009               	tblrd		*+
  1700  001330  CFF5 F0B9          	movff	tablat,___lldiv@divisor
  1701  001334  0009               	tblrd		*+
  1702  001336  CFF5 F0BA          	movff	tablat,___lldiv@divisor+1
  1703  00133A  0009               	tblrd		*+
  1704  00133C  CFF5 F0BB          	movff	tablat,___lldiv@divisor+2
  1705  001340  000A               	tblrd		*-
  1706  001342  CFF5 F0BC          	movff	tablat,___lldiv@divisor+3
  1707  001346  C0D8  F0B5         	movff	printf@val,___lldiv@dividend
  1708  00134A  C0D9  F0B6         	movff	printf@val+1,___lldiv@dividend+1
  1709  00134E  C0DA  F0B7         	movff	printf@val+2,___lldiv@dividend+2
  1710  001352  C0DB  F0B8         	movff	printf@val+3,___lldiv@dividend+3
  1711  001356  EC10  F00D         	call	___lldiv	;wreg free
  1712  00135A  C0B5  F0C2         	movff	?___lldiv,___llmod@dividend
  1713  00135E  C0B6  F0C3         	movff	?___lldiv+1,___llmod@dividend+1
  1714  001362  C0B7  F0C4         	movff	?___lldiv+2,___llmod@dividend+2
  1715  001366  C0B8  F0C5         	movff	?___lldiv+3,___llmod@dividend+3
  1716  00136A  0E0A               	movlw	10
  1717  00136C  0100               	movlb	0	; () banked
  1718  00136E  6FC6               	movwf	___llmod@divisor& (0+255),b
  1719  001370  0E00               	movlw	0
  1720  001372  6FC7               	movwf	(___llmod@divisor+1)& (0+255),b
  1721  001374  0E00               	movlw	0
  1722  001376  6FC8               	movwf	(___llmod@divisor+2)& (0+255),b
  1723  001378  0E00               	movlw	0
  1724  00137A  6FC9               	movwf	(___llmod@divisor+3)& (0+255),b
  1725  00137C  ECC4  F00D         	call	___llmod	;wreg free
  1726  001380  0100               	movlb	0	; () banked
  1727  001382  51C2               	movf	?___llmod& (0+255),w,b
  1728  001384  0F30               	addlw	48
  1729  001386  0100               	movlb	0	; () banked
  1730  001388  6FDC               	movwf	printf@c& (0+255),b
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;doprnt.c: 1523: }
  1734                           ;doprnt.c: 1524: (putch(c) );
  1735  00138A  0100               	movlb	0	; () banked
  1736  00138C  51DC               	movf	printf@c& (0+255),w,b
  1737  00138E  EC41  F011         	call	_putch
  1738  001392                     l2942:
  1739  001392  0100               	movlb	0	; () banked
  1740  001394  07D3               	decf	printf@prec& (0+255),f,b
  1741  001396  A0D8               	btfss	status,0,c
  1742  001398  07D4               	decf	(printf@prec+1)& (0+255),f,b
  1743  00139A  0100               	movlb	0	; () banked
  1744  00139C  29D3               	incf	printf@prec& (0+255),w,b
  1745  00139E  E1B1               	bnz	l2938
  1746  0013A0  0100               	movlb	0	; () banked
  1747  0013A2  29D4               	incf	(printf@prec+1)& (0+255),w,b
  1748  0013A4  A4D8               	btfss	status,2,c
  1749  0013A6  D7AD               	goto	l2938
  1750  0013A8                     l2944:
  1751  0013A8  C0CB  FFF6         	movff	printf@f,tblptrl
  1752  0013AC  C0CC  FFF7         	movff	printf@f+1,tblptrh
  1753  0013B0  0100               	movlb	0	; () banked
  1754  0013B2  4BCB               	infsnz	printf@f& (0+255),f,b
  1755  0013B4  2BCC               	incf	(printf@f+1)& (0+255),f,b
  1756  0013B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1757  0013B6  6AF8               	clrf	tblptru,c
  1758  0013B8                     	endif
  1759  0013B8                     	if	0	;tblptru may be non-zero
  1760  0013B8                     	endif
  1761  0013B8  0008               	tblrd		*
  1762  0013BA  CFF5 F0DC          	movff	tablat,printf@c
  1763  0013BE  0100               	movlb	0	; () banked
  1764  0013C0  51DC               	movf	printf@c& (0+255),w,b
  1765  0013C2  B4D8               	btfsc	status,2,c
  1766  0013C4  0012               	return	
  1767  0013C6  D705               	goto	l2892
  1768  0013C8                     __end_of_printf:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodh	equ	0xFF4
  1775                           prodl	equ	0xFF3
  1776                           intcon	equ	0xFF2
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postinc2	equ	0xFDE
  1780                           postdec2	equ	0xFDD
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _putch *****************
  1786 ;; Defined at:
  1787 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  txData          1    wreg     unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  txData          1   15[BANK0 ] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    7
  1808 ;; This function calls:
  1809 ;;		_EUSART2_Write
  1810 ;; This function is called by:
  1811 ;;		_printf
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text2
  1816  002282                     __ptext2:
  1817                           	opt stack 0
  1818  002282                     _putch:
  1819                           	opt stack 22
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;incstack = 0
  1823                           ;putch@txData stored from wreg
  1824  002282  0100               	movlb	0	; () banked
  1825  002284  6FB6               	movwf	putch@txData& (0+255),b
  1826                           
  1827                           ;eusart2.c: 112: EUSART2_Write(txData);
  1828  002286  0100               	movlb	0	; () banked
  1829  002288  51B6               	movf	putch@txData& (0+255),w,b
  1830  00228A  EC48  F011         	call	_EUSART2_Write
  1831  00228E  0012               	return		;funcret
  1832  002290                     __end_of_putch:
  1833                           	opt stack 0
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           intcon	equ	0xFF2
  1841                           postinc0	equ	0xFEE
  1842                           wreg	equ	0xFE8
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _EUSART2_Write *****************
  1850 ;; Defined at:
  1851 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  txData          1    wreg     unsigned char 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  txData          1   14[BANK0 ] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1869 ;;Total ram usage:        1 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    6
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_putch
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text3
  1880  002290                     __ptext3:
  1881                           	opt stack 0
  1882  002290                     _EUSART2_Write:
  1883                           	opt stack 22
  1884                           
  1885                           ;incstack = 0
  1886                           ;EUSART2_Write@txData stored from wreg
  1887  002290  0100               	movlb	0	; () banked
  1888  002292  6FB5               	movwf	EUSART2_Write@txData& (0+255),b
  1889  002294                     l31:
  1890  002294  A8A4               	btfss	4004,4,c	;volatile
  1891  002296  D7FE               	goto	l31
  1892                           
  1893                           ;eusart2.c: 100: }
  1894                           ;eusart2.c: 102: TXREG2 = txData;
  1895  002298  C0B5  FF79         	movff	EUSART2_Write@txData,3961	;volatile
  1896  00229C  0012               	return		;funcret
  1897  00229E                     __end_of_EUSART2_Write:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           
  1914 ;; *************** function ___llmod *****************
  1915 ;; Defined at:
  1916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  dividend        4   27[BANK0 ] unsigned long 
  1919 ;;  divisor         4   31[BANK0 ] unsigned long 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  counter         1   35[BANK0 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  4   27[BANK0 ] unsigned long 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1931 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1934 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1935 ;;Total ram usage:        9 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    6
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_printf
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text4
  1946  001B88                     __ptext4:
  1947                           	opt stack 0
  1948  001B88                     ___llmod:
  1949                           	opt stack 23
  1950                           
  1951                           ;incstack = 0
  1952  001B88  0100               	movlb	0	; () banked
  1953  001B8A  51C6               	movf	___llmod@divisor& (0+255),w,b
  1954  001B8C  0100               	movlb	0	; () banked
  1955  001B8E  11C7               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  1956  001B90  0100               	movlb	0	; () banked
  1957  001B92  11C8               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  1958  001B94  0100               	movlb	0	; () banked
  1959  001B96  11C9               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  1960  001B98  B4D8               	btfsc	status,2,c
  1961  001B9A  D03A               	goto	l1000
  1962                           
  1963                           ; BSR set to: 0
  1964  001B9C  0E01               	movlw	1
  1965  001B9E  0100               	movlb	0	; () banked
  1966  001BA0  6FCA               	movwf	___llmod@counter& (0+255),b
  1967  001BA2  D008               	goto	l2758
  1968  001BA4                     l2756:
  1969                           
  1970                           ; BSR set to: 0
  1971  001BA4  0100               	movlb	0	; () banked
  1972  001BA6  90D8               	bcf	status,0,c
  1973  001BA8  37C6               	rlcf	___llmod@divisor& (0+255),f,b
  1974  001BAA  37C7               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  1975  001BAC  37C8               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  1976  001BAE  37C9               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  1977  001BB0  0100               	movlb	0	; () banked
  1978  001BB2  2BCA               	incf	___llmod@counter& (0+255),f,b
  1979  001BB4                     l2758:
  1980                           
  1981                           ; BSR set to: 0
  1982  001BB4  0100               	movlb	0	; () banked
  1983  001BB6  AFC9               	btfss	(___llmod@divisor+3)& (0+255),7,b
  1984  001BB8  D7F5               	goto	l2756
  1985  001BBA                     l2760:
  1986                           
  1987                           ; BSR set to: 0
  1988  001BBA  0100               	movlb	0	; () banked
  1989  001BBC  51C6               	movf	___llmod@divisor& (0+255),w,b
  1990  001BBE  0100               	movlb	0	; () banked
  1991  001BC0  5DC2               	subwf	___llmod@dividend& (0+255),w,b
  1992  001BC2  0100               	movlb	0	; () banked
  1993  001BC4  51C7               	movf	(___llmod@divisor+1)& (0+255),w,b
  1994  001BC6  0100               	movlb	0	; () banked
  1995  001BC8  59C3               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  1996  001BCA  0100               	movlb	0	; () banked
  1997  001BCC  51C8               	movf	(___llmod@divisor+2)& (0+255),w,b
  1998  001BCE  0100               	movlb	0	; () banked
  1999  001BD0  59C4               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2000  001BD2  0100               	movlb	0	; () banked
  2001  001BD4  51C9               	movf	(___llmod@divisor+3)& (0+255),w,b
  2002  001BD6  0100               	movlb	0	; () banked
  2003  001BD8  59C5               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2004  001BDA  A0D8               	btfss	status,0,c
  2005  001BDC  D010               	goto	l2764
  2006                           
  2007                           ; BSR set to: 0
  2008  001BDE  0100               	movlb	0	; () banked
  2009  001BE0  51C6               	movf	___llmod@divisor& (0+255),w,b
  2010  001BE2  0100               	movlb	0	; () banked
  2011  001BE4  5FC2               	subwf	___llmod@dividend& (0+255),f,b
  2012  001BE6  0100               	movlb	0	; () banked
  2013  001BE8  51C7               	movf	(___llmod@divisor+1)& (0+255),w,b
  2014  001BEA  0100               	movlb	0	; () banked
  2015  001BEC  5BC3               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2016  001BEE  0100               	movlb	0	; () banked
  2017  001BF0  51C8               	movf	(___llmod@divisor+2)& (0+255),w,b
  2018  001BF2  0100               	movlb	0	; () banked
  2019  001BF4  5BC4               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2020  001BF6  0100               	movlb	0	; () banked
  2021  001BF8  51C9               	movf	(___llmod@divisor+3)& (0+255),w,b
  2022  001BFA  0100               	movlb	0	; () banked
  2023  001BFC  5BC5               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2024  001BFE                     l2764:
  2025                           
  2026                           ; BSR set to: 0
  2027  001BFE  0100               	movlb	0	; () banked
  2028  001C00  90D8               	bcf	status,0,c
  2029  001C02  33C9               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  2030  001C04  33C8               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  2031  001C06  33C7               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  2032  001C08  33C6               	rrcf	___llmod@divisor& (0+255),f,b
  2033                           
  2034                           ; BSR set to: 0
  2035  001C0A  0100               	movlb	0	; () banked
  2036  001C0C  2FCA               	decfsz	___llmod@counter& (0+255),f,b
  2037  001C0E  D7D5               	goto	l2760
  2038  001C10                     l1000:
  2039                           
  2040                           ; BSR set to: 0
  2041  001C10  C0C2  F0C2         	movff	___llmod@dividend,?___llmod
  2042  001C14  C0C3  F0C3         	movff	___llmod@dividend+1,?___llmod+1
  2043  001C18  C0C4  F0C4         	movff	___llmod@dividend+2,?___llmod+2
  2044  001C1C  C0C5  F0C5         	movff	___llmod@dividend+3,?___llmod+3
  2045                           
  2046                           ; BSR set to: 0
  2047  001C20  0012               	return		;funcret
  2048  001C22                     __end_of___llmod:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           prodh	equ	0xFF4
  2055                           prodl	equ	0xFF3
  2056                           intcon	equ	0xFF2
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postinc2	equ	0xFDE
  2060                           postdec2	equ	0xFDD
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function ___lldiv *****************
  2066 ;; Defined at:
  2067 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  dividend        4   14[BANK0 ] unsigned long 
  2070 ;;  divisor         4   18[BANK0 ] unsigned long 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  quotient        4   22[BANK0 ] unsigned long 
  2073 ;;  counter         1   26[BANK0 ] unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  4   14[BANK0 ] unsigned long 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2083 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2084 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2086 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2087 ;;Total ram usage:       13 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    6
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_printf
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text5
  2098  001A20                     __ptext5:
  2099                           	opt stack 0
  2100  001A20                     ___lldiv:
  2101                           	opt stack 23
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;incstack = 0
  2105  001A20  0E00               	movlw	0
  2106  001A22  0100               	movlb	0	; () banked
  2107  001A24  6FBD               	movwf	___lldiv@quotient& (0+255),b
  2108  001A26  0E00               	movlw	0
  2109  001A28  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
  2110  001A2A  0E00               	movlw	0
  2111  001A2C  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
  2112  001A2E  0E00               	movlw	0
  2113  001A30  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116  001A32  0100               	movlb	0	; () banked
  2117  001A34  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2118  001A36  0100               	movlb	0	; () banked
  2119  001A38  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2120  001A3A  0100               	movlb	0	; () banked
  2121  001A3C  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2122  001A3E  0100               	movlb	0	; () banked
  2123  001A40  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2124  001A42  B4D8               	btfsc	status,2,c
  2125  001A44  D042               	goto	l990
  2126                           
  2127                           ; BSR set to: 0
  2128  001A46  0E01               	movlw	1
  2129  001A48  0100               	movlb	0	; () banked
  2130  001A4A  6FC1               	movwf	___lldiv@counter& (0+255),b
  2131  001A4C  D008               	goto	l2738
  2132  001A4E                     l2736:
  2133                           
  2134                           ; BSR set to: 0
  2135  001A4E  0100               	movlb	0	; () banked
  2136  001A50  90D8               	bcf	status,0,c
  2137  001A52  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
  2138  001A54  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2139  001A56  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2140  001A58  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2141  001A5A  0100               	movlb	0	; () banked
  2142  001A5C  2BC1               	incf	___lldiv@counter& (0+255),f,b
  2143  001A5E                     l2738:
  2144                           
  2145                           ; BSR set to: 0
  2146  001A5E  0100               	movlb	0	; () banked
  2147  001A60  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2148  001A62  D7F5               	goto	l2736
  2149  001A64                     l2740:
  2150                           
  2151                           ; BSR set to: 0
  2152  001A64  0100               	movlb	0	; () banked
  2153  001A66  90D8               	bcf	status,0,c
  2154  001A68  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
  2155  001A6A  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2156  001A6C  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2157  001A6E  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2158                           
  2159                           ; BSR set to: 0
  2160  001A70  0100               	movlb	0	; () banked
  2161  001A72  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2162  001A74  0100               	movlb	0	; () banked
  2163  001A76  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
  2164  001A78  0100               	movlb	0	; () banked
  2165  001A7A  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2166  001A7C  0100               	movlb	0	; () banked
  2167  001A7E  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2168  001A80  0100               	movlb	0	; () banked
  2169  001A82  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2170  001A84  0100               	movlb	0	; () banked
  2171  001A86  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2172  001A88  0100               	movlb	0	; () banked
  2173  001A8A  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2174  001A8C  0100               	movlb	0	; () banked
  2175  001A8E  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2176  001A90  A0D8               	btfss	status,0,c
  2177  001A92  D012               	goto	l2748
  2178                           
  2179                           ; BSR set to: 0
  2180  001A94  0100               	movlb	0	; () banked
  2181  001A96  51B9               	movf	___lldiv@divisor& (0+255),w,b
  2182  001A98  0100               	movlb	0	; () banked
  2183  001A9A  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
  2184  001A9C  0100               	movlb	0	; () banked
  2185  001A9E  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2186  001AA0  0100               	movlb	0	; () banked
  2187  001AA2  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2188  001AA4  0100               	movlb	0	; () banked
  2189  001AA6  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2190  001AA8  0100               	movlb	0	; () banked
  2191  001AAA  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2192  001AAC  0100               	movlb	0	; () banked
  2193  001AAE  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2194  001AB0  0100               	movlb	0	; () banked
  2195  001AB2  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2196                           
  2197                           ; BSR set to: 0
  2198  001AB4  0100               	movlb	0	; () banked
  2199  001AB6  81BD               	bsf	___lldiv@quotient& (0+255),0,b
  2200  001AB8                     l2748:
  2201                           
  2202                           ; BSR set to: 0
  2203  001AB8  0100               	movlb	0	; () banked
  2204  001ABA  90D8               	bcf	status,0,c
  2205  001ABC  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2206  001ABE  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2207  001AC0  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2208  001AC2  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
  2209                           
  2210                           ; BSR set to: 0
  2211  001AC4  0100               	movlb	0	; () banked
  2212  001AC6  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
  2213  001AC8  D7CD               	goto	l2740
  2214  001ACA                     l990:
  2215                           
  2216                           ; BSR set to: 0
  2217  001ACA  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
  2218  001ACE  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
  2219  001AD2  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
  2220  001AD6  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
  2221                           
  2222                           ; BSR set to: 0
  2223  001ADA  0012               	return		;funcret
  2224  001ADC                     __end_of___lldiv:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           prodh	equ	0xFF4
  2231                           prodl	equ	0xFF3
  2232                           intcon	equ	0xFF2
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           postinc2	equ	0xFDE
  2236                           postdec2	equ	0xFDD
  2237                           fsr2h	equ	0xFDA
  2238                           fsr2l	equ	0xFD9
  2239                           status	equ	0xFD8
  2240                           
  2241 ;; *************** function _delay_ms *****************
  2242 ;; Defined at:
  2243 ;;		line 13 in file "ax.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  ms              2   22[BANK0 ] int 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  i               2   27[BANK0 ] int 
  2248 ;;  n               2   25[BANK0 ] int 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2258 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2259 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2261 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;Total ram usage:        7 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    7
  2265 ;; This function calls:
  2266 ;;		___awdiv
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text6
  2273  001CBA                     __ptext6:
  2274                           	opt stack 0
  2275  001CBA                     _delay_ms:
  2276                           	opt stack 23
  2277                           
  2278                           ;ax.c: 14: if (ms < 10) {
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;incstack = 0
  2282  001CBA  0100               	movlb	0	; () banked
  2283  001CBC  BFBE               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  2284  001CBE  D008               	goto	l2974
  2285  001CC0  0100               	movlb	0	; () banked
  2286  001CC2  51BE               	movf	(delay_ms@ms+1)& (0+255),w,b
  2287  001CC4  E10F               	bnz	l2976
  2288  001CC6  0E0A               	movlw	10
  2289  001CC8  0100               	movlb	0	; () banked
  2290  001CCA  5DBD               	subwf	delay_ms@ms& (0+255),w,b
  2291  001CCC  B0D8               	btfsc	status,0,c
  2292  001CCE  D00A               	goto	l2976
  2293  001CD0                     l2974:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  2297  001CD0  0ED0               	movlw	208
  2298  001CD2  0100               	movlb	0	; () banked
  2299  001CD4  6FBF               	movwf	??_delay_ms& (0+255),b
  2300  001CD6  0EC9               	movlw	201
  2301  001CD8                     u2087:
  2302  001CD8  2EE8               	decfsz	wreg,f,c
  2303  001CDA  D7FE               	bra	u2087
  2304  001CDC  2FBF               	decfsz	??_delay_ms& (0+255),f,b
  2305  001CDE  D7FC               	bra	u2087
  2306  001CE0  D000               	nop2	
  2307                           
  2308                           ;ax.c: 16: } else {
  2309  001CE2  0012               	return	
  2310  001CE4                     l2976:
  2311                           
  2312                           ;ax.c: 17: int n = ms / 10;
  2313  001CE4  C0BD  F0B5         	movff	delay_ms@ms,___awdiv@dividend
  2314  001CE8  C0BE  F0B6         	movff	delay_ms@ms+1,___awdiv@dividend+1
  2315  001CEC  0E00               	movlw	0
  2316  001CEE  0100               	movlb	0	; () banked
  2317  001CF0  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  2318  001CF2  0E0A               	movlw	10
  2319  001CF4  6FB7               	movwf	___awdiv@divisor& (0+255),b
  2320  001CF6  ECB1  F00C         	call	___awdiv	;wreg free
  2321  001CFA  C0B5  F0C0         	movff	?___awdiv,delay_ms@n
  2322  001CFE  C0B6  F0C1         	movff	?___awdiv+1,delay_ms@n+1
  2323                           
  2324                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  2325  001D02  0E00               	movlw	0
  2326  001D04  0100               	movlb	0	; () banked
  2327  001D06  6FC3               	movwf	(delay_ms@i+1)& (0+255),b
  2328  001D08  0E00               	movlw	0
  2329  001D0A  6FC2               	movwf	delay_ms@i& (0+255),b
  2330  001D0C  D00C               	goto	l417
  2331  001D0E                     l2980:
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  2335  001D0E  0ED0               	movlw	208
  2336  001D10  0100               	movlb	0	; () banked
  2337  001D12  6FBF               	movwf	??_delay_ms& (0+255),b
  2338  001D14  0EC9               	movlw	201
  2339  001D16                     u2097:
  2340  001D16  2EE8               	decfsz	wreg,f,c
  2341  001D18  D7FE               	bra	u2097
  2342  001D1A  2FBF               	decfsz	??_delay_ms& (0+255),f,b
  2343  001D1C  D7FC               	bra	u2097
  2344  001D1E  D000               	nop2	
  2345  001D20  0100               	movlb	0	; () banked
  2346  001D22  4BC2               	infsnz	delay_ms@i& (0+255),f,b
  2347  001D24  2BC3               	incf	(delay_ms@i+1)& (0+255),f,b
  2348  001D26                     l417:
  2349                           
  2350                           ; BSR set to: 0
  2351  001D26  0100               	movlb	0	; () banked
  2352  001D28  51C0               	movf	delay_ms@n& (0+255),w,b
  2353  001D2A  0100               	movlb	0	; () banked
  2354  001D2C  5DC2               	subwf	delay_ms@i& (0+255),w,b
  2355  001D2E  0100               	movlb	0	; () banked
  2356  001D30  51C3               	movf	(delay_ms@i+1)& (0+255),w,b
  2357  001D32  0A80               	xorlw	128
  2358  001D34  0100               	movlb	0	; () banked
  2359  001D36  6FBF               	movwf	??_delay_ms& (0+255),b
  2360  001D38  0100               	movlb	0	; () banked
  2361  001D3A  51C1               	movf	(delay_ms@n+1)& (0+255),w,b
  2362  001D3C  0A80               	xorlw	128
  2363  001D3E  0100               	movlb	0	; () banked
  2364  001D40  59BF               	subwfb	??_delay_ms& (0+255),w,b
  2365  001D42  B0D8               	btfsc	status,0,c
  2366  001D44  0012               	return	
  2367  001D46  D7E3               	goto	l2980
  2368  001D48                     __end_of_delay_ms:
  2369                           	opt stack 0
  2370                           tblptru	equ	0xFF8
  2371                           tblptrh	equ	0xFF7
  2372                           tblptrl	equ	0xFF6
  2373                           tablat	equ	0xFF5
  2374                           prodh	equ	0xFF4
  2375                           prodl	equ	0xFF3
  2376                           intcon	equ	0xFF2
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function ___awdiv *****************
  2386 ;; Defined at:
  2387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  dividend        2   14[BANK0 ] int 
  2390 ;;  divisor         2   16[BANK0 ] int 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  quotient        2   20[BANK0 ] int 
  2393 ;;  sign            1   19[BANK0 ] unsigned char 
  2394 ;;  counter         1   18[BANK0 ] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  2   14[BANK0 ] int 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2407 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2408 ;;Total ram usage:        8 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    6
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_delay_ms
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text7
  2419  001962                     __ptext7:
  2420                           	opt stack 0
  2421  001962                     ___awdiv:
  2422                           	opt stack 23
  2423                           
  2424                           ;incstack = 0
  2425  001962  0E00               	movlw	0
  2426  001964  0100               	movlb	0	; () banked
  2427  001966  6FBA               	movwf	___awdiv@sign& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430  001968  0100               	movlb	0	; () banked
  2431  00196A  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2432  00196C  D008               	goto	l2694
  2433                           
  2434                           ; BSR set to: 0
  2435  00196E  0100               	movlb	0	; () banked
  2436  001970  6DB7               	negf	___awdiv@divisor& (0+255),b
  2437  001972  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2438  001974  B0D8               	btfsc	status,0,c
  2439  001976  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2440                           
  2441                           ; BSR set to: 0
  2442  001978  0E01               	movlw	1
  2443  00197A  0100               	movlb	0	; () banked
  2444  00197C  6FBA               	movwf	___awdiv@sign& (0+255),b
  2445  00197E                     l2694:
  2446                           
  2447                           ; BSR set to: 0
  2448  00197E  0100               	movlb	0	; () banked
  2449  001980  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2450  001982  D008               	goto	l2700
  2451                           
  2452                           ; BSR set to: 0
  2453  001984  0100               	movlb	0	; () banked
  2454  001986  6DB5               	negf	___awdiv@dividend& (0+255),b
  2455  001988  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2456  00198A  B0D8               	btfsc	status,0,c
  2457  00198C  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2458                           
  2459                           ; BSR set to: 0
  2460  00198E  0E01               	movlw	1
  2461  001990  0100               	movlb	0	; () banked
  2462  001992  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  2463  001994                     l2700:
  2464                           
  2465                           ; BSR set to: 0
  2466  001994  0E00               	movlw	0
  2467  001996  0100               	movlb	0	; () banked
  2468  001998  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  2469  00199A  0E00               	movlw	0
  2470  00199C  6FBB               	movwf	___awdiv@quotient& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473  00199E  0100               	movlb	0	; () banked
  2474  0019A0  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2475  0019A2  0100               	movlb	0	; () banked
  2476  0019A4  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2477  0019A6  B4D8               	btfsc	status,2,c
  2478  0019A8  D02C               	goto	l2722
  2479                           
  2480                           ; BSR set to: 0
  2481  0019AA  0E01               	movlw	1
  2482  0019AC  0100               	movlb	0	; () banked
  2483  0019AE  6FB9               	movwf	___awdiv@counter& (0+255),b
  2484  0019B0  D006               	goto	l2708
  2485  0019B2                     l2706:
  2486                           
  2487                           ; BSR set to: 0
  2488  0019B2  0100               	movlb	0	; () banked
  2489  0019B4  90D8               	bcf	status,0,c
  2490  0019B6  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  2491  0019B8  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2492  0019BA  0100               	movlb	0	; () banked
  2493  0019BC  2BB9               	incf	___awdiv@counter& (0+255),f,b
  2494  0019BE                     l2708:
  2495                           
  2496                           ; BSR set to: 0
  2497  0019BE  0100               	movlb	0	; () banked
  2498  0019C0  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2499  0019C2  D7F7               	goto	l2706
  2500  0019C4                     l2710:
  2501                           
  2502                           ; BSR set to: 0
  2503  0019C4  0100               	movlb	0	; () banked
  2504  0019C6  90D8               	bcf	status,0,c
  2505  0019C8  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  2506  0019CA  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2507                           
  2508                           ; BSR set to: 0
  2509  0019CC  0100               	movlb	0	; () banked
  2510  0019CE  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2511  0019D0  0100               	movlb	0	; () banked
  2512  0019D2  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  2513  0019D4  0100               	movlb	0	; () banked
  2514  0019D6  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2515  0019D8  0100               	movlb	0	; () banked
  2516  0019DA  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2517  0019DC  A0D8               	btfss	status,0,c
  2518  0019DE  D00A               	goto	l2718
  2519                           
  2520                           ; BSR set to: 0
  2521  0019E0  0100               	movlb	0	; () banked
  2522  0019E2  51B7               	movf	___awdiv@divisor& (0+255),w,b
  2523  0019E4  0100               	movlb	0	; () banked
  2524  0019E6  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  2525  0019E8  0100               	movlb	0	; () banked
  2526  0019EA  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2527  0019EC  0100               	movlb	0	; () banked
  2528  0019EE  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2529                           
  2530                           ; BSR set to: 0
  2531  0019F0  0100               	movlb	0	; () banked
  2532  0019F2  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  2533  0019F4                     l2718:
  2534                           
  2535                           ; BSR set to: 0
  2536  0019F4  0100               	movlb	0	; () banked
  2537  0019F6  90D8               	bcf	status,0,c
  2538  0019F8  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2539  0019FA  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 0
  2542  0019FC  0100               	movlb	0	; () banked
  2543  0019FE  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  2544  001A00  D7E1               	goto	l2710
  2545  001A02                     l2722:
  2546                           
  2547                           ; BSR set to: 0
  2548  001A02  0100               	movlb	0	; () banked
  2549  001A04  51BA               	movf	___awdiv@sign& (0+255),w,b
  2550  001A06  0100               	movlb	0	; () banked
  2551  001A08  B4D8               	btfsc	status,2,c
  2552  001A0A  D005               	goto	l2726
  2553                           
  2554                           ; BSR set to: 0
  2555  001A0C  0100               	movlb	0	; () banked
  2556  001A0E  6DBB               	negf	___awdiv@quotient& (0+255),b
  2557  001A10  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2558  001A12  B0D8               	btfsc	status,0,c
  2559  001A14  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2560  001A16                     l2726:
  2561                           
  2562                           ; BSR set to: 0
  2563  001A16  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  2564  001A1A  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  2565  001A1E  0012               	return	
  2566  001A20                     __end_of___awdiv:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           postinc2	equ	0xFDE
  2578                           postdec2	equ	0xFDD
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _SYSTEM_Initialize *****************
  2584 ;; Defined at:
  2585 ;;		line 111 in file "mcc_generated_files/mcc.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    8
  2606 ;; This function calls:
  2607 ;;		_ADC_Initialize
  2608 ;;		_EUSART1_Initialize
  2609 ;;		_EUSART2_Initialize
  2610 ;;		_I2C_Initialize
  2611 ;;		_INTERRUPT_Initialize
  2612 ;;		_OSCILLATOR_Initialize
  2613 ;;		_PIN_MANAGER_Initialize
  2614 ;;		_TMR1_Initialize
  2615 ;; This function is called by:
  2616 ;;		_main
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text8
  2621  0021E0                     __ptext8:
  2622                           	opt stack 0
  2623  0021E0                     _SYSTEM_Initialize:
  2624                           	opt stack 22
  2625                           
  2626                           ;mcc.c: 114: INTERRUPT_Initialize();
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;incstack = 0
  2630  0021E0  EC62  F011         	call	_INTERRUPT_Initialize	;wreg free
  2631                           
  2632                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  2633  0021E4  ECA1  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  2634                           
  2635                           ;mcc.c: 116: OSCILLATOR_Initialize();
  2636  0021E8  EC30  F011         	call	_OSCILLATOR_Initialize	;wreg free
  2637                           
  2638                           ;mcc.c: 117: I2C_Initialize();
  2639  0021EC  EC01  F011         	call	_I2C_Initialize	;wreg free
  2640                           
  2641                           ;mcc.c: 118: ADC_Initialize();
  2642  0021F0  EC0E  F011         	call	_ADC_Initialize	;wreg free
  2643                           
  2644                           ;mcc.c: 119: TMR1_Initialize();
  2645  0021F4  EC84  F010         	call	_TMR1_Initialize	;wreg free
  2646                           
  2647                           ;mcc.c: 120: EUSART1_Initialize();
  2648  0021F8  EC25  F011         	call	_EUSART1_Initialize	;wreg free
  2649                           
  2650                           ;mcc.c: 121: EUSART2_Initialize();
  2651  0021FC  EC1A  F011         	call	_EUSART2_Initialize	;wreg free
  2652  002200  0012               	return		;funcret
  2653  002202                     __end_of_SYSTEM_Initialize:
  2654                           	opt stack 0
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           prodh	equ	0xFF4
  2660                           prodl	equ	0xFF3
  2661                           intcon	equ	0xFF2
  2662                           postinc0	equ	0xFEE
  2663                           wreg	equ	0xFE8
  2664                           postinc2	equ	0xFDE
  2665                           postdec2	equ	0xFDD
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _TMR1_Initialize *****************
  2671 ;; Defined at:
  2672 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2690 ;;Total ram usage:        2 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    7
  2693 ;; This function calls:
  2694 ;;		_TMR1_StartTimer
  2695 ;; This function is called by:
  2696 ;;		_SYSTEM_Initialize
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text9
  2701  002108                     __ptext9:
  2702                           	opt stack 0
  2703  002108                     _TMR1_Initialize:
  2704                           	opt stack 22
  2705                           
  2706                           ;tmr1.c: 68: T1CON = 0x30;
  2707                           
  2708                           ;incstack = 0
  2709  002108  0E30               	movlw	48
  2710  00210A  6ECD               	movwf	4045,c	;volatile
  2711                           
  2712                           ;tmr1.c: 71: T1GCON = 0x00;
  2713  00210C  0E00               	movlw	0
  2714  00210E  6EAA               	movwf	4010,c	;volatile
  2715                           
  2716                           ;tmr1.c: 74: TMR1H = 0xF8;
  2717  002110  0EF8               	movlw	248
  2718  002112  6ECF               	movwf	4047,c	;volatile
  2719                           
  2720                           ;tmr1.c: 77: TMR1L = 0x30;
  2721  002114  0E30               	movlw	48
  2722  002116  6ECE               	movwf	4046,c	;volatile
  2723                           
  2724                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2725  002118  50CE               	movf	4046,w,c	;volatile
  2726  00211A  CFCF F0B5          	movff	4047,??_TMR1_Initialize	;volatile
  2727  00211E  0100               	movlb	0	; () banked
  2728  002120  6BB6               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  2729  002122  C0B5  F0B6         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  2730  002126  0100               	movlb	0	; () banked
  2731  002128  6BB5               	clrf	??_TMR1_Initialize& (0+255),b
  2732  00212A  0100               	movlb	0	; () banked
  2733  00212C  11B5               	iorwf	??_TMR1_Initialize& (0+255),w,b
  2734  00212E  0100               	movlb	0	; () banked
  2735  002130  6F9C               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  2736  002132  0100               	movlb	0	; () banked
  2737  002134  51B6               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  2738  002136  0100               	movlb	0	; () banked
  2739  002138  6F9D               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  2743  00213A  909E               	bcf	3998,0,c	;volatile
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;tmr1.c: 86: TMR1_StartTimer();
  2747  00213C  EC60  F011         	call	_TMR1_StartTimer	;wreg free
  2748  002140  0012               	return		;funcret
  2749  002142                     __end_of_TMR1_Initialize:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           prodh	equ	0xFF4
  2756                           prodl	equ	0xFF3
  2757                           intcon	equ	0xFF2
  2758                           postinc0	equ	0xFEE
  2759                           wreg	equ	0xFE8
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           fsr2h	equ	0xFDA
  2763                           fsr2l	equ	0xFD9
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function _TMR1_StartTimer *****************
  2767 ;; Defined at:
  2768 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		None
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2786 ;;Total ram usage:        0 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    6
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_TMR1_Initialize
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text10
  2797  0022C0                     __ptext10:
  2798                           	opt stack 0
  2799  0022C0                     _TMR1_StartTimer:
  2800                           	opt stack 22
  2801                           
  2802                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  2803                           
  2804                           ;incstack = 0
  2805  0022C0  80CD               	bsf	4045,0,c	;volatile
  2806  0022C2  0012               	return		;funcret
  2807  0022C4                     __end_of_TMR1_StartTimer:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon	equ	0xFF2
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _PIN_MANAGER_Initialize *****************
  2825 ;; Defined at:
  2826 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    6
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_SYSTEM_Initialize
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text11
  2855  002142                     __ptext11:
  2856                           	opt stack 0
  2857  002142                     _PIN_MANAGER_Initialize:
  2858                           	opt stack 23
  2859                           
  2860                           ;pin_manager.c: 56: LATE = 0x00;
  2861                           
  2862                           ;incstack = 0
  2863  002142  0E00               	movlw	0
  2864  002144  6E8D               	movwf	3981,c	;volatile
  2865                           
  2866                           ;pin_manager.c: 57: LATD = 0x00;
  2867  002146  0E00               	movlw	0
  2868  002148  6E8C               	movwf	3980,c	;volatile
  2869                           
  2870                           ;pin_manager.c: 58: LATA = 0x00;
  2871  00214A  0E00               	movlw	0
  2872  00214C  6E89               	movwf	3977,c	;volatile
  2873                           
  2874                           ;pin_manager.c: 59: LATB = 0x00;
  2875  00214E  0E00               	movlw	0
  2876  002150  6E8A               	movwf	3978,c	;volatile
  2877                           
  2878                           ;pin_manager.c: 60: LATC = 0x00;
  2879  002152  0E00               	movlw	0
  2880  002154  6E8B               	movwf	3979,c	;volatile
  2881                           
  2882                           ;pin_manager.c: 65: TRISE = 0x07;
  2883  002156  0E07               	movlw	7
  2884  002158  6E96               	movwf	3990,c	;volatile
  2885                           
  2886                           ;pin_manager.c: 66: TRISA = 0xEF;
  2887  00215A  0EEF               	movlw	239
  2888  00215C  6E92               	movwf	3986,c	;volatile
  2889                           
  2890                           ;pin_manager.c: 67: TRISB = 0xF2;
  2891  00215E  0EF2               	movlw	242
  2892  002160  6E93               	movwf	3987,c	;volatile
  2893                           
  2894                           ;pin_manager.c: 68: TRISC = 0xB8;
  2895  002162  0EB8               	movlw	184
  2896  002164  6E94               	movwf	3988,c	;volatile
  2897                           
  2898                           ;pin_manager.c: 69: TRISD = 0xA0;
  2899  002166  0EA0               	movlw	160
  2900  002168  6E95               	movwf	3989,c	;volatile
  2901                           
  2902                           ;pin_manager.c: 74: ANCON0 = 0xFF;
  2903  00216A  010F               	movlb	15	; () banked
  2904  00216C  695D               	setf	93,b	;volatile
  2905                           
  2906                           ;pin_manager.c: 75: ANCON1 = 0x7B;
  2907  00216E  0E7B               	movlw	123
  2908  002170  010F               	movlb	15	; () banked
  2909  002172  6F5C               	movwf	92,b	;volatile
  2910                           
  2911                           ;pin_manager.c: 80: WPUB = 0xFE;
  2912  002174  0EFE               	movlw	254
  2913  002176  010F               	movlb	15	; () banked
  2914  002178  6F5B               	movwf	91,b	;volatile
  2915                           
  2916                           ; BSR set to: 15
  2917  00217A  0012               	return		;funcret
  2918  00217C                     __end_of_PIN_MANAGER_Initialize:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           prodh	equ	0xFF4
  2925                           prodl	equ	0xFF3
  2926                           intcon	equ	0xFF2
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postinc2	equ	0xFDE
  2930                           postdec2	equ	0xFDD
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _OSCILLATOR_Initialize *****************
  2936 ;; Defined at:
  2937 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    6
  2958 ;; This function calls:
  2959 ;;		Nothing
  2960 ;; This function is called by:
  2961 ;;		_SYSTEM_Initialize
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text12
  2966  002260                     __ptext12:
  2967                           	opt stack 0
  2968  002260                     _OSCILLATOR_Initialize:
  2969                           	opt stack 23
  2970                           
  2971                           ;mcc.c: 127: OSCCON = 0x60;
  2972                           
  2973                           ; BSR set to: 15
  2974                           ;incstack = 0
  2975  002260  0E60               	movlw	96
  2976  002262  6ED3               	movwf	4051,c	;volatile
  2977                           
  2978                           ;mcc.c: 129: OSCCON2 = 0x00;
  2979  002264  0E00               	movlw	0
  2980  002266  6ED2               	movwf	4050,c	;volatile
  2981                           
  2982                           ;mcc.c: 131: OSCTUNE = 0x00;
  2983  002268  0E00               	movlw	0
  2984  00226A  6E9B               	movwf	3995,c	;volatile
  2985                           
  2986                           ;mcc.c: 133: REFOCON = 0x00;
  2987  00226C  0E00               	movlw	0
  2988  00226E  6E9A               	movwf	3994,c	;volatile
  2989  002270  0012               	return		;funcret
  2990  002272                     __end_of_OSCILLATOR_Initialize:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           postinc0	equ	0xFEE
  3000                           wreg	equ	0xFE8
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _INTERRUPT_Initialize *****************
  3008 ;; Defined at:
  3009 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		None
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    6
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_SYSTEM_Initialize
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text13
  3038  0022C4                     __ptext13:
  3039                           	opt stack 0
  3040  0022C4                     _INTERRUPT_Initialize:
  3041                           	opt stack 23
  3042                           
  3043                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3044                           
  3045                           ;incstack = 0
  3046  0022C4  9ED0               	bcf	4048,7,c	;volatile
  3047  0022C6  0012               	return		;funcret
  3048  0022C8                     __end_of_INTERRUPT_Initialize:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodh	equ	0xFF4
  3055                           prodl	equ	0xFF3
  3056                           intcon	equ	0xFF2
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postinc2	equ	0xFDE
  3060                           postdec2	equ	0xFDD
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function _I2C_Initialize *****************
  3066 ;; Defined at:
  3067 ;;		line 79 in file "mcc_generated_files/i2c.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;		None
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3085 ;;Total ram usage:        0 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    6
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_SYSTEM_Initialize
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text14
  3096  002202                     __ptext14:
  3097                           	opt stack 0
  3098  002202                     _I2C_Initialize:
  3099                           	opt stack 23
  3100                           
  3101                           ;i2c.c: 82: SSPSTAT = 0x00;
  3102                           
  3103                           ;incstack = 0
  3104  002202  0E00               	movlw	0
  3105  002204  6EC7               	movwf	4039,c	;volatile
  3106                           
  3107                           ;i2c.c: 84: SSPCON1 = 0x3E;
  3108  002206  0E3E               	movlw	62
  3109  002208  6EC6               	movwf	4038,c	;volatile
  3110                           
  3111                           ;i2c.c: 86: SSPCON2 = 0x01;
  3112  00220A  0E01               	movlw	1
  3113  00220C  6EC5               	movwf	4037,c	;volatile
  3114                           
  3115                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  3116  00220E  0EFE               	movlw	254
  3117  002210  6EC8               	movwf	4040,c	;volatile
  3118                           
  3119                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  3120  002212  0E10               	movlw	16
  3121  002214  6EC8               	movwf	4040,c	;volatile
  3122                           
  3123                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  3124  002216  969E               	bcf	3998,3,c	;volatile
  3125                           
  3126                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  3127  002218  869D               	bsf	3997,3,c	;volatile
  3128  00221A  0012               	return		;funcret
  3129  00221C                     __end_of_I2C_Initialize:
  3130                           	opt stack 0
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           prodh	equ	0xFF4
  3136                           prodl	equ	0xFF3
  3137                           intcon	equ	0xFF2
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           
  3146 ;; *************** function _EUSART2_Initialize *****************
  3147 ;; Defined at:
  3148 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3166 ;;Total ram usage:        0 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    6
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_SYSTEM_Initialize
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text15
  3177  002234                     __ptext15:
  3178                           	opt stack 0
  3179  002234                     _EUSART2_Initialize:
  3180                           	opt stack 23
  3181                           
  3182                           ;eusart2.c: 60: BAUDCON2 = 0x18;
  3183                           
  3184                           ;incstack = 0
  3185  002234  0E18               	movlw	24
  3186  002236  6EB9               	movwf	4025,c	;volatile
  3187                           
  3188                           ;eusart2.c: 63: RCSTA2 = 0x90;
  3189  002238  0E90               	movlw	144
  3190  00223A  6EA6               	movwf	4006,c	;volatile
  3191                           
  3192                           ;eusart2.c: 66: TXSTA2 = 0xA6;
  3193  00223C  0EA6               	movlw	166
  3194  00223E  6EBA               	movwf	4026,c	;volatile
  3195                           
  3196                           ;eusart2.c: 69: SPBRG2 = 0x8A;
  3197  002240  0E8A               	movlw	138
  3198  002242  6E7B               	movwf	3963,c	;volatile
  3199                           
  3200                           ;eusart2.c: 72: SPBRGH2 = 0x00;
  3201  002244  0E00               	movlw	0
  3202  002246  6E7C               	movwf	3964,c	;volatile
  3203  002248  0012               	return		;funcret
  3204  00224A                     __end_of_EUSART2_Initialize:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _EUSART1_Initialize *****************
  3222 ;; Defined at:
  3223 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3241 ;;Total ram usage:        0 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    6
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_SYSTEM_Initialize
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           	psect	text16
  3252  00224A                     __ptext16:
  3253                           	opt stack 0
  3254  00224A                     _EUSART1_Initialize:
  3255                           	opt stack 23
  3256                           
  3257                           ;eusart1.c: 60: BAUDCON1 = 0x08;
  3258                           
  3259                           ;incstack = 0
  3260  00224A  0E08               	movlw	8
  3261  00224C  6EA7               	movwf	4007,c	;volatile
  3262                           
  3263                           ;eusart1.c: 63: RCSTA1 = 0x90;
  3264  00224E  0E90               	movlw	144
  3265  002250  6EAB               	movwf	4011,c	;volatile
  3266                           
  3267                           ;eusart1.c: 66: TXSTA1 = 0xA4;
  3268  002252  0EA4               	movlw	164
  3269  002254  6EAC               	movwf	4012,c	;volatile
  3270                           
  3271                           ;eusart1.c: 69: SPBRG1 = 0x0F;
  3272  002256  0E0F               	movlw	15
  3273  002258  6EAF               	movwf	4015,c	;volatile
  3274                           
  3275                           ;eusart1.c: 72: SPBRGH1 = 0x00;
  3276  00225A  0E00               	movlw	0
  3277  00225C  6E7D               	movwf	3965,c	;volatile
  3278  00225E  0012               	return		;funcret
  3279  002260                     __end_of_EUSART1_Initialize:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           postinc0	equ	0xFEE
  3289                           wreg	equ	0xFE8
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function _ADC_Initialize *****************
  3297 ;; Defined at:
  3298 ;;		line 58 in file "mcc_generated_files/adc.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3316 ;;Total ram usage:        0 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    6
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_SYSTEM_Initialize
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text17
  3327  00221C                     __ptext17:
  3328                           	opt stack 0
  3329  00221C                     _ADC_Initialize:
  3330                           	opt stack 23
  3331                           
  3332                           ;adc.c: 63: ADCON0 = 0x01;
  3333                           
  3334                           ;incstack = 0
  3335  00221C  0E01               	movlw	1
  3336  00221E  6EC2               	movwf	4034,c	;volatile
  3337                           
  3338                           ;adc.c: 66: ADCON1 = 0x80;
  3339  002220  0E80               	movlw	128
  3340  002222  6EC1               	movwf	4033,c	;volatile
  3341                           
  3342                           ;adc.c: 69: ADCON2 = 0x16;
  3343  002224  0E16               	movlw	22
  3344  002226  6EC0               	movwf	4032,c	;volatile
  3345                           
  3346                           ;adc.c: 72: ADRESH = 0x00;
  3347  002228  0E00               	movlw	0
  3348  00222A  6EC4               	movwf	4036,c	;volatile
  3349                           
  3350                           ;adc.c: 75: ADRESL = 0x00;
  3351  00222C  0E00               	movlw	0
  3352  00222E  6EC3               	movwf	4035,c	;volatile
  3353                           
  3354                           ;adc.c: 78: PIE1bits.ADIE = 1;
  3355  002230  8C9D               	bsf	3997,6,c	;volatile
  3356  002232  0012               	return		;funcret
  3357  002234                     __end_of_ADC_Initialize:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _ADC_GetConversion *****************
  3375 ;; Defined at:
  3376 ;;		line 105 in file "mcc_generated_files/adc.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  channel         1    wreg     enum E15092
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  channel         1   18[BANK0 ] enum E15092
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  2   14[BANK0 ] unsigned int 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3390 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3394 ;;Total ram usage:        5 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    6
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_main
  3401 ;;		_getADC
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text18
  3406  00208A                     __ptext18:
  3407                           	opt stack 0
  3408  00208A                     _ADC_GetConversion:
  3409                           	opt stack 24
  3410                           
  3411                           ;incstack = 0
  3412                           ;ADC_GetConversion@channel stored from wreg
  3413  00208A  0100               	movlb	0	; () banked
  3414  00208C  6FB9               	movwf	ADC_GetConversion@channel& (0+255),b
  3415                           
  3416                           ;adc.c: 108: ADCON0bits.CHS = channel;
  3417  00208E  C0B9  F0B7         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  3418  002092  0100               	movlb	0	; () banked
  3419  002094  47B7               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3420  002096  47B7               	rlncf	??_ADC_GetConversion& (0+255),f,b
  3421  002098  50C2               	movf	4034,w,c	;volatile
  3422  00209A  0100               	movlb	0	; () banked
  3423  00209C  19B7               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3424  00209E  0B83               	andlw	-125
  3425  0020A0  19B7               	xorwf	??_ADC_GetConversion& (0+255),w,b
  3426  0020A2  6EC2               	movwf	4034,c	;volatile
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;adc.c: 111: ADCON0bits.ADON = 1;
  3430  0020A4  80C2               	bsf	4034,0,c	;volatile
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  3434  0020A6  82C2               	bsf	4034,1,c	;volatile
  3435  0020A8                     l253:
  3436  0020A8  B2C2               	btfsc	4034,1,c	;volatile
  3437  0020AA  D7FE               	goto	l253
  3438                           
  3439                           ;adc.c: 120: }
  3440                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  3441  0020AC  50C4               	movf	4036,w,c	;volatile
  3442  0020AE  0100               	movlb	0	; () banked
  3443  0020B0  6FB8               	movwf	(??_ADC_GetConversion+1)& (0+255),b
  3444  0020B2  6BB7               	clrf	??_ADC_GetConversion& (0+255),b
  3445  0020B4  50C3               	movf	4035,w,c	;volatile
  3446  0020B6  0100               	movlb	0	; () banked
  3447  0020B8  25B7               	addwf	??_ADC_GetConversion& (0+255),w,b
  3448  0020BA  0100               	movlb	0	; () banked
  3449  0020BC  6FB5               	movwf	?_ADC_GetConversion& (0+255),b
  3450  0020BE  0E00               	movlw	0
  3451  0020C0  0100               	movlb	0	; () banked
  3452  0020C2  21B8               	addwfc	(??_ADC_GetConversion+1)& (0+255),w,b
  3453  0020C4  0100               	movlb	0	; () banked
  3454  0020C6  6FB6               	movwf	(?_ADC_GetConversion+1)& (0+255),b
  3455  0020C8  0012               	return	
  3456  0020CA                     __end_of_ADC_GetConversion:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           intcon	equ	0xFF2
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _INTERRUPT_InterruptManager *****************
  3474 ;; Defined at:
  3475 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;Total ram usage:       14 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    5
  3496 ;; This function calls:
  3497 ;;		_ADC_ISR
  3498 ;;		_I2C_ISR
  3499 ;; This function is called by:
  3500 ;;		Interrupt level 2
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	intcode
  3505  000008                     __pintcode:
  3506                           	opt stack 0
  3507  000008                     _INTERRUPT_InterruptManager:
  3508                           	opt stack 22
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;incstack = 0
  3512  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3513  00000A  CFFA F0A7          	movff	pclath,??_INTERRUPT_InterruptManager
  3514  00000E  CFFB F0A8          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3515  000012  CFE9 F0A9          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3516  000016  CFEA F0AA          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3517  00001A  CFE1 F0AB          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3518  00001E  CFE2 F0AC          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3519  000022  CFD9 F0AD          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3520  000026  CFDA F0AE          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3521  00002A  CFF3 F0AF          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3522  00002E  CFF4 F0B0          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3523  000032  CFF6 F0B1          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3524  000036  CFF7 F0B2          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3525  00003A  CFF8 F0B3          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3526  00003E  CFF5 F0B4          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3527                           
  3528                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  3529  000042  BCF2               	btfsc	intcon,6,c	;volatile
  3530  000044  AC9D               	btfss	3997,6,c	;volatile
  3531  000046  D003               	goto	i2l3014
  3532  000048  BC9E               	btfsc	3998,6,c	;volatile
  3533                           
  3534                           ;interrupt_manager.c: 61: {
  3535                           ;interrupt_manager.c: 62: ADC_ISR();
  3536  00004A  EC64  F011         	call	_ADC_ISR	;wreg free
  3537  00004E                     i2l3014:
  3538                           
  3539                           ;interrupt_manager.c: 63: }
  3540                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  3541  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  3542  000050  A69D               	btfss	3997,3,c	;volatile
  3543  000052  D003               	goto	i2l309
  3544  000054  B69E               	btfsc	3998,3,c	;volatile
  3545                           
  3546                           ;interrupt_manager.c: 65: {
  3547                           ;interrupt_manager.c: 66: I2C_ISR();
  3548  000056  EC6E  F00D         	call	_I2C_ISR	;wreg free
  3549  00005A                     i2l309:
  3550  00005A  C0B4  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3551  00005E  C0B3  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3552  000062  C0B2  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3553  000066  C0B1  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3554  00006A  C0B0  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3555  00006E  C0AF  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3556  000072  C0AE  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3557  000076  C0AD  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3558  00007A  C0AC  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3559  00007E  C0AB  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3560  000082  C0AA  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3561  000086  C0A9  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3562  00008A  C0A8  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3563  00008E  C0A7  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3564  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3565  000094  0011               	retfie		f
  3566  000096                     __end_of_INTERRUPT_InterruptManager:
  3567                           	opt stack 0
  3568                           pclatu	equ	0xFFB
  3569                           pclath	equ	0xFFA
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           postinc0	equ	0xFEE
  3578                           fsr0h	equ	0xFEA
  3579                           fsr0l	equ	0xFE9
  3580                           wreg	equ	0xFE8
  3581                           fsr1h	equ	0xFE2
  3582                           fsr1l	equ	0xFE1
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function _I2C_ISR *****************
  3590 ;; Defined at:
  3591 ;;		line 102 in file "mcc_generated_files/i2c.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;		None
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3609 ;;Total ram usage:        0 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    4
  3612 ;; This function calls:
  3613 ;;		_getByteToSend
  3614 ;;		_handleByteReceived
  3615 ;;		i2_printf
  3616 ;; This function is called by:
  3617 ;;		_INTERRUPT_InterruptManager
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text20
  3622  001ADC                     __ptext20:
  3623                           	opt stack 0
  3624  001ADC                     _I2C_ISR:
  3625                           	opt stack 22
  3626                           
  3627                           ;i2c.c: 103: if (SSPSTATbits.BF == 0 && SSPSTATbits.BF == 0) {
  3628                           
  3629                           ;incstack = 0
  3630  001ADC  A0C7               	btfss	4039,0,c	;volatile
  3631  001ADE  B0C7               	btfsc	4039,0,c	;volatile
  3632  001AE0  D002               	goto	i2l152
  3633                           
  3634                           ;i2c.c: 105: SSPIF = 0;
  3635  001AE2  969E               	bcf	3998,3,c	;volatile
  3636                           
  3637                           ;i2c.c: 106: return;
  3638  001AE4  0012               	return	
  3639  001AE6                     i2l152:
  3640                           
  3641                           ;i2c.c: 107: }
  3642                           ;i2c.c: 109: if (SSPIF)
  3643  001AE6  A69E               	btfss	3998,3,c	;volatile
  3644  001AE8  D041               	goto	i2l2878
  3645                           
  3646                           ;i2c.c: 110: {
  3647                           ;i2c.c: 111: if (SSPSTATbits.R_nW)
  3648  001AEA  A4C7               	btfss	4039,2,c	;volatile
  3649  001AEC  D016               	goto	i2l2848
  3650                           
  3651                           ;i2c.c: 112: {
  3652                           ;i2c.c: 113: if (!SSPSTATbits.D_nA)
  3653  001AEE  BAC7               	btfsc	4039,5,c	;volatile
  3654  001AF0  D009               	goto	i2l2840
  3655                           
  3656                           ;i2c.c: 114: {
  3657                           ;i2c.c: 115: SSPBUF = getByteToSend(index_i2c);
  3658  001AF2  0100               	movlb	0	; () banked
  3659  001AF4  519E               	movf	_index_i2c& (0+255),w,b
  3660  001AF6  ECC1  F00A         	call	_getByteToSend
  3661  001AFA  6EC9               	movwf	4041,c	;volatile
  3662                           
  3663                           ;i2c.c: 116: index_i2c++;
  3664  001AFC  0100               	movlb	0	; () banked
  3665  001AFE  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3666  001B00  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;i2c.c: 117: SSPCON1bits.CKP = 1;
  3670  001B02  88C6               	bsf	4038,4,c	;volatile
  3671  001B04                     i2l2840:
  3672                           
  3673                           ;i2c.c: 118: }
  3674                           ;i2c.c: 119: if (SSPSTATbits.D_nA)
  3675  001B04  AAC7               	btfss	4039,5,c	;volatile
  3676  001B06  D009               	goto	i2l2848
  3677                           
  3678                           ;i2c.c: 120: {
  3679                           ;i2c.c: 121: SSPBUF = getByteToSend(index_i2c);
  3680  001B08  0100               	movlb	0	; () banked
  3681  001B0A  519E               	movf	_index_i2c& (0+255),w,b
  3682  001B0C  ECC1  F00A         	call	_getByteToSend
  3683  001B10  6EC9               	movwf	4041,c	;volatile
  3684                           
  3685                           ;i2c.c: 122: index_i2c++;
  3686  001B12  0100               	movlb	0	; () banked
  3687  001B14  4B9E               	infsnz	_index_i2c& (0+255),f,b
  3688  001B16  2B9F               	incf	(_index_i2c+1)& (0+255),f,b
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;i2c.c: 123: SSPCON1bits.CKP = 1;
  3692  001B18  88C6               	bsf	4038,4,c	;volatile
  3693  001B1A                     i2l2848:
  3694                           
  3695                           ;i2c.c: 124: }
  3696                           ;i2c.c: 126: }
  3697                           ;i2c.c: 127: if (!SSPSTATbits.R_nW)
  3698  001B1A  B4C7               	btfsc	4039,2,c	;volatile
  3699  001B1C  D027               	goto	i2l2878
  3700                           
  3701                           ;i2c.c: 128: {
  3702                           ;i2c.c: 129: if (!SSPSTATbits.D_nA)
  3703  001B1E  BAC7               	btfsc	4039,5,c	;volatile
  3704  001B20  D006               	goto	i2l2858
  3705                           
  3706                           ;i2c.c: 130: {
  3707                           ;i2c.c: 131: first = 1;
  3708  001B22  0E01               	movlw	1
  3709  001B24  0100               	movlb	0	; () banked
  3710  001B26  6FE9               	movwf	_first& (0+255),b
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;i2c.c: 132: junk = SSPBUF;
  3714  001B28  CFC9 F0A6          	movff	4041,_junk	;volatile
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;i2c.c: 134: SSPCON1bits.CKP = 1;
  3718  001B2C  88C6               	bsf	4038,4,c	;volatile
  3719  001B2E                     i2l2858:
  3720                           
  3721                           ;i2c.c: 135: }
  3722                           ;i2c.c: 136: if (SSPSTATbits.D_nA)
  3723  001B2E  AAC7               	btfss	4039,5,c	;volatile
  3724  001B30  D01D               	goto	i2l2878
  3725                           
  3726                           ;i2c.c: 137: {
  3727                           ;i2c.c: 138: if (first) {
  3728  001B32  0100               	movlb	0	; () banked
  3729  001B34  51E9               	movf	_first& (0+255),w,b
  3730  001B36  B4D8               	btfsc	status,2,c
  3731  001B38  D00C               	goto	i2l2868
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;i2c.c: 139: index_i2c = SSPBUF;
  3735  001B3A  CFC9 F09E          	movff	4041,_index_i2c	;volatile
  3736  001B3E  0100               	movlb	0	; () banked
  3737  001B40  6B9F               	clrf	(_index_i2c+1)& (0+255),b
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;i2c.c: 140: handleByteReceived(index_i2c);
  3741  001B42  0100               	movlb	0	; () banked
  3742  001B44  519E               	movf	_index_i2c& (0+255),w,b
  3743  001B46  EC84  F00B         	call	_handleByteReceived
  3744                           
  3745                           ;i2c.c: 141: first = 0;
  3746  001B4A  0E00               	movlw	0
  3747  001B4C  0100               	movlb	0	; () banked
  3748  001B4E  6FE9               	movwf	_first& (0+255),b
  3749                           
  3750                           ;i2c.c: 142: }
  3751  001B50  D003               	goto	i2l2870
  3752  001B52                     i2l2868:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;i2c.c: 144: else {
  3756                           ;i2c.c: 146: handleByteReceived(SSPBUF);
  3757  001B52  50C9               	movf	4041,w,c	;volatile
  3758  001B54  EC84  F00B         	call	_handleByteReceived
  3759  001B58                     i2l2870:
  3760                           
  3761                           ;i2c.c: 148: }
  3762                           ;i2c.c: 149: if (SSPCON1bits.WCOL)
  3763  001B58  AEC6               	btfss	4038,7,c	;volatile
  3764  001B5A  D007               	goto	i2l2876
  3765                           
  3766                           ;i2c.c: 150: {
  3767                           ;i2c.c: 151: SSPCON1bits.WCOL = 0;
  3768  001B5C  9EC6               	bcf	4038,7,c	;volatile
  3769                           
  3770                           ;i2c.c: 152: junk = SSPBUF;
  3771  001B5E  CFC9 F0A6          	movff	4041,_junk	;volatile
  3772                           
  3773                           ;i2c.c: 153: handleByteReceived(junk);
  3774  001B62  0100               	movlb	0	; () banked
  3775  001B64  51A6               	movf	_junk& (0+255),w,b
  3776  001B66  EC84  F00B         	call	_handleByteReceived
  3777  001B6A                     i2l2876:
  3778                           
  3779                           ;i2c.c: 154: }
  3780                           ;i2c.c: 155: SSPCON1bits.CKP = 1;
  3781  001B6A  88C6               	bsf	4038,4,c	;volatile
  3782  001B6C                     i2l2878:
  3783                           
  3784                           ;i2c.c: 156: }
  3785                           ;i2c.c: 157: }
  3786                           ;i2c.c: 158: }
  3787                           ;i2c.c: 159: if (BCLIF)
  3788  001B6C  A6A1               	btfss	4001,3,c	;volatile
  3789  001B6E  D00A               	goto	i2l2888
  3790                           
  3791                           ;i2c.c: 160: {
  3792                           ;i2c.c: 161: printf("collide\r\n");
  3793  001B70  0E68               	movlw	low STR_1
  3794  001B72  6E17               	movwf	i2printf@f,c
  3795  001B74  0E0F               	movlw	high STR_1
  3796  001B76  6E18               	movwf	i2printf@f+1,c
  3797  001B78  ECE4  F009         	call	i2_printf	;wreg free
  3798                           
  3799                           ;i2c.c: 162: junk = SSPBUF;
  3800  001B7C  CFC9 F0A6          	movff	4041,_junk	;volatile
  3801                           
  3802                           ;i2c.c: 163: BCLIF = 0;
  3803  001B80  96A1               	bcf	4001,3,c	;volatile
  3804                           
  3805                           ;i2c.c: 164: SSPCON1bits.CKP = 1;
  3806  001B82  88C6               	bsf	4038,4,c	;volatile
  3807  001B84                     i2l2888:
  3808                           
  3809                           ;i2c.c: 165: }
  3810                           ;i2c.c: 166: SSPIF = 0;
  3811  001B84  969E               	bcf	3998,3,c	;volatile
  3812  001B86  0012               	return		;funcret
  3813  001B88                     __end_of_I2C_ISR:
  3814                           	opt stack 0
  3815                           pclatu	equ	0xFFB
  3816                           pclath	equ	0xFFA
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           postinc0	equ	0xFEE
  3825                           fsr0h	equ	0xFEA
  3826                           fsr0l	equ	0xFE9
  3827                           wreg	equ	0xFE8
  3828                           fsr1h	equ	0xFE2
  3829                           fsr1l	equ	0xFE1
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function i2_printf *****************
  3837 ;; Defined at:
  3838 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  f               2   22[COMRAM] PTR const unsigned char 
  3841 ;;		 -> STR_5(15), STR_4(18), STR_3(17), STR_2(13), 
  3842 ;;		 -> STR_1(10), 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  printf          4   31[COMRAM] unsigned long 
  3845 ;;  printf          4    0        struct .
  3846 ;;  printf          3    0        PTR const unsigned char 
  3847 ;;  printf          2   28[COMRAM] PTR void [1]
  3848 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3849 ;;  printf          2   26[COMRAM] int 
  3850 ;;  printf          2    0        unsigned int 
  3851 ;;  printf          1   35[COMRAM] char 
  3852 ;;  printf          1   30[COMRAM] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  2   22[COMRAM] int 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3863 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3865 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3866 ;;Total ram usage:       14 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    2
  3869 ;; This function calls:
  3870 ;;		i2___lldiv
  3871 ;;		i2___llmod
  3872 ;;		i2_putch
  3873 ;; This function is called by:
  3874 ;;		_I2C_ISR
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text21
  3879  0013C8                     __ptext21:
  3880                           	opt stack 0
  3881  0013C8                     i2_printf:
  3882                           	opt stack 23
  3883                           
  3884                           ;doprnt.c: 466: va_list ap;
  3885                           ;doprnt.c: 499: signed char c;
  3886                           ;doprnt.c: 504: int prec;
  3887                           ;doprnt.c: 508: unsigned char flag;
  3888                           ;doprnt.c: 523: union {
  3889                           ;doprnt.c: 524: unsigned long vd;
  3890                           ;doprnt.c: 525: double integ;
  3891                           ;doprnt.c: 526: } tmpval;
  3892                           ;doprnt.c: 528: unsigned long val;
  3893                           ;doprnt.c: 529: unsigned len;
  3894                           ;doprnt.c: 530: const char * cp;
  3895                           ;doprnt.c: 533: *ap = __va_start();
  3896                           
  3897                           ;incstack = 0
  3898  0013C8  0E19               	movlw	low (?i2_printf+2)
  3899  0013CA  6E1D               	movwf	i2printf@ap,c
  3900  0013CC  0E00               	movlw	high (?i2_printf+2)
  3901  0013CE  6E1E               	movwf	i2printf@ap+1,c
  3902                           
  3903                           ;doprnt.c: 536: while(c = *f++) {
  3904  0013D0  D0CA               	goto	i2l2822
  3905  0013D2                     i2l2770:
  3906                           
  3907                           ;doprnt.c: 538: if(c != '%')
  3908  0013D2  0E25               	movlw	37
  3909  0013D4  1824               	xorwf	i2printf@c,w,c
  3910  0013D6  B4D8               	btfsc	status,2,c
  3911  0013D8  D004               	goto	i2l2774
  3912                           
  3913                           ;doprnt.c: 540: {
  3914                           ;doprnt.c: 541: (putch(c) );
  3915  0013DA  5024               	movf	i2printf@c,w,c
  3916  0013DC  EC5B  F011         	call	i2_putch
  3917                           
  3918                           ;doprnt.c: 542: continue;
  3919  0013E0  D0C2               	goto	i2l2822
  3920  0013E2                     i2l2774:
  3921                           
  3922                           ;doprnt.c: 543: }
  3923                           ;doprnt.c: 548: flag = 0;
  3924  0013E2  0E00               	movlw	0
  3925  0013E4  6E1F               	movwf	i2printf@flag,c
  3926                           
  3927                           ;doprnt.c: 635: switch(c = *f++) {
  3928                           
  3929                           ;doprnt.c: 633: loop:
  3930  0013E6  D001               	goto	i2l2780
  3931  0013E8                     i2l2776:
  3932                           
  3933                           ;doprnt.c: 643: flag |= 0x10;
  3934  0013E8  881F               	bsf	i2printf@flag,4,c
  3935  0013EA                     i2l2780:
  3936  0013EA  C017  FFF6         	movff	i2printf@f,tblptrl
  3937  0013EE  C018  FFF7         	movff	i2printf@f+1,tblptrh
  3938  0013F2  4A17               	infsnz	i2printf@f,f,c
  3939  0013F4  2A18               	incf	i2printf@f+1,f,c
  3940  0013F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3941  0013F6  6AF8               	clrf	tblptru,c
  3942  0013F8                     	endif
  3943  0013F8                     	if	0	;tblptru may be non-zero
  3944  0013F8                     	endif
  3945  0013F8  0008               	tblrd		*
  3946  0013FA  CFF5 F024          	movff	tablat,i2printf@c
  3947  0013FE  5024               	movf	i2printf@c,w,c
  3948                           
  3949                           ; Switch size 1, requested type "space"
  3950                           ; Number of cases is 4, Range of values is 0 to 108
  3951                           ; switch strategies available:
  3952                           ; Name         Instructions Cycles
  3953                           ; simple_byte           13     7 (average)
  3954                           ;	Chosen strategy is simple_byte
  3955  001400  0A00               	xorlw	0	; case 0
  3956  001402  B4D8               	btfsc	status,2,c
  3957  001404  0012               	return	
  3958  001406  0A64               	xorlw	100	; case 100
  3959  001408  B4D8               	btfsc	status,2,c
  3960  00140A  D007               	goto	i2l627
  3961  00140C  0A0D               	xorlw	13	; case 105
  3962  00140E  B4D8               	btfsc	status,2,c
  3963  001410  D004               	goto	i2l627
  3964  001412  0A05               	xorlw	5	; case 108
  3965  001414  B4D8               	btfsc	status,2,c
  3966  001416  D7E8               	goto	i2l2776
  3967  001418  D0A6               	goto	i2l2822
  3968  00141A                     i2l627:
  3969                           
  3970                           ;doprnt.c: 1253: {
  3971                           ;doprnt.c: 1255: if(flag & 0x10)
  3972  00141A  A81F               	btfss	i2printf@flag,4,c
  3973  00141C  D00E               	goto	i2l2786
  3974                           
  3975                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3976  00141E  C01D  FFD9         	movff	i2printf@ap,fsr2l
  3977  001422  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  3978  001426  CFDE F020          	movff	postinc2,i2printf@val
  3979  00142A  CFDE F021          	movff	postinc2,i2printf@val+1
  3980  00142E  CFDE F022          	movff	postinc2,i2printf@val+2
  3981  001432  CFDE F023          	movff	postinc2,i2printf@val+3
  3982  001436  0E04               	movlw	4
  3983  001438  D00E               	goto	L4
  3984  00143A                     i2l2786:
  3985                           
  3986                           ;doprnt.c: 1257: else
  3987                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3988  00143A  C01D  FFD9         	movff	i2printf@ap,fsr2l
  3989  00143E  C01E  FFDA         	movff	i2printf@ap+1,fsr2h
  3990  001442  CFDE F020          	movff	postinc2,i2printf@val
  3991  001446  CFDD F021          	movff	postdec2,i2printf@val+1
  3992  00144A  0E00               	movlw	0
  3993  00144C  BE21               	btfsc	i2printf@val+1,7,c
  3994  00144E  0EFF               	movlw	-1
  3995  001450  6E22               	movwf	i2printf@val+2,c
  3996  001452  6E23               	movwf	i2printf@val+3,c
  3997  001454  0E02               	movlw	2
  3998  001456                     L4:
  3999  001456  261D               	addwf	i2printf@ap,f,c
  4000  001458  0E00               	movlw	0
  4001  00145A  221E               	addwfc	i2printf@ap+1,f,c
  4002                           
  4003                           ;doprnt.c: 1261: if((long)val < 0) {
  4004  00145C  AE23               	btfss	i2printf@val+3,7,c
  4005  00145E  D00A               	goto	i2l2796
  4006                           
  4007                           ;doprnt.c: 1262: flag |= 0x03;
  4008  001460  0E03               	movlw	3
  4009  001462  121F               	iorwf	i2printf@flag,f,c
  4010                           
  4011                           ;doprnt.c: 1263: val = -val;
  4012  001464  1E23               	comf	i2printf@val+3,f,c
  4013  001466  1E22               	comf	i2printf@val+2,f,c
  4014  001468  1E21               	comf	i2printf@val+1,f,c
  4015  00146A  6C20               	negf	i2printf@val,c
  4016  00146C  0E00               	movlw	0
  4017  00146E  2221               	addwfc	i2printf@val+1,f,c
  4018  001470  2222               	addwfc	i2printf@val+2,f,c
  4019  001472  2223               	addwfc	i2printf@val+3,f,c
  4020  001474                     i2l2796:
  4021                           
  4022                           ;doprnt.c: 1264: }
  4023                           ;doprnt.c: 1266: }
  4024                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4025  001474  0E01               	movlw	1
  4026  001476  6E24               	movwf	i2printf@c,c
  4027  001478                     i2l2798:
  4028  001478  0E0A               	movlw	10
  4029  00147A  1824               	xorwf	i2printf@c,w,c
  4030  00147C  B4D8               	btfsc	status,2,c
  4031  00147E  D01B               	goto	i2l2810
  4032                           
  4033                           ;doprnt.c: 1306: if(val < dpowers[c])
  4034  001480  5024               	movf	i2printf@c,w,c
  4035  001482  0D04               	mullw	4
  4036  001484  0E01               	movlw	low _dpowers
  4037  001486  24F3               	addwf	prodl,w,c
  4038  001488  6EF6               	movwf	tblptrl,c
  4039  00148A  0E0F               	movlw	high _dpowers
  4040  00148C  20F4               	addwfc	prodh,w,c
  4041  00148E  6EF7               	movwf	tblptrh,c
  4042  001490                     	if	1	;There are 3 active tblptr bytes
  4043  001490  6AF8               	clrf	tblptru,c
  4044  001492  0E00               	movlw	low (__mediumconst shr (0+16))
  4045  001494  22F8               	addwfc	tblptru,f,c
  4046  001496                     	endif
  4047  001496  0009               	tblrd		*+
  4048  001498  50F5               	movf	tablat,w,c
  4049  00149A  5C20               	subwf	i2printf@val,w,c
  4050  00149C  0009               	tblrd		*+
  4051  00149E  50F5               	movf	tablat,w,c
  4052  0014A0  5821               	subwfb	i2printf@val+1,w,c
  4053  0014A2  0009               	tblrd		*+
  4054  0014A4  50F5               	movf	tablat,w,c
  4055  0014A6  5822               	subwfb	i2printf@val+2,w,c
  4056  0014A8  0009               	tblrd		*+
  4057  0014AA  50F5               	movf	tablat,w,c
  4058  0014AC  5823               	subwfb	i2printf@val+3,w,c
  4059  0014AE  A0D8               	btfss	status,0,c
  4060  0014B0  D002               	goto	i2l2810
  4061                           
  4062                           ;doprnt.c: 1307: break;
  4063  0014B2  2A24               	incf	i2printf@c,f,c
  4064  0014B4  D7E1               	goto	i2l2798
  4065  0014B6                     i2l2810:
  4066                           
  4067                           ;doprnt.c: 1422: {
  4068                           ;doprnt.c: 1438: if(flag & 0x03)
  4069  0014B6  C01F  F019         	movff	i2printf@flag,??i2_printf
  4070  0014BA  0E03               	movlw	3
  4071  0014BC  1619               	andwf	??i2_printf,f,c
  4072  0014BE  B4D8               	btfsc	status,2,c
  4073  0014C0  D003               	goto	i2l2814
  4074                           
  4075                           ;doprnt.c: 1439: (putch('-') );
  4076  0014C2  0E2D               	movlw	45
  4077  0014C4  EC5B  F011         	call	i2_putch
  4078  0014C8                     i2l2814:
  4079                           
  4080                           ;doprnt.c: 1469: }
  4081                           ;doprnt.c: 1472: prec = c;
  4082  0014C8  5024               	movf	i2printf@c,w,c
  4083  0014CA  6E1B               	movwf	i2printf@prec,c
  4084  0014CC  6A1C               	clrf	i2printf@prec+1,c
  4085  0014CE  BE1B               	btfsc	i2printf@prec,7,c
  4086  0014D0  061C               	decf	i2printf@prec+1,f,c
  4087                           
  4088                           ;doprnt.c: 1474: while(prec--) {
  4089  0014D2  D041               	goto	i2l2820
  4090  0014D4                     i2l2816:
  4091                           
  4092                           ;doprnt.c: 1478: {
  4093                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4094  0014D4  C01B  F019         	movff	i2printf@prec,??i2_printf
  4095  0014D8  C01C  F01A         	movff	i2printf@prec+1,??i2_printf+1
  4096  0014DC  90D8               	bcf	status,0,c
  4097  0014DE  3619               	rlcf	??i2_printf,f,c
  4098  0014E0  361A               	rlcf	??i2_printf+1,f,c
  4099  0014E2  90D8               	bcf	status,0,c
  4100  0014E4  3619               	rlcf	??i2_printf,f,c
  4101  0014E6  361A               	rlcf	??i2_printf+1,f,c
  4102  0014E8  0E01               	movlw	low _dpowers
  4103  0014EA  2419               	addwf	??i2_printf,w,c
  4104  0014EC  6EF6               	movwf	tblptrl,c
  4105  0014EE  0E0F               	movlw	high _dpowers
  4106  0014F0  201A               	addwfc	??i2_printf+1,w,c
  4107  0014F2  6EF7               	movwf	tblptrh,c
  4108  0014F4                     	if	1	;There are 3 active tblptr bytes
  4109  0014F4  6AF8               	clrf	tblptru,c
  4110  0014F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4111  0014F8  22F8               	addwfc	tblptru,f,c
  4112  0014FA                     	endif
  4113  0014FA  0009               	tblrd		*+
  4114  0014FC  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  4115  001500  0009               	tblrd		*+
  4116  001502  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  4117  001506  0009               	tblrd		*+
  4118  001508  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  4119  00150C  000A               	tblrd		*-
  4120  00150E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  4121  001512  C020  F001         	movff	i2printf@val,i2___lldiv@dividend
  4122  001516  C021  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  4123  00151A  C022  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  4124  00151E  C023  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  4125  001522  ECEA  F00E         	call	i2___lldiv	;wreg free
  4126  001526  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  4127  00152A  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  4128  00152E  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  4129  001532  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  4130  001536  0E0A               	movlw	10
  4131  001538  6E12               	movwf	i2___llmod@divisor,c
  4132  00153A  0E00               	movlw	0
  4133  00153C  6E13               	movwf	i2___llmod@divisor+1,c
  4134  00153E  0E00               	movlw	0
  4135  001540  6E14               	movwf	i2___llmod@divisor+2,c
  4136  001542  0E00               	movlw	0
  4137  001544  6E15               	movwf	i2___llmod@divisor+3,c
  4138  001546  ECE1  F00F         	call	i2___llmod	;wreg free
  4139  00154A  500E               	movf	?i2___llmod,w,c
  4140  00154C  0F30               	addlw	48
  4141  00154E  6E24               	movwf	i2printf@c,c
  4142                           
  4143                           ;doprnt.c: 1523: }
  4144                           ;doprnt.c: 1524: (putch(c) );
  4145  001550  5024               	movf	i2printf@c,w,c
  4146  001552  EC5B  F011         	call	i2_putch
  4147  001556                     i2l2820:
  4148  001556  061B               	decf	i2printf@prec,f,c
  4149  001558  A0D8               	btfss	status,0,c
  4150  00155A  061C               	decf	i2printf@prec+1,f,c
  4151  00155C  281B               	incf	i2printf@prec,w,c
  4152  00155E  E1BA               	bnz	i2l2816
  4153  001560  281C               	incf	i2printf@prec+1,w,c
  4154  001562  A4D8               	btfss	status,2,c
  4155  001564  D7B7               	goto	i2l2816
  4156  001566                     i2l2822:
  4157  001566  C017  FFF6         	movff	i2printf@f,tblptrl
  4158  00156A  C018  FFF7         	movff	i2printf@f+1,tblptrh
  4159  00156E  4A17               	infsnz	i2printf@f,f,c
  4160  001570  2A18               	incf	i2printf@f+1,f,c
  4161  001572                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4162  001572  6AF8               	clrf	tblptru,c
  4163  001574                     	endif
  4164  001574                     	if	0	;tblptru may be non-zero
  4165  001574                     	endif
  4166  001574  0008               	tblrd		*
  4167  001576  CFF5 F024          	movff	tablat,i2printf@c
  4168  00157A  5024               	movf	i2printf@c,w,c
  4169  00157C  B4D8               	btfsc	status,2,c
  4170  00157E  0012               	return	
  4171  001580  D728               	goto	i2l2770
  4172  001582                     __end_ofi2_printf:
  4173                           	opt stack 0
  4174                           pclatu	equ	0xFFB
  4175                           pclath	equ	0xFFA
  4176                           tblptru	equ	0xFF8
  4177                           tblptrh	equ	0xFF7
  4178                           tblptrl	equ	0xFF6
  4179                           tablat	equ	0xFF5
  4180                           prodh	equ	0xFF4
  4181                           prodl	equ	0xFF3
  4182                           intcon	equ	0xFF2
  4183                           postinc0	equ	0xFEE
  4184                           fsr0h	equ	0xFEA
  4185                           fsr0l	equ	0xFE9
  4186                           wreg	equ	0xFE8
  4187                           fsr1h	equ	0xFE2
  4188                           fsr1l	equ	0xFE1
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function i2_putch *****************
  4196 ;; Defined at:
  4197 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  txData          1    wreg     unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  txData          1    1[COMRAM] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      void 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4214 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    1
  4218 ;; This function calls:
  4219 ;;		i2_EUSART2_Write
  4220 ;; This function is called by:
  4221 ;;		i2_printf
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text22
  4226  0022B6                     __ptext22:
  4227                           	opt stack 0
  4228  0022B6                     i2_putch:
  4229                           	opt stack 23
  4230                           
  4231                           ;incstack = 0
  4232                           ;i2putch@txData stored from wreg
  4233  0022B6  6E02               	movwf	i2putch@txData,c
  4234                           
  4235                           ;eusart2.c: 112: EUSART2_Write(txData);
  4236  0022B8  5002               	movf	i2putch@txData,w,c
  4237  0022BA  EC4F  F011         	call	i2_EUSART2_Write
  4238  0022BE  0012               	return		;funcret
  4239  0022C0                     __end_ofi2_putch:
  4240                           	opt stack 0
  4241                           pclatu	equ	0xFFB
  4242                           pclath	equ	0xFFA
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           prodh	equ	0xFF4
  4248                           prodl	equ	0xFF3
  4249                           intcon	equ	0xFF2
  4250                           postinc0	equ	0xFEE
  4251                           fsr0h	equ	0xFEA
  4252                           fsr0l	equ	0xFE9
  4253                           wreg	equ	0xFE8
  4254                           fsr1h	equ	0xFE2
  4255                           fsr1l	equ	0xFE1
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function i2_EUSART2_Write *****************
  4263 ;; Defined at:
  4264 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  txData          1    wreg     unsigned char 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  txData          1    0[COMRAM] unsigned char 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4282 ;;Total ram usage:        1 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		i2_putch
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text23
  4292  00229E                     __ptext23:
  4293                           	opt stack 0
  4294  00229E                     i2_EUSART2_Write:
  4295                           	opt stack 23
  4296                           
  4297                           ;incstack = 0
  4298                           ;i2EUSART2_Write@txData stored from wreg
  4299  00229E  6E01               	movwf	i2EUSART2_Write@txData,c
  4300  0022A0                     i2l31:
  4301  0022A0  A8A4               	btfss	4004,4,c	;volatile
  4302  0022A2  D7FE               	goto	i2l31
  4303                           
  4304                           ;eusart2.c: 100: }
  4305                           ;eusart2.c: 102: TXREG2 = txData;
  4306  0022A4  C001  FF79         	movff	i2EUSART2_Write@txData,3961	;volatile
  4307  0022A8  0012               	return		;funcret
  4308  0022AA                     __end_ofi2_EUSART2_Write:
  4309                           	opt stack 0
  4310                           pclatu	equ	0xFFB
  4311                           pclath	equ	0xFFA
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           postinc0	equ	0xFEE
  4320                           fsr0h	equ	0xFEA
  4321                           fsr0l	equ	0xFE9
  4322                           wreg	equ	0xFE8
  4323                           fsr1h	equ	0xFE2
  4324                           fsr1l	equ	0xFE1
  4325                           postinc2	equ	0xFDE
  4326                           postdec2	equ	0xFDD
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function i2___llmod *****************
  4332 ;; Defined at:
  4333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  dividend        4   13[COMRAM] unsigned long 
  4336 ;;  divisor         4   17[COMRAM] unsigned long 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  __llmod         1   21[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  4   13[COMRAM] unsigned long 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4348 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4351 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;Total ram usage:        9 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		i2_printf
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text24
  4362  001FC2                     __ptext24:
  4363                           	opt stack 0
  4364  001FC2                     i2___llmod:
  4365                           	opt stack 24
  4366                           
  4367                           ;incstack = 0
  4368  001FC2  5012               	movf	i2___llmod@divisor,w,c
  4369  001FC4  1013               	iorwf	i2___llmod@divisor+1,w,c
  4370  001FC6  1014               	iorwf	i2___llmod@divisor+2,w,c
  4371  001FC8  1015               	iorwf	i2___llmod@divisor+3,w,c
  4372  001FCA  B4D8               	btfsc	status,2,c
  4373  001FCC  D024               	goto	i2l1000
  4374  001FCE  0E01               	movlw	1
  4375  001FD0  6E16               	movwf	i2___llmod@counter,c
  4376  001FD2  D006               	goto	i2l2498
  4377  001FD4                     i2l2496:
  4378  001FD4  90D8               	bcf	status,0,c
  4379  001FD6  3612               	rlcf	i2___llmod@divisor,f,c
  4380  001FD8  3613               	rlcf	i2___llmod@divisor+1,f,c
  4381  001FDA  3614               	rlcf	i2___llmod@divisor+2,f,c
  4382  001FDC  3615               	rlcf	i2___llmod@divisor+3,f,c
  4383  001FDE  2A16               	incf	i2___llmod@counter,f,c
  4384  001FE0                     i2l2498:
  4385  001FE0  AE15               	btfss	i2___llmod@divisor+3,7,c
  4386  001FE2  D7F8               	goto	i2l2496
  4387  001FE4                     i2l2500:
  4388  001FE4  5012               	movf	i2___llmod@divisor,w,c
  4389  001FE6  5C0E               	subwf	i2___llmod@dividend,w,c
  4390  001FE8  5013               	movf	i2___llmod@divisor+1,w,c
  4391  001FEA  580F               	subwfb	i2___llmod@dividend+1,w,c
  4392  001FEC  5014               	movf	i2___llmod@divisor+2,w,c
  4393  001FEE  5810               	subwfb	i2___llmod@dividend+2,w,c
  4394  001FF0  5015               	movf	i2___llmod@divisor+3,w,c
  4395  001FF2  5811               	subwfb	i2___llmod@dividend+3,w,c
  4396  001FF4  A0D8               	btfss	status,0,c
  4397  001FF6  D008               	goto	i2l2504
  4398  001FF8  5012               	movf	i2___llmod@divisor,w,c
  4399  001FFA  5E0E               	subwf	i2___llmod@dividend,f,c
  4400  001FFC  5013               	movf	i2___llmod@divisor+1,w,c
  4401  001FFE  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  4402  002000  5014               	movf	i2___llmod@divisor+2,w,c
  4403  002002  5A10               	subwfb	i2___llmod@dividend+2,f,c
  4404  002004  5015               	movf	i2___llmod@divisor+3,w,c
  4405  002006  5A11               	subwfb	i2___llmod@dividend+3,f,c
  4406  002008                     i2l2504:
  4407  002008  90D8               	bcf	status,0,c
  4408  00200A  3215               	rrcf	i2___llmod@divisor+3,f,c
  4409  00200C  3214               	rrcf	i2___llmod@divisor+2,f,c
  4410  00200E  3213               	rrcf	i2___llmod@divisor+1,f,c
  4411  002010  3212               	rrcf	i2___llmod@divisor,f,c
  4412  002012  2E16               	decfsz	i2___llmod@counter,f,c
  4413  002014  D7E7               	goto	i2l2500
  4414  002016                     i2l1000:
  4415  002016  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  4416  00201A  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  4417  00201E  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  4418  002022  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  4419  002026  0012               	return		;funcret
  4420  002028                     __end_ofi2___llmod:
  4421                           	opt stack 0
  4422                           pclatu	equ	0xFFB
  4423                           pclath	equ	0xFFA
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           prodh	equ	0xFF4
  4429                           prodl	equ	0xFF3
  4430                           intcon	equ	0xFF2
  4431                           postinc0	equ	0xFEE
  4432                           fsr0h	equ	0xFEA
  4433                           fsr0l	equ	0xFE9
  4434                           wreg	equ	0xFE8
  4435                           fsr1h	equ	0xFE2
  4436                           fsr1l	equ	0xFE1
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function i2___lldiv *****************
  4444 ;; Defined at:
  4445 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  dividend        4    0[COMRAM] unsigned long 
  4448 ;;  divisor         4    4[COMRAM] unsigned long 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  __lldiv         4    8[COMRAM] unsigned long 
  4451 ;;  __lldiv         1   12[COMRAM] unsigned char 
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  4    0[COMRAM] unsigned long 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4461 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4462 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4464 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4465 ;;Total ram usage:       13 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		i2_printf
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text25
  4475  001DD4                     __ptext25:
  4476                           	opt stack 0
  4477  001DD4                     i2___lldiv:
  4478                           	opt stack 24
  4479                           
  4480                           ;incstack = 0
  4481  001DD4  0E00               	movlw	0
  4482  001DD6  6E09               	movwf	i2___lldiv@quotient,c
  4483  001DD8  0E00               	movlw	0
  4484  001DDA  6E0A               	movwf	i2___lldiv@quotient+1,c
  4485  001DDC  0E00               	movlw	0
  4486  001DDE  6E0B               	movwf	i2___lldiv@quotient+2,c
  4487  001DE0  0E00               	movlw	0
  4488  001DE2  6E0C               	movwf	i2___lldiv@quotient+3,c
  4489  001DE4  5005               	movf	i2___lldiv@divisor,w,c
  4490  001DE6  1006               	iorwf	i2___lldiv@divisor+1,w,c
  4491  001DE8  1007               	iorwf	i2___lldiv@divisor+2,w,c
  4492  001DEA  1008               	iorwf	i2___lldiv@divisor+3,w,c
  4493  001DEC  B4D8               	btfsc	status,2,c
  4494  001DEE  D02A               	goto	i2l990
  4495  001DF0  0E01               	movlw	1
  4496  001DF2  6E0D               	movwf	i2___lldiv@counter,c
  4497  001DF4  D006               	goto	i2l2478
  4498  001DF6                     i2l2476:
  4499  001DF6  90D8               	bcf	status,0,c
  4500  001DF8  3605               	rlcf	i2___lldiv@divisor,f,c
  4501  001DFA  3606               	rlcf	i2___lldiv@divisor+1,f,c
  4502  001DFC  3607               	rlcf	i2___lldiv@divisor+2,f,c
  4503  001DFE  3608               	rlcf	i2___lldiv@divisor+3,f,c
  4504  001E00  2A0D               	incf	i2___lldiv@counter,f,c
  4505  001E02                     i2l2478:
  4506  001E02  AE08               	btfss	i2___lldiv@divisor+3,7,c
  4507  001E04  D7F8               	goto	i2l2476
  4508  001E06                     i2l2480:
  4509  001E06  90D8               	bcf	status,0,c
  4510  001E08  3609               	rlcf	i2___lldiv@quotient,f,c
  4511  001E0A  360A               	rlcf	i2___lldiv@quotient+1,f,c
  4512  001E0C  360B               	rlcf	i2___lldiv@quotient+2,f,c
  4513  001E0E  360C               	rlcf	i2___lldiv@quotient+3,f,c
  4514  001E10  5005               	movf	i2___lldiv@divisor,w,c
  4515  001E12  5C01               	subwf	i2___lldiv@dividend,w,c
  4516  001E14  5006               	movf	i2___lldiv@divisor+1,w,c
  4517  001E16  5802               	subwfb	i2___lldiv@dividend+1,w,c
  4518  001E18  5007               	movf	i2___lldiv@divisor+2,w,c
  4519  001E1A  5803               	subwfb	i2___lldiv@dividend+2,w,c
  4520  001E1C  5008               	movf	i2___lldiv@divisor+3,w,c
  4521  001E1E  5804               	subwfb	i2___lldiv@dividend+3,w,c
  4522  001E20  A0D8               	btfss	status,0,c
  4523  001E22  D009               	goto	i2l2488
  4524  001E24  5005               	movf	i2___lldiv@divisor,w,c
  4525  001E26  5E01               	subwf	i2___lldiv@dividend,f,c
  4526  001E28  5006               	movf	i2___lldiv@divisor+1,w,c
  4527  001E2A  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  4528  001E2C  5007               	movf	i2___lldiv@divisor+2,w,c
  4529  001E2E  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  4530  001E30  5008               	movf	i2___lldiv@divisor+3,w,c
  4531  001E32  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  4532  001E34  8009               	bsf	i2___lldiv@quotient,0,c
  4533  001E36                     i2l2488:
  4534  001E36  90D8               	bcf	status,0,c
  4535  001E38  3208               	rrcf	i2___lldiv@divisor+3,f,c
  4536  001E3A  3207               	rrcf	i2___lldiv@divisor+2,f,c
  4537  001E3C  3206               	rrcf	i2___lldiv@divisor+1,f,c
  4538  001E3E  3205               	rrcf	i2___lldiv@divisor,f,c
  4539  001E40  2E0D               	decfsz	i2___lldiv@counter,f,c
  4540  001E42  D7E1               	goto	i2l2480
  4541  001E44                     i2l990:
  4542  001E44  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  4543  001E48  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  4544  001E4C  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  4545  001E50  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  4546  001E54  0012               	return		;funcret
  4547  001E56                     __end_ofi2___lldiv:
  4548                           	opt stack 0
  4549                           pclatu	equ	0xFFB
  4550                           pclath	equ	0xFFA
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           fsr0h	equ	0xFEA
  4560                           fsr0l	equ	0xFE9
  4561                           wreg	equ	0xFE8
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _handleByteReceived *****************
  4571 ;; Defined at:
  4572 ;;		line 276 in file "ax.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  data            1    wreg     unsigned char 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  data            1    6[COMRAM] unsigned char 
  4577 ;;  i               2    4[COMRAM] int 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4588 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4590 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4591 ;;Total ram usage:        3 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    1
  4594 ;; This function calls:
  4595 ;;		_setLedOff
  4596 ;;		_setLedOn
  4597 ;; This function is called by:
  4598 ;;		_I2C_ISR
  4599 ;;		_I2C_ISR_bad
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text26
  4604  001708                     __ptext26:
  4605                           	opt stack 0
  4606  001708                     _handleByteReceived:
  4607                           	opt stack 24
  4608                           
  4609                           ;incstack = 0
  4610                           ;handleByteReceived@data stored from wreg
  4611  001708  6E07               	movwf	handleByteReceived@data,c
  4612                           
  4613                           ;ax.c: 278: if (readIndex == 0) {
  4614  00170A  0100               	movlb	0	; () banked
  4615  00170C  5198               	movf	_readIndex& (0+255),w,b	;volatile
  4616  00170E  0100               	movlb	0	; () banked
  4617  001710  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4618  001712  A4D8               	btfss	status,2,c
  4619  001714  D023               	goto	i2l2620
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;ax.c: 279: currentCommand = data;
  4623  001716  C007  F0E8         	movff	handleByteReceived@data,_currentCommand	;volatile
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;ax.c: 280: readIndex++;
  4627  00171A  0100               	movlb	0	; () banked
  4628  00171C  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4629  00171E  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;ax.c: 282: for (int i = 0; i < 32; i++) {
  4633  001720  0E00               	movlw	0
  4634  001722  6E06               	movwf	handleByteReceived@i+1,c
  4635  001724  0E00               	movlw	0
  4636  001726  6E05               	movwf	handleByteReceived@i,c
  4637                           
  4638                           ; BSR set to: 0
  4639  001728  BE06               	btfsc	handleByteReceived@i+1,7,c
  4640  00172A  D008               	goto	i2l2614
  4641  00172C  5006               	movf	handleByteReceived@i+1,w,c
  4642  00172E  E105               	bnz	i2u133_40
  4643  001730  0E20               	movlw	32
  4644  001732  5C05               	subwf	handleByteReceived@i,w,c
  4645  001734  B0D8               	btfsc	status,0,c
  4646  001736  0012               	return	
  4647  001738  D001               	goto	i2l2614
  4648  00173A                     i2u133_40:
  4649                           
  4650                           ; BSR set to: 0
  4651  00173A  0012               	return	
  4652  00173C                     i2l2614:
  4653                           
  4654                           ;ax.c: 283: dataToSend[i] = 66;
  4655  00173C  0E60               	movlw	low _dataToSend
  4656  00173E  2405               	addwf	handleByteReceived@i,w,c
  4657  001740  6ED9               	movwf	fsr2l,c
  4658  001742  0E00               	movlw	high _dataToSend
  4659  001744  2006               	addwfc	handleByteReceived@i+1,w,c
  4660  001746  6EDA               	movwf	fsr2h,c
  4661  001748  0E42               	movlw	66
  4662  00174A  6EDF               	movwf	indf2,c
  4663  00174C  4A05               	infsnz	handleByteReceived@i,f,c
  4664  00174E  2A06               	incf	handleByteReceived@i+1,f,c
  4665  001750  BE06               	btfsc	handleByteReceived@i+1,7,c
  4666  001752  D7F4               	goto	i2l2614
  4667  001754  5006               	movf	handleByteReceived@i+1,w,c
  4668  001756  E101               	bnz	i2u134_40
  4669  001758  D7EB               	goto	L5
  4670  00175A                     i2u134_40:
  4671                           
  4672                           ;ax.c: 284: }
  4673                           ;ax.c: 285: } else if (readIndex == 1) {
  4674  00175A  0012               	return	
  4675  00175C                     i2l2620:
  4676  00175C  0100               	movlb	0	; () banked
  4677  00175E  0598               	decf	_readIndex& (0+255),w,b	;volatile
  4678  001760  0100               	movlb	0	; () banked
  4679  001762  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4680  001764  A4D8               	btfss	status,2,c
  4681  001766  D025               	goto	i2l2638
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;ax.c: 286: parameter1 = data;
  4685  001768  C007  F0A5         	movff	handleByteReceived@data,_parameter1	;volatile
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;ax.c: 287: readIndex++;
  4689  00176C  0100               	movlb	0	; () banked
  4690  00176E  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4691  001770  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;ax.c: 288: if (currentCommand == 10) {
  4695  001772  0E0A               	movlw	10
  4696  001774  0100               	movlb	0	; () banked
  4697  001776  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4698  001778  A4D8               	btfss	status,2,c
  4699  00177A  D00B               	goto	i2l2632
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;ax.c: 289: setLedOn(parameter1);
  4703  00177C  C0A5  F001         	movff	_parameter1,setLedOn@led	;volatile
  4704  001780  6A02               	clrf	setLedOn@led+1,c
  4705  001782  EC2B  F00F         	call	_setLedOn	;wreg free
  4706                           
  4707                           ;ax.c: 290: readIndex = 0;
  4708  001786  0E00               	movlw	0
  4709  001788  0100               	movlb	0	; () banked
  4710  00178A  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4711  00178C  0E00               	movlw	0
  4712  00178E  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4713                           
  4714                           ;ax.c: 291: } else if (currentCommand == 11) {
  4715  001790  0012               	return	
  4716  001792                     i2l2632:
  4717                           
  4718                           ; BSR set to: 0
  4719  001792  0E0B               	movlw	11
  4720  001794  0100               	movlb	0	; () banked
  4721  001796  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  4722  001798  A4D8               	btfss	status,2,c
  4723  00179A  0012               	return	
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;ax.c: 292: setLedOff(parameter1);
  4727  00179C  C0A5  F001         	movff	_parameter1,setLedOff@led	;volatile
  4728  0017A0  6A02               	clrf	setLedOff@led+1,c
  4729  0017A2  EC68  F00F         	call	_setLedOff	;wreg free
  4730                           
  4731                           ;ax.c: 293: readIndex = 0;
  4732  0017A6  0E00               	movlw	0
  4733  0017A8  0100               	movlb	0	; () banked
  4734  0017AA  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  4735  0017AC  0E00               	movlw	0
  4736  0017AE  6F98               	movwf	_readIndex& (0+255),b	;volatile
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;ax.c: 294: }
  4740                           ;ax.c: 296: } else if (readIndex == 2) {
  4741                           
  4742                           ; BSR set to: 0
  4743  0017B0  0012               	return	
  4744  0017B2                     i2l2638:
  4745                           
  4746                           ; BSR set to: 0
  4747  0017B2  0E02               	movlw	2
  4748  0017B4  0100               	movlb	0	; () banked
  4749  0017B6  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4750  0017B8  0100               	movlb	0	; () banked
  4751  0017BA  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4752  0017BC  A4D8               	btfss	status,2,c
  4753  0017BE  D006               	goto	i2l2644
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;ax.c: 297: parameter2 = data;
  4757  0017C0  C007  F0A4         	movff	handleByteReceived@data,_parameter2	;volatile
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;ax.c: 298: readIndex++;
  4761  0017C4  0100               	movlb	0	; () banked
  4762  0017C6  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4763  0017C8  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4764                           
  4765                           ;ax.c: 299: } else if (readIndex == 3) {
  4766  0017CA  0012               	return	
  4767  0017CC                     i2l2644:
  4768                           
  4769                           ; BSR set to: 0
  4770  0017CC  0E03               	movlw	3
  4771  0017CE  0100               	movlb	0	; () banked
  4772  0017D0  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4773  0017D2  0100               	movlb	0	; () banked
  4774  0017D4  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4775  0017D6  A4D8               	btfss	status,2,c
  4776  0017D8  D006               	goto	i2l2650
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;ax.c: 300: parameter3 = data;
  4780  0017DA  C007  F0A3         	movff	handleByteReceived@data,_parameter3	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;ax.c: 301: readIndex++;
  4784  0017DE  0100               	movlb	0	; () banked
  4785  0017E0  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4786  0017E2  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4787                           
  4788                           ;ax.c: 302: } else if (readIndex == 4) {
  4789  0017E4  0012               	return	
  4790  0017E6                     i2l2650:
  4791                           
  4792                           ; BSR set to: 0
  4793  0017E6  0E04               	movlw	4
  4794  0017E8  0100               	movlb	0	; () banked
  4795  0017EA  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4796  0017EC  0100               	movlb	0	; () banked
  4797  0017EE  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4798  0017F0  A4D8               	btfss	status,2,c
  4799  0017F2  D006               	goto	i2l2656
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;ax.c: 303: parameter4 = data;
  4803  0017F4  C007  F0A2         	movff	handleByteReceived@data,_parameter4	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;ax.c: 304: readIndex++;
  4807  0017F8  0100               	movlb	0	; () banked
  4808  0017FA  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4809  0017FC  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4810                           
  4811                           ;ax.c: 305: } else if (readIndex == 5) {
  4812  0017FE  0012               	return	
  4813  001800                     i2l2656:
  4814                           
  4815                           ; BSR set to: 0
  4816  001800  0E05               	movlw	5
  4817  001802  0100               	movlb	0	; () banked
  4818  001804  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4819  001806  0100               	movlb	0	; () banked
  4820  001808  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4821  00180A  A4D8               	btfss	status,2,c
  4822  00180C  D006               	goto	i2l2662
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;ax.c: 306: parameter5 = data;
  4826  00180E  C007  F0A1         	movff	handleByteReceived@data,_parameter5	;volatile
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;ax.c: 307: readIndex++;
  4830  001812  0100               	movlb	0	; () banked
  4831  001814  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4832  001816  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4833                           
  4834                           ;ax.c: 308: } else if (readIndex == 6) {
  4835  001818  0012               	return	
  4836  00181A                     i2l2662:
  4837                           
  4838                           ; BSR set to: 0
  4839  00181A  0E06               	movlw	6
  4840  00181C  0100               	movlb	0	; () banked
  4841  00181E  1998               	xorwf	_readIndex& (0+255),w,b	;volatile
  4842  001820  0100               	movlb	0	; () banked
  4843  001822  1199               	iorwf	(_readIndex+1)& (0+255),w,b	;volatile
  4844  001824  A4D8               	btfss	status,2,c
  4845  001826  D006               	goto	i2l2668
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;ax.c: 309: parameter6 = data;
  4849  001828  C007  F0A0         	movff	handleByteReceived@data,_parameter6	;volatile
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;ax.c: 310: readIndex++;
  4853  00182C  0100               	movlb	0	; () banked
  4854  00182E  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4855  001830  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4856                           
  4857                           ;ax.c: 311: } else {
  4858  001832  0012               	return	
  4859  001834                     i2l2668:
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;ax.c: 312: readIndex++;
  4863  001834  0100               	movlb	0	; () banked
  4864  001836  4B98               	infsnz	_readIndex& (0+255),f,b	;volatile
  4865  001838  2B99               	incf	(_readIndex+1)& (0+255),f,b	;volatile
  4866                           
  4867                           ; BSR set to: 0
  4868                           
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872                           
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876                           
  4877                           ; BSR set to: 0
  4878  00183A  0012               	return	
  4879  00183C                     __end_of_handleByteReceived:
  4880                           	opt stack 0
  4881                           pclatu	equ	0xFFB
  4882                           pclath	equ	0xFFA
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           intcon	equ	0xFF2
  4890                           postinc0	equ	0xFEE
  4891                           fsr0h	equ	0xFEA
  4892                           fsr0l	equ	0xFE9
  4893                           wreg	equ	0xFE8
  4894                           fsr1h	equ	0xFE2
  4895                           fsr1l	equ	0xFE1
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function _setLedOn *****************
  4904 ;; Defined at:
  4905 ;;		line 45 in file "ax.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  led             2    0[COMRAM] int 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  1    wreg      void 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4921 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4922 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4923 ;;Total ram usage:        4 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_handleByteReceived
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text27
  4933  001E56                     __ptext27:
  4934                           	opt stack 0
  4935  001E56                     _setLedOn:
  4936                           	opt stack 24
  4937                           
  4938                           ;ax.c: 46: switch (led) {
  4939                           
  4940                           ;incstack = 0
  4941  001E56  D014               	goto	i2l2356
  4942  001E58                     i2l444:
  4943  001E58  868C               	bsf	3980,3,c	;volatile
  4944                           
  4945                           ;ax.c: 49: break;
  4946  001E5A  0012               	return	
  4947  001E5C                     i2l448:
  4948  001E5C  848C               	bsf	3980,2,c	;volatile
  4949                           
  4950                           ;ax.c: 52: break;
  4951  001E5E  0012               	return	
  4952  001E60                     i2l451:
  4953  001E60  828C               	bsf	3980,1,c	;volatile
  4954                           
  4955                           ;ax.c: 55: break;
  4956  001E62  0012               	return	
  4957  001E64                     i2l454:
  4958  001E64  808C               	bsf	3980,0,c	;volatile
  4959                           
  4960                           ;ax.c: 58: break;
  4961  001E66  0012               	return	
  4962  001E68                     i2l457:
  4963  001E68  848B               	bsf	3979,2,c	;volatile
  4964                           
  4965                           ;ax.c: 61: break;
  4966  001E6A  0012               	return	
  4967  001E6C                     i2l460:
  4968  001E6C  828B               	bsf	3979,1,c	;volatile
  4969                           
  4970                           ;ax.c: 64: break;
  4971  001E6E  0012               	return	
  4972  001E70                     i2l463:
  4973  001E70  808B               	bsf	3979,0,c	;volatile
  4974                           
  4975                           ;ax.c: 67: break;
  4976  001E72  0012               	return	
  4977  001E74                     i2l466:
  4978  001E74  808A               	bsf	3978,0,c	;volatile
  4979                           
  4980                           ;ax.c: 70: break;
  4981  001E76  0012               	return	
  4982  001E78                     i2l469:
  4983  001E78  848A               	bsf	3978,2,c	;volatile
  4984                           
  4985                           ;ax.c: 73: break;
  4986  001E7A  0012               	return	
  4987  001E7C                     i2l472:
  4988  001E7C  868A               	bsf	3978,3,c	;volatile
  4989                           
  4990                           ;ax.c: 77: }
  4991                           
  4992                           ;ax.c: 76: break;
  4993  001E7E  0012               	return	
  4994  001E80                     i2l2356:
  4995  001E80  C001  F003         	movff	setLedOn@led,??_setLedOn
  4996  001E84  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  4997                           
  4998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4999                           ; Switch size 1, requested type "space"
  5000                           ; Number of cases is 1, Range of values is 0 to 0
  5001                           ; switch strategies available:
  5002                           ; Name         Instructions Cycles
  5003                           ; simple_byte            4     3 (average)
  5004                           ;	Chosen strategy is simple_byte
  5005  001E88  5004               	movf	??_setLedOn+1,w,c
  5006  001E8A  0A00               	xorlw	0	; case 0
  5007  001E8C  A4D8               	btfss	status,2,c
  5008  001E8E  0012               	return	
  5009                           
  5010                           ; Switch size 1, requested type "space"
  5011                           ; Number of cases is 10, Range of values is 1 to 10
  5012                           ; switch strategies available:
  5013                           ; Name         Instructions Cycles
  5014                           ; simple_byte           31    16 (average)
  5015                           ;	Chosen strategy is simple_byte
  5016  001E90  5003               	movf	??_setLedOn,w,c
  5017  001E92  0A01               	xorlw	1	; case 1
  5018  001E94  B4D8               	btfsc	status,2,c
  5019  001E96  D7E0               	goto	i2l444
  5020  001E98  0A03               	xorlw	3	; case 2
  5021  001E9A  B4D8               	btfsc	status,2,c
  5022  001E9C  D7DF               	goto	i2l448
  5023  001E9E  0A01               	xorlw	1	; case 3
  5024  001EA0  B4D8               	btfsc	status,2,c
  5025  001EA2  D7DE               	goto	i2l451
  5026  001EA4  0A07               	xorlw	7	; case 4
  5027  001EA6  B4D8               	btfsc	status,2,c
  5028  001EA8  D7DD               	goto	i2l454
  5029  001EAA  0A01               	xorlw	1	; case 5
  5030  001EAC  B4D8               	btfsc	status,2,c
  5031  001EAE  D7DC               	goto	i2l457
  5032  001EB0  0A03               	xorlw	3	; case 6
  5033  001EB2  B4D8               	btfsc	status,2,c
  5034  001EB4  D7DB               	goto	i2l460
  5035  001EB6  0A01               	xorlw	1	; case 7
  5036  001EB8  B4D8               	btfsc	status,2,c
  5037  001EBA  D7DA               	goto	i2l463
  5038  001EBC  0A0F               	xorlw	15	; case 8
  5039  001EBE  B4D8               	btfsc	status,2,c
  5040  001EC0  D7D9               	goto	i2l466
  5041  001EC2  0A01               	xorlw	1	; case 9
  5042  001EC4  B4D8               	btfsc	status,2,c
  5043  001EC6  D7D8               	goto	i2l469
  5044  001EC8  0A03               	xorlw	3	; case 10
  5045  001ECA  A4D8               	btfss	status,2,c
  5046  001ECC  0012               	return	
  5047  001ECE  D7D6               	goto	i2l472
  5048  001ED0                     __end_of_setLedOn:
  5049                           	opt stack 0
  5050                           pclatu	equ	0xFFB
  5051                           pclath	equ	0xFFA
  5052                           tblptru	equ	0xFF8
  5053                           tblptrh	equ	0xFF7
  5054                           tblptrl	equ	0xFF6
  5055                           tablat	equ	0xFF5
  5056                           prodh	equ	0xFF4
  5057                           prodl	equ	0xFF3
  5058                           intcon	equ	0xFF2
  5059                           postinc0	equ	0xFEE
  5060                           fsr0h	equ	0xFEA
  5061                           fsr0l	equ	0xFE9
  5062                           wreg	equ	0xFE8
  5063                           fsr1h	equ	0xFE2
  5064                           fsr1l	equ	0xFE1
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _setLedOff *****************
  5073 ;; Defined at:
  5074 ;;		line 80 in file "ax.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  led             2    0[COMRAM] int 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;		None
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5088 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5090 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5091 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5092 ;;Total ram usage:        4 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_handleByteReceived
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text28
  5102  001ED0                     __ptext28:
  5103                           	opt stack 0
  5104  001ED0                     _setLedOff:
  5105                           	opt stack 24
  5106                           
  5107                           ;ax.c: 81: switch (led) {
  5108                           
  5109                           ;incstack = 0
  5110  001ED0  D014               	goto	i2l2366
  5111  001ED2                     i2l479:
  5112  001ED2  968C               	bcf	3980,3,c	;volatile
  5113                           
  5114                           ;ax.c: 84: break;
  5115  001ED4  0012               	return	
  5116  001ED6                     i2l483:
  5117  001ED6  948C               	bcf	3980,2,c	;volatile
  5118                           
  5119                           ;ax.c: 87: break;
  5120  001ED8  0012               	return	
  5121  001EDA                     i2l486:
  5122  001EDA  928C               	bcf	3980,1,c	;volatile
  5123                           
  5124                           ;ax.c: 90: break;
  5125  001EDC  0012               	return	
  5126  001EDE                     i2l489:
  5127  001EDE  908C               	bcf	3980,0,c	;volatile
  5128                           
  5129                           ;ax.c: 93: break;
  5130  001EE0  0012               	return	
  5131  001EE2                     i2l492:
  5132  001EE2  948B               	bcf	3979,2,c	;volatile
  5133                           
  5134                           ;ax.c: 96: break;
  5135  001EE4  0012               	return	
  5136  001EE6                     i2l495:
  5137  001EE6  928B               	bcf	3979,1,c	;volatile
  5138                           
  5139                           ;ax.c: 99: break;
  5140  001EE8  0012               	return	
  5141  001EEA                     i2l498:
  5142  001EEA  908B               	bcf	3979,0,c	;volatile
  5143                           
  5144                           ;ax.c: 102: break;
  5145  001EEC  0012               	return	
  5146  001EEE                     i2l501:
  5147  001EEE  908A               	bcf	3978,0,c	;volatile
  5148                           
  5149                           ;ax.c: 105: break;
  5150  001EF0  0012               	return	
  5151  001EF2                     i2l504:
  5152  001EF2  948A               	bcf	3978,2,c	;volatile
  5153                           
  5154                           ;ax.c: 108: break;
  5155  001EF4  0012               	return	
  5156  001EF6                     i2l507:
  5157  001EF6  968A               	bcf	3978,3,c	;volatile
  5158                           
  5159                           ;ax.c: 112: }
  5160                           
  5161                           ;ax.c: 111: break;
  5162  001EF8  0012               	return	
  5163  001EFA                     i2l2366:
  5164  001EFA  C001  F003         	movff	setLedOff@led,??_setLedOff
  5165  001EFE  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  5166                           
  5167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5168                           ; Switch size 1, requested type "space"
  5169                           ; Number of cases is 1, Range of values is 0 to 0
  5170                           ; switch strategies available:
  5171                           ; Name         Instructions Cycles
  5172                           ; simple_byte            4     3 (average)
  5173                           ;	Chosen strategy is simple_byte
  5174  001F02  5004               	movf	??_setLedOff+1,w,c
  5175  001F04  0A00               	xorlw	0	; case 0
  5176  001F06  A4D8               	btfss	status,2,c
  5177  001F08  0012               	return	
  5178                           
  5179                           ; Switch size 1, requested type "space"
  5180                           ; Number of cases is 10, Range of values is 1 to 10
  5181                           ; switch strategies available:
  5182                           ; Name         Instructions Cycles
  5183                           ; simple_byte           31    16 (average)
  5184                           ;	Chosen strategy is simple_byte
  5185  001F0A  5003               	movf	??_setLedOff,w,c
  5186  001F0C  0A01               	xorlw	1	; case 1
  5187  001F0E  B4D8               	btfsc	status,2,c
  5188  001F10  D7E0               	goto	i2l479
  5189  001F12  0A03               	xorlw	3	; case 2
  5190  001F14  B4D8               	btfsc	status,2,c
  5191  001F16  D7DF               	goto	i2l483
  5192  001F18  0A01               	xorlw	1	; case 3
  5193  001F1A  B4D8               	btfsc	status,2,c
  5194  001F1C  D7DE               	goto	i2l486
  5195  001F1E  0A07               	xorlw	7	; case 4
  5196  001F20  B4D8               	btfsc	status,2,c
  5197  001F22  D7DD               	goto	i2l489
  5198  001F24  0A01               	xorlw	1	; case 5
  5199  001F26  B4D8               	btfsc	status,2,c
  5200  001F28  D7DC               	goto	i2l492
  5201  001F2A  0A03               	xorlw	3	; case 6
  5202  001F2C  B4D8               	btfsc	status,2,c
  5203  001F2E  D7DB               	goto	i2l495
  5204  001F30  0A01               	xorlw	1	; case 7
  5205  001F32  B4D8               	btfsc	status,2,c
  5206  001F34  D7DA               	goto	i2l498
  5207  001F36  0A0F               	xorlw	15	; case 8
  5208  001F38  B4D8               	btfsc	status,2,c
  5209  001F3A  D7D9               	goto	i2l501
  5210  001F3C  0A01               	xorlw	1	; case 9
  5211  001F3E  B4D8               	btfsc	status,2,c
  5212  001F40  D7D8               	goto	i2l504
  5213  001F42  0A03               	xorlw	3	; case 10
  5214  001F44  A4D8               	btfss	status,2,c
  5215  001F46  0012               	return	
  5216  001F48  D7D6               	goto	i2l507
  5217  001F4A                     __end_of_setLedOff:
  5218                           	opt stack 0
  5219                           pclatu	equ	0xFFB
  5220                           pclath	equ	0xFFA
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           postinc0	equ	0xFEE
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _getByteToSend *****************
  5242 ;; Defined at:
  5243 ;;		line 331 in file "ax.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  i2c_data_rec    1    wreg     unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  i2c_data_rec    1    0[COMRAM] unsigned char 
  5248 ;;  value           2   92[COMRAM] int 
  5249 ;;  xhigh           1   88[COMRAM] unsigned char 
  5250 ;;  xlow            1   87[COMRAM] unsigned char 
  5251 ;;  error           2   83[COMRAM] int 
  5252 ;;  value           2   90[COMRAM] int 
  5253 ;;  xhigh           1   86[COMRAM] unsigned char 
  5254 ;;  xlow            1   85[COMRAM] unsigned char 
  5255 ;;  error           2   81[COMRAM] int 
  5256 ;;  d               1   89[COMRAM] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      unsigned char 
  5259 ;; Registers used:
  5260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5267 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5269 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5270 ;;Total ram usage:       15 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    3
  5273 ;; This function calls:
  5274 ;;		_clearState
  5275 ;;		_pingAX
  5276 ;;		_readAXData
  5277 ;;		_writeAXData
  5278 ;;		i2_ADC_GetConversion
  5279 ;; This function is called by:
  5280 ;;		_I2C_ISR
  5281 ;;		_I2C_ISR_bad
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text29
  5286  001582                     __ptext29:
  5287                           	opt stack 0
  5288  001582                     _getByteToSend:
  5289                           	opt stack 22
  5290                           
  5291                           ;ax.c: 334: if (currentCommand == 20) {
  5292                           
  5293                           ;incstack = 0
  5294  001582  0E14               	movlw	20
  5295  001584  0100               	movlb	0	; () banked
  5296  001586  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5297  001588  A4D8               	btfss	status,2,c
  5298  00158A  D013               	goto	i2l2534
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;ax.c: 335: int error = pingAX(parameter1);
  5302  00158C  C0A5  F018         	movff	_parameter1,pingAX@id	;volatile
  5303  001590  6A19               	clrf	pingAX@id+1,c
  5304  001592  EC14  F010         	call	_pingAX	;wreg free
  5305  001596  C018  F052         	movff	?_pingAX,getByteToSend@error
  5306  00159A  C019  F053         	movff	?_pingAX+1,getByteToSend@error+1
  5307                           
  5308                           ;ax.c: 336: nbBytesToSend = 1;
  5309  00159E  0E00               	movlw	0
  5310  0015A0  0100               	movlb	0	; () banked
  5311  0015A2  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5312  0015A4  0E01               	movlw	1
  5313  0015A6  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;ax.c: 337: dataToSend[0] = error;
  5317  0015A8  C052  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;ax.c: 339: clearState();
  5321  0015AC  EC65  F010         	call	_clearState	;wreg free
  5322                           
  5323                           ;ax.c: 340: } else if (currentCommand == 21) {
  5324  0015B0  D080               	goto	i2l2578
  5325  0015B2                     i2l2534:
  5326  0015B2  0E15               	movlw	21
  5327  0015B4  0100               	movlb	0	; () banked
  5328  0015B6  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5329  0015B8  A4D8               	btfss	status,2,c
  5330  0015BA  D01C               	goto	i2l2550
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;ax.c: 342: int value = readAXData(parameter1, parameter2);
  5334  0015BC  C0A5  F018         	movff	_parameter1,readAXData@id	;volatile
  5335  0015C0  6A19               	clrf	readAXData@id+1,c
  5336  0015C2  C0A4  F01A         	movff	_parameter2,readAXData@address	;volatile
  5337  0015C6  6A1B               	clrf	readAXData@address+1,c
  5338  0015C8  EC11  F00E         	call	_readAXData	;wreg free
  5339  0015CC  C018  F05B         	movff	?_readAXData,getByteToSend@value
  5340  0015D0  C019  F05C         	movff	?_readAXData+1,getByteToSend@value+1
  5341                           
  5342                           ;ax.c: 343: nbBytesToSend = 2;
  5343  0015D4  0E00               	movlw	0
  5344  0015D6  0100               	movlb	0	; () banked
  5345  0015D8  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5346  0015DA  0E02               	movlw	2
  5347  0015DC  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;ax.c: 344: uint8_t xlow = value & 0xff;
  5351  0015DE  C05B  F056         	movff	getByteToSend@value,getByteToSend@xlow
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;ax.c: 345: uint8_t xhigh = (value >> 8);
  5355  0015E2  505C               	movf	getByteToSend@value+1,w,c
  5356  0015E4  6E57               	movwf	getByteToSend@xhigh,c
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;ax.c: 346: dataToSend[0] = xlow;
  5360  0015E6  C056  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;ax.c: 347: dataToSend[1] = xhigh;
  5364  0015EA  C057  F061         	movff	getByteToSend@xhigh,_dataToSend+1	;volatile
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;ax.c: 350: clearState();
  5368  0015EE  EC65  F010         	call	_clearState	;wreg free
  5369                           
  5370                           ;ax.c: 351: } else if (currentCommand == 22) {
  5371  0015F2  D05F               	goto	i2l2578
  5372  0015F4                     i2l2550:
  5373  0015F4  0E16               	movlw	22
  5374  0015F6  0100               	movlb	0	; () banked
  5375  0015F8  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5376  0015FA  A4D8               	btfss	status,2,c
  5377  0015FC  D021               	goto	i2l2560
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;ax.c: 352: int error = writeAXData(parameter1, parameter2, parameter3 + (parameter4 << 
      +                          8));
  5381  0015FE  C0A5  F018         	movff	_parameter1,writeAXData@id	;volatile
  5382  001602  6A19               	clrf	writeAXData@id+1,c
  5383  001604  C0A4  F01A         	movff	_parameter2,writeAXData@address	;volatile
  5384  001608  6A1B               	clrf	writeAXData@address+1,c
  5385  00160A  0100               	movlb	0	; () banked
  5386  00160C  51A2               	movf	_parameter4& (0+255),w,b	;volatile
  5387  00160E  6E51               	movwf	(??_getByteToSend+1)& (0+255),c
  5388  001610  6A50               	clrf	??_getByteToSend& (0+255),c
  5389  001612  0100               	movlb	0	; () banked
  5390  001614  51A3               	movf	_parameter3& (0+255),w,b	;volatile
  5391  001616  2450               	addwf	??_getByteToSend,w,c
  5392  001618  6E1C               	movwf	writeAXData@data,c
  5393  00161A  0E00               	movlw	0
  5394  00161C  2051               	addwfc	??_getByteToSend+1,w,c
  5395  00161E  6E1D               	movwf	writeAXData@data+1,c
  5396  001620  ECA4  F00E         	call	_writeAXData	;wreg free
  5397  001624  C018  F054         	movff	?_writeAXData,getByteToSend@error_1438
  5398  001628  C019  F055         	movff	?_writeAXData+1,getByteToSend@error_1438+1
  5399                           
  5400                           ;ax.c: 353: nbBytesToSend = 1;
  5401  00162C  0E00               	movlw	0
  5402  00162E  0100               	movlb	0	; () banked
  5403  001630  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5404  001632  0E01               	movlw	1
  5405  001634  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;ax.c: 354: dataToSend[0] = error;
  5409  001636  C054  F060         	movff	getByteToSend@error_1438,_dataToSend	;volatile
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;ax.c: 355: clearState();
  5413  00163A  EC65  F010         	call	_clearState	;wreg free
  5414                           
  5415                           ;ax.c: 356: } else if (currentCommand == 12) {
  5416  00163E  D039               	goto	i2l2578
  5417  001640                     i2l2560:
  5418  001640  0E0C               	movlw	12
  5419  001642  0100               	movlb	0	; () banked
  5420  001644  19E8               	xorwf	_currentCommand& (0+255),w,b	;volatile
  5421  001646  A4D8               	btfss	status,2,c
  5422  001648  D034               	goto	i2l2578
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;ax.c: 359: adc_values[parameter1] = ADC_GetConversion(parameter1) / 16;
  5426  00164A  0100               	movlb	0	; () banked
  5427  00164C  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  5428  00164E  ECD8  F010         	call	i2_ADC_GetConversion
  5429  001652  0E04               	movlw	4
  5430  001654  6E50               	movwf	??_getByteToSend& (0+255),c
  5431  001656                     i2u129_45:
  5432  001656  90D8               	bcf	status,0,c
  5433  001658  3202               	rrcf	?i2_ADC_GetConversion+1,f,c
  5434  00165A  3201               	rrcf	?i2_ADC_GetConversion,f,c
  5435  00165C  2E50               	decfsz	??_getByteToSend& (0+255),f,c
  5436  00165E  D7FB               	goto	i2u129_45
  5437  001660  0100               	movlb	0	; () banked
  5438  001662  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  5439  001664  0D02               	mullw	2
  5440  001666  0E80               	movlw	low _adc_values
  5441  001668  24F3               	addwf	prodl,w,c
  5442  00166A  6ED9               	movwf	fsr2l,c
  5443  00166C  0E00               	movlw	high _adc_values
  5444  00166E  20F4               	addwfc	prodh,w,c
  5445  001670  6EDA               	movwf	fsr2h,c
  5446  001672  C001  FFDE         	movff	?i2_ADC_GetConversion,postinc2
  5447  001676  C002  FFDD         	movff	?i2_ADC_GetConversion+1,postdec2
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;ax.c: 361: int value = adc_values[parameter1];
  5451  00167A  0100               	movlb	0	; () banked
  5452  00167C  51A5               	movf	_parameter1& (0+255),w,b	;volatile
  5453  00167E  0D02               	mullw	2
  5454  001680  0E80               	movlw	low _adc_values
  5455  001682  24F3               	addwf	prodl,w,c
  5456  001684  6ED9               	movwf	fsr2l,c
  5457  001686  0E00               	movlw	high _adc_values
  5458  001688  20F4               	addwfc	prodh,w,c
  5459  00168A  6EDA               	movwf	fsr2h,c
  5460  00168C  CFDE F05D          	movff	postinc2,getByteToSend@value_1440
  5461  001690  CFDD F05E          	movff	postdec2,getByteToSend@value_1440+1
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;ax.c: 362: nbBytesToSend = 2;
  5465  001694  0E00               	movlw	0
  5466  001696  0100               	movlb	0	; () banked
  5467  001698  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  5468  00169A  0E02               	movlw	2
  5469  00169C  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;ax.c: 363: uint8_t xlow = value & 0xff;
  5473  00169E  C05D  F058         	movff	getByteToSend@value_1440,getByteToSend@xlow_1441
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;ax.c: 364: uint8_t xhigh = (value >> 8);
  5477  0016A2  505E               	movf	getByteToSend@value_1440+1,w,c
  5478  0016A4  6E59               	movwf	getByteToSend@xhigh_1442,c
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;ax.c: 365: dataToSend[0] = xlow;
  5482  0016A6  C058  F060         	movff	getByteToSend@xlow_1441,_dataToSend	;volatile
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;ax.c: 366: dataToSend[1] = xhigh;
  5486  0016AA  C059  F061         	movff	getByteToSend@xhigh_1442,_dataToSend+1	;volatile
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;ax.c: 370: clearState();
  5490  0016AE  EC65  F010         	call	_clearState	;wreg free
  5491  0016B2                     i2l2578:
  5492                           
  5493                           ;ax.c: 371: }
  5494                           ;ax.c: 372: if (nbBytesToSend == 0) {
  5495  0016B2  0100               	movlb	0	; () banked
  5496  0016B4  5196               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  5497  0016B6  0100               	movlb	0	; () banked
  5498  0016B8  1197               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  5499  0016BA  A4D8               	btfss	status,2,c
  5500  0016BC  D004               	goto	i2l2586
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;ax.c: 374: clearState();
  5504  0016BE  EC65  F010         	call	_clearState	;wreg free
  5505                           
  5506                           ;ax.c: 375: return 0;
  5507  0016C2  0E00               	movlw	0
  5508  0016C4  0012               	return	
  5509  0016C6                     i2l2586:
  5510                           
  5511                           ;ax.c: 376: }
  5512                           ;ax.c: 377: uint8_t d = dataToSend[bytesSent];
  5513  0016C6  0E60               	movlw	low _dataToSend
  5514  0016C8  0100               	movlb	0	; () banked
  5515  0016CA  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  5516  0016CC  6ED9               	movwf	fsr2l,c
  5517  0016CE  0E00               	movlw	high _dataToSend
  5518  0016D0  0100               	movlb	0	; () banked
  5519  0016D2  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  5520  0016D4  6EDA               	movwf	fsr2h,c
  5521  0016D6  50DF               	movf	indf2,w,c
  5522  0016D8  6E5A               	movwf	getByteToSend@d,c
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;ax.c: 378: bytesSent++;
  5526  0016DA  0100               	movlb	0	; () banked
  5527  0016DC  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  5528  0016DE  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;ax.c: 380: if (bytesSent > nbBytesToSend) {
  5532  0016E0  0100               	movlb	0	; () banked
  5533  0016E2  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  5534  0016E4  0100               	movlb	0	; () banked
  5535  0016E6  5D96               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  5536  0016E8  0100               	movlb	0	; () banked
  5537  0016EA  5197               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  5538  0016EC  0A80               	xorlw	128
  5539  0016EE  6E50               	movwf	??_getByteToSend& (0+255),c
  5540  0016F0  0100               	movlb	0	; () banked
  5541  0016F2  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  5542  0016F4  0A80               	xorlw	128
  5543  0016F6  5850               	subwfb	??_getByteToSend& (0+255),w,c
  5544  0016F8  B0D8               	btfsc	status,0,c
  5545  0016FA  D004               	goto	i2l2598
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;ax.c: 382: clearState();
  5549  0016FC  EC65  F010         	call	_clearState	;wreg free
  5550                           
  5551                           ;ax.c: 383: return 111;
  5552  001700  0E6F               	movlw	111
  5553  001702  0012               	return	
  5554  001704                     i2l2598:
  5555                           
  5556                           ;ax.c: 384: }
  5557                           ;ax.c: 386: return d;
  5558  001704  505A               	movf	getByteToSend@d,w,c
  5559  001706  0012               	return	
  5560  001708                     __end_of_getByteToSend:
  5561                           	opt stack 0
  5562                           pclatu	equ	0xFFB
  5563                           pclath	equ	0xFFA
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodh	equ	0xFF4
  5569                           prodl	equ	0xFF3
  5570                           intcon	equ	0xFF2
  5571                           postinc0	equ	0xFEE
  5572                           fsr0h	equ	0xFEA
  5573                           fsr0l	equ	0xFE9
  5574                           wreg	equ	0xFE8
  5575                           fsr1h	equ	0xFE2
  5576                           fsr1l	equ	0xFE1
  5577                           indf2	equ	0xFDF
  5578                           postinc2	equ	0xFDE
  5579                           postdec2	equ	0xFDD
  5580                           fsr2h	equ	0xFDA
  5581                           fsr2l	equ	0xFD9
  5582                           status	equ	0xFD8
  5583                           
  5584 ;; *************** function i2_ADC_GetConversion *****************
  5585 ;; Defined at:
  5586 ;;		line 105 in file "mcc_generated_files/adc.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  channel         1    wreg     enum E15092
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  channel         1    4[COMRAM] enum E15092
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  2    0[COMRAM] unsigned int 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5603 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5604 ;;Total ram usage:        5 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_getByteToSend
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text30
  5614  0021B0                     __ptext30:
  5615                           	opt stack 0
  5616  0021B0                     i2_ADC_GetConversion:
  5617                           	opt stack 24
  5618                           
  5619                           ;incstack = 0
  5620                           ;i2ADC_GetConversion@channel stored from wreg
  5621  0021B0  6E05               	movwf	i2ADC_GetConversion@channel,c
  5622                           
  5623                           ;adc.c: 108: ADCON0bits.CHS = channel;
  5624  0021B2  C005  F003         	movff	i2ADC_GetConversion@channel,??i2_ADC_GetConversion
  5625  0021B6  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5626  0021B8  4603               	rlncf	??i2_ADC_GetConversion,f,c
  5627  0021BA  50C2               	movf	4034,w,c	;volatile
  5628  0021BC  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5629  0021BE  0B83               	andlw	-125
  5630  0021C0  1803               	xorwf	??i2_ADC_GetConversion,w,c
  5631  0021C2  6EC2               	movwf	4034,c	;volatile
  5632                           
  5633                           ;adc.c: 111: ADCON0bits.ADON = 1;
  5634  0021C4  80C2               	bsf	4034,0,c	;volatile
  5635                           
  5636                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  5637  0021C6  82C2               	bsf	4034,1,c	;volatile
  5638  0021C8                     i2l253:
  5639  0021C8  B2C2               	btfsc	4034,1,c	;volatile
  5640  0021CA  D7FE               	goto	i2l253
  5641                           
  5642                           ;adc.c: 120: }
  5643                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  5644  0021CC  50C4               	movf	4036,w,c	;volatile
  5645  0021CE  6E04               	movwf	(??i2_ADC_GetConversion+1)& (0+255),c
  5646  0021D0  6A03               	clrf	??i2_ADC_GetConversion& (0+255),c
  5647  0021D2  50C3               	movf	4035,w,c	;volatile
  5648  0021D4  2403               	addwf	??i2_ADC_GetConversion,w,c
  5649  0021D6  6E01               	movwf	?i2_ADC_GetConversion,c
  5650  0021D8  0E00               	movlw	0
  5651  0021DA  2004               	addwfc	??i2_ADC_GetConversion+1,w,c
  5652  0021DC  6E02               	movwf	?i2_ADC_GetConversion+1,c
  5653  0021DE  0012               	return	
  5654  0021E0                     __end_ofi2_ADC_GetConversion:
  5655                           	opt stack 0
  5656                           pclatu	equ	0xFFB
  5657                           pclath	equ	0xFFA
  5658                           tblptru	equ	0xFF8
  5659                           tblptrh	equ	0xFF7
  5660                           tblptrl	equ	0xFF6
  5661                           tablat	equ	0xFF5
  5662                           prodh	equ	0xFF4
  5663                           prodl	equ	0xFF3
  5664                           intcon	equ	0xFF2
  5665                           postinc0	equ	0xFEE
  5666                           fsr0h	equ	0xFEA
  5667                           fsr0l	equ	0xFE9
  5668                           wreg	equ	0xFE8
  5669                           fsr1h	equ	0xFE2
  5670                           fsr1l	equ	0xFE1
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _writeAXData *****************
  5679 ;; Defined at:
  5680 ;;		line 237 in file "ax.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  id              2   23[COMRAM] int 
  5683 ;;  address         2   25[COMRAM] int 
  5684 ;;  data            2   27[COMRAM] int 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  packet         20   50[COMRAM] unsigned char [20]
  5687 ;;  result         20   30[COMRAM] unsigned char [20]
  5688 ;;  size            2   76[COMRAM] int 
  5689 ;;  error           2   74[COMRAM] int 
  5690 ;;  instruction     2   72[COMRAM] int 
  5691 ;;  length          2   70[COMRAM] int 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  2   23[COMRAM] int 
  5694 ;; Registers used:
  5695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5701 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5704 ;;      Totals:        55       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5705 ;;Total ram usage:       55 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    2
  5708 ;; This function calls:
  5709 ;;		_getAddressSize
  5710 ;;		_sendAX
  5711 ;; This function is called by:
  5712 ;;		_getByteToSend
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text31
  5717  001D48                     __ptext31:
  5718                           	opt stack 0
  5719  001D48                     _writeAXData:
  5720                           	opt stack 22
  5721                           
  5722                           ;ax.c: 238: int size = getAddressSize(address);
  5723                           
  5724                           ;incstack = 0
  5725  001D48  C01A  F001         	movff	writeAXData@address,getAddressSize@address
  5726  001D4C  C01B  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  5727  001D50  ECA5  F00F         	call	_getAddressSize	;wreg free
  5728  001D54  C001  F04D         	movff	?_getAddressSize,writeAXData@size
  5729  001D58  C002  F04E         	movff	?_getAddressSize+1,writeAXData@size+1
  5730                           
  5731                           ;ax.c: 240: uint8_t packet[20];
  5732                           ;ax.c: 241: uint8_t result[20];
  5733                           ;ax.c: 242: packet[0] = 0xFF;
  5734  001D5C  6833               	setf	writeAXData@packet,c
  5735                           
  5736                           ;ax.c: 243: packet[1] = 0xFF;
  5737  001D5E  6834               	setf	writeAXData@packet+1,c
  5738                           
  5739                           ;ax.c: 244: packet[2] = id;
  5740  001D60  C018  F035         	movff	writeAXData@id,writeAXData@packet+2
  5741                           
  5742                           ;ax.c: 245: int length = size + 3;
  5743  001D64  0E03               	movlw	3
  5744  001D66  244D               	addwf	writeAXData@size,w,c
  5745  001D68  6E47               	movwf	writeAXData@length,c
  5746  001D6A  0E00               	movlw	0
  5747  001D6C  204E               	addwfc	writeAXData@size+1,w,c
  5748  001D6E  6E48               	movwf	writeAXData@length+1,c
  5749                           
  5750                           ;ax.c: 246: packet[3] = length;
  5751  001D70  C047  F036         	movff	writeAXData@length,writeAXData@packet+3
  5752                           
  5753                           ;ax.c: 247: int instruction = 0x03;
  5754  001D74  0E00               	movlw	0
  5755  001D76  6E4A               	movwf	writeAXData@instruction+1,c
  5756  001D78  0E03               	movlw	3
  5757  001D7A  6E49               	movwf	writeAXData@instruction,c
  5758                           
  5759                           ;ax.c: 248: packet[4] = instruction;
  5760  001D7C  C049  F037         	movff	writeAXData@instruction,writeAXData@packet+4
  5761                           
  5762                           ;ax.c: 249: packet[5] = address;
  5763  001D80  C01A  F038         	movff	writeAXData@address,writeAXData@packet+5
  5764                           
  5765                           ;ax.c: 250: if (size == 1) {
  5766  001D84  044D               	decf	writeAXData@size,w,c
  5767  001D86  104E               	iorwf	writeAXData@size+1,w,c
  5768  001D88  A4D8               	btfss	status,2,c
  5769  001D8A  D003               	goto	i2l545
  5770                           
  5771                           ;ax.c: 251: packet[6] = data;
  5772  001D8C  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5773                           
  5774                           ;ax.c: 252: } else {
  5775  001D90  D004               	goto	i2l2448
  5776  001D92                     i2l545:
  5777                           
  5778                           ;ax.c: 253: packet[6] = data & 0xff;
  5779  001D92  C01C  F039         	movff	writeAXData@data,writeAXData@packet+6
  5780                           
  5781                           ;ax.c: 254: packet[7] = (data >> 8);
  5782  001D96  501D               	movf	writeAXData@data+1,w,c
  5783  001D98  6E3A               	movwf	writeAXData@packet+7,c
  5784  001D9A                     i2l2448:
  5785                           
  5786                           ;ax.c: 255: }
  5787                           ;ax.c: 258: int error = sendAX(packet, 6 + size, result, 0);
  5788  001D9A  0E33               	movlw	low writeAXData@packet
  5789  001D9C  6E02               	movwf	sendAX@buffer,c
  5790  001D9E  0E00               	movlw	high writeAXData@packet
  5791  001DA0  6E03               	movwf	sendAX@buffer+1,c
  5792  001DA2  0E06               	movlw	6
  5793  001DA4  244D               	addwf	writeAXData@size,w,c
  5794  001DA6  6E04               	movwf	sendAX@packetSize,c
  5795  001DA8  0E00               	movlw	0
  5796  001DAA  204E               	addwfc	writeAXData@size+1,w,c
  5797  001DAC  6E05               	movwf	sendAX@packetSize+1,c
  5798  001DAE  0E1F               	movlw	low writeAXData@result
  5799  001DB0  6E06               	movwf	sendAX@result,c
  5800  001DB2  0E00               	movlw	high writeAXData@result
  5801  001DB4  6E07               	movwf	sendAX@result+1,c
  5802  001DB6  0E00               	movlw	0
  5803  001DB8  6E09               	movwf	sendAX@parametersToRead+1,c
  5804  001DBA  0E00               	movlw	0
  5805  001DBC  6E08               	movwf	sendAX@parametersToRead,c
  5806  001DBE  EC1E  F00C         	call	_sendAX	;wreg free
  5807  001DC2  6E1E               	movwf	??_writeAXData& (0+255),c
  5808  001DC4  501E               	movf	??_writeAXData,w,c
  5809  001DC6  6E4B               	movwf	writeAXData@error,c
  5810  001DC8  6A4C               	clrf	writeAXData@error+1,c
  5811                           
  5812                           ;ax.c: 259: return error;
  5813  001DCA  C04B  F018         	movff	writeAXData@error,?_writeAXData
  5814  001DCE  C04C  F019         	movff	writeAXData@error+1,?_writeAXData+1
  5815  001DD2  0012               	return	
  5816  001DD4                     __end_of_writeAXData:
  5817                           	opt stack 0
  5818                           pclatu	equ	0xFFB
  5819                           pclath	equ	0xFFA
  5820                           tblptru	equ	0xFF8
  5821                           tblptrh	equ	0xFF7
  5822                           tblptrl	equ	0xFF6
  5823                           tablat	equ	0xFF5
  5824                           prodh	equ	0xFF4
  5825                           prodl	equ	0xFF3
  5826                           intcon	equ	0xFF2
  5827                           postinc0	equ	0xFEE
  5828                           fsr0h	equ	0xFEA
  5829                           fsr0l	equ	0xFE9
  5830                           wreg	equ	0xFE8
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _readAXData *****************
  5841 ;; Defined at:
  5842 ;;		line 210 in file "ax.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  id              2   23[COMRAM] int 
  5845 ;;  address         2   25[COMRAM] int 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;  packet         20   51[COMRAM] unsigned char [20]
  5848 ;;  result         20   29[COMRAM] unsigned char [20]
  5849 ;;  size            2   77[COMRAM] int 
  5850 ;;  instruction     2   75[COMRAM] int 
  5851 ;;  length          2   73[COMRAM] int 
  5852 ;;  nbParameters    2   71[COMRAM] int 
  5853 ;;  error           2   49[COMRAM] int 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  2   23[COMRAM] int 
  5856 ;; Registers used:
  5857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5864 ;;      Locals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;Total ram usage:       56 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    2
  5870 ;; This function calls:
  5871 ;;		_getAddressSize
  5872 ;;		_sendAX
  5873 ;; This function is called by:
  5874 ;;		_getByteToSend
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text32
  5879  001C22                     __ptext32:
  5880                           	opt stack 0
  5881  001C22                     _readAXData:
  5882                           	opt stack 22
  5883                           
  5884                           ;ax.c: 211: int size = getAddressSize(address);
  5885                           
  5886                           ;incstack = 0
  5887  001C22  C01A  F001         	movff	readAXData@address,getAddressSize@address
  5888  001C26  C01B  F002         	movff	readAXData@address+1,getAddressSize@address+1
  5889  001C2A  ECA5  F00F         	call	_getAddressSize	;wreg free
  5890  001C2E  C001  F04E         	movff	?_getAddressSize,readAXData@size
  5891  001C32  C002  F04F         	movff	?_getAddressSize+1,readAXData@size+1
  5892                           
  5893                           ;ax.c: 213: uint8_t packet[20];
  5894                           ;ax.c: 214: uint8_t result[20];
  5895                           ;ax.c: 215: packet[0] = 0xFF;
  5896  001C36  6834               	setf	readAXData@packet,c
  5897                           
  5898                           ;ax.c: 216: packet[1] = 0xFF;
  5899  001C38  6835               	setf	readAXData@packet+1,c
  5900                           
  5901                           ;ax.c: 217: packet[2] = id;
  5902  001C3A  C018  F036         	movff	readAXData@id,readAXData@packet+2
  5903                           
  5904                           ;ax.c: 218: int nbParameters = 2;
  5905  001C3E  0E00               	movlw	0
  5906  001C40  6E49               	movwf	readAXData@nbParameters+1,c
  5907  001C42  0E02               	movlw	2
  5908  001C44  6E48               	movwf	readAXData@nbParameters,c
  5909                           
  5910                           ;ax.c: 219: int length = nbParameters + 2;
  5911  001C46  0E02               	movlw	2
  5912  001C48  2448               	addwf	readAXData@nbParameters,w,c
  5913  001C4A  6E4A               	movwf	readAXData@length,c
  5914  001C4C  0E00               	movlw	0
  5915  001C4E  2049               	addwfc	readAXData@nbParameters+1,w,c
  5916  001C50  6E4B               	movwf	readAXData@length+1,c
  5917                           
  5918                           ;ax.c: 220: packet[3] = length;
  5919  001C52  C04A  F037         	movff	readAXData@length,readAXData@packet+3
  5920                           
  5921                           ;ax.c: 221: int instruction = 0x02;
  5922  001C56  0E00               	movlw	0
  5923  001C58  6E4D               	movwf	readAXData@instruction+1,c
  5924  001C5A  0E02               	movlw	2
  5925  001C5C  6E4C               	movwf	readAXData@instruction,c
  5926                           
  5927                           ;ax.c: 222: packet[4] = instruction;
  5928  001C5E  C04C  F038         	movff	readAXData@instruction,readAXData@packet+4
  5929                           
  5930                           ;ax.c: 223: packet[5] = address;
  5931  001C62  C01A  F039         	movff	readAXData@address,readAXData@packet+5
  5932                           
  5933                           ;ax.c: 224: packet[6] = size;
  5934  001C66  C04E  F03A         	movff	readAXData@size,readAXData@packet+6
  5935                           
  5936                           ;ax.c: 227: int error = sendAX(packet, 7, result, 1);
  5937  001C6A  0E34               	movlw	low readAXData@packet
  5938  001C6C  6E02               	movwf	sendAX@buffer,c
  5939  001C6E  0E00               	movlw	high readAXData@packet
  5940  001C70  6E03               	movwf	sendAX@buffer+1,c
  5941  001C72  0E00               	movlw	0
  5942  001C74  6E05               	movwf	sendAX@packetSize+1,c
  5943  001C76  0E07               	movlw	7
  5944  001C78  6E04               	movwf	sendAX@packetSize,c
  5945  001C7A  0E1E               	movlw	low readAXData@result
  5946  001C7C  6E06               	movwf	sendAX@result,c
  5947  001C7E  0E00               	movlw	high readAXData@result
  5948  001C80  6E07               	movwf	sendAX@result+1,c
  5949  001C82  0E00               	movlw	0
  5950  001C84  6E09               	movwf	sendAX@parametersToRead+1,c
  5951  001C86  0E01               	movlw	1
  5952  001C88  6E08               	movwf	sendAX@parametersToRead,c
  5953  001C8A  EC1E  F00C         	call	_sendAX	;wreg free
  5954  001C8E  6E1C               	movwf	??_readAXData& (0+255),c
  5955  001C90  501C               	movf	??_readAXData,w,c
  5956  001C92  6E32               	movwf	readAXData@error,c
  5957  001C94  6A33               	clrf	readAXData@error+1,c
  5958                           
  5959                           ;ax.c: 228: if (size == 1) {
  5960  001C96  044E               	decf	readAXData@size,w,c
  5961  001C98  104F               	iorwf	readAXData@size+1,w,c
  5962  001C9A  A4D8               	btfss	status,2,c
  5963  001C9C  D004               	goto	i2l2420
  5964                           
  5965                           ;ax.c: 230: return result[5];
  5966  001C9E  C023  F018         	movff	readAXData@result+5,?_readAXData
  5967  001CA2  6A19               	clrf	?_readAXData+1,c
  5968                           
  5969                           ;ax.c: 231: } else {
  5970  001CA4  0012               	return	
  5971  001CA6                     i2l2420:
  5972                           
  5973                           ;ax.c: 233: return result[5] + result[6]*256;
  5974  001CA6  5024               	movf	readAXData@result+6,w,c
  5975  001CA8  6E1D               	movwf	(??_readAXData+1)& (0+255),c
  5976  001CAA  6A1C               	clrf	??_readAXData& (0+255),c
  5977  001CAC  5023               	movf	readAXData@result+5,w,c
  5978  001CAE  241C               	addwf	??_readAXData,w,c
  5979  001CB0  6E18               	movwf	?_readAXData,c
  5980  001CB2  0E00               	movlw	0
  5981  001CB4  201D               	addwfc	??_readAXData+1,w,c
  5982  001CB6  6E19               	movwf	?_readAXData+1,c
  5983  001CB8  0012               	return	
  5984  001CBA                     __end_of_readAXData:
  5985                           	opt stack 0
  5986                           pclatu	equ	0xFFB
  5987                           pclath	equ	0xFFA
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           postinc0	equ	0xFEE
  5996                           fsr0h	equ	0xFEA
  5997                           fsr0l	equ	0xFE9
  5998                           wreg	equ	0xFE8
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _getAddressSize *****************
  6009 ;; Defined at:
  6010 ;;		line 24 in file "ax.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  address         2    0[COMRAM] int 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;		None
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  2    0[COMRAM] int 
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6024 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6027 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6028 ;;Total ram usage:        4 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_readAXData
  6034 ;;		_writeAXData
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           	psect	text33
  6039  001F4A                     __ptext33:
  6040                           	opt stack 0
  6041  001F4A                     _getAddressSize:
  6042                           	opt stack 23
  6043                           
  6044                           ;ax.c: 25: switch (address) {
  6045                           
  6046                           ;incstack = 0
  6047  001F4A  D00A               	goto	i2l2280
  6048  001F4C                     i2l2270:
  6049                           
  6050                           ;ax.c: 27: case 6:
  6051                           ;ax.c: 28: case 8:
  6052                           ;ax.c: 29: case 14:
  6053                           ;ax.c: 30: case 20:
  6054                           ;ax.c: 31: case 22:
  6055                           ;ax.c: 32: case 30:
  6056                           ;ax.c: 33: case 32:
  6057                           ;ax.c: 34: case 34:
  6058                           ;ax.c: 35: case 36:
  6059                           ;ax.c: 36: case 38:
  6060                           ;ax.c: 37: case 40:
  6061                           ;ax.c: 38: case 48:
  6062                           ;ax.c: 39: return 2;
  6063  001F4C  0E00               	movlw	0
  6064  001F4E  6E02               	movwf	?_getAddressSize+1,c
  6065  001F50  0E02               	movlw	2
  6066  001F52  6E01               	movwf	?_getAddressSize,c
  6067  001F54  0012               	return	
  6068  001F56                     i2l2274:
  6069                           
  6070                           ;ax.c: 41: return 1;
  6071  001F56  0E00               	movlw	0
  6072  001F58  6E02               	movwf	?_getAddressSize+1,c
  6073  001F5A  0E01               	movlw	1
  6074  001F5C  6E01               	movwf	?_getAddressSize,c
  6075                           
  6076                           ;ax.c: 42: }
  6077  001F5E  0012               	return	
  6078  001F60                     i2l2280:
  6079  001F60  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  6080  001F64  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  6081                           
  6082                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6083                           ; Switch size 1, requested type "space"
  6084                           ; Number of cases is 1, Range of values is 0 to 0
  6085                           ; switch strategies available:
  6086                           ; Name         Instructions Cycles
  6087                           ; simple_byte            4     3 (average)
  6088                           ;	Chosen strategy is simple_byte
  6089  001F68  5004               	movf	??_getAddressSize+1,w,c
  6090  001F6A  0A00               	xorlw	0	; case 0
  6091  001F6C  A4D8               	btfss	status,2,c
  6092  001F6E  D7F3               	goto	i2l2274
  6093                           
  6094                           ; Switch size 1, requested type "space"
  6095                           ; Number of cases is 13, Range of values is 0 to 48
  6096                           ; switch strategies available:
  6097                           ; Name         Instructions Cycles
  6098                           ; simple_byte           40    21 (average)
  6099                           ;	Chosen strategy is simple_byte
  6100  001F70  5003               	movf	??_getAddressSize,w,c
  6101  001F72  0A00               	xorlw	0	; case 0
  6102  001F74  B4D8               	btfsc	status,2,c
  6103  001F76  D7EA               	goto	i2l2270
  6104  001F78  0A06               	xorlw	6	; case 6
  6105  001F7A  B4D8               	btfsc	status,2,c
  6106  001F7C  D7E7               	goto	i2l2270
  6107  001F7E  0A0E               	xorlw	14	; case 8
  6108  001F80  B4D8               	btfsc	status,2,c
  6109  001F82  D7E4               	goto	i2l2270
  6110  001F84  0A06               	xorlw	6	; case 14
  6111  001F86  B4D8               	btfsc	status,2,c
  6112  001F88  D7E1               	goto	i2l2270
  6113  001F8A  0A1A               	xorlw	26	; case 20
  6114  001F8C  B4D8               	btfsc	status,2,c
  6115  001F8E  D7DE               	goto	i2l2270
  6116  001F90  0A02               	xorlw	2	; case 22
  6117  001F92  B4D8               	btfsc	status,2,c
  6118  001F94  D7DB               	goto	i2l2270
  6119  001F96  0A08               	xorlw	8	; case 30
  6120  001F98  B4D8               	btfsc	status,2,c
  6121  001F9A  D7D8               	goto	i2l2270
  6122  001F9C  0A3E               	xorlw	62	; case 32
  6123  001F9E  B4D8               	btfsc	status,2,c
  6124  001FA0  D7D5               	goto	i2l2270
  6125  001FA2  0A02               	xorlw	2	; case 34
  6126  001FA4  B4D8               	btfsc	status,2,c
  6127  001FA6  D7D2               	goto	i2l2270
  6128  001FA8  0A06               	xorlw	6	; case 36
  6129  001FAA  B4D8               	btfsc	status,2,c
  6130  001FAC  D7CF               	goto	i2l2270
  6131  001FAE  0A02               	xorlw	2	; case 38
  6132  001FB0  B4D8               	btfsc	status,2,c
  6133  001FB2  D7CC               	goto	i2l2270
  6134  001FB4  0A0E               	xorlw	14	; case 40
  6135  001FB6  B4D8               	btfsc	status,2,c
  6136  001FB8  D7C9               	goto	i2l2270
  6137  001FBA  0A18               	xorlw	24	; case 48
  6138  001FBC  B4D8               	btfsc	status,2,c
  6139  001FBE  D7C6               	goto	i2l2270
  6140  001FC0  D7CA               	goto	i2l2274
  6141  001FC2                     __end_of_getAddressSize:
  6142                           	opt stack 0
  6143                           pclatu	equ	0xFFB
  6144                           pclath	equ	0xFFA
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodh	equ	0xFF4
  6150                           prodl	equ	0xFF3
  6151                           intcon	equ	0xFF2
  6152                           postinc0	equ	0xFEE
  6153                           fsr0h	equ	0xFEA
  6154                           fsr0l	equ	0xFE9
  6155                           wreg	equ	0xFE8
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _pingAX *****************
  6166 ;; Defined at:
  6167 ;;		line 193 in file "ax.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  id              2   23[COMRAM] int 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  packet         20   46[COMRAM] unsigned char [20]
  6172 ;;  result         20   26[COMRAM] unsigned char [20]
  6173 ;;  error           2   72[COMRAM] int 
  6174 ;;  instruction     2   70[COMRAM] int 
  6175 ;;  length          2   68[COMRAM] int 
  6176 ;;  nbParameters    2   66[COMRAM] int 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  2   23[COMRAM] int 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6187 ;;      Locals:        48       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6189 ;;      Totals:        51       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6190 ;;Total ram usage:       51 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    2
  6193 ;; This function calls:
  6194 ;;		_sendAX
  6195 ;; This function is called by:
  6196 ;;		_getByteToSend
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text34
  6201  002028                     __ptext34:
  6202                           	opt stack 0
  6203  002028                     _pingAX:
  6204                           	opt stack 22
  6205                           
  6206                           ;ax.c: 194: uint8_t packet[20];
  6207                           ;ax.c: 195: uint8_t result[20];
  6208                           ;ax.c: 196: packet[0] = 0xFF;
  6209                           
  6210                           ;incstack = 0
  6211  002028  682F               	setf	pingAX@packet,c
  6212                           
  6213                           ;ax.c: 197: packet[1] = 0xFF;
  6214  00202A  6830               	setf	pingAX@packet+1,c
  6215                           
  6216                           ;ax.c: 198: packet[2] = id;
  6217  00202C  C018  F031         	movff	pingAX@id,pingAX@packet+2
  6218                           
  6219                           ;ax.c: 199: int nbParameters = 0;
  6220  002030  0E00               	movlw	0
  6221  002032  6E44               	movwf	pingAX@nbParameters+1,c
  6222  002034  0E00               	movlw	0
  6223  002036  6E43               	movwf	pingAX@nbParameters,c
  6224                           
  6225                           ;ax.c: 200: int length = nbParameters + 2;
  6226  002038  0E02               	movlw	2
  6227  00203A  2443               	addwf	pingAX@nbParameters,w,c
  6228  00203C  6E45               	movwf	pingAX@length,c
  6229  00203E  0E00               	movlw	0
  6230  002040  2044               	addwfc	pingAX@nbParameters+1,w,c
  6231  002042  6E46               	movwf	pingAX@length+1,c
  6232                           
  6233                           ;ax.c: 201: packet[3] = length;
  6234  002044  C045  F032         	movff	pingAX@length,pingAX@packet+3
  6235                           
  6236                           ;ax.c: 202: int instruction = 0x01;
  6237  002048  0E00               	movlw	0
  6238  00204A  6E48               	movwf	pingAX@instruction+1,c
  6239  00204C  0E01               	movlw	1
  6240  00204E  6E47               	movwf	pingAX@instruction,c
  6241                           
  6242                           ;ax.c: 203: packet[4] = instruction;
  6243  002050  C047  F033         	movff	pingAX@instruction,pingAX@packet+4
  6244                           
  6245                           ;ax.c: 206: int error = sendAX(packet, 5, result, 0);
  6246  002054  0E2F               	movlw	low pingAX@packet
  6247  002056  6E02               	movwf	sendAX@buffer,c
  6248  002058  0E00               	movlw	high pingAX@packet
  6249  00205A  6E03               	movwf	sendAX@buffer+1,c
  6250  00205C  0E00               	movlw	0
  6251  00205E  6E05               	movwf	sendAX@packetSize+1,c
  6252  002060  0E05               	movlw	5
  6253  002062  6E04               	movwf	sendAX@packetSize,c
  6254  002064  0E1B               	movlw	low pingAX@result
  6255  002066  6E06               	movwf	sendAX@result,c
  6256  002068  0E00               	movlw	high pingAX@result
  6257  00206A  6E07               	movwf	sendAX@result+1,c
  6258  00206C  0E00               	movlw	0
  6259  00206E  6E09               	movwf	sendAX@parametersToRead+1,c
  6260  002070  0E00               	movlw	0
  6261  002072  6E08               	movwf	sendAX@parametersToRead,c
  6262  002074  EC1E  F00C         	call	_sendAX	;wreg free
  6263  002078  6E1A               	movwf	??_pingAX& (0+255),c
  6264  00207A  501A               	movf	??_pingAX,w,c
  6265  00207C  6E49               	movwf	pingAX@error,c
  6266  00207E  6A4A               	clrf	pingAX@error+1,c
  6267                           
  6268                           ;ax.c: 207: return error;
  6269  002080  C049  F018         	movff	pingAX@error,?_pingAX
  6270  002084  C04A  F019         	movff	pingAX@error+1,?_pingAX+1
  6271  002088  0012               	return	
  6272  00208A                     __end_of_pingAX:
  6273                           	opt stack 0
  6274                           pclatu	equ	0xFFB
  6275                           pclath	equ	0xFFA
  6276                           tblptru	equ	0xFF8
  6277                           tblptrh	equ	0xFF7
  6278                           tblptrl	equ	0xFF6
  6279                           tablat	equ	0xFF5
  6280                           prodh	equ	0xFF4
  6281                           prodl	equ	0xFF3
  6282                           intcon	equ	0xFF2
  6283                           postinc0	equ	0xFEE
  6284                           fsr0h	equ	0xFEA
  6285                           fsr0l	equ	0xFE9
  6286                           wreg	equ	0xFE8
  6287                           fsr1h	equ	0xFE2
  6288                           fsr1l	equ	0xFE1
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function _sendAX *****************
  6297 ;; Defined at:
  6298 ;;		line 131 in file "ax.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  6301 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  6302 ;;  packetSize      2    3[COMRAM] int 
  6303 ;;  result          2    5[COMRAM] PTR unsigned char 
  6304 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  6305 ;;  parametersTo    2    7[COMRAM] int 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  i               2   20[COMRAM] int 
  6308 ;;  i               2   16[COMRAM] int 
  6309 ;;  i               2   14[COMRAM] int 
  6310 ;;  i               2   12[COMRAM] int 
  6311 ;;  r0              2   18[COMRAM] int 
  6312 ;;  stop            2   10[COMRAM] int 
  6313 ;;  checksum        1   22[COMRAM] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      unsigned char 
  6316 ;; Registers used:
  6317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6323 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6324 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6326 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6327 ;;Total ram usage:       22 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    1
  6330 ;; This function calls:
  6331 ;;		_EUSART1_Read
  6332 ;;		_EUSART1_Write
  6333 ;; This function is called by:
  6334 ;;		_pingAX
  6335 ;;		_readAXData
  6336 ;;		_writeAXData
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text35
  6341  00183C                     __ptext35:
  6342                           	opt stack 0
  6343  00183C                     _sendAX:
  6344                           	opt stack 22
  6345                           
  6346                           ;ax.c: 132: uint8_t checksum = 0;
  6347                           
  6348                           ;incstack = 0
  6349  00183C  0E00               	movlw	0
  6350  00183E  6E17               	movwf	sendAX@checksum,c
  6351                           
  6352                           ;ax.c: 134: for (int i = 2; i < packetSize; i++) {
  6353  001840  0E00               	movlw	0
  6354  001842  6E0E               	movwf	sendAX@i+1,c
  6355  001844  0E02               	movlw	2
  6356  001846  6E0D               	movwf	sendAX@i,c
  6357  001848  D00A               	goto	i2l2292
  6358  00184A                     i2l2288:
  6359                           
  6360                           ;ax.c: 135: checksum += buffer[i];
  6361  00184A  500D               	movf	sendAX@i,w,c
  6362  00184C  2402               	addwf	sendAX@buffer,w,c
  6363  00184E  6ED9               	movwf	fsr2l,c
  6364  001850  500E               	movf	sendAX@i+1,w,c
  6365  001852  2003               	addwfc	sendAX@buffer+1,w,c
  6366  001854  6EDA               	movwf	fsr2h,c
  6367  001856  50DF               	movf	indf2,w,c
  6368  001858  2617               	addwf	sendAX@checksum,f,c
  6369  00185A  4A0D               	infsnz	sendAX@i,f,c
  6370  00185C  2A0E               	incf	sendAX@i+1,f,c
  6371  00185E                     i2l2292:
  6372  00185E  5004               	movf	sendAX@packetSize,w,c
  6373  001860  5C0D               	subwf	sendAX@i,w,c
  6374  001862  500E               	movf	sendAX@i+1,w,c
  6375  001864  0A80               	xorlw	128
  6376  001866  6E0A               	movwf	??_sendAX& (0+255),c
  6377  001868  5005               	movf	sendAX@packetSize+1,w,c
  6378  00186A  0A80               	xorlw	128
  6379  00186C  580A               	subwfb	??_sendAX& (0+255),w,c
  6380  00186E  A0D8               	btfss	status,0,c
  6381  001870  D7EC               	goto	i2l2288
  6382                           
  6383                           ;ax.c: 136: }
  6384                           ;ax.c: 137: checksum = ~checksum;
  6385  001872  1E17               	comf	sendAX@checksum,f,c
  6386                           
  6387                           ;ax.c: 139: do { LATDbits.LATD4 = 1; } while(0);
  6388  001874  888C               	bsf	3980,4,c	;volatile
  6389                           
  6390                           ;ax.c: 140: for (int i = 0; i < packetSize; i++) {
  6391  001876  0E00               	movlw	0
  6392  001878  6E10               	movwf	sendAX@i_1375+1,c
  6393  00187A  0E00               	movlw	0
  6394  00187C  6E0F               	movwf	sendAX@i_1375,c
  6395  00187E  D00B               	goto	i2l2304
  6396  001880                     i2l2300:
  6397                           
  6398                           ;ax.c: 141: EUSART1_Write(buffer[i]);
  6399  001880  500F               	movf	sendAX@i_1375,w,c
  6400  001882  2402               	addwf	sendAX@buffer,w,c
  6401  001884  6ED9               	movwf	fsr2l,c
  6402  001886  5010               	movf	sendAX@i_1375+1,w,c
  6403  001888  2003               	addwfc	sendAX@buffer+1,w,c
  6404  00188A  6EDA               	movwf	fsr2h,c
  6405  00188C  50DF               	movf	indf2,w,c
  6406  00188E  EC55  F011         	call	_EUSART1_Write
  6407  001892  4A0F               	infsnz	sendAX@i_1375,f,c
  6408  001894  2A10               	incf	sendAX@i_1375+1,f,c
  6409  001896                     i2l2304:
  6410  001896  5004               	movf	sendAX@packetSize,w,c
  6411  001898  5C0F               	subwf	sendAX@i_1375,w,c
  6412  00189A  5010               	movf	sendAX@i_1375+1,w,c
  6413  00189C  0A80               	xorlw	128
  6414  00189E  6E0A               	movwf	??_sendAX& (0+255),c
  6415  0018A0  5005               	movf	sendAX@packetSize+1,w,c
  6416  0018A2  0A80               	xorlw	128
  6417  0018A4  580A               	subwfb	??_sendAX& (0+255),w,c
  6418  0018A6  A0D8               	btfss	status,0,c
  6419  0018A8  D7EB               	goto	i2l2300
  6420                           
  6421                           ;ax.c: 142: }
  6422                           ;ax.c: 143: EUSART1_Write(checksum);
  6423  0018AA  5017               	movf	sendAX@checksum,w,c
  6424  0018AC  EC55  F011         	call	_EUSART1_Write
  6425                           
  6426                           ;ax.c: 145: int stop = 6 + parametersToRead;
  6427  0018B0  0E06               	movlw	6
  6428  0018B2  2408               	addwf	sendAX@parametersToRead,w,c
  6429  0018B4  6E0B               	movwf	sendAX@stop,c
  6430  0018B6  0E00               	movlw	0
  6431  0018B8  2009               	addwfc	sendAX@parametersToRead+1,w,c
  6432  0018BA  6E0C               	movwf	sendAX@stop+1,c
  6433                           
  6434                           ;ax.c: 147: for (int i = 0; i < stop; i++) {
  6435  0018BC  0E00               	movlw	0
  6436  0018BE  6E12               	movwf	sendAX@i_1378+1,c
  6437  0018C0  0E00               	movlw	0
  6438  0018C2  6E11               	movwf	sendAX@i_1378,c
  6439  0018C4  D00A               	goto	i2l2316
  6440  0018C6                     i2l2312:
  6441                           
  6442                           ;ax.c: 148: result[i] = 0X07;
  6443  0018C6  5011               	movf	sendAX@i_1378,w,c
  6444  0018C8  2406               	addwf	sendAX@result,w,c
  6445  0018CA  6ED9               	movwf	fsr2l,c
  6446  0018CC  5012               	movf	sendAX@i_1378+1,w,c
  6447  0018CE  2007               	addwfc	sendAX@result+1,w,c
  6448  0018D0  6EDA               	movwf	fsr2h,c
  6449  0018D2  0E07               	movlw	7
  6450  0018D4  6EDF               	movwf	indf2,c
  6451  0018D6  4A11               	infsnz	sendAX@i_1378,f,c
  6452  0018D8  2A12               	incf	sendAX@i_1378+1,f,c
  6453  0018DA                     i2l2316:
  6454  0018DA  500B               	movf	sendAX@stop,w,c
  6455  0018DC  5C11               	subwf	sendAX@i_1378,w,c
  6456  0018DE  5012               	movf	sendAX@i_1378+1,w,c
  6457  0018E0  0A80               	xorlw	128
  6458  0018E2  6E0A               	movwf	??_sendAX& (0+255),c
  6459  0018E4  500C               	movf	sendAX@stop+1,w,c
  6460  0018E6  0A80               	xorlw	128
  6461  0018E8  580A               	subwfb	??_sendAX& (0+255),w,c
  6462  0018EA  A0D8               	btfss	status,0,c
  6463  0018EC  D7EC               	goto	i2l2312
  6464                           
  6465                           ;ax.c: 149: }
  6466                           ;ax.c: 159: _delay((unsigned long)((10)*(64000000/4000000.0)));
  6467  0018EE  0E35               	movlw	53
  6468  0018F0                     i2u210_47:
  6469  0018F0  2EE8               	decfsz	wreg,f,c
  6470  0018F2  D7FE               	bra	i2u210_47
  6471  0018F4  F000               	nop	
  6472                           
  6473                           ;ax.c: 160: do { LATDbits.LATD4 = 0; } while(0);
  6474  0018F6  988C               	bcf	3980,4,c	;volatile
  6475                           
  6476                           ;ax.c: 163: int r0 = EUSART1_Read();
  6477  0018F8  EC39  F011         	call	_EUSART1_Read	;wreg free
  6478  0018FC  D002               	goto	L6
  6479  0018FE                     i2l2324:
  6480                           
  6481                           ;ax.c: 165: r0 = EUSART1_Read();
  6482  0018FE  EC39  F011         	call	_EUSART1_Read	;wreg free
  6483  001902                     L6:
  6484  001902  6E0A               	movwf	??_sendAX& (0+255),c
  6485  001904  500A               	movf	??_sendAX,w,c
  6486  001906  6E13               	movwf	sendAX@r0,c
  6487  001908  6A14               	clrf	sendAX@r0+1,c
  6488  00190A  2813               	incf	sendAX@r0,w,c
  6489  00190C  1014               	iorwf	sendAX@r0+1,w,c
  6490  00190E  A4D8               	btfss	status,2,c
  6491  001910  D7F6               	goto	i2l2324
  6492                           
  6493                           ;ax.c: 166: }
  6494                           ;ax.c: 167: result[0] = r0;
  6495  001912  C006  FFD9         	movff	sendAX@result,fsr2l
  6496  001916  C007  FFDA         	movff	sendAX@result+1,fsr2h
  6497  00191A  C013  FFDF         	movff	sendAX@r0,indf2
  6498                           
  6499                           ;ax.c: 170: for (int i = 1; i < stop; i++) {
  6500  00191E  0E00               	movlw	0
  6501  001920  6E16               	movwf	sendAX@i_1381+1,c
  6502  001922  0E01               	movlw	1
  6503  001924  6E15               	movwf	sendAX@i_1381,c
  6504  001926  D00B               	goto	i2l2336
  6505  001928                     i2l2332:
  6506                           
  6507                           ;ax.c: 171: result[i] = EUSART1_Read();
  6508  001928  5015               	movf	sendAX@i_1381,w,c
  6509  00192A  2406               	addwf	sendAX@result,w,c
  6510  00192C  6ED9               	movwf	fsr2l,c
  6511  00192E  5016               	movf	sendAX@i_1381+1,w,c
  6512  001930  2007               	addwfc	sendAX@result+1,w,c
  6513  001932  6EDA               	movwf	fsr2h,c
  6514  001934  EC39  F011         	call	_EUSART1_Read	;wreg free
  6515  001938  6EDF               	movwf	indf2,c
  6516  00193A  4A15               	infsnz	sendAX@i_1381,f,c
  6517  00193C  2A16               	incf	sendAX@i_1381+1,f,c
  6518  00193E                     i2l2336:
  6519  00193E  500B               	movf	sendAX@stop,w,c
  6520  001940  5C15               	subwf	sendAX@i_1381,w,c
  6521  001942  5016               	movf	sendAX@i_1381+1,w,c
  6522  001944  0A80               	xorlw	128
  6523  001946  6E0A               	movwf	??_sendAX& (0+255),c
  6524  001948  500C               	movf	sendAX@stop+1,w,c
  6525  00194A  0A80               	xorlw	128
  6526  00194C  580A               	subwfb	??_sendAX& (0+255),w,c
  6527  00194E  A0D8               	btfss	status,0,c
  6528  001950  D7EB               	goto	i2l2332
  6529                           
  6530                           ;ax.c: 172: }
  6531                           ;ax.c: 188: return result[4];
  6532  001952  EE20 F004          	lfsr	2,4
  6533  001956  5006               	movf	sendAX@result,w,c
  6534  001958  26D9               	addwf	fsr2l,f,c
  6535  00195A  5007               	movf	sendAX@result+1,w,c
  6536  00195C  22DA               	addwfc	fsr2h,f,c
  6537  00195E  50DF               	movf	indf2,w,c
  6538  001960  0012               	return	
  6539  001962                     __end_of_sendAX:
  6540                           	opt stack 0
  6541                           pclatu	equ	0xFFB
  6542                           pclath	equ	0xFFA
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           prodh	equ	0xFF4
  6548                           prodl	equ	0xFF3
  6549                           intcon	equ	0xFF2
  6550                           postinc0	equ	0xFEE
  6551                           fsr0h	equ	0xFEA
  6552                           fsr0l	equ	0xFE9
  6553                           wreg	equ	0xFE8
  6554                           fsr1h	equ	0xFE2
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           postdec2	equ	0xFDD
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _EUSART1_Write *****************
  6564 ;; Defined at:
  6565 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  txData          1    wreg     unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  txData          1    0[COMRAM] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		wreg
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6583 ;;Total ram usage:        1 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_sendAX
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text36
  6593  0022AA                     __ptext36:
  6594                           	opt stack 0
  6595  0022AA                     _EUSART1_Write:
  6596                           	opt stack 22
  6597                           
  6598                           ;incstack = 0
  6599                           ;EUSART1_Write@txData stored from wreg
  6600  0022AA  6E01               	movwf	EUSART1_Write@txData,c
  6601  0022AC                     i2l103:
  6602  0022AC  A89E               	btfss	3998,4,c	;volatile
  6603  0022AE  D7FE               	goto	i2l103
  6604                           
  6605                           ;eusart1.c: 100: }
  6606                           ;eusart1.c: 102: TXREG1 = txData;
  6607  0022B0  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6608  0022B4  0012               	return		;funcret
  6609  0022B6                     __end_of_EUSART1_Write:
  6610                           	opt stack 0
  6611                           pclatu	equ	0xFFB
  6612                           pclath	equ	0xFFA
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           postinc0	equ	0xFEE
  6621                           fsr0h	equ	0xFEA
  6622                           fsr0l	equ	0xFE9
  6623                           wreg	equ	0xFE8
  6624                           fsr1h	equ	0xFE2
  6625                           fsr1l	equ	0xFE1
  6626                           indf2	equ	0xFDF
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function _EUSART1_Read *****************
  6634 ;; Defined at:
  6635 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;		None
  6640 ;; Return value:  Size  Location     Type
  6641 ;;                  1    wreg      unsigned char 
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6653 ;;Total ram usage:        0 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; This function calls:
  6656 ;;		Nothing
  6657 ;; This function is called by:
  6658 ;;		_sendAX
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text37
  6663  002272                     __ptext37:
  6664                           	opt stack 0
  6665  002272                     _EUSART1_Read:
  6666                           	opt stack 22
  6667  002272                     i2l96:
  6668  002272  AA9E               	btfss	3998,5,c	;volatile
  6669  002274  D7FE               	goto	i2l96
  6670                           
  6671                           ;eusart1.c: 82: }
  6672                           ;eusart1.c: 85: if(1 == RCSTA1bits.OERR)
  6673  002276  A2AB               	btfss	4011,1,c	;volatile
  6674  002278  D002               	goto	i2l2260
  6675                           
  6676                           ;eusart1.c: 86: {
  6677                           ;eusart1.c: 89: RCSTA1bits.CREN = 0;
  6678  00227A  98AB               	bcf	4011,4,c	;volatile
  6679                           
  6680                           ;eusart1.c: 90: RCSTA1bits.CREN = 1;
  6681  00227C  88AB               	bsf	4011,4,c	;volatile
  6682  00227E                     i2l2260:
  6683                           
  6684                           ;eusart1.c: 91: }
  6685                           ;eusart1.c: 93: return RCREG1;
  6686  00227E  50AE               	movf	4014,w,c	;volatile
  6687  002280  0012               	return	
  6688  002282                     __end_of_EUSART1_Read:
  6689                           	opt stack 0
  6690                           pclatu	equ	0xFFB
  6691                           pclath	equ	0xFFA
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           prodh	equ	0xFF4
  6697                           prodl	equ	0xFF3
  6698                           intcon	equ	0xFF2
  6699                           postinc0	equ	0xFEE
  6700                           fsr0h	equ	0xFEA
  6701                           fsr0l	equ	0xFE9
  6702                           wreg	equ	0xFE8
  6703                           fsr1h	equ	0xFE2
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           fsr2h	equ	0xFDA
  6709                           fsr2l	equ	0xFD9
  6710                           status	equ	0xFD8
  6711                           
  6712 ;; *************** function _clearState *****************
  6713 ;; Defined at:
  6714 ;;		line 319 in file "ax.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_getByteToSend
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text38
  6742  0020CA                     __ptext38:
  6743                           	opt stack 0
  6744  0020CA                     _clearState:
  6745                           	opt stack 24
  6746                           
  6747                           ;ax.c: 320: bytesSent = 0;
  6748                           
  6749                           ;incstack = 0
  6750  0020CA  0E00               	movlw	0
  6751  0020CC  0100               	movlb	0	; () banked
  6752  0020CE  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  6753  0020D0  0E00               	movlw	0
  6754  0020D2  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;ax.c: 321: currentCommand = -1;
  6758  0020D4  0100               	movlb	0	; () banked
  6759  0020D6  69E8               	setf	_currentCommand& (0+255),b	;volatile
  6760                           
  6761                           ;ax.c: 322: parameter1 = 0;
  6762  0020D8  0E00               	movlw	0
  6763  0020DA  0100               	movlb	0	; () banked
  6764  0020DC  6FA5               	movwf	_parameter1& (0+255),b	;volatile
  6765                           
  6766                           ;ax.c: 323: parameter2 = 0;
  6767  0020DE  0E00               	movlw	0
  6768  0020E0  0100               	movlb	0	; () banked
  6769  0020E2  6FA4               	movwf	_parameter2& (0+255),b	;volatile
  6770                           
  6771                           ;ax.c: 324: parameter3 = 0;
  6772  0020E4  0E00               	movlw	0
  6773  0020E6  0100               	movlb	0	; () banked
  6774  0020E8  6FA3               	movwf	_parameter3& (0+255),b	;volatile
  6775                           
  6776                           ;ax.c: 325: parameter4 = 0;
  6777  0020EA  0E00               	movlw	0
  6778  0020EC  0100               	movlb	0	; () banked
  6779  0020EE  6FA2               	movwf	_parameter4& (0+255),b	;volatile
  6780                           
  6781                           ;ax.c: 326: parameter5 = 0;
  6782  0020F0  0E00               	movlw	0
  6783  0020F2  0100               	movlb	0	; () banked
  6784  0020F4  6FA1               	movwf	_parameter5& (0+255),b	;volatile
  6785                           
  6786                           ;ax.c: 327: parameter6 = 0;
  6787  0020F6  0E00               	movlw	0
  6788  0020F8  0100               	movlb	0	; () banked
  6789  0020FA  6FA0               	movwf	_parameter6& (0+255),b	;volatile
  6790                           
  6791                           ;ax.c: 328: readIndex = 0;
  6792  0020FC  0E00               	movlw	0
  6793  0020FE  0100               	movlb	0	; () banked
  6794  002100  6F99               	movwf	(_readIndex+1)& (0+255),b	;volatile
  6795  002102  0E00               	movlw	0
  6796  002104  6F98               	movwf	_readIndex& (0+255),b	;volatile
  6797                           
  6798                           ; BSR set to: 0
  6799  002106  0012               	return		;funcret
  6800  002108                     __end_of_clearState:
  6801                           	opt stack 0
  6802                           pclatu	equ	0xFFB
  6803                           pclath	equ	0xFFA
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon	equ	0xFF2
  6811                           postinc0	equ	0xFEE
  6812                           fsr0h	equ	0xFEA
  6813                           fsr0l	equ	0xFE9
  6814                           wreg	equ	0xFE8
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _ADC_ISR *****************
  6825 ;; Defined at:
  6826 ;;		line 126 in file "mcc_generated_files/adc.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		None
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_INTERRUPT_InterruptManager
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           	psect	text39
  6854  0022C8                     __ptext39:
  6855                           	opt stack 0
  6856  0022C8                     _ADC_ISR:
  6857                           	opt stack 26
  6858                           
  6859                           ;adc.c: 129: PIR1bits.ADIF = 0;
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;incstack = 0
  6863  0022C8  9C9E               	bcf	3998,6,c	;volatile
  6864  0022CA  0012               	return		;funcret
  6865  0022CC                     __end_of_ADC_ISR:
  6866                           	opt stack 0
  6867                           pclatu	equ	0xFFB
  6868                           pclath	equ	0xFFA
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           postinc0	equ	0xFEE
  6877                           fsr0h	equ	0xFEA
  6878                           fsr0l	equ	0xFE9
  6879                           wreg	equ	0xFE8
  6880                           fsr1h	equ	0xFE2
  6881                           fsr1l	equ	0xFE1
  6882                           indf2	equ	0xFDF
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           pclatu	equ	0xFFB
  6889                           pclath	equ	0xFFA
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           postinc0	equ	0xFEE
  6898                           fsr0h	equ	0xFEA
  6899                           fsr0l	equ	0xFE9
  6900                           wreg	equ	0xFE8
  6901                           fsr1h	equ	0xFE2
  6902                           fsr1l	equ	0xFE1
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910                           	psect	rparam
  6911  0000                     pclatu	equ	0xFFB
  6912                           pclath	equ	0xFFA
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           postinc0	equ	0xFEE
  6921                           fsr0h	equ	0xFEA
  6922                           fsr0l	equ	0xFE9
  6923                           wreg	equ	0xFE8
  6924                           fsr1h	equ	0xFE2
  6925                           fsr1l	equ	0xFE1
  6926                           indf2	equ	0xFDF
  6927                           postinc2	equ	0xFDE
  6928                           postdec2	equ	0xFDD
  6929                           fsr2h	equ	0xFDA
  6930                           fsr2l	equ	0xFD9
  6931                           status	equ	0xFD8
  6932                           
  6933                           	psect	temp
  6934  00005F                     btemp:
  6935                           	opt stack 0
  6936  00005F                     	ds	1
  6937  0000                     int$flags	set	btemp
  6938                           pclatu	equ	0xFFB
  6939                           pclath	equ	0xFFA
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           postinc0	equ	0xFEE
  6948                           fsr0h	equ	0xFEA
  6949                           fsr0l	equ	0xFE9
  6950                           wreg	equ	0xFE8
  6951                           fsr1h	equ	0xFE2
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8


Data Sizes:
    Strings     73
    Constant    40
    Data        3
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     65     139
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_5(CODE[15]), STR_4(CODE[18]), STR_3(CODE[17]), STR_2(CODE[13]), 
		 -> STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(COMRAM[20]), readAXData@result(COMRAM[20]), pingAX@result(COMRAM[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(COMRAM[20]), readAXData@packet(COMRAM[20]), pingAX@packet(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_ISR->_getByteToSend
    i2_printf->i2___llmod
    i2_putch->i2_EUSART2_Write
    i2___llmod->i2___lldiv
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_readAXData
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Write

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3322
                                             54 BANK0     11    11      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    1348
                                             36 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             15 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             27 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             14 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1415
                                             22 BANK0      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                             14 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                             14 BANK0      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    5     3      2      22
                                             14 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    7438
                                              0 BANK0     14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              0     0      0    7438
                      _getByteToSend
                 _handleByteReceived
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            23    21      2     928
                                             22 COMRAM    14    12      2
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (8) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2___llmod                                            9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0     394
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _getByteToSend                                       16    16      0    6116
                                             79 COMRAM    15    15      0
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
                i2_ADC_GetConversion
 ---------------------------------------------------------------------------------
 (7) i2_ADC_GetConversion                                  5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _writeAXData                                         55    49      6    2167
                                             23 COMRAM    55    49      6
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (7) _readAXData                                          56    52      4    2037
                                             23 COMRAM    56    52      4
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _getAddressSize                                       4     2      2     150
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _pingAX                                              51    49      2    1639
                                             23 COMRAM    51    49      2
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _sendAX                                              22    14      8    1310
                                              1 COMRAM    22    14      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _getByteToSend
       _clearState
       _pingAX
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _readAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _writeAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       i2_ADC_GetConversion
     _handleByteReceived
       _setLedOff
       _setLedOn
     i2_printf
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2_putch
         i2_EUSART2_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E9       6        0.0%
DATA                 0      0      E9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat May 06 22:22:50 2017

                        _SSPSTATbits 000FC7                                   l31 2294  
                       ___awdiv@sign 00BA                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l253 20A8                                  l342 1014  
                                l417 1D26                                  l382 10C8  
                                l385 10CA                                  l627 1226  
                                l990 1ACA                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000           __end_of_handleByteReceived 183C  
                    __end_of_I2C_ISR 1B88                      _timer1ReloadVal 009C  
                    __end_of_ADC_ISR 22CC                                  prod 000FF3  
                                wreg 000FE8                                 l1000 1C10  
                               l3110 10E2                                 l3024 0F7E  
                               l3114 10FC                                 l3106 10CE  
                               l3034 0FBA                                 l3132 11A4  
                               l3028 0F94                                 l3126 118E  
                               l3118 1112                                 l3056 0FFE  
                               l2700 1994                                 l2710 19C4  
                               l2706 19B2                                 l2722 1A02  
                               l2708 19BE                                 l2740 1A64  
                               l2726 1A16                                 l2718 19F4  
                               l2902 11F2                                 l2736 1A4E  
                               l2760 1BBA                                 l2920 1292  
                               l2738 1A5E                                 l2748 1AB8  
                               l2764 1BFE                                 l2756 1BA4  
                               l2932 12DE                                 l2908 1248  
                               l2694 197E                                 l2758 1BB4  
                               l2942 1392                                 l2918 128C  
                               l2936 12F2                                 l2944 13A8  
                               l2938 1302                                 l2980 1D0E  
                               l2892 11D2                                 l2974 1CD0  
                               l2976 1CE4                                 l2896 11E6  
                               l2898 11EE                                 STR_1 0F68  
                               STR_2 0F5B                                 STR_3 0F3B  
                               STR_4 0F29                                 STR_5 0F4C  
                               _LATA 000F89                                 _LATB 000F8A  
                               u2055 1120                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u2087 1CD8                                 u2097 1D16  
                               i2l31 22A0                                 i2l96 2272  
                       main@adc_1272 00E4                                 _WPUB 000F5B  
                      _EUSART1_Write 22AA                        _EUSART2_Write 2290  
                               _main 0F74                        ?_EUSART1_Read 0001  
                               _junk 00A6                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005F                                 prodh 000FF4  
                               prodl 000FF3                                 start 0096  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                    __end_ofi2_putch 22C0                       readAXData@size 004E  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                        _writeAXData 1D48             __size_ofi2_EUSART2_Write 000C  
                 writeAXData@address 001A              __size_of_getAddressSize 0078  
     __size_of_OSCILLATOR_Initialize 0012        __end_of_OSCILLATOR_Initialize 2272  
                              ?_main 0001                                _BCLIF 007D0B  
                    __end_of___awdiv 1A20                      _TMR1_StartTimer 22C0  
                    __end_of___lldiv 1ADC                      ___awdiv@divisor 00B7  
                              _T1CON 000FCD                      __end_of___llmod 1C22  
                              i2l103 22AC                                i2l152 1AE6  
                              i2l253 21C8                                i2l501 1EEE  
                              i2l309 005A                                i2l504 1EF2  
                              i2l507 1EF6                                i2l451 1E60  
                              i2l460 1E6C                                i2l444 1E58  
                              i2l454 1E64                                i2l463 1E70  
                              i2l472 1E7C                                i2l448 1E5C  
                              i2l545 1D92                                i2l457 1E68  
                              i2l466 1E74                                i2l483 1ED6  
                              i2l627 141A                                i2l492 1EE2  
                              i2l469 1E78                                i2l486 1EDA  
                              i2l495 1EE6                                i2l479 1ED2  
                              i2l489 1EDE                                i2l498 1EEA  
                    ___awdiv@counter 00B9                                i2l990 1E44  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _SSPIF 007CF3  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                      __end_of_dpowers 0F29  
                              _first 00E9                    getByteToSend@xlow 0056  
                              _putch 2282                                main@i 00DE  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 2142  
                     ?_EUSART2_Write 0001                                pclath 000FFA  
                              tablat 000FF5               readAXData@nbParameters 0048  
                     ??_EUSART1_Read 0001                                status 000FD8  
                 __size_ofi2___lldiv 0082                   __size_ofi2___llmod 0066  
                    readAXData@error 0032                     __end_ofi2_printf 1582  
                    __initialization 217C                    i2___lldiv@divisor 0005  
         __end_of_EUSART1_Initialize 2260                         __end_of_main 11C4  
                  i2___lldiv@counter 000D                           i2printf@ap 001D  
                          ??_I2C_ISR 005F                            ??_ADC_ISR 0001  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 00DD  
                      __activetblptr 000003                       __CFG_PLLCFG$ON 000000  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 224A  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                     ___llmod@dividend 00C2  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ANCON0 000F5D                               _ANCON1 000F5C  
                   ___awdiv@dividend 00B5                               ?_putch 0001  
                             _T1GCON 000FAA                               i2l1000 2016  
                    __CFG_BBSIZ$BB2K 000000                               i2l2300 1880  
                             i2l3014 004E                               i2l2312 18C6  
                             i2l2304 1896                               i2l2260 227E  
                             i2l2332 1928                               i2l2324 18FE  
                             i2l2316 18DA                               i2l2420 1CA6  
                             i2l2500 1FE4                               i2l2270 1F4C  
                             i2l2336 193E                               i2l2280 1F60  
                             i2l2504 2008                               i2l2274 1F56  
                             i2l2292 185E                               i2l2356 1E80  
                             i2l2620 175C                               i2l2550 15F4  
                             i2l2534 15B2                               i2l2366 1EFA  
                             i2l2614 173C                       __CFG_WDTEN$OFF 000000  
                             i2l2288 184A                               i2l2448 1D9A  
                             i2l2560 1640                               i2l2632 1792  
                             i2l2480 1E06                               i2l2650 17E6  
                             i2l2810 14B6                               i2l2644 17CC  
                             i2l2476 1DF6                               i2l2820 1556  
                             i2l2662 181A                               i2l2638 17B2  
                             i2l2478 1E02                               i2l2814 14C8  
                             i2l2822 1566                               i2l2656 1800  
                             i2l2488 1E36                               i2l2496 1FD4  
                             i2l2816 14D4                               i2l2840 1B04  
                             i2l2586 16C6                               i2l2578 16B2  
                             i2l2498 1FE0                               i2l2770 13D2  
                             i2l2668 1834                               i2l2780 13EA  
                             i2l2598 1704                               i2l2774 13E2  
                             i2l2870 1B58                               i2l2776 13E8  
                             i2l2848 1B1A                               i2l2786 143A  
                             i2l2858 1B2E                               i2l2796 1474  
                             i2l2876 1B6A                               i2l2868 1B52  
                             i2l2798 1478                               i2l2878 1B6C  
                             i2l2888 1B84                        i2putch@txData 0002  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                            ??i2_putch 0002  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _TXREG1 000FAD                               _TXREG2 000F79  
                             _TXSTA1 000FAC                               _TXSTA2 000FBA  
                   __end_of_delay_ms 1D48                       __CFG_XINST$OFF 000000  
                     sendAX@checksum 0017              __end_of_TMR1_StartTimer 22C4  
                          ??___awdiv 00B9                       __CFG_STVREN$ON 000000  
                          ??___lldiv 00BD                   getByteToSend@error 0052  
                          ??___llmod 00CA                   getByteToSend@value 005B  
                 getByteToSend@xhigh 0057                               _pingAX 2028  
                             _sendAX 183C                               clear_0 21A0  
                   ___awdiv@quotient 00BB              __size_of_I2C_Initialize 001A  
                             _printf 11C4                     __end_of_setLedOn 1ED0  
                  ??i2_EUSART2_Write 0001                    __end_ofi2___lldiv 1E56  
                  __end_ofi2___llmod 2028                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 00B9  
                    ??_EUSART1_Write 0001                      ??_EUSART2_Write 00B5  
      __size_of_INTERRUPT_Initialize 0004                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 21E0                           __accesstop 0060  
            __end_of__initialization 21A6                     readAXData@packet 0034  
                   readAXData@length 004A                   ?_SYSTEM_Initialize 0001  
                        pingAX@error 0049                        ___rparam_used 000001  
                   readAXData@result 001E                    i2___llmod@divisor 0012  
                  i2___llmod@counter 0016                         readAXData@id 0018  
       __size_ofi2_ADC_GetConversion 0030                       __pcstackCOMRAM 0001  
                 i2___lldiv@dividend 0001                         __pidataBANK0 22CC  
              readAXData@instruction 004C                  ??_SYSTEM_Initialize 00B7  
              __end_of_getByteToSend 1708                       _getAddressSize 1F4A  
                         _adc_values 0080                        __end_of_putch 2290  
                        i2printf@val 0020                 __end_of_EUSART1_Read 2282  
                          ?i2_printf 0017            __end_of_SYSTEM_Initialize 2202  
                            ??_putch 00B6                   i2___lldiv@quotient 0009  
                         _dataToSend 0060                           __pbssBANK0 0060  
             sendAX@parametersToRead 0008                   _handleByteReceived 1708  
                        setLedOn@led 0001                           _clearState 20CA  
                ?_handleByteReceived 0001               __end_of_getAddressSize 1FC2  
                       ?_writeAXData 0018                   __size_of_setLedOff 007A  
                   ?_TMR1_StartTimer 0001                              _I2C_ISR 1ADC  
                            _ADC_ISR 22C8                              ?_pingAX 0018  
                            ?_sendAX 0002                              ?_printf 00CB  
            __size_of_ADC_Initialize 0018                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                              _OSCCON2 000FD2  
                          ?_delay_ms 00BD                 ??_handleByteReceived 0005  
                         ??i2_printf 0019                              _OSCTUNE 000F9B  
                            _SPBRGH1 000F7D                              _SPBRGH2 000F7C  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                              i2_putch 22B6  
                    writeAXData@data 001C               getByteToSend@xlow_1441 0058  
                    writeAXData@size 004D                           _readAXData 1C22  
                          ?_setLedOn 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                getAddressSize@address 0001  
                            __Lparam 0000                      ?_getAddressSize 0001  
                            ___awdiv 1962                              ___lldiv 1A20  
                            ___llmod 1B88                         __psmallconst 0F00  
                            __pcinit 217C                       _I2C_Initialize 2202  
                    __size_of_pingAX 0062                              __ramtop 0F00  
                    __size_of_sendAX 0126                              __ptext0 0F74  
                            __ptext1 11C4                              __ptext2 2282  
                            __ptext3 2290                              __ptext4 1B88  
                            __ptext5 1A20                              __ptext6 1CBA  
                            __ptext7 1962                              __ptext8 21E0  
                            __ptext9 2108                      __size_of_printf 0204  
                         _parameter1 00A5                           _parameter2 00A4  
                         _parameter3 00A3                           _parameter4 00A2  
                         _parameter5 00A1                           _parameter6 00A0  
                          _T1CONbits 000FCD                              _dpowers 0F01  
              _OSCILLATOR_Initialize 2260                   _EUSART1_Initialize 224A  
           ??_PIN_MANAGER_Initialize 00B5                    __CFG_MSSPMSK$MSK7 000000  
                         ??_delay_ms 00BF                              main@adc 00E2  
                  __end_of_setLedOff 1F4A           __size_of_SYSTEM_Initialize 0022  
              i2EUSART2_Write@txData 0001                           delay_ms@ms 00BD  
               end_of_initialization 21A6                  ?_EUSART1_Initialize 0001  
             handleByteReceived@data 0007                              sendAX@i 000D  
                         ??_setLedOn 0003                      ___lldiv@divisor 00B9  
                        ?_clearState 0001                      ___lldiv@counter 00C1  
                 _EUSART2_Initialize 2234                      i2_EUSART2_Write 229E  
                            printf@c 00DC                              printf@f 00CB  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                __size_of_EUSART1_Read 0010  
             __end_of_I2C_Initialize 221C                 ??_EUSART1_Initialize 00B5  
                ?_EUSART2_Initialize 0001                            _PORTCbits 000F82  
                  readAXData@address 001A                  i2_ADC_GetConversion 21B0  
                         main@i_1270 00E0                  EUSART1_Write@txData 0001  
                          i2___lldiv 1DD4                            i2___llmod 1FC2  
               ??_EUSART2_Initialize 00B5                       getByteToSend@d 005A  
                       pingAX@packet 002F                         pingAX@length 0045  
                  pingAX@instruction 0047                         pingAX@result 001B  
             writeAXData@instruction 0049                         _EUSART1_Read 2272  
                 i2___llmod@dividend 000E                          ?_readAXData 0018  
               ?i2_ADC_GetConversion 0001                         sendAX@i_1381 0015  
                       sendAX@i_1375 000F                         sendAX@i_1378 0011  
       __end_of_INTERRUPT_Initialize 22C8                      ?_I2C_Initialize 0001  
                  writeAXData@packet 0033                    writeAXData@length 0047  
               __size_of_writeAXData 008C                    writeAXData@result 001F  
                     _ADC_Initialize 221C               ?_OSCILLATOR_Initialize 0001  
                       sendAX@buffer 0002                       __end_of_pingAX 208A  
                     __end_of_sendAX 1962                  handleByteReceived@i 0005  
                     __end_of_printf 13C8                         sendAX@result 0006  
                       i2printf@flag 001F                         i2printf@prec 001B  
                start_initialization 217C      __size_of_PIN_MANAGER_Initialize 003A  
                __size_of_clearState 003E                            i2printf@c 0024  
                          i2printf@f 0017                           ?i2___lldiv 0001  
                         ?i2___llmod 000E                          putch@txData 00B6  
                  __size_ofi2_printf 01BA                __end_of_EUSART1_Write 22B6  
              __end_of_EUSART2_Write 229E              __end_ofi2_EUSART2_Write 22AA  
                    ___llmod@divisor 00C6                      ___llmod@counter 00CA  
              ??i2_ADC_GetConversion 0003                       _currentCommand 00E8  
           __size_of_TMR1_Initialize 003A                   pingAX@nbParameters 0043  
             __end_of_ADC_Initialize 2234                          __pdataBANK0 00E8  
                           ?_I2C_ISR 0001                             ?_ADC_ISR 0001  
                           ??_pingAX 001A                             ??_sendAX 000A  
                           ??_printf 00D1                  __size_of_readAXData 0098  
                      __pcstackBANK0 00A7                         setLedOff@led 0001  
                         sendAX@stop 000B                    __size_of_delay_ms 008E  
                EUSART2_Write@txData 00B5               __size_of_getByteToSend 0186  
                           ?i2_putch 0001                     ??_getAddressSize 0003  
            getByteToSend@error_1438 0054               _PIN_MANAGER_Initialize 2142  
                  __size_of_setLedOn 007A                            __pintcode 0008  
                           ?___awdiv 00B5                             ?___lldiv 00B5  
                           ?___llmod 00C2                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 00A7                          __smallconst 0F00  
                           _BAUDCON1 000FA7                             _BAUDCON2 000FB9  
           __size_of_TMR1_StartTimer 0004                            _index_i2c 009E  
                      _nbBytesToSend 0096          __size_of_handleByteReceived 0134  
                          _readIndex 0098                            _bytesSent 0094  
     getByteToSend@i2c_data_received 0001                          ??i2___lldiv 0009  
                        ??i2___llmod 0016                       __size_of_putch 000E  
               _INTERRUPT_Initialize 22C4              getByteToSend@value_1440 005D  
                          _setLedOff 1ED0                     ?i2_EUSART2_Write 0001  
                           _LATBbits 000F8A                             _LATCbits 000F8B  
                           _LATDbits 000F8C                            delay_ms@i 00C2  
                          delay_ms@n 00C0                             _PIE1bits 000F9D  
                       ??_clearState 0001                             i2u210_47 18F0  
                           i2u133_40 173A                             i2u134_40 175A  
__size_of_INTERRUPT_InterruptManager 008E                             i2u129_45 1656  
                           _PIR1bits 000F9E                             _PIR3bits 000FA4  
                           _RCONbits 000FD0                        _getByteToSend 1582  
            getByteToSend@xhigh_1442 0059                     __size_of_I2C_ISR 00AC  
                  ??_TMR1_Initialize 00B5                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                     __CFG_SOSCSEL$DIG 000000  
                         printf@flag 00D7                            main@delay 00E6  
                         printf@prec 00D3                             i2_printf 13C8  
                 __end_of_clearState 2108                     writeAXData@error 004B  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                   __size_ofi2_putch 000A                         ??_readAXData 001C  
                   ??_I2C_Initialize 00B5                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 208A  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 00B5                   ?_ADC_GetConversion 00B5  
                   __size_of___awdiv 00BE                     __size_of___lldiv 00BC  
                   __size_of___llmod 009A          __size_of_EUSART1_Initialize 0016  
              _TMR1_InterruptHandler 009A                  ??_ADC_GetConversion 00B7  
                           _delay_ms 1CBA                   __end_of_readAXData 1CBA  
                           __ptext10 22C0                             __ptext11 2142  
                           __ptext20 1ADC                             __ptext12 2260  
                           __ptext21 13C8                             __ptext13 22C4  
                         _T1GCONbits 000FAA                             __ptext30 21B0  
                           __ptext22 22B6                             __ptext14 2202  
                           __ptext31 1D48                             __ptext23 229E  
                           __ptext15 2234                             __ptext32 1C22  
                           __ptext24 1FC2                             __ptext16 224A  
                           __ptext33 1F4A                             __ptext25 1DD4  
                           __ptext17 221C                             __ptext34 2028  
                           __ptext26 1708                             __ptext18 208A  
                           __ptext35 183C                             __ptext27 1E56  
                           __ptext36 22AA                             __ptext28 1ED0  
                           __ptext37 2272                             __ptext29 1582  
                           __ptext38 20CA                             __ptext39 22C8  
                  ??_TMR1_StartTimer 00B5                        writeAXData@id 0018  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 0250  
                           _setLedOn 1E56            __end_of_ADC_GetConversion 20CA  
                      ??_writeAXData 001E                             int$flags 005F  
 __end_of_INTERRUPT_InterruptManager 0096           _INTERRUPT_InterruptManager 0008  
                          printf@val 00D8                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0004                   _I2C_slaveWriteData 00EA  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 00B5  
                           pingAX@id 0018                             sendAX@r0 0013  
                           intlevel2 0000          __end_ofi2_ADC_GetConversion 21E0  
                        ??_setLedOff 0003                     ___lldiv@dividend 00B5  
            ?_PIN_MANAGER_Initialize 0001                           _RCSTA1bits 000FAB  
                         _RCSTA2bits 000FA6                     ??_ADC_Initialize 00B5  
                    ??_getByteToSend 0050                             printf@ap 00D5  
                 __CFG_WDTPS$1048576 000000               __size_of_EUSART1_Write 000C  
             __size_of_EUSART2_Write 000E                  __end_of_writeAXData 1DD4  
                   ___lldiv@quotient 00BD           i2ADC_GetConversion@channel 0005  
                        _SSPCON1bits 000FC6       __end_of_PIN_MANAGER_Initialize 217C  
                __CFG_BORPWR$ZPBORMV 000000           __size_of_ADC_GetConversion 0040  
                    _TMR1_Initialize 2108  
