

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon May 08 12:13:05 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.42
    56                           ; Generated 13/04/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F46K80 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001D6E                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _currentCommand
    95  001D6E  FF                 	db	255
    96                           
    97                           	psect	idataBANK0
    98  001D6C                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _first
   102  001D6C  01                 	db	1
   103                           
   104                           ;initializer for _I2C_slaveWriteData
   105  001D6D  55                 	db	85
   106  0000                     _WPUB	set	3931
   107  0000                     _ANCON1	set	3932
   108  0000                     _ANCON0	set	3933
   109  0000                     _LATBbits	set	3978
   110  0000                     _LATCbits	set	3979
   111  0000                     _LATDbits	set	3980
   112  0000                     _INTCONbits	set	4082
   113  0000                     _RCONbits	set	4048
   114  0000                     _REFOCON	set	3994
   115  0000                     _OSCTUNE	set	3995
   116  0000                     _OSCCON2	set	4050
   117  0000                     _OSCCON	set	4051
   118  0000                     _ADCON0bits	set	4034
   119  0000                     _ADRESL	set	4035
   120  0000                     _ADRESH	set	4036
   121  0000                     _ADCON2	set	4032
   122  0000                     _ADCON1	set	4033
   123  0000                     _ADCON0	set	4034
   124  0000                     _T1GCONbits	set	4010
   125  0000                     _T1CONbits	set	4045
   126  0000                     _TMR1L	set	4046
   127  0000                     _TMR1H	set	4047
   128  0000                     _T1GCON	set	4010
   129  0000                     _T1CON	set	4045
   130  0000                     _PORTCbits	set	3970
   131  0000                     _SSPCON1bits	set	4038
   132  0000                     _SSPBUF	set	4041
   133  0000                     _SSPSTATbits	set	4039
   134  0000                     _PIE1bits	set	3997
   135  0000                     _SSPADD	set	4040
   136  0000                     _SSPCON2	set	4037
   137  0000                     _SSPCON1	set	4038
   138  0000                     _SSPSTAT	set	4039
   139  0000                     _TXREG1	set	4013
   140  0000                     _RCREG1	set	4014
   141  0000                     _PIR1bits	set	3998
   142  0000                     _RCSTA1bits	set	4011
   143  0000                     _SPBRGH1	set	3965
   144  0000                     _SPBRG1	set	4015
   145  0000                     _TXSTA1	set	4012
   146  0000                     _RCSTA1	set	4011
   147  0000                     _BAUDCON1	set	4007
   148  0000                     _TRISD	set	3989
   149  0000                     _TRISC	set	3988
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISA	set	3986
   152  0000                     _TRISE	set	3990
   153  0000                     _LATC	set	3979
   154  0000                     _LATB	set	3978
   155  0000                     _LATA	set	3977
   156  0000                     _LATD	set	3980
   157  0000                     _LATE	set	3981
   158  0000                     _TXREG2	set	3961
   159  0000                     _RCREG2	set	3962
   160  0000                     _RCSTA2bits	set	4006
   161  0000                     _PIR3bits	set	4004
   162  0000                     _SPBRGH2	set	3964
   163  0000                     _SPBRG2	set	3963
   164  0000                     _TXSTA2	set	4026
   165  0000                     _RCSTA2	set	4006
   166  0000                     _BAUDCON2	set	4025
   167  0000                     _BCLIF	set	32011
   168  0000                     _SSPIF	set	31987
   169                           
   170                           	psect	smallconst
   171  000F00                     __psmallconst:
   172                           	opt stack 0
   173  000F00  00                 	db	0
   174  000F01                     STR_3:
   175  000F01  49                 	db	73	;'I'
   176  000F02  6E                 	db	110	;'n'
   177  000F03  69                 	db	105	;'i'
   178  000F04  74                 	db	116	;'t'
   179  000F05  20                 	db	32
   180  000F06  63                 	db	99	;'c'
   181  000F07  6F                 	db	111	;'o'
   182  000F08  6D                 	db	109	;'m'
   183  000F09  70                 	db	112	;'p'
   184  000F0A  6C                 	db	108	;'l'
   185  000F0B  65                 	db	101	;'e'
   186  000F0C  74                 	db	116	;'t'
   187  000F0D  65                 	db	101	;'e'
   188  000F0E  64                 	db	100	;'d'
   189  000F0F  0D                 	db	13
   190  000F10  0A                 	db	10
   191  000F11  00                 	db	0
   192  000F12                     STR_2:
   193  000F12  50                 	db	80	;'P'
   194  000F13  4D                 	db	77	;'M'
   195  000F14  20                 	db	32
   196  000F15  52                 	db	82	;'R'
   197  000F16  6F                 	db	111	;'o'
   198  000F17  62                 	db	98	;'b'
   199  000F18  6F                 	db	111	;'o'
   200  000F19  74                 	db	116	;'t'
   201  000F1A  69                 	db	105	;'i'
   202  000F1B  78                 	db	120	;'x'
   203  000F1C  0D                 	db	13
   204  000F1D  0A                 	db	10
   205  000F1E  00                 	db	0
   206  000F1F                     STR_1:
   207  000F1F  63                 	db	99	;'c'
   208  000F20  6F                 	db	111	;'o'
   209  000F21  6C                 	db	108	;'l'
   210  000F22  6C                 	db	108	;'l'
   211  000F23  69                 	db	105	;'i'
   212  000F24  64                 	db	100	;'d'
   213  000F25  65                 	db	101	;'e'
   214  000F26  0D                 	db	13
   215  000F27  0A                 	db	10
   216  000F28  00                 	db	0
   217                           
   218                           ; #config settings
   219  000F29  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  001ADA                     __pcinit:
   223                           	opt stack 0
   224  001ADA                     start_initialization:
   225                           	opt stack 0
   226  001ADA                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Initialize objects allocated to BANK0 (2 bytes)
   230                           ; load TBLPTR registers with __pidataBANK0
   231  001ADA  0E6C               	movlw	low __pidataBANK0
   232  001ADC  6EF6               	movwf	tblptrl,c
   233  001ADE  0E1D               	movlw	high __pidataBANK0
   234  001AE0  6EF7               	movwf	tblptrh,c
   235  001AE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   236  001AE4  6EF8               	movwf	tblptru,c
   237  001AE6  0009               	tblrd		*+	;fetch initializer
   238  001AE8  CFF5 F0D1          	movff	tablat,__pdataBANK0
   239  001AEC  0009               	tblrd		*+	;fetch initializer
   240  001AEE  CFF5 F0D2          	movff	tablat,__pdataBANK0+1
   241                           
   242                           ; Initialize objects allocated to COMRAM (1 bytes)
   243                           ; load TBLPTR registers with __pidataCOMRAM
   244  001AF2  0E6E               	movlw	low __pidataCOMRAM
   245  001AF4  6EF6               	movwf	tblptrl,c
   246  001AF6  0E1D               	movlw	high __pidataCOMRAM
   247  001AF8  6EF7               	movwf	tblptrh,c
   248  001AFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   249  001AFC  6EF8               	movwf	tblptru,c
   250  001AFE  0009               	tblrd		*+	;fetch initializer
   251  001B00  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   252                           
   253                           ; Clear objects allocated to BANK0 (63 bytes)
   254  001B04  EE00  F060         	lfsr	0,__pbssBANK0
   255  001B08  0E3F               	movlw	63
   256  001B0A                     clear_0:
   257  001B0A  6AEE               	clrf	postinc0,c
   258  001B0C  06E8               	decf	wreg,f,c
   259  001B0E  E1FD               	bnz	clear_0
   260                           
   261                           ; Clear objects allocated to COMRAM (8 bytes)
   262  001B10  EE00  F056         	lfsr	0,__pbssCOMRAM
   263  001B14  0E08               	movlw	8
   264  001B16                     clear_1:
   265  001B16  6AEE               	clrf	postinc0,c
   266  001B18  06E8               	decf	wreg,f,c
   267  001B1A  E1FD               	bnz	clear_1
   268  001B1C                     end_of_initialization:
   269                           	opt stack 0
   270  001B1C                     __end_of__initialization:
   271                           	opt stack 0
   272  001B1C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   273  001B1E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   274  001B20  0100               	movlb	0
   275  001B22  EF99  F009         	goto	_main	;jump to C main() function
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           
   283                           	psect	bssCOMRAM
   284  000056                     __pbssCOMRAM:
   285                           	opt stack 0
   286  000056                     _readIndex:
   287                           	opt stack 0
   288  000056                     	ds	2
   289  000058                     _timer1ReloadVal:
   290                           	opt stack 0
   291  000058                     	ds	2
   292  00005A                     _parameter4:
   293                           	opt stack 0
   294  00005A                     	ds	1
   295  00005B                     _parameter3:
   296                           	opt stack 0
   297  00005B                     	ds	1
   298  00005C                     _parameter2:
   299                           	opt stack 0
   300  00005C                     	ds	1
   301  00005D                     _parameter1:
   302                           	opt stack 0
   303  00005D                     	ds	1
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	dataCOMRAM
   312  00005E                     __pdataCOMRAM:
   313                           	opt stack 0
   314  00005E                     _currentCommand:
   315                           	opt stack 0
   316  00005E                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           	psect	bssBANK0
   325  000060                     __pbssBANK0:
   326                           	opt stack 0
   327  000060                     _dataToSend:
   328                           	opt stack 0
   329  000060                     	ds	32
   330  000080                     _adc_values:
   331                           	opt stack 0
   332  000080                     	ds	20
   333  000094                     _bytesSent:
   334                           	opt stack 0
   335  000094                     	ds	2
   336  000096                     _nbBytesToSend:
   337                           	opt stack 0
   338  000096                     	ds	2
   339  000098                     _TMR1_InterruptHandler:
   340                           	opt stack 0
   341  000098                     	ds	2
   342  00009A                     _index_i2c:
   343                           	opt stack 0
   344  00009A                     	ds	2
   345  00009C                     _parameter6:
   346                           	opt stack 0
   347  00009C                     	ds	1
   348  00009D                     _parameter5:
   349                           	opt stack 0
   350  00009D                     	ds	1
   351  00009E                     _junk:
   352                           	opt stack 0
   353  00009E                     	ds	1
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           	psect	dataBANK0
   362  0000D1                     __pdataBANK0:
   363                           	opt stack 0
   364  0000D1                     _first:
   365                           	opt stack 0
   366  0000D1                     	ds	1
   367  0000D2                     _I2C_slaveWriteData:
   368                           	opt stack 0
   369  0000D2                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	cstackBANK1
   378  000100                     __pcstackBANK1:
   379                           	opt stack 0
   380  000100                     ??_TMR1_Initialize:
   381  000100                     ?___awdiv:
   382                           	opt stack 0
   383  000100                     EUSART2_Write@txData:
   384                           	opt stack 0
   385  000100                     ___awdiv@dividend:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x0
   389  000100                     	ds	1
   390  000101                     putch@txData:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x1
   394  000101                     	ds	1
   395  000102                     ?_printf:
   396                           	opt stack 0
   397  000102                     printf@f:
   398                           	opt stack 0
   399  000102                     ___awdiv@divisor:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x2
   403  000102                     	ds	2
   404  000104                     ___awdiv@counter:
   405                           	opt stack 0
   406  000104                     printf@ap:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x4
   410  000104                     	ds	1
   411  000105                     ___awdiv@sign:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x5
   415  000105                     	ds	1
   416  000106                     printf@c:
   417                           	opt stack 0
   418  000106                     ___awdiv@quotient:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x6
   422  000106                     	ds	2
   423  000108                     delay_ms@ms:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x8
   427  000108                     	ds	2
   428  00010A                     ??_delay_ms:
   429                           
   430                           ; 1 bytes @ 0xA
   431  00010A                     	ds	1
   432  00010B                     delay_ms@n:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0xB
   436  00010B                     	ds	2
   437  00010D                     delay_ms@i:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0xD
   441  00010D                     	ds	2
   442  00010F                     main@i:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0xF
   446  00010F                     	ds	2
   447  000111                     main@adc:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x11
   451  000111                     	ds	2
   452  000113                     main@delay:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x13
   456  000113                     	ds	2
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           
   464                           	psect	cstackBANK0
   465  00009F                     __pcstackBANK0:
   466                           	opt stack 0
   467  00009F                     pingAX@result:
   468                           	opt stack 0
   469  00009F                     readAXData@result:
   470                           	opt stack 0
   471  00009F                     writeAXData@result:
   472                           	opt stack 0
   473                           
   474                           ; 20 bytes @ 0x0
   475  00009F                     	ds	20
   476  0000B3                     readAXData@error:
   477                           	opt stack 0
   478  0000B3                     pingAX@packet:
   479                           	opt stack 0
   480  0000B3                     writeAXData@packet:
   481                           	opt stack 0
   482                           
   483                           ; 20 bytes @ 0x14
   484  0000B3                     	ds	2
   485  0000B5                     readAXData@packet:
   486                           	opt stack 0
   487                           
   488                           ; 20 bytes @ 0x16
   489  0000B5                     	ds	18
   490  0000C7                     pingAX@nbParameters:
   491                           	opt stack 0
   492  0000C7                     writeAXData@length:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x28
   496  0000C7                     	ds	2
   497  0000C9                     pingAX@length:
   498                           	opt stack 0
   499  0000C9                     readAXData@nbParameters:
   500                           	opt stack 0
   501  0000C9                     writeAXData@instruction:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2A
   505  0000C9                     	ds	2
   506  0000CB                     pingAX@instruction:
   507                           	opt stack 0
   508  0000CB                     readAXData@length:
   509                           	opt stack 0
   510  0000CB                     writeAXData@error:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x2C
   514  0000CB                     	ds	2
   515  0000CD                     pingAX@error:
   516                           	opt stack 0
   517  0000CD                     readAXData@instruction:
   518                           	opt stack 0
   519  0000CD                     writeAXData@size:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x2E
   523  0000CD                     	ds	2
   524  0000CF                     readAXData@size:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x30
   528  0000CF                     	ds	2
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           
   536                           	psect	cstackCOMRAM
   537  000001                     __pcstackCOMRAM:
   538                           	opt stack 0
   539  000001                     ?_ADC_GetConversion:
   540                           	opt stack 0
   541  000001                     ?_getAddressSize:
   542                           	opt stack 0
   543  000001                     EUSART1_Write@txData:
   544                           	opt stack 0
   545  000001                     i2EUSART2_Write@txData:
   546                           	opt stack 0
   547  000001                     EUSART1_Read@i:
   548                           	opt stack 0
   549  000001                     getAddressSize@address:
   550                           	opt stack 0
   551  000001                     setLedOn@led:
   552                           	opt stack 0
   553  000001                     setLedOff@led:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x0
   557  000001                     	ds	1
   558  000002                     i2putch@txData:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1
   562  000002                     	ds	1
   563  000003                     ??_ADC_GetConversion:
   564  000003                     ??_getAddressSize:
   565  000003                     ??_setLedOn:
   566  000003                     ??_setLedOff:
   567  000003                     ?i2_printf:
   568                           	opt stack 0
   569  000003                     sendAX@buffer:
   570                           	opt stack 0
   571  000003                     i2printf@f:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x2
   575  000003                     	ds	2
   576  000005                     ADC_GetConversion@channel:
   577                           	opt stack 0
   578  000005                     sendAX@packetSize:
   579                           	opt stack 0
   580  000005                     handleByteReceived@i:
   581                           	opt stack 0
   582  000005                     i2printf@ap:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x4
   586  000005                     	ds	2
   587  000007                     handleByteReceived@data:
   588                           	opt stack 0
   589  000007                     i2printf@c:
   590                           	opt stack 0
   591  000007                     sendAX@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x6
   595  000007                     	ds	2
   596  000009                     sendAX@parametersToRead:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x8
   600  000009                     	ds	2
   601  00000B                     ??_sendAX:
   602                           
   603                           ; 1 bytes @ 0xA
   604  00000B                     	ds	5
   605  000010                     sendAX@param0:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0xF
   609  000010                     	ds	2
   610  000012                     sendAX@param1:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x11
   614  000012                     	ds	2
   615  000014                     sendAX@param2:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x13
   619  000014                     	ds	2
   620  000016                     sendAX@param3:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x15
   624  000016                     	ds	2
   625  000018                     sendAX@param4:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x17
   629  000018                     	ds	2
   630  00001A                     sendAX@param5:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x19
   634  00001A                     	ds	2
   635  00001C                     sendAX@param6:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x1B
   639  00001C                     	ds	2
   640  00001E                     sendAX@count:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x1D
   644  00001E                     	ds	2
   645  000020                     sendAX@i:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x1F
   649  000020                     	ds	2
   650  000022                     sendAX@i_1374:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x21
   654  000022                     	ds	2
   655  000024                     sendAX@i_1377:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x23
   659  000024                     	ds	2
   660  000026                     sendAX@r0:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x25
   664  000026                     	ds	2
   665  000028                     sendAX@i_1381:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x27
   669  000028                     	ds	2
   670  00002A                     sendAX@i_1390:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x29
   674  00002A                     	ds	2
   675  00002C                     sendAX@checksum:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x2B
   679  00002C                     	ds	1
   680  00002D                     sendAX@checksumResult:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x2C
   684  00002D                     	ds	1
   685  00002E                     sendAX@stop:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x2D
   689  00002E                     	ds	2
   690  000030                     ?_pingAX:
   691                           	opt stack 0
   692  000030                     ?_readAXData:
   693                           	opt stack 0
   694  000030                     ?_writeAXData:
   695                           	opt stack 0
   696  000030                     pingAX@id:
   697                           	opt stack 0
   698  000030                     readAXData@id:
   699                           	opt stack 0
   700  000030                     writeAXData@id:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x2F
   704  000030                     	ds	2
   705  000032                     ??_pingAX:
   706  000032                     readAXData@address:
   707                           	opt stack 0
   708  000032                     writeAXData@address:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x31
   712  000032                     	ds	2
   713  000034                     ??_readAXData:
   714  000034                     writeAXData@data:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x33
   718  000034                     	ds	2
   719  000036                     ??_writeAXData:
   720                           
   721                           ; 1 bytes @ 0x35
   722  000036                     	ds	1
   723  000037                     ??_getByteToSend:
   724                           
   725                           ; 1 bytes @ 0x36
   726  000037                     	ds	2
   727  000039                     getByteToSend@error:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x38
   731  000039                     	ds	2
   732  00003B                     getByteToSend@error_1447:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x3A
   736  00003B                     	ds	2
   737  00003D                     getByteToSend@xlow:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x3C
   741  00003D                     	ds	1
   742  00003E                     getByteToSend@xhigh:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x3D
   746  00003E                     	ds	1
   747  00003F                     getByteToSend@xlow_1451:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x3E
   751  00003F                     	ds	1
   752  000040                     getByteToSend@xhigh_1452:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x3F
   756  000040                     	ds	1
   757  000041                     getByteToSend@d:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x40
   761  000041                     	ds	1
   762  000042                     getByteToSend@value:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x41
   766  000042                     	ds	2
   767  000044                     getByteToSend@value_1450:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x43
   771  000044                     	ds	2
   772  000046                     getByteToSend@r:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x45
   776  000046                     	ds	2
   777  000048                     ??_INTERRUPT_InterruptManager:
   778                           
   779                           ; 1 bytes @ 0x47
   780  000048                     	ds	14
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           postinc0	equ	0xFEE
   786                           wreg	equ	0xFE8
   787                           
   788 ;;
   789 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   790 ;;
   791 ;; *************** function _main *****************
   792 ;; Defined at:
   793 ;;		line 52 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  i               2   15[BANK1 ] int 
   798 ;;  adc             2   17[BANK1 ] int 
   799 ;;  delay           2   19[BANK1 ] int 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   810 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   812 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   813 ;;Total ram usage:        6 bytes
   814 ;; Hardware stack levels required when called:    9
   815 ;; This function calls:
   816 ;;		_SYSTEM_Initialize
   817 ;;		_delay_ms
   818 ;;		_printf
   819 ;; This function is called by:
   820 ;;		Startup code after reset
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text0
   825  001332                     __ptext0:
   826                           	opt stack 0
   827  001332                     _main:
   828                           	opt stack 22
   829                           
   830                           ;main.c: 54: for (int adc = 0; adc < 10; adc++) {
   831                           
   832                           ;incstack = 0
   833  001332  0E00               	movlw	0
   834  001334  0101               	movlb	1	; () banked
   835  001336  6F12               	movwf	(main@adc+1)& (0+255),b
   836  001338  0E00               	movlw	0
   837  00133A  6F11               	movwf	main@adc& (0+255),b
   838  00133C                     l2966:
   839                           
   840                           ; BSR set to: 1
   841  00133C  0101               	movlb	1	; () banked
   842  00133E  BF12               	btfsc	(main@adc+1)& (0+255),7,b
   843  001340  D008               	goto	l2970
   844  001342  0101               	movlb	1	; () banked
   845  001344  5112               	movf	(main@adc+1)& (0+255),w,b
   846  001346  E118               	bnz	l2976
   847  001348  0E0A               	movlw	10
   848  00134A  0101               	movlb	1	; () banked
   849  00134C  5D11               	subwf	main@adc& (0+255),w,b
   850  00134E  B0D8               	btfsc	status,0,c
   851  001350  D013               	goto	l2976
   852  001352                     l2970:
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 55: adc_values[adc] = 0;
   856  001352  90D8               	bcf	status,0,c
   857  001354  0101               	movlb	1	; () banked
   858  001356  3511               	rlcf	main@adc& (0+255),w,b
   859  001358  6ED9               	movwf	fsr2l,c
   860  00135A  0101               	movlb	1	; () banked
   861  00135C  3512               	rlcf	(main@adc+1)& (0+255),w,b
   862  00135E  6EDA               	movwf	fsr2h,c
   863  001360  0E80               	movlw	low _adc_values
   864  001362  26D9               	addwf	fsr2l,f,c
   865  001364  0E00               	movlw	high _adc_values
   866  001366  22DA               	addwfc	fsr2h,f,c
   867  001368  0E00               	movlw	0
   868  00136A  6EDE               	movwf	postinc2,c
   869  00136C  0E00               	movlw	0
   870  00136E  6EDD               	movwf	postdec2,c
   871                           
   872                           ; BSR set to: 1
   873  001370  0101               	movlb	1	; () banked
   874  001372  4B11               	infsnz	main@adc& (0+255),f,b
   875  001374  2B12               	incf	(main@adc+1)& (0+255),f,b
   876  001376  D7E2               	goto	l2966
   877  001378                     l2976:
   878                           
   879                           ; BSR set to: 1
   880                           ;main.c: 56: }
   881                           ;main.c: 59: SYSTEM_Initialize();
   882  001378  EC48  F00E         	call	_SYSTEM_Initialize	;wreg free
   883                           
   884                           ;main.c: 60: do { LATDbits.LATD3 = 1; } while(0);
   885  00137C  868C               	bsf	3980,3,c	;volatile
   886                           
   887                           ;main.c: 78: (INTCONbits.GIE = 1);
   888  00137E  8EF2               	bsf	intcon,7,c	;volatile
   889                           
   890                           ;main.c: 79: do { LATDbits.LATD2 = 1; } while(0);
   891  001380  848C               	bsf	3980,2,c	;volatile
   892                           
   893                           ;main.c: 81: (INTCONbits.PEIE = 1);
   894  001382  8CF2               	bsf	intcon,6,c	;volatile
   895                           
   896                           ;main.c: 88: printf("PM Robotix\r\n");
   897  001384  0E12               	movlw	low STR_2
   898  001386  0101               	movlb	1	; () banked
   899  001388  6F02               	movwf	printf@f& (0+255),b
   900  00138A  0E0F               	movlw	high STR_2
   901  00138C  0101               	movlb	1	; () banked
   902  00138E  6F03               	movwf	(printf@f+1)& (0+255),b
   903  001390  ECB0  F00D         	call	_printf	;wreg free
   904                           
   905                           ;main.c: 89: printf("Init completed\r\n");
   906  001394  0E01               	movlw	low STR_3
   907  001396  0101               	movlb	1	; () banked
   908  001398  6F02               	movwf	printf@f& (0+255),b
   909  00139A  0E0F               	movlw	high STR_3
   910  00139C  0101               	movlb	1	; () banked
   911  00139E  6F03               	movwf	(printf@f+1)& (0+255),b
   912  0013A0  ECB0  F00D         	call	_printf	;wreg free
   913                           
   914                           ;main.c: 91: int delay = 10;
   915  0013A4  0E00               	movlw	0
   916  0013A6  0101               	movlb	1	; () banked
   917  0013A8  6F14               	movwf	(main@delay+1)& (0+255),b
   918  0013AA  0E0A               	movlw	10
   919  0013AC  6F13               	movwf	main@delay& (0+255),b
   920                           
   921                           ; BSR set to: 1
   922                           
   923                           ; BSR set to: 1
   924                           
   925                           ;main.c: 92: do { LATDbits.LATD1 = 1; } while(0);
   926  0013AE  828C               	bsf	3980,1,c	;volatile
   927                           
   928                           ; BSR set to: 1
   929                           
   930                           ; BSR set to: 1
   931                           
   932                           ;main.c: 93: do { LATDbits.LATD0 = 1; } while(0);
   933                           
   934                           ; BSR set to: 1
   935  0013B0  808C               	bsf	3980,0,c	;volatile
   936                           
   937                           ; BSR set to: 1
   938                           ;main.c: 94: for (int i = 0; i < 2; i++) {
   939                           
   940                           ; BSR set to: 1
   941  0013B2  0E00               	movlw	0
   942  0013B4  0101               	movlb	1	; () banked
   943  0013B6  6F10               	movwf	(main@i+1)& (0+255),b
   944  0013B8  0E00               	movlw	0
   945  0013BA  6F0F               	movwf	main@i& (0+255),b
   946  0013BC                     l2998:
   947                           
   948                           ; BSR set to: 1
   949  0013BC  0101               	movlb	1	; () banked
   950  0013BE  BF10               	btfsc	(main@i+1)& (0+255),7,b
   951  0013C0  D008               	goto	l345
   952  0013C2  0101               	movlb	1	; () banked
   953  0013C4  5110               	movf	(main@i+1)& (0+255),w,b
   954  0013C6  E15F               	bnz	l385
   955  0013C8  0E02               	movlw	2
   956  0013CA  0101               	movlb	1	; () banked
   957  0013CC  5D0F               	subwf	main@i& (0+255),w,b
   958  0013CE  B0D8               	btfsc	status,0,c
   959  0013D0  D05A               	goto	l385
   960  0013D2                     l345:
   961                           
   962                           ; BSR set to: 1
   963  0013D2  868C               	bsf	3980,3,c	;volatile
   964                           
   965                           ; BSR set to: 1
   966                           ;main.c: 97: delay_ms(delay);
   967                           
   968                           ; BSR set to: 1
   969  0013D4  C113  F108         	movff	main@delay,delay_ms@ms
   970  0013D8  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   971  0013DC  EC36  F00C         	call	_delay_ms	;wreg free
   972                           
   973                           ;main.c: 98: do { LATDbits.LATD3 = 0; } while(0);
   974  0013E0  968C               	bcf	3980,3,c	;volatile
   975                           
   976                           ;main.c: 99: do { LATDbits.LATD2 = 1; } while(0);
   977  0013E2  848C               	bsf	3980,2,c	;volatile
   978                           
   979                           ;main.c: 100: delay_ms(delay);
   980  0013E4  C113  F108         	movff	main@delay,delay_ms@ms
   981  0013E8  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   982  0013EC  EC36  F00C         	call	_delay_ms	;wreg free
   983                           
   984                           ;main.c: 101: do { LATDbits.LATD2 = 0; } while(0);
   985  0013F0  948C               	bcf	3980,2,c	;volatile
   986                           
   987                           ;main.c: 102: do { LATDbits.LATD1 = 1; } while(0);
   988  0013F2  828C               	bsf	3980,1,c	;volatile
   989                           
   990                           ;main.c: 103: delay_ms(delay);
   991  0013F4  C113  F108         	movff	main@delay,delay_ms@ms
   992  0013F8  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   993  0013FC  EC36  F00C         	call	_delay_ms	;wreg free
   994                           
   995                           ;main.c: 104: do { LATDbits.LATD1 = 0; } while(0);
   996  001400  928C               	bcf	3980,1,c	;volatile
   997                           
   998                           ;main.c: 105: do { LATDbits.LATD0 = 1; } while(0);
   999  001402  808C               	bsf	3980,0,c	;volatile
  1000                           
  1001                           ;main.c: 106: delay_ms(delay);
  1002  001404  C113  F108         	movff	main@delay,delay_ms@ms
  1003  001408  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1004  00140C  EC36  F00C         	call	_delay_ms	;wreg free
  1005                           
  1006                           ;main.c: 107: do { LATDbits.LATD0 = 0; } while(0);
  1007  001410  908C               	bcf	3980,0,c	;volatile
  1008                           
  1009                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  1010  001412  848B               	bsf	3979,2,c	;volatile
  1011                           
  1012                           ;main.c: 109: delay_ms(delay);
  1013  001414  C113  F108         	movff	main@delay,delay_ms@ms
  1014  001418  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1015  00141C  EC36  F00C         	call	_delay_ms	;wreg free
  1016                           
  1017                           ;main.c: 110: do { LATCbits.LATC2 = 0; } while(0);
  1018  001420  948B               	bcf	3979,2,c	;volatile
  1019                           
  1020                           ;main.c: 111: do { LATCbits.LATC1 = 1; } while(0);
  1021  001422  828B               	bsf	3979,1,c	;volatile
  1022                           
  1023                           ;main.c: 112: delay_ms(delay);
  1024  001424  C113  F108         	movff	main@delay,delay_ms@ms
  1025  001428  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1026  00142C  EC36  F00C         	call	_delay_ms	;wreg free
  1027                           
  1028                           ;main.c: 113: do { LATCbits.LATC1 = 0; } while(0);
  1029  001430  928B               	bcf	3979,1,c	;volatile
  1030                           
  1031                           ;main.c: 114: do { LATCbits.LATC0 = 1; } while(0);
  1032  001432  808B               	bsf	3979,0,c	;volatile
  1033                           
  1034                           ;main.c: 115: delay_ms(delay);
  1035  001434  C113  F108         	movff	main@delay,delay_ms@ms
  1036  001438  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1037  00143C  EC36  F00C         	call	_delay_ms	;wreg free
  1038                           
  1039                           ;main.c: 116: do { LATCbits.LATC0 = 0; } while(0);
  1040  001440  908B               	bcf	3979,0,c	;volatile
  1041                           
  1042                           ;main.c: 117: do { LATBbits.LATB0 = 1; } while(0);
  1043  001442  808A               	bsf	3978,0,c	;volatile
  1044                           
  1045                           ;main.c: 118: delay_ms(delay);
  1046  001444  C113  F108         	movff	main@delay,delay_ms@ms
  1047  001448  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1048  00144C  EC36  F00C         	call	_delay_ms	;wreg free
  1049                           
  1050                           ;main.c: 119: do { LATBbits.LATB0 = 0; } while(0);
  1051  001450  908A               	bcf	3978,0,c	;volatile
  1052                           
  1053                           ;main.c: 120: do { LATBbits.LATB2 = 1; } while(0);
  1054  001452  848A               	bsf	3978,2,c	;volatile
  1055                           
  1056                           ;main.c: 121: delay_ms(delay);
  1057  001454  C113  F108         	movff	main@delay,delay_ms@ms
  1058  001458  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1059  00145C  EC36  F00C         	call	_delay_ms	;wreg free
  1060                           
  1061                           ;main.c: 122: do { LATBbits.LATB2 = 0; } while(0);
  1062  001460  948A               	bcf	3978,2,c	;volatile
  1063                           
  1064                           ;main.c: 123: do { LATBbits.LATB3 = 1; } while(0);
  1065  001462  868A               	bsf	3978,3,c	;volatile
  1066                           
  1067                           ;main.c: 124: delay_ms(delay);
  1068  001464  C113  F108         	movff	main@delay,delay_ms@ms
  1069  001468  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1070  00146C  EC36  F00C         	call	_delay_ms	;wreg free
  1071                           
  1072                           ;main.c: 125: do { LATBbits.LATB3 = 0; } while(0);
  1073  001470  968A               	bcf	3978,3,c	;volatile
  1074                           
  1075                           ;main.c: 126: delay_ms(delay);
  1076  001472  C113  F108         	movff	main@delay,delay_ms@ms
  1077  001476  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1078  00147A  EC36  F00C         	call	_delay_ms	;wreg free
  1079  00147E  0101               	movlb	1	; () banked
  1080  001480  4B0F               	infsnz	main@i& (0+255),f,b
  1081  001482  2B10               	incf	(main@i+1)& (0+255),f,b
  1082  001484  D79B               	goto	l2998
  1083  001486                     l385:
  1084                           
  1085                           ; BSR set to: 1
  1086  001486  988C               	bcf	3980,4,c	;volatile
  1087  001488                     l388:
  1088  001488  868A               	bsf	3978,3,c	;volatile
  1089                           
  1090                           ;main.c: 134: delay_ms(500);
  1091  00148A  0E01               	movlw	1
  1092  00148C  0101               	movlb	1	; () banked
  1093  00148E  6F09               	movwf	(delay_ms@ms+1)& (0+255),b
  1094  001490  0EF4               	movlw	244
  1095  001492  6F08               	movwf	delay_ms@ms& (0+255),b
  1096  001494  EC36  F00C         	call	_delay_ms	;wreg free
  1097                           
  1098                           ;main.c: 135: do { LATBbits.LATB3 = 0; } while(0);
  1099  001498  968A               	bcf	3978,3,c	;volatile
  1100                           
  1101                           ;main.c: 136: delay_ms(500);
  1102  00149A  0E01               	movlw	1
  1103  00149C  0101               	movlb	1	; () banked
  1104  00149E  6F09               	movwf	(delay_ms@ms+1)& (0+255),b
  1105  0014A0  0EF4               	movlw	244
  1106  0014A2  6F08               	movwf	delay_ms@ms& (0+255),b
  1107  0014A4  EC36  F00C         	call	_delay_ms	;wreg free
  1108  0014A8  D7EF               	goto	l388
  1109  0014AA                     __end_of_main:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           intcon	equ	0xFF2
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postinc2	equ	0xFDE
  1119                           postdec2	equ	0xFDD
  1120                           fsr2h	equ	0xFDA
  1121                           fsr2l	equ	0xFD9
  1122                           status	equ	0xFD8
  1123                           
  1124 ;; *************** function _printf *****************
  1125 ;; Defined at:
  1126 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;  f               2    2[BANK1 ] PTR const unsigned char 
  1129 ;;		 -> STR_3(17), STR_2(13), STR_1(10), 
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  tmpval          4    0        struct .
  1132 ;;  cp              3    0        PTR const unsigned char 
  1133 ;;  ap              2    4[BANK1 ] PTR void [1]
  1134 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1135 ;;  len             2    0        unsigned int 
  1136 ;;  val             2    0        unsigned int 
  1137 ;;  c               1    6[BANK1 ] char 
  1138 ;;  flag            1    0        unsigned char 
  1139 ;;  prec            1    0        char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  2    2[BANK1 ] int 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1149 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1150 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1152 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1153 ;;Total ram usage:        5 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    8
  1156 ;; This function calls:
  1157 ;;		_putch
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text1
  1164  001B60                     __ptext1:
  1165                           	opt stack 0
  1166  001B60                     _printf:
  1167                           	opt stack 22
  1168                           
  1169                           ;doprnt.c: 466: va_list ap;
  1170                           ;doprnt.c: 499: signed char c;
  1171                           ;doprnt.c: 506: signed char prec;
  1172                           ;doprnt.c: 508: unsigned char flag;
  1173                           ;doprnt.c: 523: union {
  1174                           ;doprnt.c: 524: unsigned long vd;
  1175                           ;doprnt.c: 525: double integ;
  1176                           ;doprnt.c: 526: } tmpval;
  1177                           ;doprnt.c: 528: unsigned int val;
  1178                           ;doprnt.c: 529: unsigned len;
  1179                           ;doprnt.c: 530: const char * cp;
  1180                           ;doprnt.c: 533: *ap = __va_start();
  1181                           
  1182                           ;incstack = 0
  1183  001B60  0E04               	movlw	low (?_printf+2)
  1184  001B62  0101               	movlb	1	; () banked
  1185  001B64  6F04               	movwf	printf@ap& (0+255),b
  1186  001B66  0E01               	movlw	high (?_printf+2)
  1187  001B68  0101               	movlb	1	; () banked
  1188  001B6A  6F05               	movwf	(printf@ap+1)& (0+255),b
  1189                           
  1190                           ;doprnt.c: 536: while(c = *f++) {
  1191  001B6C  D004               	goto	l2934
  1192  001B6E                     l2932:
  1193                           
  1194                           ; BSR set to: 1
  1195                           ;doprnt.c: 540: {
  1196                           ;doprnt.c: 541: (putch(c) );
  1197  001B6E  0101               	movlb	1	; () banked
  1198  001B70  5106               	movf	printf@c& (0+255),w,b
  1199  001B72  EC91  F00E         	call	_putch
  1200  001B76                     l2934:
  1201  001B76  C102  FFF6         	movff	printf@f,tblptrl
  1202  001B7A  C103  FFF7         	movff	printf@f+1,tblptrh
  1203  001B7E  0101               	movlb	1	; () banked
  1204  001B80  4B02               	infsnz	printf@f& (0+255),f,b
  1205  001B82  2B03               	incf	(printf@f+1)& (0+255),f,b
  1206  001B84                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1207  001B84  6AF8               	clrf	tblptru,c
  1208  001B86                     	endif
  1209  001B86                     	if	0	;tblptru may be non-zero
  1210  001B86                     	endif
  1211  001B86  0008               	tblrd		*
  1212  001B88  CFF5 F106          	movff	tablat,printf@c
  1213  001B8C  0101               	movlb	1	; () banked
  1214  001B8E  5106               	movf	printf@c& (0+255),w,b
  1215  001B90  B4D8               	btfsc	status,2,c
  1216  001B92  0012               	return	
  1217  001B94  D7EC               	goto	l2932
  1218  001B96                     __end_of_printf:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           intcon	equ	0xFF2
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postinc2	equ	0xFDE
  1228                           postdec2	equ	0xFDD
  1229                           fsr2h	equ	0xFDA
  1230                           fsr2l	equ	0xFD9
  1231                           status	equ	0xFD8
  1232                           
  1233 ;; *************** function _putch *****************
  1234 ;; Defined at:
  1235 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  txData          1    wreg     unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  txData          1    1[BANK1 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1250 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1252 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1253 ;;Total ram usage:        1 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    7
  1256 ;; This function calls:
  1257 ;;		_EUSART2_Write
  1258 ;; This function is called by:
  1259 ;;		_printf
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text2
  1264  001D22                     __ptext2:
  1265                           	opt stack 0
  1266  001D22                     _putch:
  1267                           	opt stack 22
  1268                           
  1269                           ; BSR set to: 1
  1270                           ;incstack = 0
  1271                           ;putch@txData stored from wreg
  1272  001D22  0101               	movlb	1	; () banked
  1273  001D24  6F01               	movwf	putch@txData& (0+255),b
  1274                           
  1275                           ;eusart2.c: 112: EUSART2_Write(txData);
  1276  001D26  0101               	movlb	1	; () banked
  1277  001D28  5101               	movf	putch@txData& (0+255),w,b
  1278  001D2A  EC98  F00E         	call	_EUSART2_Write
  1279  001D2E  0012               	return		;funcret
  1280  001D30                     __end_of_putch:
  1281                           	opt stack 0
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           intcon	equ	0xFF2
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postinc2	equ	0xFDE
  1290                           postdec2	equ	0xFDD
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _EUSART2_Write *****************
  1296 ;; Defined at:
  1297 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  txData          1    wreg     unsigned char 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  txData          1    0[BANK1 ] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1312 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1314 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1315 ;;Total ram usage:        1 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    6
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_putch
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text3
  1326  001D30                     __ptext3:
  1327                           	opt stack 0
  1328  001D30                     _EUSART2_Write:
  1329                           	opt stack 22
  1330                           
  1331                           ;incstack = 0
  1332                           ;EUSART2_Write@txData stored from wreg
  1333  001D30  0101               	movlb	1	; () banked
  1334  001D32  6F00               	movwf	EUSART2_Write@txData& (0+255),b
  1335  001D34                     l31:
  1336  001D34  A8A4               	btfss	4004,4,c	;volatile
  1337  001D36  D7FE               	goto	l31
  1338                           
  1339                           ;eusart2.c: 100: }
  1340                           ;eusart2.c: 102: TXREG2 = txData;
  1341  001D38  C100  FF79         	movff	EUSART2_Write@txData,3961	;volatile
  1342  001D3C  0012               	return		;funcret
  1343  001D3E                     __end_of_EUSART2_Write:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           intcon	equ	0xFF2
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postinc2	equ	0xFDE
  1353                           postdec2	equ	0xFDD
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _delay_ms *****************
  1359 ;; Defined at:
  1360 ;;		line 13 in file "ax.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  ms              2    8[BANK1 ] int 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  i               2   13[BANK1 ] int 
  1365 ;;  n               2   11[BANK1 ] int 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1375 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1376 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1377 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1378 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1379 ;;Total ram usage:        7 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    7
  1382 ;; This function calls:
  1383 ;;		___awdiv
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text4
  1390  00186C                     __ptext4:
  1391                           	opt stack 0
  1392  00186C                     _delay_ms:
  1393                           	opt stack 23
  1394                           
  1395                           ;ax.c: 14: if (ms < 10) {
  1396                           
  1397                           ;incstack = 0
  1398  00186C  0101               	movlb	1	; () banked
  1399  00186E  BF09               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  1400  001870  D008               	goto	l2954
  1401  001872  0101               	movlb	1	; () banked
  1402  001874  5109               	movf	(delay_ms@ms+1)& (0+255),w,b
  1403  001876  E10F               	bnz	l2956
  1404  001878  0E0A               	movlw	10
  1405  00187A  0101               	movlb	1	; () banked
  1406  00187C  5D08               	subwf	delay_ms@ms& (0+255),w,b
  1407  00187E  B0D8               	btfsc	status,0,c
  1408  001880  D00A               	goto	l2956
  1409  001882                     l2954:
  1410                           
  1411                           ; BSR set to: 1
  1412                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  1413  001882  0ED0               	movlw	208
  1414  001884  0101               	movlb	1	; () banked
  1415  001886  6F0A               	movwf	??_delay_ms& (0+255),b
  1416  001888  0EC9               	movlw	201
  1417  00188A                     u1667:
  1418  00188A  2EE8               	decfsz	wreg,f,c
  1419  00188C  D7FE               	bra	u1667
  1420  00188E  2F0A               	decfsz	??_delay_ms& (0+255),f,b
  1421  001890  D7FC               	bra	u1667
  1422  001892  D000               	nop2	
  1423                           
  1424                           ;ax.c: 16: } else {
  1425  001894  0012               	return	
  1426  001896                     l2956:
  1427                           
  1428                           ;ax.c: 17: int n = ms / 10;
  1429  001896  C108  F100         	movff	delay_ms@ms,___awdiv@dividend
  1430  00189A  C109  F101         	movff	delay_ms@ms+1,___awdiv@dividend+1
  1431  00189E  0E00               	movlw	0
  1432  0018A0  0101               	movlb	1	; () banked
  1433  0018A2  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  1434  0018A4  0E0A               	movlw	10
  1435  0018A6  6F02               	movwf	___awdiv@divisor& (0+255),b
  1436  0018A8  ECD5  F00A         	call	___awdiv	;wreg free
  1437  0018AC  C100  F10B         	movff	?___awdiv,delay_ms@n
  1438  0018B0  C101  F10C         	movff	?___awdiv+1,delay_ms@n+1
  1439                           
  1440                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  1441  0018B4  0E00               	movlw	0
  1442  0018B6  0101               	movlb	1	; () banked
  1443  0018B8  6F0E               	movwf	(delay_ms@i+1)& (0+255),b
  1444  0018BA  0E00               	movlw	0
  1445  0018BC  6F0D               	movwf	delay_ms@i& (0+255),b
  1446  0018BE  D00C               	goto	l415
  1447  0018C0                     l2960:
  1448                           
  1449                           ; BSR set to: 1
  1450                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  1451  0018C0  0ED0               	movlw	208
  1452  0018C2  0101               	movlb	1	; () banked
  1453  0018C4  6F0A               	movwf	??_delay_ms& (0+255),b
  1454  0018C6  0EC9               	movlw	201
  1455  0018C8                     u1677:
  1456  0018C8  2EE8               	decfsz	wreg,f,c
  1457  0018CA  D7FE               	bra	u1677
  1458  0018CC  2F0A               	decfsz	??_delay_ms& (0+255),f,b
  1459  0018CE  D7FC               	bra	u1677
  1460  0018D0  D000               	nop2	
  1461  0018D2  0101               	movlb	1	; () banked
  1462  0018D4  4B0D               	infsnz	delay_ms@i& (0+255),f,b
  1463  0018D6  2B0E               	incf	(delay_ms@i+1)& (0+255),f,b
  1464  0018D8                     l415:
  1465                           
  1466                           ; BSR set to: 1
  1467  0018D8  0101               	movlb	1	; () banked
  1468  0018DA  510B               	movf	delay_ms@n& (0+255),w,b
  1469  0018DC  0101               	movlb	1	; () banked
  1470  0018DE  5D0D               	subwf	delay_ms@i& (0+255),w,b
  1471  0018E0  0101               	movlb	1	; () banked
  1472  0018E2  510E               	movf	(delay_ms@i+1)& (0+255),w,b
  1473  0018E4  0A80               	xorlw	128
  1474  0018E6  0101               	movlb	1	; () banked
  1475  0018E8  6F0A               	movwf	??_delay_ms& (0+255),b
  1476  0018EA  0101               	movlb	1	; () banked
  1477  0018EC  510C               	movf	(delay_ms@n+1)& (0+255),w,b
  1478  0018EE  0A80               	xorlw	128
  1479  0018F0  0101               	movlb	1	; () banked
  1480  0018F2  590A               	subwfb	??_delay_ms& (0+255),w,b
  1481  0018F4  B0D8               	btfsc	status,0,c
  1482  0018F6  0012               	return	
  1483  0018F8  D7E3               	goto	l2960
  1484  0018FA                     __end_of_delay_ms:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           intcon	equ	0xFF2
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postinc2	equ	0xFDE
  1494                           postdec2	equ	0xFDD
  1495                           fsr2h	equ	0xFDA
  1496                           fsr2l	equ	0xFD9
  1497                           status	equ	0xFD8
  1498                           
  1499 ;; *************** function ___awdiv *****************
  1500 ;; Defined at:
  1501 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  dividend        2    0[BANK1 ] int 
  1504 ;;  divisor         2    2[BANK1 ] int 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  quotient        2    6[BANK1 ] int 
  1507 ;;  sign            1    5[BANK1 ] unsigned char 
  1508 ;;  counter         1    4[BANK1 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  2    0[BANK1 ] int 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1518 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1519 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1521 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1522 ;;Total ram usage:        8 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    6
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_delay_ms
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text5
  1533  0015AA                     __ptext5:
  1534                           	opt stack 0
  1535  0015AA                     ___awdiv:
  1536                           	opt stack 23
  1537                           
  1538                           ;incstack = 0
  1539  0015AA  0E00               	movlw	0
  1540  0015AC  0101               	movlb	1	; () banked
  1541  0015AE  6F05               	movwf	___awdiv@sign& (0+255),b
  1542                           
  1543                           ; BSR set to: 1
  1544  0015B0  0101               	movlb	1	; () banked
  1545  0015B2  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1546  0015B4  D008               	goto	l2894
  1547                           
  1548                           ; BSR set to: 1
  1549  0015B6  0101               	movlb	1	; () banked
  1550  0015B8  6D02               	negf	___awdiv@divisor& (0+255),b
  1551  0015BA  1F03               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1552  0015BC  B0D8               	btfsc	status,0,c
  1553  0015BE  2B03               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1554                           
  1555                           ; BSR set to: 1
  1556  0015C0  0E01               	movlw	1
  1557  0015C2  0101               	movlb	1	; () banked
  1558  0015C4  6F05               	movwf	___awdiv@sign& (0+255),b
  1559  0015C6                     l2894:
  1560                           
  1561                           ; BSR set to: 1
  1562  0015C6  0101               	movlb	1	; () banked
  1563  0015C8  AF01               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1564  0015CA  D008               	goto	l2900
  1565                           
  1566                           ; BSR set to: 1
  1567  0015CC  0101               	movlb	1	; () banked
  1568  0015CE  6D00               	negf	___awdiv@dividend& (0+255),b
  1569  0015D0  1F01               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1570  0015D2  B0D8               	btfsc	status,0,c
  1571  0015D4  2B01               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1572                           
  1573                           ; BSR set to: 1
  1574  0015D6  0E01               	movlw	1
  1575  0015D8  0101               	movlb	1	; () banked
  1576  0015DA  1B05               	xorwf	___awdiv@sign& (0+255),f,b
  1577  0015DC                     l2900:
  1578                           
  1579                           ; BSR set to: 1
  1580  0015DC  0E00               	movlw	0
  1581  0015DE  0101               	movlb	1	; () banked
  1582  0015E0  6F07               	movwf	(___awdiv@quotient+1)& (0+255),b
  1583  0015E2  0E00               	movlw	0
  1584  0015E4  6F06               	movwf	___awdiv@quotient& (0+255),b
  1585                           
  1586                           ; BSR set to: 1
  1587  0015E6  0101               	movlb	1	; () banked
  1588  0015E8  5102               	movf	___awdiv@divisor& (0+255),w,b
  1589  0015EA  0101               	movlb	1	; () banked
  1590  0015EC  1103               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1591  0015EE  B4D8               	btfsc	status,2,c
  1592  0015F0  D02C               	goto	l2922
  1593                           
  1594                           ; BSR set to: 1
  1595  0015F2  0E01               	movlw	1
  1596  0015F4  0101               	movlb	1	; () banked
  1597  0015F6  6F04               	movwf	___awdiv@counter& (0+255),b
  1598  0015F8  D006               	goto	l2908
  1599  0015FA                     l2906:
  1600                           
  1601                           ; BSR set to: 1
  1602  0015FA  0101               	movlb	1	; () banked
  1603  0015FC  90D8               	bcf	status,0,c
  1604  0015FE  3702               	rlcf	___awdiv@divisor& (0+255),f,b
  1605  001600  3703               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1606  001602  0101               	movlb	1	; () banked
  1607  001604  2B04               	incf	___awdiv@counter& (0+255),f,b
  1608  001606                     l2908:
  1609                           
  1610                           ; BSR set to: 1
  1611  001606  0101               	movlb	1	; () banked
  1612  001608  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1613  00160A  D7F7               	goto	l2906
  1614  00160C                     l2910:
  1615                           
  1616                           ; BSR set to: 1
  1617  00160C  0101               	movlb	1	; () banked
  1618  00160E  90D8               	bcf	status,0,c
  1619  001610  3706               	rlcf	___awdiv@quotient& (0+255),f,b
  1620  001612  3707               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1621                           
  1622                           ; BSR set to: 1
  1623  001614  0101               	movlb	1	; () banked
  1624  001616  5102               	movf	___awdiv@divisor& (0+255),w,b
  1625  001618  0101               	movlb	1	; () banked
  1626  00161A  5D00               	subwf	___awdiv@dividend& (0+255),w,b
  1627  00161C  0101               	movlb	1	; () banked
  1628  00161E  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1629  001620  0101               	movlb	1	; () banked
  1630  001622  5901               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1631  001624  A0D8               	btfss	status,0,c
  1632  001626  D00A               	goto	l2918
  1633                           
  1634                           ; BSR set to: 1
  1635  001628  0101               	movlb	1	; () banked
  1636  00162A  5102               	movf	___awdiv@divisor& (0+255),w,b
  1637  00162C  0101               	movlb	1	; () banked
  1638  00162E  5F00               	subwf	___awdiv@dividend& (0+255),f,b
  1639  001630  0101               	movlb	1	; () banked
  1640  001632  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1641  001634  0101               	movlb	1	; () banked
  1642  001636  5B01               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1643                           
  1644                           ; BSR set to: 1
  1645  001638  0101               	movlb	1	; () banked
  1646  00163A  8106               	bsf	___awdiv@quotient& (0+255),0,b
  1647  00163C                     l2918:
  1648                           
  1649                           ; BSR set to: 1
  1650  00163C  0101               	movlb	1	; () banked
  1651  00163E  90D8               	bcf	status,0,c
  1652  001640  3303               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1653  001642  3302               	rrcf	___awdiv@divisor& (0+255),f,b
  1654                           
  1655                           ; BSR set to: 1
  1656  001644  0101               	movlb	1	; () banked
  1657  001646  2F04               	decfsz	___awdiv@counter& (0+255),f,b
  1658  001648  D7E1               	goto	l2910
  1659  00164A                     l2922:
  1660                           
  1661                           ; BSR set to: 1
  1662  00164A  0101               	movlb	1	; () banked
  1663  00164C  5105               	movf	___awdiv@sign& (0+255),w,b
  1664  00164E  0101               	movlb	1	; () banked
  1665  001650  B4D8               	btfsc	status,2,c
  1666  001652  D005               	goto	l2926
  1667                           
  1668                           ; BSR set to: 1
  1669  001654  0101               	movlb	1	; () banked
  1670  001656  6D06               	negf	___awdiv@quotient& (0+255),b
  1671  001658  1F07               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1672  00165A  B0D8               	btfsc	status,0,c
  1673  00165C  2B07               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1674  00165E                     l2926:
  1675                           
  1676                           ; BSR set to: 1
  1677  00165E  C106  F100         	movff	___awdiv@quotient,?___awdiv
  1678  001662  C107  F101         	movff	___awdiv@quotient+1,?___awdiv+1
  1679  001666  0012               	return	
  1680  001668                     __end_of___awdiv:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           intcon	equ	0xFF2
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postinc2	equ	0xFDE
  1690                           postdec2	equ	0xFDD
  1691                           fsr2h	equ	0xFDA
  1692                           fsr2l	equ	0xFD9
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _SYSTEM_Initialize *****************
  1696 ;; Defined at:
  1697 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;		None
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1715 ;;Total ram usage:        0 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    8
  1718 ;; This function calls:
  1719 ;;		_ADC_Initialize
  1720 ;;		_EUSART1_Initialize
  1721 ;;		_EUSART2_Initialize
  1722 ;;		_I2C_Initialize
  1723 ;;		_INTERRUPT_Initialize
  1724 ;;		_OSCILLATOR_Initialize
  1725 ;;		_PIN_MANAGER_Initialize
  1726 ;;		_TMR1_Initialize
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text6
  1733  001C90                     __ptext6:
  1734                           	opt stack 0
  1735  001C90                     _SYSTEM_Initialize:
  1736                           	opt stack 22
  1737                           
  1738                           ;mcc.c: 114: INTERRUPT_Initialize();
  1739                           
  1740                           ; BSR set to: 1
  1741                           ;incstack = 0
  1742  001C90  ECB2  F00E         	call	_INTERRUPT_Initialize	;wreg free
  1743                           
  1744                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1745  001C94  EC93  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  1746                           
  1747                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1748  001C98  EC88  F00E         	call	_OSCILLATOR_Initialize	;wreg free
  1749                           
  1750                           ;mcc.c: 117: I2C_Initialize();
  1751  001C9C  EC59  F00E         	call	_I2C_Initialize	;wreg free
  1752                           
  1753                           ;mcc.c: 118: ADC_Initialize();
  1754  001CA0  EC66  F00E         	call	_ADC_Initialize	;wreg free
  1755                           
  1756                           ;mcc.c: 119: TMR1_Initialize();
  1757  001CA4  ECCB  F00D         	call	_TMR1_Initialize	;wreg free
  1758                           
  1759                           ;mcc.c: 120: EUSART1_Initialize();
  1760  001CA8  EC7D  F00E         	call	_EUSART1_Initialize	;wreg free
  1761                           
  1762                           ;mcc.c: 121: EUSART2_Initialize();
  1763  001CAC  EC72  F00E         	call	_EUSART2_Initialize	;wreg free
  1764  001CB0  0012               	return		;funcret
  1765  001CB2                     __end_of_SYSTEM_Initialize:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           intcon	equ	0xFF2
  1772                           postinc0	equ	0xFEE
  1773                           wreg	equ	0xFE8
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           fsr2h	equ	0xFDA
  1777                           fsr2l	equ	0xFD9
  1778                           status	equ	0xFD8
  1779                           
  1780 ;; *************** function _TMR1_Initialize *****************
  1781 ;; Defined at:
  1782 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;		None
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;		None
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1799 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1800 ;;Total ram usage:        2 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    7
  1803 ;; This function calls:
  1804 ;;		_TMR1_StartTimer
  1805 ;; This function is called by:
  1806 ;;		_SYSTEM_Initialize
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text7
  1811  001B96                     __ptext7:
  1812                           	opt stack 0
  1813  001B96                     _TMR1_Initialize:
  1814                           	opt stack 22
  1815                           
  1816                           ;tmr1.c: 68: T1CON = 0x30;
  1817                           
  1818                           ;incstack = 0
  1819  001B96  0E30               	movlw	48
  1820  001B98  6ECD               	movwf	4045,c	;volatile
  1821                           
  1822                           ;tmr1.c: 71: T1GCON = 0x00;
  1823  001B9A  0E00               	movlw	0
  1824  001B9C  6EAA               	movwf	4010,c	;volatile
  1825                           
  1826                           ;tmr1.c: 74: TMR1H = 0xF8;
  1827  001B9E  0EF8               	movlw	248
  1828  001BA0  6ECF               	movwf	4047,c	;volatile
  1829                           
  1830                           ;tmr1.c: 77: TMR1L = 0x30;
  1831  001BA2  0E30               	movlw	48
  1832  001BA4  6ECE               	movwf	4046,c	;volatile
  1833                           
  1834                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  1835  001BA6  50CE               	movf	4046,w,c	;volatile
  1836  001BA8  CFCF F100          	movff	4047,??_TMR1_Initialize	;volatile
  1837  001BAC  0101               	movlb	1	; () banked
  1838  001BAE  6B01               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  1839  001BB0  C100  F101         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  1840  001BB4  0101               	movlb	1	; () banked
  1841  001BB6  6B00               	clrf	??_TMR1_Initialize& (0+255),b
  1842  001BB8  0101               	movlb	1	; () banked
  1843  001BBA  1100               	iorwf	??_TMR1_Initialize& (0+255),w,b
  1844  001BBC  6E58               	movwf	_timer1ReloadVal,c	;volatile
  1845  001BBE  0101               	movlb	1	; () banked
  1846  001BC0  5101               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  1847  001BC2  6E59               	movwf	_timer1ReloadVal+1,c	;volatile
  1848                           
  1849                           ; BSR set to: 1
  1850                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  1851  001BC4  909E               	bcf	3998,0,c	;volatile
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;tmr1.c: 86: TMR1_StartTimer();
  1855  001BC6  ECB0  F00E         	call	_TMR1_StartTimer	;wreg free
  1856  001BCA  0012               	return		;funcret
  1857  001BCC                     __end_of_TMR1_Initialize:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           intcon	equ	0xFF2
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postinc2	equ	0xFDE
  1867                           postdec2	equ	0xFDD
  1868                           fsr2h	equ	0xFDA
  1869                           fsr2l	equ	0xFD9
  1870                           status	equ	0xFD8
  1871                           
  1872 ;; *************** function _TMR1_StartTimer *****************
  1873 ;; Defined at:
  1874 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		None
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1892 ;;Total ram usage:        0 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    6
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_TMR1_Initialize
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text8
  1903  001D60                     __ptext8:
  1904                           	opt stack 0
  1905  001D60                     _TMR1_StartTimer:
  1906                           	opt stack 22
  1907                           
  1908                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  1909                           
  1910                           ;incstack = 0
  1911  001D60  80CD               	bsf	4045,0,c	;volatile
  1912  001D62  0012               	return		;funcret
  1913  001D64                     __end_of_TMR1_StartTimer:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           fsr2h	equ	0xFDA
  1925                           fsr2l	equ	0xFD9
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function _PIN_MANAGER_Initialize *****************
  1929 ;; Defined at:
  1930 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;		None
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      void 
  1937 ;; Registers used:
  1938 ;;		wreg, status,2
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;Total ram usage:        0 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    6
  1951 ;; This function calls:
  1952 ;;		Nothing
  1953 ;; This function is called by:
  1954 ;;		_SYSTEM_Initialize
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text9
  1959  001B26                     __ptext9:
  1960                           	opt stack 0
  1961  001B26                     _PIN_MANAGER_Initialize:
  1962                           	opt stack 23
  1963                           
  1964                           ;pin_manager.c: 56: LATE = 0x00;
  1965                           
  1966                           ;incstack = 0
  1967  001B26  0E00               	movlw	0
  1968  001B28  6E8D               	movwf	3981,c	;volatile
  1969                           
  1970                           ;pin_manager.c: 57: LATD = 0x00;
  1971  001B2A  0E00               	movlw	0
  1972  001B2C  6E8C               	movwf	3980,c	;volatile
  1973                           
  1974                           ;pin_manager.c: 58: LATA = 0x00;
  1975  001B2E  0E00               	movlw	0
  1976  001B30  6E89               	movwf	3977,c	;volatile
  1977                           
  1978                           ;pin_manager.c: 59: LATB = 0x00;
  1979  001B32  0E00               	movlw	0
  1980  001B34  6E8A               	movwf	3978,c	;volatile
  1981                           
  1982                           ;pin_manager.c: 60: LATC = 0x00;
  1983  001B36  0E00               	movlw	0
  1984  001B38  6E8B               	movwf	3979,c	;volatile
  1985                           
  1986                           ;pin_manager.c: 65: TRISE = 0x07;
  1987  001B3A  0E07               	movlw	7
  1988  001B3C  6E96               	movwf	3990,c	;volatile
  1989                           
  1990                           ;pin_manager.c: 66: TRISA = 0xEF;
  1991  001B3E  0EEF               	movlw	239
  1992  001B40  6E92               	movwf	3986,c	;volatile
  1993                           
  1994                           ;pin_manager.c: 67: TRISB = 0xF2;
  1995  001B42  0EF2               	movlw	242
  1996  001B44  6E93               	movwf	3987,c	;volatile
  1997                           
  1998                           ;pin_manager.c: 68: TRISC = 0xB8;
  1999  001B46  0EB8               	movlw	184
  2000  001B48  6E94               	movwf	3988,c	;volatile
  2001                           
  2002                           ;pin_manager.c: 69: TRISD = 0xA0;
  2003  001B4A  0EA0               	movlw	160
  2004  001B4C  6E95               	movwf	3989,c	;volatile
  2005                           
  2006                           ;pin_manager.c: 74: ANCON0 = 0xFF;
  2007  001B4E  010F               	movlb	15	; () banked
  2008  001B50  695D               	setf	93,b	;volatile
  2009                           
  2010                           ;pin_manager.c: 75: ANCON1 = 0x7B;
  2011  001B52  0E7B               	movlw	123
  2012  001B54  010F               	movlb	15	; () banked
  2013  001B56  6F5C               	movwf	92,b	;volatile
  2014                           
  2015                           ;pin_manager.c: 80: WPUB = 0xFE;
  2016  001B58  0EFE               	movlw	254
  2017  001B5A  010F               	movlb	15	; () banked
  2018  001B5C  6F5B               	movwf	91,b	;volatile
  2019                           
  2020                           ; BSR set to: 15
  2021  001B5E  0012               	return		;funcret
  2022  001B60                     __end_of_PIN_MANAGER_Initialize:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postinc2	equ	0xFDE
  2032                           postdec2	equ	0xFDD
  2033                           fsr2h	equ	0xFDA
  2034                           fsr2l	equ	0xFD9
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function _OSCILLATOR_Initialize *****************
  2038 ;; Defined at:
  2039 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2057 ;;Total ram usage:        0 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    6
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_SYSTEM_Initialize
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text10
  2068  001D10                     __ptext10:
  2069                           	opt stack 0
  2070  001D10                     _OSCILLATOR_Initialize:
  2071                           	opt stack 23
  2072                           
  2073                           ;mcc.c: 127: OSCCON = 0x60;
  2074                           
  2075                           ; BSR set to: 15
  2076                           ;incstack = 0
  2077  001D10  0E60               	movlw	96
  2078  001D12  6ED3               	movwf	4051,c	;volatile
  2079                           
  2080                           ;mcc.c: 129: OSCCON2 = 0x00;
  2081  001D14  0E00               	movlw	0
  2082  001D16  6ED2               	movwf	4050,c	;volatile
  2083                           
  2084                           ;mcc.c: 131: OSCTUNE = 0x00;
  2085  001D18  0E00               	movlw	0
  2086  001D1A  6E9B               	movwf	3995,c	;volatile
  2087                           
  2088                           ;mcc.c: 133: REFOCON = 0x00;
  2089  001D1C  0E00               	movlw	0
  2090  001D1E  6E9A               	movwf	3994,c	;volatile
  2091  001D20  0012               	return		;funcret
  2092  001D22                     __end_of_OSCILLATOR_Initialize:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           intcon	equ	0xFF2
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           postinc2	equ	0xFDE
  2102                           postdec2	equ	0xFDD
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _INTERRUPT_Initialize *****************
  2108 ;; Defined at:
  2109 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		None
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2127 ;;Total ram usage:        0 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    6
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_SYSTEM_Initialize
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text11
  2138  001D64                     __ptext11:
  2139                           	opt stack 0
  2140  001D64                     _INTERRUPT_Initialize:
  2141                           	opt stack 23
  2142                           
  2143                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2144                           
  2145                           ;incstack = 0
  2146  001D64  9ED0               	bcf	4048,7,c	;volatile
  2147  001D66  0012               	return		;funcret
  2148  001D68                     __end_of_INTERRUPT_Initialize:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           intcon	equ	0xFF2
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postinc2	equ	0xFDE
  2158                           postdec2	equ	0xFDD
  2159                           fsr2h	equ	0xFDA
  2160                           fsr2l	equ	0xFD9
  2161                           status	equ	0xFD8
  2162                           
  2163 ;; *************** function _I2C_Initialize *****************
  2164 ;; Defined at:
  2165 ;;		line 79 in file "mcc_generated_files/i2c.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    6
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_SYSTEM_Initialize
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text12
  2194  001CB2                     __ptext12:
  2195                           	opt stack 0
  2196  001CB2                     _I2C_Initialize:
  2197                           	opt stack 23
  2198                           
  2199                           ;i2c.c: 82: SSPSTAT = 0x00;
  2200                           
  2201                           ;incstack = 0
  2202  001CB2  0E00               	movlw	0
  2203  001CB4  6EC7               	movwf	4039,c	;volatile
  2204                           
  2205                           ;i2c.c: 84: SSPCON1 = 0x3E;
  2206  001CB6  0E3E               	movlw	62
  2207  001CB8  6EC6               	movwf	4038,c	;volatile
  2208                           
  2209                           ;i2c.c: 86: SSPCON2 = 0x01;
  2210  001CBA  0E01               	movlw	1
  2211  001CBC  6EC5               	movwf	4037,c	;volatile
  2212                           
  2213                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  2214  001CBE  0EFE               	movlw	254
  2215  001CC0  6EC8               	movwf	4040,c	;volatile
  2216                           
  2217                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  2218  001CC2  0E10               	movlw	16
  2219  001CC4  6EC8               	movwf	4040,c	;volatile
  2220                           
  2221                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  2222  001CC6  969E               	bcf	3998,3,c	;volatile
  2223                           
  2224                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  2225  001CC8  869D               	bsf	3997,3,c	;volatile
  2226  001CCA  0012               	return		;funcret
  2227  001CCC                     __end_of_I2C_Initialize:
  2228                           	opt stack 0
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _EUSART2_Initialize *****************
  2243 ;; Defined at:
  2244 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    6
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_SYSTEM_Initialize
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text13
  2273  001CE4                     __ptext13:
  2274                           	opt stack 0
  2275  001CE4                     _EUSART2_Initialize:
  2276                           	opt stack 23
  2277                           
  2278                           ;eusart2.c: 60: BAUDCON2 = 0x18;
  2279                           
  2280                           ;incstack = 0
  2281  001CE4  0E18               	movlw	24
  2282  001CE6  6EB9               	movwf	4025,c	;volatile
  2283                           
  2284                           ;eusart2.c: 63: RCSTA2 = 0x90;
  2285  001CE8  0E90               	movlw	144
  2286  001CEA  6EA6               	movwf	4006,c	;volatile
  2287                           
  2288                           ;eusart2.c: 66: TXSTA2 = 0xA6;
  2289  001CEC  0EA6               	movlw	166
  2290  001CEE  6EBA               	movwf	4026,c	;volatile
  2291                           
  2292                           ;eusart2.c: 69: SPBRG2 = 0x8A;
  2293  001CF0  0E8A               	movlw	138
  2294  001CF2  6E7B               	movwf	3963,c	;volatile
  2295                           
  2296                           ;eusart2.c: 72: SPBRGH2 = 0x00;
  2297  001CF4  0E00               	movlw	0
  2298  001CF6  6E7C               	movwf	3964,c	;volatile
  2299  001CF8  0012               	return		;funcret
  2300  001CFA                     __end_of_EUSART2_Initialize:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           intcon	equ	0xFF2
  2307                           postinc0	equ	0xFEE
  2308                           wreg	equ	0xFE8
  2309                           postinc2	equ	0xFDE
  2310                           postdec2	equ	0xFDD
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _EUSART1_Initialize *****************
  2316 ;; Defined at:
  2317 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;Total ram usage:        0 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    6
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_SYSTEM_Initialize
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text14
  2346  001CFA                     __ptext14:
  2347                           	opt stack 0
  2348  001CFA                     _EUSART1_Initialize:
  2349                           	opt stack 23
  2350                           
  2351                           ;eusart1.c: 59: BAUDCON1 = 0x08;
  2352                           
  2353                           ;incstack = 0
  2354  001CFA  0E08               	movlw	8
  2355  001CFC  6EA7               	movwf	4007,c	;volatile
  2356                           
  2357                           ;eusart1.c: 62: RCSTA1 = 0x90;
  2358  001CFE  0E90               	movlw	144
  2359  001D00  6EAB               	movwf	4011,c	;volatile
  2360                           
  2361                           ;eusart1.c: 65: TXSTA1 = 0xA4;
  2362  001D02  0EA4               	movlw	164
  2363  001D04  6EAC               	movwf	4012,c	;volatile
  2364                           
  2365                           ;eusart1.c: 68: SPBRG1 = 0x0F;
  2366  001D06  0E0F               	movlw	15
  2367  001D08  6EAF               	movwf	4015,c	;volatile
  2368                           
  2369                           ;eusart1.c: 71: SPBRGH1 = 0x00;
  2370  001D0A  0E00               	movlw	0
  2371  001D0C  6E7D               	movwf	3965,c	;volatile
  2372  001D0E  0012               	return		;funcret
  2373  001D10                     __end_of_EUSART1_Initialize:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           intcon	equ	0xFF2
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postinc2	equ	0xFDE
  2383                           postdec2	equ	0xFDD
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _ADC_Initialize *****************
  2389 ;; Defined at:
  2390 ;;		line 58 in file "mcc_generated_files/adc.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2408 ;;Total ram usage:        0 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    6
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_SYSTEM_Initialize
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text15
  2419  001CCC                     __ptext15:
  2420                           	opt stack 0
  2421  001CCC                     _ADC_Initialize:
  2422                           	opt stack 23
  2423                           
  2424                           ;adc.c: 63: ADCON0 = 0x01;
  2425                           
  2426                           ;incstack = 0
  2427  001CCC  0E01               	movlw	1
  2428  001CCE  6EC2               	movwf	4034,c	;volatile
  2429                           
  2430                           ;adc.c: 66: ADCON1 = 0x80;
  2431  001CD0  0E80               	movlw	128
  2432  001CD2  6EC1               	movwf	4033,c	;volatile
  2433                           
  2434                           ;adc.c: 69: ADCON2 = 0x16;
  2435  001CD4  0E16               	movlw	22
  2436  001CD6  6EC0               	movwf	4032,c	;volatile
  2437                           
  2438                           ;adc.c: 72: ADRESH = 0x00;
  2439  001CD8  0E00               	movlw	0
  2440  001CDA  6EC4               	movwf	4036,c	;volatile
  2441                           
  2442                           ;adc.c: 75: ADRESL = 0x00;
  2443  001CDC  0E00               	movlw	0
  2444  001CDE  6EC3               	movwf	4035,c	;volatile
  2445                           
  2446                           ;adc.c: 78: PIE1bits.ADIE = 1;
  2447  001CE0  8C9D               	bsf	3997,6,c	;volatile
  2448  001CE2  0012               	return		;funcret
  2449  001CE4                     __end_of_ADC_Initialize:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           intcon	equ	0xFF2
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postinc2	equ	0xFDE
  2459                           postdec2	equ	0xFDD
  2460                           fsr2h	equ	0xFDA
  2461                           fsr2l	equ	0xFD9
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function _INTERRUPT_InterruptManager *****************
  2465 ;; Defined at:
  2466 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2482 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2483 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2484 ;;Total ram usage:       14 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    5
  2487 ;; This function calls:
  2488 ;;		_ADC_ISR
  2489 ;;		_I2C_ISR
  2490 ;; This function is called by:
  2491 ;;		Interrupt level 2
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	intcode
  2496  000008                     __pintcode:
  2497                           	opt stack 0
  2498  000008                     _INTERRUPT_InterruptManager:
  2499                           	opt stack 22
  2500                           
  2501                           ;incstack = 0
  2502  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2503  00000A  CFFA F048          	movff	pclath,??_INTERRUPT_InterruptManager
  2504  00000E  CFFB F049          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2505  000012  CFE9 F04A          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2506  000016  CFEA F04B          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2507  00001A  CFE1 F04C          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2508  00001E  CFE2 F04D          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2509  000022  CFD9 F04E          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2510  000026  CFDA F04F          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2511  00002A  CFF3 F050          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2512  00002E  CFF4 F051          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2513  000032  CFF6 F052          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2514  000036  CFF7 F053          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2515  00003A  CFF8 F054          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2516  00003E  CFF5 F055          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2517                           
  2518                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  2519  000042  BCF2               	btfsc	intcon,6,c	;volatile
  2520  000044  AC9D               	btfss	3997,6,c	;volatile
  2521  000046  D003               	goto	i2l2690
  2522  000048  BC9E               	btfsc	3998,6,c	;volatile
  2523                           
  2524                           ;interrupt_manager.c: 61: {
  2525                           ;interrupt_manager.c: 62: ADC_ISR();
  2526  00004A  ECB4  F00E         	call	_ADC_ISR	;wreg free
  2527  00004E                     i2l2690:
  2528                           
  2529                           ;interrupt_manager.c: 63: }
  2530                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  2531  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  2532  000050  A69D               	btfss	3997,3,c	;volatile
  2533  000052  D003               	goto	i2l312
  2534  000054  B69E               	btfsc	3998,3,c	;volatile
  2535                           
  2536                           ;interrupt_manager.c: 65: {
  2537                           ;interrupt_manager.c: 66: I2C_ISR();
  2538  000056  EC8D  F00B         	call	_I2C_ISR	;wreg free
  2539  00005A                     i2l312:
  2540  00005A  C055  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2541  00005E  C054  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2542  000062  C053  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2543  000066  C052  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2544  00006A  C051  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2545  00006E  C050  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2546  000072  C04F  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2547  000076  C04E  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2548  00007A  C04D  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2549  00007E  C04C  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2550  000082  C04B  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2551  000086  C04A  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2552  00008A  C049  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2553  00008E  C048  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2554  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2555  000094  0011               	retfie		f
  2556  000096                     __end_of_INTERRUPT_InterruptManager:
  2557                           	opt stack 0
  2558                           pclatu	equ	0xFFB
  2559                           pclath	equ	0xFFA
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           intcon	equ	0xFF2
  2567                           postinc0	equ	0xFEE
  2568                           fsr0h	equ	0xFEA
  2569                           fsr0l	equ	0xFE9
  2570                           wreg	equ	0xFE8
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _I2C_ISR *****************
  2580 ;; Defined at:
  2581 ;;		line 102 in file "mcc_generated_files/i2c.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    4
  2602 ;; This function calls:
  2603 ;;		_getByteToSend
  2604 ;;		_handleByteReceived
  2605 ;;		i2_printf
  2606 ;; This function is called by:
  2607 ;;		_INTERRUPT_InterruptManager
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text17
  2612  00171A                     __ptext17:
  2613                           	opt stack 0
  2614  00171A                     _I2C_ISR:
  2615                           	opt stack 22
  2616                           
  2617                           ;i2c.c: 103: if (SSPSTATbits.BF == 0 && SSPSTATbits.BF == 0) {
  2618                           
  2619                           ;incstack = 0
  2620  00171A  A0C7               	btfss	4039,0,c	;volatile
  2621  00171C  B0C7               	btfsc	4039,0,c	;volatile
  2622  00171E  D002               	goto	i2l153
  2623                           
  2624                           ;i2c.c: 105: SSPIF = 0;
  2625  001720  969E               	bcf	3998,3,c	;volatile
  2626                           
  2627                           ;i2c.c: 106: return;
  2628  001722  0012               	return	
  2629  001724                     i2l153:
  2630                           
  2631                           ;i2c.c: 107: }
  2632                           ;i2c.c: 109: if (SSPIF)
  2633  001724  A69E               	btfss	3998,3,c	;volatile
  2634  001726  D041               	goto	i2l2618
  2635                           
  2636                           ;i2c.c: 110: {
  2637                           ;i2c.c: 111: if (SSPSTATbits.R_nW)
  2638  001728  A4C7               	btfss	4039,2,c	;volatile
  2639  00172A  D016               	goto	i2l2588
  2640                           
  2641                           ;i2c.c: 112: {
  2642                           ;i2c.c: 113: if (!SSPSTATbits.D_nA)
  2643  00172C  BAC7               	btfsc	4039,5,c	;volatile
  2644  00172E  D009               	goto	i2l2580
  2645                           
  2646                           ;i2c.c: 114: {
  2647                           ;i2c.c: 115: SSPBUF = getByteToSend(index_i2c);
  2648  001730  0100               	movlb	0	; () banked
  2649  001732  519A               	movf	_index_i2c& (0+255),w,b
  2650  001734  ECCA  F008         	call	_getByteToSend
  2651  001738  6EC9               	movwf	4041,c	;volatile
  2652                           
  2653                           ;i2c.c: 116: index_i2c++;
  2654  00173A  0100               	movlb	0	; () banked
  2655  00173C  4B9A               	infsnz	_index_i2c& (0+255),f,b
  2656  00173E  2B9B               	incf	(_index_i2c+1)& (0+255),f,b
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;i2c.c: 117: SSPCON1bits.CKP = 1;
  2660  001740  88C6               	bsf	4038,4,c	;volatile
  2661  001742                     i2l2580:
  2662                           
  2663                           ;i2c.c: 118: }
  2664                           ;i2c.c: 119: if (SSPSTATbits.D_nA)
  2665  001742  AAC7               	btfss	4039,5,c	;volatile
  2666  001744  D009               	goto	i2l2588
  2667                           
  2668                           ;i2c.c: 120: {
  2669                           ;i2c.c: 121: SSPBUF = getByteToSend(index_i2c);
  2670  001746  0100               	movlb	0	; () banked
  2671  001748  519A               	movf	_index_i2c& (0+255),w,b
  2672  00174A  ECCA  F008         	call	_getByteToSend
  2673  00174E  6EC9               	movwf	4041,c	;volatile
  2674                           
  2675                           ;i2c.c: 122: index_i2c++;
  2676  001750  0100               	movlb	0	; () banked
  2677  001752  4B9A               	infsnz	_index_i2c& (0+255),f,b
  2678  001754  2B9B               	incf	(_index_i2c+1)& (0+255),f,b
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;i2c.c: 123: SSPCON1bits.CKP = 1;
  2682  001756  88C6               	bsf	4038,4,c	;volatile
  2683  001758                     i2l2588:
  2684                           
  2685                           ;i2c.c: 124: }
  2686                           ;i2c.c: 126: }
  2687                           ;i2c.c: 127: if (!SSPSTATbits.R_nW)
  2688  001758  B4C7               	btfsc	4039,2,c	;volatile
  2689  00175A  D027               	goto	i2l2618
  2690                           
  2691                           ;i2c.c: 128: {
  2692                           ;i2c.c: 129: if (!SSPSTATbits.D_nA)
  2693  00175C  BAC7               	btfsc	4039,5,c	;volatile
  2694  00175E  D006               	goto	i2l2598
  2695                           
  2696                           ;i2c.c: 130: {
  2697                           ;i2c.c: 131: first = 1;
  2698  001760  0E01               	movlw	1
  2699  001762  0100               	movlb	0	; () banked
  2700  001764  6FD1               	movwf	_first& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;i2c.c: 132: junk = SSPBUF;
  2704  001766  CFC9 F09E          	movff	4041,_junk	;volatile
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;i2c.c: 134: SSPCON1bits.CKP = 1;
  2708  00176A  88C6               	bsf	4038,4,c	;volatile
  2709  00176C                     i2l2598:
  2710                           
  2711                           ;i2c.c: 135: }
  2712                           ;i2c.c: 136: if (SSPSTATbits.D_nA)
  2713  00176C  AAC7               	btfss	4039,5,c	;volatile
  2714  00176E  D01D               	goto	i2l2618
  2715                           
  2716                           ;i2c.c: 137: {
  2717                           ;i2c.c: 138: if (first) {
  2718  001770  0100               	movlb	0	; () banked
  2719  001772  51D1               	movf	_first& (0+255),w,b
  2720  001774  B4D8               	btfsc	status,2,c
  2721  001776  D00C               	goto	i2l2608
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;i2c.c: 139: index_i2c = SSPBUF;
  2725  001778  CFC9 F09A          	movff	4041,_index_i2c	;volatile
  2726  00177C  0100               	movlb	0	; () banked
  2727  00177E  6B9B               	clrf	(_index_i2c+1)& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;i2c.c: 140: handleByteReceived(index_i2c);
  2731  001780  0100               	movlb	0	; () banked
  2732  001782  519A               	movf	_index_i2c& (0+255),w,b
  2733  001784  EC55  F00A         	call	_handleByteReceived
  2734                           
  2735                           ;i2c.c: 141: first = 0;
  2736  001788  0E00               	movlw	0
  2737  00178A  0100               	movlb	0	; () banked
  2738  00178C  6FD1               	movwf	_first& (0+255),b
  2739                           
  2740                           ;i2c.c: 142: }
  2741  00178E  D003               	goto	i2l2610
  2742  001790                     i2l2608:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;i2c.c: 144: else {
  2746                           ;i2c.c: 146: handleByteReceived(SSPBUF);
  2747  001790  50C9               	movf	4041,w,c	;volatile
  2748  001792  EC55  F00A         	call	_handleByteReceived
  2749  001796                     i2l2610:
  2750                           
  2751                           ;i2c.c: 148: }
  2752                           ;i2c.c: 149: if (SSPCON1bits.WCOL)
  2753  001796  AEC6               	btfss	4038,7,c	;volatile
  2754  001798  D007               	goto	i2l2616
  2755                           
  2756                           ;i2c.c: 150: {
  2757                           ;i2c.c: 151: SSPCON1bits.WCOL = 0;
  2758  00179A  9EC6               	bcf	4038,7,c	;volatile
  2759                           
  2760                           ;i2c.c: 152: junk = SSPBUF;
  2761  00179C  CFC9 F09E          	movff	4041,_junk	;volatile
  2762                           
  2763                           ;i2c.c: 153: handleByteReceived(junk);
  2764  0017A0  0100               	movlb	0	; () banked
  2765  0017A2  519E               	movf	_junk& (0+255),w,b
  2766  0017A4  EC55  F00A         	call	_handleByteReceived
  2767  0017A8                     i2l2616:
  2768                           
  2769                           ;i2c.c: 154: }
  2770                           ;i2c.c: 155: SSPCON1bits.CKP = 1;
  2771  0017A8  88C6               	bsf	4038,4,c	;volatile
  2772  0017AA                     i2l2618:
  2773                           
  2774                           ;i2c.c: 156: }
  2775                           ;i2c.c: 157: }
  2776                           ;i2c.c: 158: }
  2777                           ;i2c.c: 159: if (BCLIF)
  2778  0017AA  A6A1               	btfss	4001,3,c	;volatile
  2779  0017AC  D00A               	goto	i2l2628
  2780                           
  2781                           ;i2c.c: 160: {
  2782                           ;i2c.c: 161: printf("collide\r\n");
  2783  0017AE  0E1F               	movlw	low STR_1
  2784  0017B0  6E03               	movwf	i2printf@f,c
  2785  0017B2  0E0F               	movlw	high STR_1
  2786  0017B4  6E04               	movwf	i2printf@f+1,c
  2787  0017B6  EC32  F00E         	call	i2_printf	;wreg free
  2788                           
  2789                           ;i2c.c: 162: junk = SSPBUF;
  2790  0017BA  CFC9 F09E          	movff	4041,_junk	;volatile
  2791                           
  2792                           ;i2c.c: 163: BCLIF = 0;
  2793  0017BE  96A1               	bcf	4001,3,c	;volatile
  2794                           
  2795                           ;i2c.c: 164: SSPCON1bits.CKP = 1;
  2796  0017C0  88C6               	bsf	4038,4,c	;volatile
  2797  0017C2                     i2l2628:
  2798                           
  2799                           ;i2c.c: 165: }
  2800                           ;i2c.c: 166: SSPIF = 0;
  2801  0017C2  969E               	bcf	3998,3,c	;volatile
  2802  0017C4  0012               	return		;funcret
  2803  0017C6                     __end_of_I2C_ISR:
  2804                           	opt stack 0
  2805                           pclatu	equ	0xFFB
  2806                           pclath	equ	0xFFA
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           intcon	equ	0xFF2
  2814                           postinc0	equ	0xFEE
  2815                           fsr0h	equ	0xFEA
  2816                           fsr0l	equ	0xFE9
  2817                           wreg	equ	0xFE8
  2818                           fsr1h	equ	0xFE2
  2819                           fsr1l	equ	0xFE1
  2820                           postinc2	equ	0xFDE
  2821                           postdec2	equ	0xFDD
  2822                           fsr2h	equ	0xFDA
  2823                           fsr2l	equ	0xFD9
  2824                           status	equ	0xFD8
  2825                           
  2826 ;; *************** function i2_printf *****************
  2827 ;; Defined at:
  2828 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  f               2    2[COMRAM] PTR const unsigned char 
  2831 ;;		 -> STR_3(17), STR_2(13), STR_1(10), 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  printf          4    0        struct .
  2834 ;;  printf          3    0        PTR const unsigned char 
  2835 ;;  printf          2    4[COMRAM] PTR void [1]
  2836 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2837 ;;  printf          2    0        unsigned int 
  2838 ;;  printf          2    0        unsigned int 
  2839 ;;  printf          1    6[COMRAM] char 
  2840 ;;  printf          1    0        unsigned char 
  2841 ;;  printf          1    0        char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  2    2[COMRAM] int 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2852 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2854 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2855 ;;Total ram usage:        5 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    2
  2858 ;; This function calls:
  2859 ;;		i2_putch
  2860 ;; This function is called by:
  2861 ;;		_I2C_ISR
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text18
  2866  001C64                     __ptext18:
  2867                           	opt stack 0
  2868  001C64                     i2_printf:
  2869                           	opt stack 23
  2870                           
  2871                           ;doprnt.c: 466: va_list ap;
  2872                           ;doprnt.c: 499: signed char c;
  2873                           ;doprnt.c: 506: signed char prec;
  2874                           ;doprnt.c: 508: unsigned char flag;
  2875                           ;doprnt.c: 523: union {
  2876                           ;doprnt.c: 524: unsigned long vd;
  2877                           ;doprnt.c: 525: double integ;
  2878                           ;doprnt.c: 526: } tmpval;
  2879                           ;doprnt.c: 528: unsigned int val;
  2880                           ;doprnt.c: 529: unsigned len;
  2881                           ;doprnt.c: 530: const char * cp;
  2882                           ;doprnt.c: 533: *ap = __va_start();
  2883                           
  2884                           ;incstack = 0
  2885  001C64  0E05               	movlw	low (?i2_printf+2)
  2886  001C66  6E05               	movwf	i2printf@ap,c
  2887  001C68  0E00               	movlw	high (?i2_printf+2)
  2888  001C6A  6E06               	movwf	i2printf@ap+1,c
  2889                           
  2890                           ;doprnt.c: 536: while(c = *f++) {
  2891  001C6C  D003               	goto	i2l2562
  2892  001C6E                     i2l2560:
  2893                           
  2894                           ;doprnt.c: 540: {
  2895                           ;doprnt.c: 541: (putch(c) );
  2896  001C6E  5007               	movf	i2printf@c,w,c
  2897  001C70  ECAB  F00E         	call	i2_putch
  2898  001C74                     i2l2562:
  2899  001C74  C003  FFF6         	movff	i2printf@f,tblptrl
  2900  001C78  C004  FFF7         	movff	i2printf@f+1,tblptrh
  2901  001C7C  4A03               	infsnz	i2printf@f,f,c
  2902  001C7E  2A04               	incf	i2printf@f+1,f,c
  2903  001C80                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2904  001C80  6AF8               	clrf	tblptru,c
  2905  001C82                     	endif
  2906  001C82                     	if	0	;tblptru may be non-zero
  2907  001C82                     	endif
  2908  001C82  0008               	tblrd		*
  2909  001C84  CFF5 F007          	movff	tablat,i2printf@c
  2910  001C88  5007               	movf	i2printf@c,w,c
  2911  001C8A  B4D8               	btfsc	status,2,c
  2912  001C8C  0012               	return	
  2913  001C8E  D7EF               	goto	i2l2560
  2914  001C90                     __end_ofi2_printf:
  2915                           	opt stack 0
  2916                           pclatu	equ	0xFFB
  2917                           pclath	equ	0xFFA
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           postinc0	equ	0xFEE
  2926                           fsr0h	equ	0xFEA
  2927                           fsr0l	equ	0xFE9
  2928                           wreg	equ	0xFE8
  2929                           fsr1h	equ	0xFE2
  2930                           fsr1l	equ	0xFE1
  2931                           postinc2	equ	0xFDE
  2932                           postdec2	equ	0xFDD
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function i2_putch *****************
  2938 ;; Defined at:
  2939 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  txData          1    wreg     unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  txData          1    1[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2957 ;;Total ram usage:        1 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    1
  2960 ;; This function calls:
  2961 ;;		i2_EUSART2_Write
  2962 ;; This function is called by:
  2963 ;;		i2_printf
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text19
  2968  001D56                     __ptext19:
  2969                           	opt stack 0
  2970  001D56                     i2_putch:
  2971                           	opt stack 23
  2972                           
  2973                           ;incstack = 0
  2974                           ;i2putch@txData stored from wreg
  2975  001D56  6E02               	movwf	i2putch@txData,c
  2976                           
  2977                           ;eusart2.c: 112: EUSART2_Write(txData);
  2978  001D58  5002               	movf	i2putch@txData,w,c
  2979  001D5A  EC9F  F00E         	call	i2_EUSART2_Write
  2980  001D5E  0012               	return		;funcret
  2981  001D60                     __end_ofi2_putch:
  2982                           	opt stack 0
  2983                           pclatu	equ	0xFFB
  2984                           pclath	equ	0xFFA
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           postinc0	equ	0xFEE
  2993                           fsr0h	equ	0xFEA
  2994                           fsr0l	equ	0xFE9
  2995                           wreg	equ	0xFE8
  2996                           fsr1h	equ	0xFE2
  2997                           fsr1l	equ	0xFE1
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function i2_EUSART2_Write *****************
  3005 ;; Defined at:
  3006 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  txData          1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  txData          1    0[COMRAM] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3024 ;;Total ram usage:        1 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		i2_putch
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text20
  3034  001D3E                     __ptext20:
  3035                           	opt stack 0
  3036  001D3E                     i2_EUSART2_Write:
  3037                           	opt stack 23
  3038                           
  3039                           ;incstack = 0
  3040                           ;i2EUSART2_Write@txData stored from wreg
  3041  001D3E  6E01               	movwf	i2EUSART2_Write@txData,c
  3042  001D40                     i2l31:
  3043  001D40  A8A4               	btfss	4004,4,c	;volatile
  3044  001D42  D7FE               	goto	i2l31
  3045                           
  3046                           ;eusart2.c: 100: }
  3047                           ;eusart2.c: 102: TXREG2 = txData;
  3048  001D44  C001  FF79         	movff	i2EUSART2_Write@txData,3961	;volatile
  3049  001D48  0012               	return		;funcret
  3050  001D4A                     __end_ofi2_EUSART2_Write:
  3051                           	opt stack 0
  3052                           pclatu	equ	0xFFB
  3053                           pclath	equ	0xFFA
  3054                           tblptru	equ	0xFF8
  3055                           tblptrh	equ	0xFF7
  3056                           tblptrl	equ	0xFF6
  3057                           tablat	equ	0xFF5
  3058                           prodh	equ	0xFF4
  3059                           prodl	equ	0xFF3
  3060                           intcon	equ	0xFF2
  3061                           postinc0	equ	0xFEE
  3062                           fsr0h	equ	0xFEA
  3063                           fsr0l	equ	0xFE9
  3064                           wreg	equ	0xFE8
  3065                           fsr1h	equ	0xFE2
  3066                           fsr1l	equ	0xFE1
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _handleByteReceived *****************
  3074 ;; Defined at:
  3075 ;;		line 291 in file "ax.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  data            1    wreg     unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  data            1    6[COMRAM] unsigned char 
  3080 ;;  i               2    4[COMRAM] int 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3091 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3094 ;;Total ram usage:        3 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    1
  3097 ;; This function calls:
  3098 ;;		_setLedOff
  3099 ;;		_setLedOn
  3100 ;; This function is called by:
  3101 ;;		_I2C_ISR
  3102 ;;		_I2C_ISR_bad
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text21
  3107  0014AA                     __ptext21:
  3108                           	opt stack 0
  3109  0014AA                     _handleByteReceived:
  3110                           	opt stack 24
  3111                           
  3112                           ;incstack = 0
  3113                           ;handleByteReceived@data stored from wreg
  3114  0014AA  6E07               	movwf	handleByteReceived@data,c
  3115                           
  3116                           ;ax.c: 293: if (readIndex == 0) {
  3117  0014AC  5056               	movf	_readIndex,w,c	;volatile
  3118  0014AE  1057               	iorwf	_readIndex+1,w,c	;volatile
  3119  0014B0  A4D8               	btfss	status,2,c
  3120  0014B2  D021               	goto	i2l2448
  3121                           
  3122                           ;ax.c: 294: currentCommand = data;
  3123  0014B4  C007  F05E         	movff	handleByteReceived@data,_currentCommand	;volatile
  3124                           
  3125                           ;ax.c: 295: readIndex++;
  3126  0014B8  4A56               	infsnz	_readIndex,f,c	;volatile
  3127  0014BA  2A57               	incf	_readIndex+1,f,c	;volatile
  3128                           
  3129                           ;ax.c: 297: for (int i = 0; i < 32; i++) {
  3130  0014BC  0E00               	movlw	0
  3131  0014BE  6E06               	movwf	handleByteReceived@i+1,c
  3132  0014C0  0E00               	movlw	0
  3133  0014C2  6E05               	movwf	handleByteReceived@i,c
  3134  0014C4  BE06               	btfsc	handleByteReceived@i+1,7,c
  3135  0014C6  D008               	goto	i2l2442
  3136  0014C8  5006               	movf	handleByteReceived@i+1,w,c
  3137  0014CA  E105               	bnz	i2u105_40
  3138  0014CC  0E20               	movlw	32
  3139  0014CE  5C05               	subwf	handleByteReceived@i,w,c
  3140  0014D0  B0D8               	btfsc	status,0,c
  3141  0014D2  0012               	return	
  3142  0014D4  D001               	goto	i2l2442
  3143  0014D6                     i2u105_40:
  3144  0014D6  0012               	return	
  3145  0014D8                     i2l2442:
  3146                           
  3147                           ;ax.c: 298: dataToSend[i] = 66;
  3148  0014D8  0E60               	movlw	low _dataToSend
  3149  0014DA  2405               	addwf	handleByteReceived@i,w,c
  3150  0014DC  6ED9               	movwf	fsr2l,c
  3151  0014DE  0E00               	movlw	high _dataToSend
  3152  0014E0  2006               	addwfc	handleByteReceived@i+1,w,c
  3153  0014E2  6EDA               	movwf	fsr2h,c
  3154  0014E4  0E42               	movlw	66
  3155  0014E6  6EDF               	movwf	indf2,c
  3156  0014E8  4A05               	infsnz	handleByteReceived@i,f,c
  3157  0014EA  2A06               	incf	handleByteReceived@i+1,f,c
  3158  0014EC  BE06               	btfsc	handleByteReceived@i+1,7,c
  3159  0014EE  D7F4               	goto	i2l2442
  3160  0014F0  5006               	movf	handleByteReceived@i+1,w,c
  3161  0014F2  E15A               	bnz	i2l596
  3162  0014F4  D7EB               	goto	L2
  3163  0014F6                     i2l2448:
  3164  0014F6  0456               	decf	_readIndex,w,c	;volatile
  3165  0014F8  1057               	iorwf	_readIndex+1,w,c	;volatile
  3166  0014FA  A4D8               	btfss	status,2,c
  3167  0014FC  D020               	goto	i2l2466
  3168                           
  3169                           ;ax.c: 301: parameter1 = data;
  3170  0014FE  C007  F05D         	movff	handleByteReceived@data,_parameter1	;volatile
  3171                           
  3172                           ;ax.c: 302: readIndex++;
  3173  001502  4A56               	infsnz	_readIndex,f,c	;volatile
  3174  001504  2A57               	incf	_readIndex+1,f,c	;volatile
  3175                           
  3176                           ;ax.c: 303: if (currentCommand == 10) {
  3177  001506  0E0A               	movlw	10
  3178  001508  185E               	xorwf	_currentCommand,w,c	;volatile
  3179  00150A  A4D8               	btfss	status,2,c
  3180  00150C  D00A               	goto	i2l2460
  3181                           
  3182                           ;ax.c: 304: setLedOn(parameter1);
  3183  00150E  C05D  F001         	movff	_parameter1,setLedOn@led	;volatile
  3184  001512  6A02               	clrf	setLedOn@led+1,c
  3185  001514  EC7D  F00C         	call	_setLedOn	;wreg free
  3186                           
  3187                           ;ax.c: 305: readIndex = 0;
  3188  001518  0E00               	movlw	0
  3189  00151A  6E57               	movwf	_readIndex+1,c	;volatile
  3190  00151C  0E00               	movlw	0
  3191  00151E  6E56               	movwf	_readIndex,c	;volatile
  3192                           
  3193                           ;ax.c: 306: } else if (currentCommand == 11) {
  3194  001520  0012               	return	
  3195  001522                     i2l2460:
  3196  001522  0E0B               	movlw	11
  3197  001524  185E               	xorwf	_currentCommand,w,c	;volatile
  3198  001526  A4D8               	btfss	status,2,c
  3199  001528  0012               	return	
  3200                           
  3201                           ;ax.c: 307: setLedOff(parameter1);
  3202  00152A  C05D  F001         	movff	_parameter1,setLedOff@led	;volatile
  3203  00152E  6A02               	clrf	setLedOff@led+1,c
  3204  001530  ECBA  F00C         	call	_setLedOff	;wreg free
  3205                           
  3206                           ;ax.c: 308: readIndex = 0;
  3207  001534  0E00               	movlw	0
  3208  001536  6E57               	movwf	_readIndex+1,c	;volatile
  3209  001538  0E00               	movlw	0
  3210  00153A  6E56               	movwf	_readIndex,c	;volatile
  3211                           
  3212                           ;ax.c: 309: }
  3213                           ;ax.c: 311: } else if (readIndex == 2) {
  3214  00153C  0012               	return	
  3215  00153E                     i2l2466:
  3216  00153E  0E02               	movlw	2
  3217  001540  1856               	xorwf	_readIndex,w,c	;volatile
  3218  001542  1057               	iorwf	_readIndex+1,w,c	;volatile
  3219  001544  A4D8               	btfss	status,2,c
  3220  001546  D005               	goto	i2l2472
  3221                           
  3222                           ;ax.c: 312: parameter2 = data;
  3223  001548  C007  F05C         	movff	handleByteReceived@data,_parameter2	;volatile
  3224                           
  3225                           ;ax.c: 313: readIndex++;
  3226  00154C  4A56               	infsnz	_readIndex,f,c	;volatile
  3227  00154E  2A57               	incf	_readIndex+1,f,c	;volatile
  3228                           
  3229                           ;ax.c: 314: } else if (readIndex == 3) {
  3230  001550  0012               	return	
  3231  001552                     i2l2472:
  3232  001552  0E03               	movlw	3
  3233  001554  1856               	xorwf	_readIndex,w,c	;volatile
  3234  001556  1057               	iorwf	_readIndex+1,w,c	;volatile
  3235  001558  A4D8               	btfss	status,2,c
  3236  00155A  D005               	goto	i2l2478
  3237                           
  3238                           ;ax.c: 315: parameter3 = data;
  3239  00155C  C007  F05B         	movff	handleByteReceived@data,_parameter3	;volatile
  3240                           
  3241                           ;ax.c: 316: readIndex++;
  3242  001560  4A56               	infsnz	_readIndex,f,c	;volatile
  3243  001562  2A57               	incf	_readIndex+1,f,c	;volatile
  3244                           
  3245                           ;ax.c: 317: } else if (readIndex == 4) {
  3246  001564  0012               	return	
  3247  001566                     i2l2478:
  3248  001566  0E04               	movlw	4
  3249  001568  1856               	xorwf	_readIndex,w,c	;volatile
  3250  00156A  1057               	iorwf	_readIndex+1,w,c	;volatile
  3251  00156C  A4D8               	btfss	status,2,c
  3252  00156E  D005               	goto	i2l2484
  3253                           
  3254                           ;ax.c: 318: parameter4 = data;
  3255  001570  C007  F05A         	movff	handleByteReceived@data,_parameter4	;volatile
  3256                           
  3257                           ;ax.c: 319: readIndex++;
  3258  001574  4A56               	infsnz	_readIndex,f,c	;volatile
  3259  001576  2A57               	incf	_readIndex+1,f,c	;volatile
  3260                           
  3261                           ;ax.c: 320: } else if (readIndex == 5) {
  3262  001578  0012               	return	
  3263  00157A                     i2l2484:
  3264  00157A  0E05               	movlw	5
  3265  00157C  1856               	xorwf	_readIndex,w,c	;volatile
  3266  00157E  1057               	iorwf	_readIndex+1,w,c	;volatile
  3267  001580  A4D8               	btfss	status,2,c
  3268  001582  D005               	goto	i2l2490
  3269                           
  3270                           ;ax.c: 321: parameter5 = data;
  3271  001584  C007  F09D         	movff	handleByteReceived@data,_parameter5	;volatile
  3272                           
  3273                           ;ax.c: 322: readIndex++;
  3274  001588  4A56               	infsnz	_readIndex,f,c	;volatile
  3275  00158A  2A57               	incf	_readIndex+1,f,c	;volatile
  3276                           
  3277                           ;ax.c: 323: } else if (readIndex == 6) {
  3278  00158C  0012               	return	
  3279  00158E                     i2l2490:
  3280  00158E  0E06               	movlw	6
  3281  001590  1856               	xorwf	_readIndex,w,c	;volatile
  3282  001592  1057               	iorwf	_readIndex+1,w,c	;volatile
  3283  001594  A4D8               	btfss	status,2,c
  3284  001596  D005               	goto	i2l2496
  3285                           
  3286                           ;ax.c: 324: parameter6 = data;
  3287  001598  C007  F09C         	movff	handleByteReceived@data,_parameter6	;volatile
  3288                           
  3289                           ;ax.c: 325: readIndex++;
  3290  00159C  4A56               	infsnz	_readIndex,f,c	;volatile
  3291  00159E  2A57               	incf	_readIndex+1,f,c	;volatile
  3292                           
  3293                           ;ax.c: 326: } else {
  3294  0015A0  0012               	return	
  3295  0015A2                     i2l2496:
  3296                           
  3297                           ;ax.c: 327: readIndex++;
  3298  0015A2  4A56               	infsnz	_readIndex,f,c	;volatile
  3299  0015A4  2A57               	incf	_readIndex+1,f,c	;volatile
  3300  0015A6  0012               	return	
  3301  0015A8                     i2l596:
  3302  0015A8  0012               	return		;funcret
  3303  0015AA                     __end_of_handleByteReceived:
  3304                           	opt stack 0
  3305                           pclatu	equ	0xFFB
  3306                           pclath	equ	0xFFA
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           intcon	equ	0xFF2
  3314                           postinc0	equ	0xFEE
  3315                           fsr0h	equ	0xFEA
  3316                           fsr0l	equ	0xFE9
  3317                           wreg	equ	0xFE8
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           postdec2	equ	0xFDD
  3323                           fsr2h	equ	0xFDA
  3324                           fsr2l	equ	0xFD9
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _setLedOn *****************
  3328 ;; Defined at:
  3329 ;;		line 45 in file "ax.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  led             2    0[COMRAM] int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3343 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3345 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3346 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3347 ;;Total ram usage:        4 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_handleByteReceived
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text22
  3357  0018FA                     __ptext22:
  3358                           	opt stack 0
  3359  0018FA                     _setLedOn:
  3360                           	opt stack 24
  3361                           
  3362                           ;ax.c: 46: switch (led) {
  3363                           
  3364                           ;incstack = 0
  3365  0018FA  D014               	goto	i2l2228
  3366  0018FC                     i2l442:
  3367  0018FC  868C               	bsf	3980,3,c	;volatile
  3368                           
  3369                           ;ax.c: 49: break;
  3370  0018FE  0012               	return	
  3371  001900                     i2l446:
  3372  001900  848C               	bsf	3980,2,c	;volatile
  3373                           
  3374                           ;ax.c: 52: break;
  3375  001902  0012               	return	
  3376  001904                     i2l449:
  3377  001904  828C               	bsf	3980,1,c	;volatile
  3378                           
  3379                           ;ax.c: 55: break;
  3380  001906  0012               	return	
  3381  001908                     i2l452:
  3382  001908  808C               	bsf	3980,0,c	;volatile
  3383                           
  3384                           ;ax.c: 58: break;
  3385  00190A  0012               	return	
  3386  00190C                     i2l455:
  3387  00190C  848B               	bsf	3979,2,c	;volatile
  3388                           
  3389                           ;ax.c: 61: break;
  3390  00190E  0012               	return	
  3391  001910                     i2l458:
  3392  001910  828B               	bsf	3979,1,c	;volatile
  3393                           
  3394                           ;ax.c: 64: break;
  3395  001912  0012               	return	
  3396  001914                     i2l461:
  3397  001914  808B               	bsf	3979,0,c	;volatile
  3398                           
  3399                           ;ax.c: 67: break;
  3400  001916  0012               	return	
  3401  001918                     i2l464:
  3402  001918  808A               	bsf	3978,0,c	;volatile
  3403                           
  3404                           ;ax.c: 70: break;
  3405  00191A  0012               	return	
  3406  00191C                     i2l467:
  3407  00191C  848A               	bsf	3978,2,c	;volatile
  3408                           
  3409                           ;ax.c: 73: break;
  3410  00191E  0012               	return	
  3411  001920                     i2l470:
  3412  001920  868A               	bsf	3978,3,c	;volatile
  3413                           
  3414                           ;ax.c: 77: }
  3415                           
  3416                           ;ax.c: 76: break;
  3417  001922  0012               	return	
  3418  001924                     i2l2228:
  3419  001924  C001  F003         	movff	setLedOn@led,??_setLedOn
  3420  001928  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  3421                           
  3422                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3423                           ; Switch size 1, requested type "space"
  3424                           ; Number of cases is 1, Range of values is 0 to 0
  3425                           ; switch strategies available:
  3426                           ; Name         Instructions Cycles
  3427                           ; simple_byte            4     3 (average)
  3428                           ;	Chosen strategy is simple_byte
  3429  00192C  5004               	movf	??_setLedOn+1,w,c
  3430  00192E  0A00               	xorlw	0	; case 0
  3431  001930  A4D8               	btfss	status,2,c
  3432  001932  0012               	return	
  3433                           
  3434                           ; Switch size 1, requested type "space"
  3435                           ; Number of cases is 10, Range of values is 1 to 10
  3436                           ; switch strategies available:
  3437                           ; Name         Instructions Cycles
  3438                           ; simple_byte           31    16 (average)
  3439                           ;	Chosen strategy is simple_byte
  3440  001934  5003               	movf	??_setLedOn,w,c
  3441  001936  0A01               	xorlw	1	; case 1
  3442  001938  B4D8               	btfsc	status,2,c
  3443  00193A  D7E0               	goto	i2l442
  3444  00193C  0A03               	xorlw	3	; case 2
  3445  00193E  B4D8               	btfsc	status,2,c
  3446  001940  D7DF               	goto	i2l446
  3447  001942  0A01               	xorlw	1	; case 3
  3448  001944  B4D8               	btfsc	status,2,c
  3449  001946  D7DE               	goto	i2l449
  3450  001948  0A07               	xorlw	7	; case 4
  3451  00194A  B4D8               	btfsc	status,2,c
  3452  00194C  D7DD               	goto	i2l452
  3453  00194E  0A01               	xorlw	1	; case 5
  3454  001950  B4D8               	btfsc	status,2,c
  3455  001952  D7DC               	goto	i2l455
  3456  001954  0A03               	xorlw	3	; case 6
  3457  001956  B4D8               	btfsc	status,2,c
  3458  001958  D7DB               	goto	i2l458
  3459  00195A  0A01               	xorlw	1	; case 7
  3460  00195C  B4D8               	btfsc	status,2,c
  3461  00195E  D7DA               	goto	i2l461
  3462  001960  0A0F               	xorlw	15	; case 8
  3463  001962  B4D8               	btfsc	status,2,c
  3464  001964  D7D9               	goto	i2l464
  3465  001966  0A01               	xorlw	1	; case 9
  3466  001968  B4D8               	btfsc	status,2,c
  3467  00196A  D7D8               	goto	i2l467
  3468  00196C  0A03               	xorlw	3	; case 10
  3469  00196E  A4D8               	btfss	status,2,c
  3470  001970  0012               	return	
  3471  001972  D7D6               	goto	i2l470
  3472  001974                     __end_of_setLedOn:
  3473                           	opt stack 0
  3474                           pclatu	equ	0xFFB
  3475                           pclath	equ	0xFFA
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           prodh	equ	0xFF4
  3481                           prodl	equ	0xFF3
  3482                           intcon	equ	0xFF2
  3483                           postinc0	equ	0xFEE
  3484                           fsr0h	equ	0xFEA
  3485                           fsr0l	equ	0xFE9
  3486                           wreg	equ	0xFE8
  3487                           fsr1h	equ	0xFE2
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           postinc2	equ	0xFDE
  3491                           postdec2	equ	0xFDD
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _setLedOff *****************
  3497 ;; Defined at:
  3498 ;;		line 80 in file "ax.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  led             2    0[COMRAM] int 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3516 ;;Total ram usage:        4 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_handleByteReceived
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text23
  3526  001974                     __ptext23:
  3527                           	opt stack 0
  3528  001974                     _setLedOff:
  3529                           	opt stack 24
  3530                           
  3531                           ;ax.c: 81: switch (led) {
  3532                           
  3533                           ;incstack = 0
  3534  001974  D014               	goto	i2l2238
  3535  001976                     i2l477:
  3536  001976  968C               	bcf	3980,3,c	;volatile
  3537                           
  3538                           ;ax.c: 84: break;
  3539  001978  0012               	return	
  3540  00197A                     i2l481:
  3541  00197A  948C               	bcf	3980,2,c	;volatile
  3542                           
  3543                           ;ax.c: 87: break;
  3544  00197C  0012               	return	
  3545  00197E                     i2l484:
  3546  00197E  928C               	bcf	3980,1,c	;volatile
  3547                           
  3548                           ;ax.c: 90: break;
  3549  001980  0012               	return	
  3550  001982                     i2l487:
  3551  001982  908C               	bcf	3980,0,c	;volatile
  3552                           
  3553                           ;ax.c: 93: break;
  3554  001984  0012               	return	
  3555  001986                     i2l490:
  3556  001986  948B               	bcf	3979,2,c	;volatile
  3557                           
  3558                           ;ax.c: 96: break;
  3559  001988  0012               	return	
  3560  00198A                     i2l493:
  3561  00198A  928B               	bcf	3979,1,c	;volatile
  3562                           
  3563                           ;ax.c: 99: break;
  3564  00198C  0012               	return	
  3565  00198E                     i2l496:
  3566  00198E  908B               	bcf	3979,0,c	;volatile
  3567                           
  3568                           ;ax.c: 102: break;
  3569  001990  0012               	return	
  3570  001992                     i2l499:
  3571  001992  908A               	bcf	3978,0,c	;volatile
  3572                           
  3573                           ;ax.c: 105: break;
  3574  001994  0012               	return	
  3575  001996                     i2l502:
  3576  001996  948A               	bcf	3978,2,c	;volatile
  3577                           
  3578                           ;ax.c: 108: break;
  3579  001998  0012               	return	
  3580  00199A                     i2l505:
  3581  00199A  968A               	bcf	3978,3,c	;volatile
  3582                           
  3583                           ;ax.c: 112: }
  3584                           
  3585                           ;ax.c: 111: break;
  3586  00199C  0012               	return	
  3587  00199E                     i2l2238:
  3588  00199E  C001  F003         	movff	setLedOff@led,??_setLedOff
  3589  0019A2  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  3590                           
  3591                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3592                           ; Switch size 1, requested type "space"
  3593                           ; Number of cases is 1, Range of values is 0 to 0
  3594                           ; switch strategies available:
  3595                           ; Name         Instructions Cycles
  3596                           ; simple_byte            4     3 (average)
  3597                           ;	Chosen strategy is simple_byte
  3598  0019A6  5004               	movf	??_setLedOff+1,w,c
  3599  0019A8  0A00               	xorlw	0	; case 0
  3600  0019AA  A4D8               	btfss	status,2,c
  3601  0019AC  0012               	return	
  3602                           
  3603                           ; Switch size 1, requested type "space"
  3604                           ; Number of cases is 10, Range of values is 1 to 10
  3605                           ; switch strategies available:
  3606                           ; Name         Instructions Cycles
  3607                           ; simple_byte           31    16 (average)
  3608                           ;	Chosen strategy is simple_byte
  3609  0019AE  5003               	movf	??_setLedOff,w,c
  3610  0019B0  0A01               	xorlw	1	; case 1
  3611  0019B2  B4D8               	btfsc	status,2,c
  3612  0019B4  D7E0               	goto	i2l477
  3613  0019B6  0A03               	xorlw	3	; case 2
  3614  0019B8  B4D8               	btfsc	status,2,c
  3615  0019BA  D7DF               	goto	i2l481
  3616  0019BC  0A01               	xorlw	1	; case 3
  3617  0019BE  B4D8               	btfsc	status,2,c
  3618  0019C0  D7DE               	goto	i2l484
  3619  0019C2  0A07               	xorlw	7	; case 4
  3620  0019C4  B4D8               	btfsc	status,2,c
  3621  0019C6  D7DD               	goto	i2l487
  3622  0019C8  0A01               	xorlw	1	; case 5
  3623  0019CA  B4D8               	btfsc	status,2,c
  3624  0019CC  D7DC               	goto	i2l490
  3625  0019CE  0A03               	xorlw	3	; case 6
  3626  0019D0  B4D8               	btfsc	status,2,c
  3627  0019D2  D7DB               	goto	i2l493
  3628  0019D4  0A01               	xorlw	1	; case 7
  3629  0019D6  B4D8               	btfsc	status,2,c
  3630  0019D8  D7DA               	goto	i2l496
  3631  0019DA  0A0F               	xorlw	15	; case 8
  3632  0019DC  B4D8               	btfsc	status,2,c
  3633  0019DE  D7D9               	goto	i2l499
  3634  0019E0  0A01               	xorlw	1	; case 9
  3635  0019E2  B4D8               	btfsc	status,2,c
  3636  0019E4  D7D8               	goto	i2l502
  3637  0019E6  0A03               	xorlw	3	; case 10
  3638  0019E8  A4D8               	btfss	status,2,c
  3639  0019EA  0012               	return	
  3640  0019EC  D7D6               	goto	i2l505
  3641  0019EE                     __end_of_setLedOff:
  3642                           	opt stack 0
  3643                           pclatu	equ	0xFFB
  3644                           pclath	equ	0xFFA
  3645                           tblptru	equ	0xFF8
  3646                           tblptrh	equ	0xFF7
  3647                           tblptrl	equ	0xFF6
  3648                           tablat	equ	0xFF5
  3649                           prodh	equ	0xFF4
  3650                           prodl	equ	0xFF3
  3651                           intcon	equ	0xFF2
  3652                           postinc0	equ	0xFEE
  3653                           fsr0h	equ	0xFEA
  3654                           fsr0l	equ	0xFE9
  3655                           wreg	equ	0xFE8
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _getByteToSend *****************
  3666 ;; Defined at:
  3667 ;;		line 346 in file "ax.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  i2c_data_rec    1    wreg     unsigned char 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  i2c_data_rec    1    0[COMRAM] unsigned char 
  3672 ;;  r               2   69[COMRAM] unsigned int 
  3673 ;;  value           2   67[COMRAM] int 
  3674 ;;  xhigh           1   63[COMRAM] unsigned char 
  3675 ;;  xlow            1   62[COMRAM] unsigned char 
  3676 ;;  error           2   58[COMRAM] int 
  3677 ;;  value           2   65[COMRAM] int 
  3678 ;;  xhigh           1   61[COMRAM] unsigned char 
  3679 ;;  xlow            1   60[COMRAM] unsigned char 
  3680 ;;  error           2   56[COMRAM] int 
  3681 ;;  d               1   64[COMRAM] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      unsigned char 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3692 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3694 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3695 ;;Total ram usage:       17 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    3
  3698 ;; This function calls:
  3699 ;;		_ADC_GetConversion
  3700 ;;		_clearState
  3701 ;;		_pingAX
  3702 ;;		_readAXData
  3703 ;;		_writeAXData
  3704 ;; This function is called by:
  3705 ;;		_I2C_ISR
  3706 ;;		_I2C_ISR_bad
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text24
  3711  001194                     __ptext24:
  3712                           	opt stack 0
  3713  001194                     _getByteToSend:
  3714                           	opt stack 22
  3715                           
  3716                           ;ax.c: 349: if (currentCommand == 20) {
  3717                           
  3718                           ;incstack = 0
  3719  001194  0E14               	movlw	20
  3720  001196  185E               	xorwf	_currentCommand,w,c	;volatile
  3721  001198  A4D8               	btfss	status,2,c
  3722  00119A  D013               	goto	i2l2358
  3723                           
  3724                           ;ax.c: 350: int error = pingAX(parameter1);
  3725  00119C  C05D  F030         	movff	_parameter1,pingAX@id	;volatile
  3726  0011A0  6A31               	clrf	pingAX@id+1,c
  3727  0011A2  EC33  F00D         	call	_pingAX	;wreg free
  3728  0011A6  C030  F039         	movff	?_pingAX,getByteToSend@error
  3729  0011AA  C031  F03A         	movff	?_pingAX+1,getByteToSend@error+1
  3730                           
  3731                           ;ax.c: 351: nbBytesToSend = 1;
  3732  0011AE  0E00               	movlw	0
  3733  0011B0  0100               	movlb	0	; () banked
  3734  0011B2  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3735  0011B4  0E01               	movlw	1
  3736  0011B6  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;ax.c: 352: dataToSend[0] = error;
  3740  0011B8  C039  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;ax.c: 353: clearState();
  3744  0011BC  EC01  F00E         	call	_clearState	;wreg free
  3745                           
  3746                           ;ax.c: 354: } else if (currentCommand == 21) {
  3747  0011C0  D08D               	goto	i2l2406
  3748  0011C2                     i2l2358:
  3749  0011C2  0E15               	movlw	21
  3750  0011C4  185E               	xorwf	_currentCommand,w,c	;volatile
  3751  0011C6  A4D8               	btfss	status,2,c
  3752  0011C8  D01C               	goto	i2l2374
  3753                           
  3754                           ;ax.c: 356: int value = readAXData(parameter1, parameter2);
  3755  0011CA  C05D  F030         	movff	_parameter1,readAXData@id	;volatile
  3756  0011CE  6A31               	clrf	readAXData@id+1,c
  3757  0011D0  C05C  F032         	movff	_parameter2,readAXData@address	;volatile
  3758  0011D4  6A33               	clrf	readAXData@address+1,c
  3759  0011D6  EC34  F00B         	call	_readAXData	;wreg free
  3760  0011DA  C030  F042         	movff	?_readAXData,getByteToSend@value
  3761  0011DE  C031  F043         	movff	?_readAXData+1,getByteToSend@value+1
  3762                           
  3763                           ;ax.c: 357: nbBytesToSend = 2;
  3764  0011E2  0E00               	movlw	0
  3765  0011E4  0100               	movlb	0	; () banked
  3766  0011E6  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3767  0011E8  0E02               	movlw	2
  3768  0011EA  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;ax.c: 358: uint8_t xlow = value & 0xff;
  3772  0011EC  C042  F03D         	movff	getByteToSend@value,getByteToSend@xlow
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;ax.c: 359: uint8_t xhigh = (value >> 8);
  3776  0011F0  5043               	movf	getByteToSend@value+1,w,c
  3777  0011F2  6E3E               	movwf	getByteToSend@xhigh,c
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;ax.c: 360: dataToSend[0] = xlow;
  3781  0011F4  C03D  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;ax.c: 361: dataToSend[1] = xhigh;
  3785  0011F8  C03E  F061         	movff	getByteToSend@xhigh,_dataToSend+1	;volatile
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;ax.c: 362: clearState();
  3789  0011FC  EC01  F00E         	call	_clearState	;wreg free
  3790                           
  3791                           ;ax.c: 363: } else if (currentCommand == 22) {
  3792  001200  D06D               	goto	i2l2406
  3793  001202                     i2l2374:
  3794  001202  0E16               	movlw	22
  3795  001204  185E               	xorwf	_currentCommand,w,c	;volatile
  3796  001206  A4D8               	btfss	status,2,c
  3797  001208  D01F               	goto	i2l2384
  3798                           
  3799                           ;ax.c: 364: int error = writeAXData(parameter1, parameter2, parameter3 + (parameter4 << 
      +                          8));
  3800  00120A  C05D  F030         	movff	_parameter1,writeAXData@id	;volatile
  3801  00120E  6A31               	clrf	writeAXData@id+1,c
  3802  001210  C05C  F032         	movff	_parameter2,writeAXData@address	;volatile
  3803  001214  6A33               	clrf	writeAXData@address+1,c
  3804  001216  505A               	movf	_parameter4,w,c	;volatile
  3805  001218  6E38               	movwf	(??_getByteToSend+1)& (0+255),c
  3806  00121A  6A37               	clrf	??_getByteToSend& (0+255),c
  3807  00121C  505B               	movf	_parameter3,w,c	;volatile
  3808  00121E  2437               	addwf	??_getByteToSend,w,c
  3809  001220  6E34               	movwf	writeAXData@data,c
  3810  001222  0E00               	movlw	0
  3811  001224  2038               	addwfc	??_getByteToSend+1,w,c
  3812  001226  6E35               	movwf	writeAXData@data+1,c
  3813  001228  ECE3  F00B         	call	_writeAXData	;wreg free
  3814  00122C  C030  F03B         	movff	?_writeAXData,getByteToSend@error_1447
  3815  001230  C031  F03C         	movff	?_writeAXData+1,getByteToSend@error_1447+1
  3816                           
  3817                           ;ax.c: 365: nbBytesToSend = 1;
  3818  001234  0E00               	movlw	0
  3819  001236  0100               	movlb	0	; () banked
  3820  001238  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3821  00123A  0E01               	movlw	1
  3822  00123C  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;ax.c: 366: dataToSend[0] = error;
  3826  00123E  C03B  F060         	movff	getByteToSend@error_1447,_dataToSend	;volatile
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;ax.c: 367: clearState();
  3830  001242  EC01  F00E         	call	_clearState	;wreg free
  3831                           
  3832                           ;ax.c: 368: } else if (currentCommand == 12) {
  3833  001246  D04A               	goto	i2l2406
  3834  001248                     i2l2384:
  3835  001248  0E0C               	movlw	12
  3836  00124A  185E               	xorwf	_currentCommand,w,c	;volatile
  3837  00124C  A4D8               	btfss	status,2,c
  3838  00124E  D046               	goto	i2l2406
  3839                           
  3840                           ;ax.c: 369: uint16_t r = ADC_GetConversion(parameter1) / 16;
  3841  001250  505D               	movf	_parameter1,w,c	;volatile
  3842  001252  EC1A  F00E         	call	_ADC_GetConversion
  3843  001256  0E04               	movlw	4
  3844  001258  6E37               	movwf	??_getByteToSend& (0+255),c
  3845  00125A                     i2u99_45:
  3846  00125A  90D8               	bcf	status,0,c
  3847  00125C  3202               	rrcf	?_ADC_GetConversion+1,f,c
  3848  00125E  3201               	rrcf	?_ADC_GetConversion,f,c
  3849  001260  2E37               	decfsz	??_getByteToSend& (0+255),f,c
  3850  001262  D7FB               	goto	i2u99_45
  3851  001264  C001  F046         	movff	?_ADC_GetConversion,getByteToSend@r
  3852  001268  C002  F047         	movff	?_ADC_GetConversion+1,getByteToSend@r+1
  3853                           
  3854                           ;ax.c: 371: if (r == 4095 || r == 4094)
  3855  00126C  2846               	incf	getByteToSend@r,w,c
  3856  00126E  E104               	bnz	i2u100_40
  3857  001270  0E0F               	movlw	15
  3858  001272  1847               	xorwf	getByteToSend@r+1,w,c
  3859  001274  B4D8               	btfsc	status,2,c
  3860  001276  D007               	goto	i2l2392
  3861  001278                     i2u100_40:
  3862  001278  0EFE               	movlw	254
  3863  00127A  1846               	xorwf	getByteToSend@r,w,c
  3864  00127C  E108               	bnz	i2l2394
  3865  00127E  0E0F               	movlw	15
  3866  001280  1847               	xorwf	getByteToSend@r+1,w,c
  3867  001282  A4D8               	btfss	status,2,c
  3868  001284  D004               	goto	i2l2394
  3869  001286                     i2l2392:
  3870                           
  3871                           ;ax.c: 372: r = 0;
  3872  001286  0E00               	movlw	0
  3873  001288  6E47               	movwf	getByteToSend@r+1,c
  3874  00128A  0E00               	movlw	0
  3875  00128C  6E46               	movwf	getByteToSend@r,c
  3876  00128E                     i2l2394:
  3877                           
  3878                           ;ax.c: 373: adc_values[parameter1] = r;
  3879  00128E  505D               	movf	_parameter1,w,c	;volatile
  3880  001290  0D02               	mullw	2
  3881  001292  0E80               	movlw	low _adc_values
  3882  001294  24F3               	addwf	prodl,w,c
  3883  001296  6ED9               	movwf	fsr2l,c
  3884  001298  0E00               	movlw	high _adc_values
  3885  00129A  20F4               	addwfc	prodh,w,c
  3886  00129C  6EDA               	movwf	fsr2h,c
  3887  00129E  C046  FFDE         	movff	getByteToSend@r,postinc2
  3888  0012A2  C047  FFDD         	movff	getByteToSend@r+1,postdec2
  3889                           
  3890                           ;ax.c: 375: int value = adc_values[parameter1];
  3891  0012A6  505D               	movf	_parameter1,w,c	;volatile
  3892  0012A8  0D02               	mullw	2
  3893  0012AA  0E80               	movlw	low _adc_values
  3894  0012AC  24F3               	addwf	prodl,w,c
  3895  0012AE  6ED9               	movwf	fsr2l,c
  3896  0012B0  0E00               	movlw	high _adc_values
  3897  0012B2  20F4               	addwfc	prodh,w,c
  3898  0012B4  6EDA               	movwf	fsr2h,c
  3899  0012B6  CFDE F044          	movff	postinc2,getByteToSend@value_1450
  3900  0012BA  CFDD F045          	movff	postdec2,getByteToSend@value_1450+1
  3901                           
  3902                           ;ax.c: 376: nbBytesToSend = 2;
  3903  0012BE  0E00               	movlw	0
  3904  0012C0  0100               	movlb	0	; () banked
  3905  0012C2  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3906  0012C4  0E02               	movlw	2
  3907  0012C6  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;ax.c: 377: uint8_t xlow = value & 0xff;
  3911  0012C8  C044  F03F         	movff	getByteToSend@value_1450,getByteToSend@xlow_1451
  3912                           
  3913                           ;ax.c: 378: uint8_t xhigh = (value >> 8);
  3914  0012CC  5045               	movf	getByteToSend@value_1450+1,w,c
  3915  0012CE  6E40               	movwf	getByteToSend@xhigh_1452,c
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;ax.c: 379: dataToSend[0] = xlow;
  3919  0012D0  C03F  F060         	movff	getByteToSend@xlow_1451,_dataToSend	;volatile
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;ax.c: 380: dataToSend[1] = xhigh;
  3923  0012D4  C040  F061         	movff	getByteToSend@xhigh_1452,_dataToSend+1	;volatile
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;ax.c: 381: clearState();
  3927  0012D8  EC01  F00E         	call	_clearState	;wreg free
  3928  0012DC                     i2l2406:
  3929                           
  3930                           ;ax.c: 382: }
  3931                           ;ax.c: 383: if (nbBytesToSend == 0) {
  3932  0012DC  0100               	movlb	0	; () banked
  3933  0012DE  5196               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  3934  0012E0  0100               	movlb	0	; () banked
  3935  0012E2  1197               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  3936  0012E4  A4D8               	btfss	status,2,c
  3937  0012E6  D004               	goto	i2l2414
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;ax.c: 385: clearState();
  3941  0012E8  EC01  F00E         	call	_clearState	;wreg free
  3942                           
  3943                           ;ax.c: 386: return 0;
  3944  0012EC  0E00               	movlw	0
  3945  0012EE  0012               	return	
  3946  0012F0                     i2l2414:
  3947                           
  3948                           ;ax.c: 387: }
  3949                           ;ax.c: 388: uint8_t d = dataToSend[bytesSent];
  3950  0012F0  0E60               	movlw	low _dataToSend
  3951  0012F2  0100               	movlb	0	; () banked
  3952  0012F4  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  3953  0012F6  6ED9               	movwf	fsr2l,c
  3954  0012F8  0E00               	movlw	high _dataToSend
  3955  0012FA  0100               	movlb	0	; () banked
  3956  0012FC  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  3957  0012FE  6EDA               	movwf	fsr2h,c
  3958  001300  50DF               	movf	indf2,w,c
  3959  001302  6E41               	movwf	getByteToSend@d,c
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;ax.c: 389: bytesSent++;
  3963  001304  0100               	movlb	0	; () banked
  3964  001306  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  3965  001308  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;ax.c: 391: if (bytesSent > nbBytesToSend) {
  3969  00130A  0100               	movlb	0	; () banked
  3970  00130C  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  3971  00130E  0100               	movlb	0	; () banked
  3972  001310  5D96               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  3973  001312  0100               	movlb	0	; () banked
  3974  001314  5197               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  3975  001316  0A80               	xorlw	128
  3976  001318  6E37               	movwf	??_getByteToSend& (0+255),c
  3977  00131A  0100               	movlb	0	; () banked
  3978  00131C  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  3979  00131E  0A80               	xorlw	128
  3980  001320  5837               	subwfb	??_getByteToSend& (0+255),w,c
  3981  001322  B0D8               	btfsc	status,0,c
  3982  001324  D004               	goto	i2l2426
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;ax.c: 393: clearState();
  3986  001326  EC01  F00E         	call	_clearState	;wreg free
  3987                           
  3988                           ;ax.c: 394: return 111;
  3989  00132A  0E6F               	movlw	111
  3990  00132C  0012               	return	
  3991  00132E                     i2l2426:
  3992                           
  3993                           ;ax.c: 395: }
  3994                           ;ax.c: 397: return d;
  3995  00132E  5041               	movf	getByteToSend@d,w,c
  3996  001330  0012               	return	
  3997  001332                     __end_of_getByteToSend:
  3998                           	opt stack 0
  3999                           pclatu	equ	0xFFB
  4000                           pclath	equ	0xFFA
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           postinc0	equ	0xFEE
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           postdec2	equ	0xFDD
  4017                           fsr2h	equ	0xFDA
  4018                           fsr2l	equ	0xFD9
  4019                           status	equ	0xFD8
  4020                           
  4021 ;; *************** function _writeAXData *****************
  4022 ;; Defined at:
  4023 ;;		line 252 in file "ax.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  id              2   47[COMRAM] int 
  4026 ;;  address         2   49[COMRAM] int 
  4027 ;;  data            2   51[COMRAM] int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  packet         20   20[BANK0 ] unsigned char [20]
  4030 ;;  result         20    0[BANK0 ] unsigned char [20]
  4031 ;;  size            2   46[BANK0 ] int 
  4032 ;;  error           2   44[BANK0 ] int 
  4033 ;;  instruction     2   42[BANK0 ] int 
  4034 ;;  length          2   40[BANK0 ] int 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  2   47[COMRAM] int 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4044 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4047 ;;      Totals:         7      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4048 ;;Total ram usage:       55 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    2
  4051 ;; This function calls:
  4052 ;;		_getAddressSize
  4053 ;;		_sendAX
  4054 ;; This function is called by:
  4055 ;;		_getByteToSend
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text25
  4060  0017C6                     __ptext25:
  4061                           	opt stack 0
  4062  0017C6                     _writeAXData:
  4063                           	opt stack 22
  4064                           
  4065                           ;ax.c: 253: int size = getAddressSize(address);
  4066                           
  4067                           ;incstack = 0
  4068  0017C6  C032  F001         	movff	writeAXData@address,getAddressSize@address
  4069  0017CA  C033  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  4070  0017CE  ECF7  F00C         	call	_getAddressSize	;wreg free
  4071  0017D2  C001  F0CD         	movff	?_getAddressSize,writeAXData@size
  4072  0017D6  C002  F0CE         	movff	?_getAddressSize+1,writeAXData@size+1
  4073                           
  4074                           ;ax.c: 255: uint8_t packet[20];
  4075                           ;ax.c: 256: uint8_t result[20];
  4076                           ;ax.c: 257: packet[0] = 0xFF;
  4077  0017DA  0100               	movlb	0	; () banked
  4078  0017DC  69B3               	setf	writeAXData@packet& (0+255),b
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;ax.c: 258: packet[1] = 0xFF;
  4082  0017DE  0100               	movlb	0	; () banked
  4083  0017E0  69B4               	setf	(writeAXData@packet+1)& (0+255),b
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;ax.c: 259: packet[2] = id;
  4087  0017E2  C030  F0B5         	movff	writeAXData@id,writeAXData@packet+2
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;ax.c: 260: int length = size + 3;
  4091  0017E6  0E03               	movlw	3
  4092  0017E8  0100               	movlb	0	; () banked
  4093  0017EA  25CD               	addwf	writeAXData@size& (0+255),w,b
  4094  0017EC  0100               	movlb	0	; () banked
  4095  0017EE  6FC7               	movwf	writeAXData@length& (0+255),b
  4096  0017F0  0E00               	movlw	0
  4097  0017F2  0100               	movlb	0	; () banked
  4098  0017F4  21CE               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4099  0017F6  0100               	movlb	0	; () banked
  4100  0017F8  6FC8               	movwf	(writeAXData@length+1)& (0+255),b
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;ax.c: 261: packet[3] = length;
  4104  0017FA  C0C7  F0B6         	movff	writeAXData@length,writeAXData@packet+3
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;ax.c: 262: int instruction = 0x03;
  4108  0017FE  0E00               	movlw	0
  4109  001800  0100               	movlb	0	; () banked
  4110  001802  6FCA               	movwf	(writeAXData@instruction+1)& (0+255),b
  4111  001804  0E03               	movlw	3
  4112  001806  6FC9               	movwf	writeAXData@instruction& (0+255),b
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;ax.c: 263: packet[4] = instruction;
  4116  001808  C0C9  F0B7         	movff	writeAXData@instruction,writeAXData@packet+4
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;ax.c: 264: packet[5] = address;
  4120  00180C  C032  F0B8         	movff	writeAXData@address,writeAXData@packet+5
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;ax.c: 265: if (size == 1) {
  4124  001810  0100               	movlb	0	; () banked
  4125  001812  05CD               	decf	writeAXData@size& (0+255),w,b
  4126  001814  0100               	movlb	0	; () banked
  4127  001816  11CE               	iorwf	(writeAXData@size+1)& (0+255),w,b
  4128  001818  A4D8               	btfss	status,2,c
  4129  00181A  D003               	goto	i2l550
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;ax.c: 266: packet[6] = data;
  4133  00181C  C034  F0B9         	movff	writeAXData@data,writeAXData@packet+6
  4134                           
  4135                           ;ax.c: 267: } else {
  4136  001820  D005               	goto	i2l2320
  4137  001822                     i2l550:
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;ax.c: 268: packet[6] = data & 0xff;
  4141  001822  C034  F0B9         	movff	writeAXData@data,writeAXData@packet+6
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;ax.c: 269: packet[7] = (data >> 8);
  4145  001826  5035               	movf	writeAXData@data+1,w,c
  4146  001828  0100               	movlb	0	; () banked
  4147  00182A  6FBA               	movwf	(writeAXData@packet+7)& (0+255),b
  4148  00182C                     i2l2320:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;ax.c: 270: }
  4152                           ;ax.c: 273: int error = sendAX(packet, 6 + size, result, 0);
  4153  00182C  0EB3               	movlw	low writeAXData@packet
  4154  00182E  6E03               	movwf	sendAX@buffer,c
  4155  001830  0E00               	movlw	high writeAXData@packet
  4156  001832  6E04               	movwf	sendAX@buffer+1,c
  4157  001834  0E06               	movlw	6
  4158  001836  0100               	movlb	0	; () banked
  4159  001838  25CD               	addwf	writeAXData@size& (0+255),w,b
  4160  00183A  6E05               	movwf	sendAX@packetSize,c
  4161  00183C  0E00               	movlw	0
  4162  00183E  0100               	movlb	0	; () banked
  4163  001840  21CE               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4164  001842  6E06               	movwf	sendAX@packetSize+1,c
  4165  001844  0E9F               	movlw	low writeAXData@result
  4166  001846  6E07               	movwf	sendAX@result,c
  4167  001848  0E00               	movlw	high writeAXData@result
  4168  00184A  6E08               	movwf	sendAX@result+1,c
  4169  00184C  0E00               	movlw	0
  4170  00184E  6E0A               	movwf	sendAX@parametersToRead+1,c
  4171  001850  0E00               	movlw	0
  4172  001852  6E09               	movwf	sendAX@parametersToRead,c
  4173  001854  EC95  F007         	call	_sendAX	;wreg free
  4174  001858  6E36               	movwf	??_writeAXData& (0+255),c
  4175  00185A  5036               	movf	??_writeAXData,w,c
  4176  00185C  0100               	movlb	0	; () banked
  4177  00185E  6FCB               	movwf	writeAXData@error& (0+255),b
  4178  001860  6BCC               	clrf	(writeAXData@error+1)& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ax.c: 274: return error;
  4182  001862  C0CB  F030         	movff	writeAXData@error,?_writeAXData
  4183  001866  C0CC  F031         	movff	writeAXData@error+1,?_writeAXData+1
  4184  00186A  0012               	return	
  4185  00186C                     __end_of_writeAXData:
  4186                           	opt stack 0
  4187                           pclatu	equ	0xFFB
  4188                           pclath	equ	0xFFA
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           prodh	equ	0xFF4
  4194                           prodl	equ	0xFF3
  4195                           intcon	equ	0xFF2
  4196                           postinc0	equ	0xFEE
  4197                           fsr0h	equ	0xFEA
  4198                           fsr0l	equ	0xFE9
  4199                           wreg	equ	0xFE8
  4200                           fsr1h	equ	0xFE2
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _readAXData *****************
  4210 ;; Defined at:
  4211 ;;		line 225 in file "ax.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  id              2   47[COMRAM] int 
  4214 ;;  address         2   49[COMRAM] int 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  packet         20   22[BANK0 ] unsigned char [20]
  4217 ;;  result         20    0[BANK0 ] unsigned char [20]
  4218 ;;  size            2   48[BANK0 ] int 
  4219 ;;  instruction     2   46[BANK0 ] int 
  4220 ;;  length          2   44[BANK0 ] int 
  4221 ;;  nbParameters    2   42[BANK0 ] int 
  4222 ;;  error           2   20[BANK0 ] int 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2   47[COMRAM] int 
  4225 ;; Registers used:
  4226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4233 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4235 ;;      Totals:         6      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4236 ;;Total ram usage:       56 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    2
  4239 ;; This function calls:
  4240 ;;		_getAddressSize
  4241 ;;		_sendAX
  4242 ;; This function is called by:
  4243 ;;		_getByteToSend
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text26
  4248  001668                     __ptext26:
  4249                           	opt stack 0
  4250  001668                     _readAXData:
  4251                           	opt stack 22
  4252                           
  4253                           ;ax.c: 226: int size = getAddressSize(address);
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;incstack = 0
  4257  001668  C032  F001         	movff	readAXData@address,getAddressSize@address
  4258  00166C  C033  F002         	movff	readAXData@address+1,getAddressSize@address+1
  4259  001670  ECF7  F00C         	call	_getAddressSize	;wreg free
  4260  001674  C001  F0CF         	movff	?_getAddressSize,readAXData@size
  4261  001678  C002  F0D0         	movff	?_getAddressSize+1,readAXData@size+1
  4262                           
  4263                           ;ax.c: 228: uint8_t packet[20];
  4264                           ;ax.c: 229: uint8_t result[20];
  4265                           ;ax.c: 230: packet[0] = 0xFF;
  4266  00167C  0100               	movlb	0	; () banked
  4267  00167E  69B5               	setf	readAXData@packet& (0+255),b
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;ax.c: 231: packet[1] = 0xFF;
  4271  001680  0100               	movlb	0	; () banked
  4272  001682  69B6               	setf	(readAXData@packet+1)& (0+255),b
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;ax.c: 232: packet[2] = id;
  4276  001684  C030  F0B7         	movff	readAXData@id,readAXData@packet+2
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;ax.c: 233: int nbParameters = 2;
  4280  001688  0E00               	movlw	0
  4281  00168A  0100               	movlb	0	; () banked
  4282  00168C  6FCA               	movwf	(readAXData@nbParameters+1)& (0+255),b
  4283  00168E  0E02               	movlw	2
  4284  001690  6FC9               	movwf	readAXData@nbParameters& (0+255),b
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;ax.c: 234: int length = nbParameters + 2;
  4288  001692  0E02               	movlw	2
  4289  001694  0100               	movlb	0	; () banked
  4290  001696  25C9               	addwf	readAXData@nbParameters& (0+255),w,b
  4291  001698  0100               	movlb	0	; () banked
  4292  00169A  6FCB               	movwf	readAXData@length& (0+255),b
  4293  00169C  0E00               	movlw	0
  4294  00169E  0100               	movlb	0	; () banked
  4295  0016A0  21CA               	addwfc	(readAXData@nbParameters+1)& (0+255),w,b
  4296  0016A2  0100               	movlb	0	; () banked
  4297  0016A4  6FCC               	movwf	(readAXData@length+1)& (0+255),b
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;ax.c: 235: packet[3] = length;
  4301  0016A6  C0CB  F0B8         	movff	readAXData@length,readAXData@packet+3
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;ax.c: 236: int instruction = 0x02;
  4305  0016AA  0E00               	movlw	0
  4306  0016AC  0100               	movlb	0	; () banked
  4307  0016AE  6FCE               	movwf	(readAXData@instruction+1)& (0+255),b
  4308  0016B0  0E02               	movlw	2
  4309  0016B2  6FCD               	movwf	readAXData@instruction& (0+255),b
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;ax.c: 237: packet[4] = instruction;
  4313  0016B4  C0CD  F0B9         	movff	readAXData@instruction,readAXData@packet+4
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;ax.c: 238: packet[5] = address;
  4317  0016B8  C032  F0BA         	movff	readAXData@address,readAXData@packet+5
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;ax.c: 239: packet[6] = size;
  4321  0016BC  C0CF  F0BB         	movff	readAXData@size,readAXData@packet+6
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;ax.c: 242: int error = sendAX(packet, 7, result, 1);
  4325  0016C0  0EB5               	movlw	low readAXData@packet
  4326  0016C2  6E03               	movwf	sendAX@buffer,c
  4327  0016C4  0E00               	movlw	high readAXData@packet
  4328  0016C6  6E04               	movwf	sendAX@buffer+1,c
  4329  0016C8  0E00               	movlw	0
  4330  0016CA  6E06               	movwf	sendAX@packetSize+1,c
  4331  0016CC  0E07               	movlw	7
  4332  0016CE  6E05               	movwf	sendAX@packetSize,c
  4333  0016D0  0E9F               	movlw	low readAXData@result
  4334  0016D2  6E07               	movwf	sendAX@result,c
  4335  0016D4  0E00               	movlw	high readAXData@result
  4336  0016D6  6E08               	movwf	sendAX@result+1,c
  4337  0016D8  0E00               	movlw	0
  4338  0016DA  6E0A               	movwf	sendAX@parametersToRead+1,c
  4339  0016DC  0E01               	movlw	1
  4340  0016DE  6E09               	movwf	sendAX@parametersToRead,c
  4341  0016E0  EC95  F007         	call	_sendAX	;wreg free
  4342  0016E4  6E34               	movwf	??_readAXData& (0+255),c
  4343  0016E6  5034               	movf	??_readAXData,w,c
  4344  0016E8  0100               	movlb	0	; () banked
  4345  0016EA  6FB3               	movwf	readAXData@error& (0+255),b
  4346  0016EC  6BB4               	clrf	(readAXData@error+1)& (0+255),b
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;ax.c: 243: if (size == 1) {
  4350  0016EE  0100               	movlb	0	; () banked
  4351  0016F0  05CF               	decf	readAXData@size& (0+255),w,b
  4352  0016F2  0100               	movlb	0	; () banked
  4353  0016F4  11D0               	iorwf	(readAXData@size+1)& (0+255),w,b
  4354  0016F6  A4D8               	btfss	status,2,c
  4355  0016F8  D004               	goto	i2l2292
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;ax.c: 245: return result[5];
  4359  0016FA  C0A4  F030         	movff	readAXData@result+5,?_readAXData
  4360  0016FE  6A31               	clrf	?_readAXData+1,c
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;ax.c: 246: } else {
  4364  001700  0012               	return	
  4365  001702                     i2l2292:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;ax.c: 248: return result[5] + result[6]*256;
  4369  001702  0100               	movlb	0	; () banked
  4370  001704  51A5               	movf	(readAXData@result+6)& (0+255),w,b
  4371  001706  6E35               	movwf	(??_readAXData+1)& (0+255),c
  4372  001708  6A34               	clrf	??_readAXData& (0+255),c
  4373  00170A  0100               	movlb	0	; () banked
  4374  00170C  51A4               	movf	(readAXData@result+5)& (0+255),w,b
  4375  00170E  2434               	addwf	??_readAXData,w,c
  4376  001710  6E30               	movwf	?_readAXData,c
  4377  001712  0E00               	movlw	0
  4378  001714  2035               	addwfc	??_readAXData+1,w,c
  4379  001716  6E31               	movwf	?_readAXData+1,c
  4380                           
  4381                           ; BSR set to: 0
  4382  001718  0012               	return	
  4383  00171A                     __end_of_readAXData:
  4384                           	opt stack 0
  4385                           pclatu	equ	0xFFB
  4386                           pclath	equ	0xFFA
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           intcon	equ	0xFF2
  4394                           postinc0	equ	0xFEE
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           fsr1h	equ	0xFE2
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _getAddressSize *****************
  4408 ;; Defined at:
  4409 ;;		line 24 in file "ax.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;  address         2    0[COMRAM] int 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  2    0[COMRAM] int 
  4416 ;; Registers used:
  4417 ;;		wreg, status,2, status,0
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4426 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4427 ;;Total ram usage:        4 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_readAXData
  4433 ;;		_writeAXData
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text27
  4438  0019EE                     __ptext27:
  4439                           	opt stack 0
  4440  0019EE                     _getAddressSize:
  4441                           	opt stack 23
  4442                           
  4443                           ;ax.c: 25: switch (address) {
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;incstack = 0
  4447  0019EE  D00A               	goto	i2l2112
  4448  0019F0                     i2l2102:
  4449                           
  4450                           ;ax.c: 27: case 6:
  4451                           ;ax.c: 28: case 8:
  4452                           ;ax.c: 29: case 14:
  4453                           ;ax.c: 30: case 20:
  4454                           ;ax.c: 31: case 22:
  4455                           ;ax.c: 32: case 30:
  4456                           ;ax.c: 33: case 32:
  4457                           ;ax.c: 34: case 34:
  4458                           ;ax.c: 35: case 36:
  4459                           ;ax.c: 36: case 38:
  4460                           ;ax.c: 37: case 40:
  4461                           ;ax.c: 38: case 48:
  4462                           ;ax.c: 39: return 2;
  4463  0019F0  0E00               	movlw	0
  4464  0019F2  6E02               	movwf	?_getAddressSize+1,c
  4465  0019F4  0E02               	movlw	2
  4466  0019F6  6E01               	movwf	?_getAddressSize,c
  4467  0019F8  0012               	return	
  4468  0019FA                     i2l2106:
  4469                           
  4470                           ;ax.c: 41: return 1;
  4471  0019FA  0E00               	movlw	0
  4472  0019FC  6E02               	movwf	?_getAddressSize+1,c
  4473  0019FE  0E01               	movlw	1
  4474  001A00  6E01               	movwf	?_getAddressSize,c
  4475                           
  4476                           ;ax.c: 42: }
  4477  001A02  0012               	return	
  4478  001A04                     i2l2112:
  4479  001A04  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  4480  001A08  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  4481                           
  4482                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4483                           ; Switch size 1, requested type "space"
  4484                           ; Number of cases is 1, Range of values is 0 to 0
  4485                           ; switch strategies available:
  4486                           ; Name         Instructions Cycles
  4487                           ; simple_byte            4     3 (average)
  4488                           ;	Chosen strategy is simple_byte
  4489  001A0C  5004               	movf	??_getAddressSize+1,w,c
  4490  001A0E  0A00               	xorlw	0	; case 0
  4491  001A10  A4D8               	btfss	status,2,c
  4492  001A12  D7F3               	goto	i2l2106
  4493                           
  4494                           ; Switch size 1, requested type "space"
  4495                           ; Number of cases is 13, Range of values is 0 to 48
  4496                           ; switch strategies available:
  4497                           ; Name         Instructions Cycles
  4498                           ; simple_byte           40    21 (average)
  4499                           ;	Chosen strategy is simple_byte
  4500  001A14  5003               	movf	??_getAddressSize,w,c
  4501  001A16  0A00               	xorlw	0	; case 0
  4502  001A18  B4D8               	btfsc	status,2,c
  4503  001A1A  D7EA               	goto	i2l2102
  4504  001A1C  0A06               	xorlw	6	; case 6
  4505  001A1E  B4D8               	btfsc	status,2,c
  4506  001A20  D7E7               	goto	i2l2102
  4507  001A22  0A0E               	xorlw	14	; case 8
  4508  001A24  B4D8               	btfsc	status,2,c
  4509  001A26  D7E4               	goto	i2l2102
  4510  001A28  0A06               	xorlw	6	; case 14
  4511  001A2A  B4D8               	btfsc	status,2,c
  4512  001A2C  D7E1               	goto	i2l2102
  4513  001A2E  0A1A               	xorlw	26	; case 20
  4514  001A30  B4D8               	btfsc	status,2,c
  4515  001A32  D7DE               	goto	i2l2102
  4516  001A34  0A02               	xorlw	2	; case 22
  4517  001A36  B4D8               	btfsc	status,2,c
  4518  001A38  D7DB               	goto	i2l2102
  4519  001A3A  0A08               	xorlw	8	; case 30
  4520  001A3C  B4D8               	btfsc	status,2,c
  4521  001A3E  D7D8               	goto	i2l2102
  4522  001A40  0A3E               	xorlw	62	; case 32
  4523  001A42  B4D8               	btfsc	status,2,c
  4524  001A44  D7D5               	goto	i2l2102
  4525  001A46  0A02               	xorlw	2	; case 34
  4526  001A48  B4D8               	btfsc	status,2,c
  4527  001A4A  D7D2               	goto	i2l2102
  4528  001A4C  0A06               	xorlw	6	; case 36
  4529  001A4E  B4D8               	btfsc	status,2,c
  4530  001A50  D7CF               	goto	i2l2102
  4531  001A52  0A02               	xorlw	2	; case 38
  4532  001A54  B4D8               	btfsc	status,2,c
  4533  001A56  D7CC               	goto	i2l2102
  4534  001A58  0A0E               	xorlw	14	; case 40
  4535  001A5A  B4D8               	btfsc	status,2,c
  4536  001A5C  D7C9               	goto	i2l2102
  4537  001A5E  0A18               	xorlw	24	; case 48
  4538  001A60  B4D8               	btfsc	status,2,c
  4539  001A62  D7C6               	goto	i2l2102
  4540  001A64  D7CA               	goto	i2l2106
  4541  001A66                     __end_of_getAddressSize:
  4542                           	opt stack 0
  4543                           pclatu	equ	0xFFB
  4544                           pclath	equ	0xFFA
  4545                           tblptru	equ	0xFF8
  4546                           tblptrh	equ	0xFF7
  4547                           tblptrl	equ	0xFF6
  4548                           tablat	equ	0xFF5
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           postinc0	equ	0xFEE
  4553                           fsr0h	equ	0xFEA
  4554                           fsr0l	equ	0xFE9
  4555                           wreg	equ	0xFE8
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _pingAX *****************
  4566 ;; Defined at:
  4567 ;;		line 208 in file "ax.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  id              2   47[COMRAM] int 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  packet         20   20[BANK0 ] unsigned char [20]
  4572 ;;  result         20    0[BANK0 ] unsigned char [20]
  4573 ;;  error           2   46[BANK0 ] int 
  4574 ;;  instruction     2   44[BANK0 ] int 
  4575 ;;  length          2   42[BANK0 ] int 
  4576 ;;  nbParameters    2   40[BANK0 ] int 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  2   47[COMRAM] int 
  4579 ;; Registers used:
  4580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4587 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4589 ;;      Totals:         3      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4590 ;;Total ram usage:       51 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    2
  4593 ;; This function calls:
  4594 ;;		_sendAX
  4595 ;; This function is called by:
  4596 ;;		_getByteToSend
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text28
  4601  001A66                     __ptext28:
  4602                           	opt stack 0
  4603  001A66                     _pingAX:
  4604                           	opt stack 22
  4605                           
  4606                           ;ax.c: 209: uint8_t packet[20];
  4607                           ;ax.c: 210: uint8_t result[20];
  4608                           ;ax.c: 211: packet[0] = 0xFF;
  4609                           
  4610                           ;incstack = 0
  4611  001A66  0100               	movlb	0	; () banked
  4612  001A68  69B3               	setf	pingAX@packet& (0+255),b
  4613                           
  4614                           ;ax.c: 212: packet[1] = 0xFF;
  4615  001A6A  0100               	movlb	0	; () banked
  4616  001A6C  69B4               	setf	(pingAX@packet+1)& (0+255),b
  4617                           
  4618                           ;ax.c: 213: packet[2] = id;
  4619  001A6E  C030  F0B5         	movff	pingAX@id,pingAX@packet+2
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;ax.c: 214: int nbParameters = 0;
  4623  001A72  0E00               	movlw	0
  4624  001A74  0100               	movlb	0	; () banked
  4625  001A76  6FC8               	movwf	(pingAX@nbParameters+1)& (0+255),b
  4626  001A78  0E00               	movlw	0
  4627  001A7A  6FC7               	movwf	pingAX@nbParameters& (0+255),b
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;ax.c: 215: int length = nbParameters + 2;
  4631  001A7C  0E02               	movlw	2
  4632  001A7E  0100               	movlb	0	; () banked
  4633  001A80  25C7               	addwf	pingAX@nbParameters& (0+255),w,b
  4634  001A82  0100               	movlb	0	; () banked
  4635  001A84  6FC9               	movwf	pingAX@length& (0+255),b
  4636  001A86  0E00               	movlw	0
  4637  001A88  0100               	movlb	0	; () banked
  4638  001A8A  21C8               	addwfc	(pingAX@nbParameters+1)& (0+255),w,b
  4639  001A8C  0100               	movlb	0	; () banked
  4640  001A8E  6FCA               	movwf	(pingAX@length+1)& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;ax.c: 216: packet[3] = length;
  4644  001A90  C0C9  F0B6         	movff	pingAX@length,pingAX@packet+3
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;ax.c: 217: int instruction = 0x01;
  4648  001A94  0E00               	movlw	0
  4649  001A96  0100               	movlb	0	; () banked
  4650  001A98  6FCC               	movwf	(pingAX@instruction+1)& (0+255),b
  4651  001A9A  0E01               	movlw	1
  4652  001A9C  6FCB               	movwf	pingAX@instruction& (0+255),b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;ax.c: 218: packet[4] = instruction;
  4656  001A9E  C0CB  F0B7         	movff	pingAX@instruction,pingAX@packet+4
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;ax.c: 221: int error = sendAX(packet, 5, result, 0);
  4660  001AA2  0EB3               	movlw	low pingAX@packet
  4661  001AA4  6E03               	movwf	sendAX@buffer,c
  4662  001AA6  0E00               	movlw	high pingAX@packet
  4663  001AA8  6E04               	movwf	sendAX@buffer+1,c
  4664  001AAA  0E00               	movlw	0
  4665  001AAC  6E06               	movwf	sendAX@packetSize+1,c
  4666  001AAE  0E05               	movlw	5
  4667  001AB0  6E05               	movwf	sendAX@packetSize,c
  4668  001AB2  0E9F               	movlw	low pingAX@result
  4669  001AB4  6E07               	movwf	sendAX@result,c
  4670  001AB6  0E00               	movlw	high pingAX@result
  4671  001AB8  6E08               	movwf	sendAX@result+1,c
  4672  001ABA  0E00               	movlw	0
  4673  001ABC  6E0A               	movwf	sendAX@parametersToRead+1,c
  4674  001ABE  0E00               	movlw	0
  4675  001AC0  6E09               	movwf	sendAX@parametersToRead,c
  4676  001AC2  EC95  F007         	call	_sendAX	;wreg free
  4677  001AC6  6E32               	movwf	??_pingAX& (0+255),c
  4678  001AC8  5032               	movf	??_pingAX,w,c
  4679  001ACA  0100               	movlb	0	; () banked
  4680  001ACC  6FCD               	movwf	pingAX@error& (0+255),b
  4681  001ACE  6BCE               	clrf	(pingAX@error+1)& (0+255),b
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;ax.c: 222: return error;
  4685  001AD0  C0CD  F030         	movff	pingAX@error,?_pingAX
  4686  001AD4  C0CE  F031         	movff	pingAX@error+1,?_pingAX+1
  4687  001AD8  0012               	return	
  4688  001ADA                     __end_of_pingAX:
  4689                           	opt stack 0
  4690                           pclatu	equ	0xFFB
  4691                           pclath	equ	0xFFA
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           postinc0	equ	0xFEE
  4700                           fsr0h	equ	0xFEA
  4701                           fsr0l	equ	0xFE9
  4702                           wreg	equ	0xFE8
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function _sendAX *****************
  4713 ;; Defined at:
  4714 ;;		line 131 in file "ax.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  buffer          2    2[COMRAM] PTR unsigned char 
  4717 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  4718 ;;  packetSize      2    4[COMRAM] int 
  4719 ;;  result          2    6[COMRAM] PTR unsigned char 
  4720 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  4721 ;;  parametersTo    2    8[COMRAM] int 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  i               2   41[COMRAM] int 
  4724 ;;  i               2   39[COMRAM] int 
  4725 ;;  i               2   35[COMRAM] int 
  4726 ;;  i               2   33[COMRAM] int 
  4727 ;;  i               2   31[COMRAM] int 
  4728 ;;  stop            2   45[COMRAM] int 
  4729 ;;  r0              2   37[COMRAM] int 
  4730 ;;  count           2   29[COMRAM] int 
  4731 ;;  param6          2   27[COMRAM] int 
  4732 ;;  param5          2   25[COMRAM] int 
  4733 ;;  param4          2   23[COMRAM] int 
  4734 ;;  param3          2   21[COMRAM] int 
  4735 ;;  param2          2   19[COMRAM] int 
  4736 ;;  param1          2   17[COMRAM] int 
  4737 ;;  param0          2   15[COMRAM] int 
  4738 ;;  checksumResu    1   44[COMRAM] unsigned char 
  4739 ;;  checksum        1   43[COMRAM] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      unsigned char 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4749 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4750 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4751 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4752 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4753 ;;Total ram usage:       45 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    1
  4756 ;; This function calls:
  4757 ;;		_EUSART1_Read
  4758 ;;		_EUSART1_Write
  4759 ;; This function is called by:
  4760 ;;		_pingAX
  4761 ;;		_readAXData
  4762 ;;		_writeAXData
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text29
  4767  000F2A                     __ptext29:
  4768                           	opt stack 0
  4769  000F2A                     _sendAX:
  4770                           	opt stack 22
  4771                           
  4772                           ;ax.c: 132: uint8_t checksum = 0;
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;incstack = 0
  4776  000F2A  0E00               	movlw	0
  4777  000F2C  6E2C               	movwf	sendAX@checksum,c
  4778                           
  4779                           ;ax.c: 133: do { LATDbits.LATD4 = 1; } while(0);
  4780  000F2E  888C               	bsf	3980,4,c	;volatile
  4781                           
  4782                           ;ax.c: 134: for (int i = 2; i < packetSize; i++) {
  4783  000F30  0E00               	movlw	0
  4784  000F32  6E21               	movwf	sendAX@i+1,c
  4785  000F34  0E02               	movlw	2
  4786  000F36  6E20               	movwf	sendAX@i,c
  4787  000F38  D00A               	goto	i2l2126
  4788  000F3A                     i2l2122:
  4789                           
  4790                           ;ax.c: 135: checksum += buffer[i];
  4791  000F3A  5020               	movf	sendAX@i,w,c
  4792  000F3C  2403               	addwf	sendAX@buffer,w,c
  4793  000F3E  6ED9               	movwf	fsr2l,c
  4794  000F40  5021               	movf	sendAX@i+1,w,c
  4795  000F42  2004               	addwfc	sendAX@buffer+1,w,c
  4796  000F44  6EDA               	movwf	fsr2h,c
  4797  000F46  50DF               	movf	indf2,w,c
  4798  000F48  262C               	addwf	sendAX@checksum,f,c
  4799  000F4A  4A20               	infsnz	sendAX@i,f,c
  4800  000F4C  2A21               	incf	sendAX@i+1,f,c
  4801  000F4E                     i2l2126:
  4802  000F4E  5005               	movf	sendAX@packetSize,w,c
  4803  000F50  5C20               	subwf	sendAX@i,w,c
  4804  000F52  5021               	movf	sendAX@i+1,w,c
  4805  000F54  0A80               	xorlw	128
  4806  000F56  6E0B               	movwf	??_sendAX& (0+255),c
  4807  000F58  5006               	movf	sendAX@packetSize+1,w,c
  4808  000F5A  0A80               	xorlw	128
  4809  000F5C  580B               	subwfb	??_sendAX& (0+255),w,c
  4810  000F5E  A0D8               	btfss	status,0,c
  4811  000F60  D7EC               	goto	i2l2122
  4812                           
  4813                           ;ax.c: 136: }
  4814                           ;ax.c: 137: checksum = ~checksum;
  4815  000F62  1E2C               	comf	sendAX@checksum,f,c
  4816                           
  4817                           ;ax.c: 140: for (int i = 0; i < packetSize; i++) {
  4818  000F64  0E00               	movlw	0
  4819  000F66  6E23               	movwf	sendAX@i_1374+1,c
  4820  000F68  0E00               	movlw	0
  4821  000F6A  6E22               	movwf	sendAX@i_1374,c
  4822  000F6C  D00B               	goto	i2l2136
  4823  000F6E                     i2l2132:
  4824                           
  4825                           ;ax.c: 141: EUSART1_Write(buffer[i]);
  4826  000F6E  5022               	movf	sendAX@i_1374,w,c
  4827  000F70  2403               	addwf	sendAX@buffer,w,c
  4828  000F72  6ED9               	movwf	fsr2l,c
  4829  000F74  5023               	movf	sendAX@i_1374+1,w,c
  4830  000F76  2004               	addwfc	sendAX@buffer+1,w,c
  4831  000F78  6EDA               	movwf	fsr2h,c
  4832  000F7A  50DF               	movf	indf2,w,c
  4833  000F7C  ECA5  F00E         	call	_EUSART1_Write
  4834  000F80  4A22               	infsnz	sendAX@i_1374,f,c
  4835  000F82  2A23               	incf	sendAX@i_1374+1,f,c
  4836  000F84                     i2l2136:
  4837  000F84  5005               	movf	sendAX@packetSize,w,c
  4838  000F86  5C22               	subwf	sendAX@i_1374,w,c
  4839  000F88  5023               	movf	sendAX@i_1374+1,w,c
  4840  000F8A  0A80               	xorlw	128
  4841  000F8C  6E0B               	movwf	??_sendAX& (0+255),c
  4842  000F8E  5006               	movf	sendAX@packetSize+1,w,c
  4843  000F90  0A80               	xorlw	128
  4844  000F92  580B               	subwfb	??_sendAX& (0+255),w,c
  4845  000F94  A0D8               	btfss	status,0,c
  4846  000F96  D7EB               	goto	i2l2132
  4847                           
  4848                           ;ax.c: 142: }
  4849                           ;ax.c: 143: EUSART1_Write(checksum);
  4850  000F98  502C               	movf	sendAX@checksum,w,c
  4851  000F9A  ECA5  F00E         	call	_EUSART1_Write
  4852                           
  4853                           ;ax.c: 145: int stop = 6 + parametersToRead;
  4854  000F9E  0E06               	movlw	6
  4855  000FA0  2409               	addwf	sendAX@parametersToRead,w,c
  4856  000FA2  6E2E               	movwf	sendAX@stop,c
  4857  000FA4  0E00               	movlw	0
  4858  000FA6  200A               	addwfc	sendAX@parametersToRead+1,w,c
  4859  000FA8  6E2F               	movwf	sendAX@stop+1,c
  4860                           
  4861                           ;ax.c: 147: for (int i = 0; i < stop; i++) {
  4862  000FAA  0E00               	movlw	0
  4863  000FAC  6E25               	movwf	sendAX@i_1377+1,c
  4864  000FAE  0E00               	movlw	0
  4865  000FB0  6E24               	movwf	sendAX@i_1377,c
  4866  000FB2  D00A               	goto	i2l2148
  4867  000FB4                     i2l2144:
  4868                           
  4869                           ;ax.c: 148: result[i] = 0X07;
  4870  000FB4  5024               	movf	sendAX@i_1377,w,c
  4871  000FB6  2407               	addwf	sendAX@result,w,c
  4872  000FB8  6ED9               	movwf	fsr2l,c
  4873  000FBA  5025               	movf	sendAX@i_1377+1,w,c
  4874  000FBC  2008               	addwfc	sendAX@result+1,w,c
  4875  000FBE  6EDA               	movwf	fsr2h,c
  4876  000FC0  0E07               	movlw	7
  4877  000FC2  6EDF               	movwf	indf2,c
  4878  000FC4  4A24               	infsnz	sendAX@i_1377,f,c
  4879  000FC6  2A25               	incf	sendAX@i_1377+1,f,c
  4880  000FC8                     i2l2148:
  4881  000FC8  502E               	movf	sendAX@stop,w,c
  4882  000FCA  5C24               	subwf	sendAX@i_1377,w,c
  4883  000FCC  5025               	movf	sendAX@i_1377+1,w,c
  4884  000FCE  0A80               	xorlw	128
  4885  000FD0  6E0B               	movwf	??_sendAX& (0+255),c
  4886  000FD2  502F               	movf	sendAX@stop+1,w,c
  4887  000FD4  0A80               	xorlw	128
  4888  000FD6  580B               	subwfb	??_sendAX& (0+255),w,c
  4889  000FD8  A0D8               	btfss	status,0,c
  4890  000FDA  D7EC               	goto	i2l2144
  4891                           
  4892                           ;ax.c: 149: }
  4893                           ;ax.c: 159: _delay((unsigned long)((10)*(64000000/4000000.0)));
  4894  000FDC  0E35               	movlw	53
  4895  000FDE                     i2u168_47:
  4896  000FDE  2EE8               	decfsz	wreg,f,c
  4897  000FE0  D7FE               	bra	i2u168_47
  4898  000FE2  F000               	nop	
  4899                           
  4900                           ;ax.c: 160: do { LATDbits.LATD4 = 0; } while(0);
  4901  000FE4  988C               	bcf	3980,4,c	;volatile
  4902                           
  4903                           ;ax.c: 163: int count = 0;
  4904  000FE6  0E00               	movlw	0
  4905  000FE8  6E1F               	movwf	sendAX@count+1,c
  4906  000FEA  0E00               	movlw	0
  4907  000FEC  6E1E               	movwf	sendAX@count,c
  4908                           
  4909                           ;ax.c: 164: int r0 = EUSART1_Read();
  4910  000FEE  ECE6  F00D         	call	_EUSART1_Read	;wreg free
  4911  000FF2  6E0B               	movwf	??_sendAX& (0+255),c
  4912  000FF4  500B               	movf	??_sendAX,w,c
  4913  000FF6  6E26               	movwf	sendAX@r0,c
  4914  000FF8  6A27               	clrf	sendAX@r0+1,c
  4915                           
  4916                           ;ax.c: 165: while (r0 != 0xFF) {
  4917  000FFA  D010               	goto	i2l2166
  4918  000FFC                     i2l2158:
  4919                           
  4920                           ;ax.c: 166: r0 = EUSART1_Read();
  4921  000FFC  ECE6  F00D         	call	_EUSART1_Read	;wreg free
  4922  001000  6E0B               	movwf	??_sendAX& (0+255),c
  4923  001002  500B               	movf	??_sendAX,w,c
  4924  001004  6E26               	movwf	sendAX@r0,c
  4925  001006  6A27               	clrf	sendAX@r0+1,c
  4926                           
  4927                           ;ax.c: 167: count++;
  4928  001008  4A1E               	infsnz	sendAX@count,f,c
  4929  00100A  2A1F               	incf	sendAX@count+1,f,c
  4930                           
  4931                           ;ax.c: 169: if (count > 5) {
  4932  00100C  BE1F               	btfsc	sendAX@count+1,7,c
  4933  00100E  D006               	goto	i2l2166
  4934  001010  501F               	movf	sendAX@count+1,w,c
  4935  001012  E108               	bnz	i2l2168
  4936  001014  0E06               	movlw	6
  4937  001016  5C1E               	subwf	sendAX@count,w,c
  4938  001018  B0D8               	btfsc	status,0,c
  4939  00101A  D004               	goto	i2l2168
  4940  00101C                     i2l2166:
  4941  00101C  2826               	incf	sendAX@r0,w,c
  4942  00101E  1027               	iorwf	sendAX@r0+1,w,c
  4943  001020  A4D8               	btfss	status,2,c
  4944  001022  D7EC               	goto	i2l2158
  4945  001024                     i2l2168:
  4946                           
  4947                           ;ax.c: 171: }
  4948                           ;ax.c: 172: }
  4949                           ;ax.c: 173: result[0] = r0;
  4950  001024  C007  FFD9         	movff	sendAX@result,fsr2l
  4951  001028  C008  FFDA         	movff	sendAX@result+1,fsr2h
  4952  00102C  C026  FFDF         	movff	sendAX@r0,indf2
  4953                           
  4954                           ;ax.c: 175: for (int i = 1; i < stop; i++) {
  4955  001030  0E00               	movlw	0
  4956  001032  6E29               	movwf	sendAX@i_1381+1,c
  4957  001034  0E01               	movlw	1
  4958  001036  6E28               	movwf	sendAX@i_1381,c
  4959  001038  D00B               	goto	i2l2176
  4960  00103A                     i2l2172:
  4961                           
  4962                           ;ax.c: 176: result[i] = EUSART1_Read();
  4963  00103A  5028               	movf	sendAX@i_1381,w,c
  4964  00103C  2407               	addwf	sendAX@result,w,c
  4965  00103E  6ED9               	movwf	fsr2l,c
  4966  001040  5029               	movf	sendAX@i_1381+1,w,c
  4967  001042  2008               	addwfc	sendAX@result+1,w,c
  4968  001044  6EDA               	movwf	fsr2h,c
  4969  001046  ECE6  F00D         	call	_EUSART1_Read	;wreg free
  4970  00104A  6EDF               	movwf	indf2,c
  4971  00104C  4A28               	infsnz	sendAX@i_1381,f,c
  4972  00104E  2A29               	incf	sendAX@i_1381+1,f,c
  4973  001050                     i2l2176:
  4974  001050  502E               	movf	sendAX@stop,w,c
  4975  001052  5C28               	subwf	sendAX@i_1381,w,c
  4976  001054  5029               	movf	sendAX@i_1381+1,w,c
  4977  001056  0A80               	xorlw	128
  4978  001058  6E0B               	movwf	??_sendAX& (0+255),c
  4979  00105A  502F               	movf	sendAX@stop+1,w,c
  4980  00105C  0A80               	xorlw	128
  4981  00105E  580B               	subwfb	??_sendAX& (0+255),w,c
  4982  001060  A0D8               	btfss	status,0,c
  4983  001062  D7EB               	goto	i2l2172
  4984                           
  4985                           ;ax.c: 177: }
  4986                           ;ax.c: 179: int param0 = result[0];
  4987  001064  C007  FFD9         	movff	sendAX@result,fsr2l
  4988  001068  C008  FFDA         	movff	sendAX@result+1,fsr2h
  4989  00106C  50DF               	movf	indf2,w,c
  4990  00106E  6E0B               	movwf	??_sendAX& (0+255),c
  4991  001070  500B               	movf	??_sendAX,w,c
  4992  001072  6E10               	movwf	sendAX@param0,c
  4993  001074  6A11               	clrf	sendAX@param0+1,c
  4994                           
  4995                           ;ax.c: 180: int param1 = result[1];
  4996  001076  EE20 F001          	lfsr	2,1
  4997  00107A  5007               	movf	sendAX@result,w,c
  4998  00107C  26D9               	addwf	fsr2l,f,c
  4999  00107E  5008               	movf	sendAX@result+1,w,c
  5000  001080  22DA               	addwfc	fsr2h,f,c
  5001  001082  50DF               	movf	indf2,w,c
  5002  001084  6E0B               	movwf	??_sendAX& (0+255),c
  5003  001086  500B               	movf	??_sendAX,w,c
  5004  001088  6E12               	movwf	sendAX@param1,c
  5005  00108A  6A13               	clrf	sendAX@param1+1,c
  5006                           
  5007                           ;ax.c: 181: int param2 = result[2];
  5008  00108C  EE20 F002          	lfsr	2,2
  5009  001090  5007               	movf	sendAX@result,w,c
  5010  001092  26D9               	addwf	fsr2l,f,c
  5011  001094  5008               	movf	sendAX@result+1,w,c
  5012  001096  22DA               	addwfc	fsr2h,f,c
  5013  001098  50DF               	movf	indf2,w,c
  5014  00109A  6E0B               	movwf	??_sendAX& (0+255),c
  5015  00109C  500B               	movf	??_sendAX,w,c
  5016  00109E  6E14               	movwf	sendAX@param2,c
  5017  0010A0  6A15               	clrf	sendAX@param2+1,c
  5018                           
  5019                           ;ax.c: 182: int param3 = result[3];
  5020  0010A2  EE20 F003          	lfsr	2,3
  5021  0010A6  5007               	movf	sendAX@result,w,c
  5022  0010A8  26D9               	addwf	fsr2l,f,c
  5023  0010AA  5008               	movf	sendAX@result+1,w,c
  5024  0010AC  22DA               	addwfc	fsr2h,f,c
  5025  0010AE  50DF               	movf	indf2,w,c
  5026  0010B0  6E0B               	movwf	??_sendAX& (0+255),c
  5027  0010B2  500B               	movf	??_sendAX,w,c
  5028  0010B4  6E16               	movwf	sendAX@param3,c
  5029  0010B6  6A17               	clrf	sendAX@param3+1,c
  5030                           
  5031                           ;ax.c: 183: int param4 = result[4];
  5032  0010B8  EE20 F004          	lfsr	2,4
  5033  0010BC  5007               	movf	sendAX@result,w,c
  5034  0010BE  26D9               	addwf	fsr2l,f,c
  5035  0010C0  5008               	movf	sendAX@result+1,w,c
  5036  0010C2  22DA               	addwfc	fsr2h,f,c
  5037  0010C4  50DF               	movf	indf2,w,c
  5038  0010C6  6E0B               	movwf	??_sendAX& (0+255),c
  5039  0010C8  500B               	movf	??_sendAX,w,c
  5040  0010CA  6E18               	movwf	sendAX@param4,c
  5041  0010CC  6A19               	clrf	sendAX@param4+1,c
  5042                           
  5043                           ;ax.c: 184: int param5 = result[5];
  5044  0010CE  EE20 F005          	lfsr	2,5
  5045  0010D2  5007               	movf	sendAX@result,w,c
  5046  0010D4  26D9               	addwf	fsr2l,f,c
  5047  0010D6  5008               	movf	sendAX@result+1,w,c
  5048  0010D8  22DA               	addwfc	fsr2h,f,c
  5049  0010DA  50DF               	movf	indf2,w,c
  5050  0010DC  6E0B               	movwf	??_sendAX& (0+255),c
  5051  0010DE  500B               	movf	??_sendAX,w,c
  5052  0010E0  6E1A               	movwf	sendAX@param5,c
  5053  0010E2  6A1B               	clrf	sendAX@param5+1,c
  5054                           
  5055                           ;ax.c: 185: int param6 = result[6];
  5056  0010E4  EE20 F006          	lfsr	2,6
  5057  0010E8  5007               	movf	sendAX@result,w,c
  5058  0010EA  26D9               	addwf	fsr2l,f,c
  5059  0010EC  5008               	movf	sendAX@result+1,w,c
  5060  0010EE  22DA               	addwfc	fsr2h,f,c
  5061  0010F0  50DF               	movf	indf2,w,c
  5062  0010F2  6E0B               	movwf	??_sendAX& (0+255),c
  5063  0010F4  500B               	movf	??_sendAX,w,c
  5064  0010F6  6E1C               	movwf	sendAX@param6,c
  5065  0010F8  6A1D               	clrf	sendAX@param6+1,c
  5066                           
  5067                           ;ax.c: 190: uint8_t checksumResult = 0;
  5068  0010FA  0E00               	movlw	0
  5069  0010FC  6E2D               	movwf	sendAX@checksumResult,c
  5070                           
  5071                           ;ax.c: 191: for (int i = 2; i < stop - 1; i++) {
  5072  0010FE  0E00               	movlw	0
  5073  001100  6E2B               	movwf	sendAX@i_1390+1,c
  5074  001102  0E02               	movlw	2
  5075  001104  6E2A               	movwf	sendAX@i_1390,c
  5076  001106  D00A               	goto	i2l2188
  5077  001108                     i2l2184:
  5078                           
  5079                           ;ax.c: 192: checksumResult += result[i];
  5080  001108  502A               	movf	sendAX@i_1390,w,c
  5081  00110A  2407               	addwf	sendAX@result,w,c
  5082  00110C  6ED9               	movwf	fsr2l,c
  5083  00110E  502B               	movf	sendAX@i_1390+1,w,c
  5084  001110  2008               	addwfc	sendAX@result+1,w,c
  5085  001112  6EDA               	movwf	fsr2h,c
  5086  001114  50DF               	movf	indf2,w,c
  5087  001116  262D               	addwf	sendAX@checksumResult,f,c
  5088  001118  4A2A               	infsnz	sendAX@i_1390,f,c
  5089  00111A  2A2B               	incf	sendAX@i_1390+1,f,c
  5090  00111C                     i2l2188:
  5091  00111C  0EFF               	movlw	255
  5092  00111E  6E0B               	movwf	??_sendAX& (0+255),c
  5093  001120  0EFF               	movlw	255
  5094  001122  6E0C               	movwf	(??_sendAX+1)& (0+255),c
  5095  001124  C02E  F00D         	movff	sendAX@stop,??_sendAX+2
  5096  001128  C02F  F00E         	movff	sendAX@stop+1,??_sendAX+3
  5097  00112C  500B               	movf	??_sendAX,w,c
  5098  00112E  260D               	addwf	??_sendAX+2,f,c
  5099  001130  500C               	movf	??_sendAX+1,w,c
  5100  001132  220E               	addwfc	??_sendAX+3,f,c
  5101  001134  500D               	movf	??_sendAX+2,w,c
  5102  001136  5C2A               	subwf	sendAX@i_1390,w,c
  5103  001138  502B               	movf	sendAX@i_1390+1,w,c
  5104  00113A  0A80               	xorlw	128
  5105  00113C  6E0F               	movwf	(??_sendAX+4)& (0+255),c
  5106  00113E  500E               	movf	??_sendAX+3,w,c
  5107  001140  0A80               	xorlw	128
  5108  001142  580F               	subwfb	(??_sendAX+4)& (0+255),w,c
  5109  001144  A0D8               	btfss	status,0,c
  5110  001146  D7E0               	goto	i2l2184
  5111                           
  5112                           ;ax.c: 193: }
  5113                           ;ax.c: 194: checksumResult = ~checksumResult;
  5114  001148  1E2D               	comf	sendAX@checksumResult,f,c
  5115                           
  5116                           ;ax.c: 195: if (checksumResult != result[stop - 1]) {
  5117  00114A  0EFF               	movlw	255
  5118  00114C  6E0B               	movwf	??_sendAX& (0+255),c
  5119  00114E  0EFF               	movlw	255
  5120  001150  6E0C               	movwf	(??_sendAX+1)& (0+255),c
  5121  001152  C02E  F00D         	movff	sendAX@stop,??_sendAX+2
  5122  001156  C02F  F00E         	movff	sendAX@stop+1,??_sendAX+3
  5123  00115A  500B               	movf	??_sendAX,w,c
  5124  00115C  260D               	addwf	??_sendAX+2,f,c
  5125  00115E  500C               	movf	??_sendAX+1,w,c
  5126  001160  220E               	addwfc	??_sendAX+3,f,c
  5127  001162  500D               	movf	??_sendAX+2,w,c
  5128  001164  2407               	addwf	sendAX@result,w,c
  5129  001166  6ED9               	movwf	fsr2l,c
  5130  001168  500E               	movf	??_sendAX+3,w,c
  5131  00116A  2008               	addwfc	sendAX@result+1,w,c
  5132  00116C  6EDA               	movwf	fsr2h,c
  5133  00116E  502D               	movf	sendAX@checksumResult,w,c
  5134  001170  18DE               	xorwf	postinc2,w,c
  5135  001172  B4D8               	btfsc	status,2,c
  5136  001174  D002               	goto	i2l538
  5137                           
  5138                           ;ax.c: 196: return 252;
  5139  001176  0EFC               	movlw	252
  5140  001178  0012               	return	
  5141  00117A                     i2l538:
  5142  00117A  888C               	bsf	3980,4,c	;volatile
  5143                           
  5144                           ;ax.c: 201: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5145  00117C  0E35               	movlw	53
  5146  00117E                     i2u169_47:
  5147  00117E  2EE8               	decfsz	wreg,f,c
  5148  001180  D7FE               	bra	i2u169_47
  5149  001182  F000               	nop	
  5150                           
  5151                           ;ax.c: 202: }
  5152                           ;ax.c: 204: return result[4];
  5153  001184  EE20 F004          	lfsr	2,4
  5154  001188  5007               	movf	sendAX@result,w,c
  5155  00118A  26D9               	addwf	fsr2l,f,c
  5156  00118C  5008               	movf	sendAX@result+1,w,c
  5157  00118E  22DA               	addwfc	fsr2h,f,c
  5158  001190  50DF               	movf	indf2,w,c
  5159  001192  0012               	return	
  5160  001194                     __end_of_sendAX:
  5161                           	opt stack 0
  5162                           pclatu	equ	0xFFB
  5163                           pclath	equ	0xFFA
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon	equ	0xFF2
  5171                           postinc0	equ	0xFEE
  5172                           fsr0h	equ	0xFEA
  5173                           fsr0l	equ	0xFE9
  5174                           wreg	equ	0xFE8
  5175                           fsr1h	equ	0xFE2
  5176                           fsr1l	equ	0xFE1
  5177                           indf2	equ	0xFDF
  5178                           postinc2	equ	0xFDE
  5179                           postdec2	equ	0xFDD
  5180                           fsr2h	equ	0xFDA
  5181                           fsr2l	equ	0xFD9
  5182                           status	equ	0xFD8
  5183                           
  5184 ;; *************** function _EUSART1_Write *****************
  5185 ;; Defined at:
  5186 ;;		line 95 in file "mcc_generated_files/eusart1.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  txData          1    wreg     unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  txData          1    0[COMRAM] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5201 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5203 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5204 ;;Total ram usage:        1 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; This function calls:
  5207 ;;		Nothing
  5208 ;; This function is called by:
  5209 ;;		_sendAX
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           	psect	text30
  5214  001D4A                     __ptext30:
  5215                           	opt stack 0
  5216  001D4A                     _EUSART1_Write:
  5217                           	opt stack 22
  5218                           
  5219                           ;incstack = 0
  5220                           ;EUSART1_Write@txData stored from wreg
  5221  001D4A  6E01               	movwf	EUSART1_Write@txData,c
  5222  001D4C                     i2l104:
  5223  001D4C  A89E               	btfss	3998,4,c	;volatile
  5224  001D4E  D7FE               	goto	i2l104
  5225                           
  5226                           ;eusart1.c: 97: }
  5227                           ;eusart1.c: 99: TXREG1 = txData;
  5228  001D50  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  5229  001D54  0012               	return		;funcret
  5230  001D56                     __end_of_EUSART1_Write:
  5231                           	opt stack 0
  5232                           pclatu	equ	0xFFB
  5233                           pclath	equ	0xFFA
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           postinc0	equ	0xFEE
  5242                           fsr0h	equ	0xFEA
  5243                           fsr0l	equ	0xFE9
  5244                           wreg	equ	0xFE8
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _EUSART1_Read *****************
  5255 ;; Defined at:
  5256 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  i               2    0[COMRAM] int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      unsigned char 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5274 ;;Total ram usage:        2 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_sendAX
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text31
  5284  001BCC                     __ptext31:
  5285                           	opt stack 0
  5286  001BCC                     _EUSART1_Read:
  5287                           	opt stack 22
  5288                           
  5289                           ;eusart1.c: 76: int i = 0;
  5290                           
  5291                           ;incstack = 0
  5292  001BCC  0E00               	movlw	0
  5293  001BCE  6E02               	movwf	EUSART1_Read@i+1,c
  5294  001BD0  0E00               	movlw	0
  5295  001BD2  6E01               	movwf	EUSART1_Read@i,c
  5296                           
  5297                           ;eusart1.c: 77: while (!PIR1bits.RC1IF) {
  5298  001BD4  D00E               	goto	i2l96
  5299  001BD6                     i2l2080:
  5300                           
  5301                           ;eusart1.c: 78: i++;
  5302  001BD6  4A01               	infsnz	EUSART1_Read@i,f,c
  5303  001BD8  2A02               	incf	EUSART1_Read@i+1,f,c
  5304                           
  5305                           ;eusart1.c: 79: if (i > 500) {
  5306  001BDA  BE02               	btfsc	EUSART1_Read@i+1,7,c
  5307  001BDC  D00A               	goto	i2l96
  5308  001BDE  0EF5               	movlw	245
  5309  001BE0  5C01               	subwf	EUSART1_Read@i,w,c
  5310  001BE2  0E01               	movlw	1
  5311  001BE4  5802               	subwfb	EUSART1_Read@i+1,w,c
  5312  001BE6  A0D8               	btfss	status,0,c
  5313  001BE8  D004               	goto	i2l96
  5314                           
  5315                           ;eusart1.c: 80: RCSTA1bits.SPEN = 0;
  5316  001BEA  9EAB               	bcf	4011,7,c	;volatile
  5317                           
  5318                           ;eusart1.c: 81: RCSTA1bits.SPEN = 1;
  5319  001BEC  8EAB               	bsf	4011,7,c	;volatile
  5320                           
  5321                           ;eusart1.c: 82: return 252;
  5322  001BEE  0EFC               	movlw	252
  5323  001BF0  0012               	return	
  5324  001BF2                     i2l96:
  5325  001BF2  AA9E               	btfss	3998,5,c	;volatile
  5326  001BF4  D7F0               	goto	i2l2080
  5327                           
  5328                           ;eusart1.c: 83: }
  5329                           ;eusart1.c: 84: }
  5330                           ;eusart1.c: 87: if (1 == RCSTA1bits.OERR) {
  5331  001BF6  A2AB               	btfss	4011,1,c	;volatile
  5332  001BF8  D002               	goto	i2l2092
  5333                           
  5334                           ;eusart1.c: 88: RCSTA1bits.SPEN = 0;
  5335  001BFA  9EAB               	bcf	4011,7,c	;volatile
  5336                           
  5337                           ;eusart1.c: 89: RCSTA1bits.SPEN = 1;
  5338  001BFC  8EAB               	bsf	4011,7,c	;volatile
  5339  001BFE                     i2l2092:
  5340                           
  5341                           ;eusart1.c: 90: }
  5342                           ;eusart1.c: 92: return RCREG1;
  5343  001BFE  50AE               	movf	4014,w,c	;volatile
  5344  001C00  0012               	return	
  5345  001C02                     __end_of_EUSART1_Read:
  5346                           	opt stack 0
  5347                           pclatu	equ	0xFFB
  5348                           pclath	equ	0xFFA
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           postinc0	equ	0xFEE
  5357                           fsr0h	equ	0xFEA
  5358                           fsr0l	equ	0xFE9
  5359                           wreg	equ	0xFE8
  5360                           fsr1h	equ	0xFE2
  5361                           fsr1l	equ	0xFE1
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           postdec2	equ	0xFDD
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function _clearState *****************
  5370 ;; Defined at:
  5371 ;;		line 334 in file "ax.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;		None
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5389 ;;Total ram usage:        0 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_getByteToSend
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text32
  5399  001C02                     __ptext32:
  5400                           	opt stack 0
  5401  001C02                     _clearState:
  5402                           	opt stack 24
  5403                           
  5404                           ;ax.c: 335: bytesSent = 0;
  5405                           
  5406                           ;incstack = 0
  5407  001C02  0E00               	movlw	0
  5408  001C04  0100               	movlb	0	; () banked
  5409  001C06  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  5410  001C08  0E00               	movlw	0
  5411  001C0A  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;ax.c: 336: currentCommand = -1;
  5415  001C0C  685E               	setf	_currentCommand,c	;volatile
  5416                           
  5417                           ;ax.c: 337: parameter1 = 0;
  5418  001C0E  0E00               	movlw	0
  5419  001C10  6E5D               	movwf	_parameter1,c	;volatile
  5420                           
  5421                           ;ax.c: 338: parameter2 = 0;
  5422  001C12  0E00               	movlw	0
  5423  001C14  6E5C               	movwf	_parameter2,c	;volatile
  5424                           
  5425                           ;ax.c: 339: parameter3 = 0;
  5426  001C16  0E00               	movlw	0
  5427  001C18  6E5B               	movwf	_parameter3,c	;volatile
  5428                           
  5429                           ;ax.c: 340: parameter4 = 0;
  5430  001C1A  0E00               	movlw	0
  5431  001C1C  6E5A               	movwf	_parameter4,c	;volatile
  5432                           
  5433                           ;ax.c: 341: parameter5 = 0;
  5434  001C1E  0E00               	movlw	0
  5435  001C20  0100               	movlb	0	; () banked
  5436  001C22  6F9D               	movwf	_parameter5& (0+255),b	;volatile
  5437                           
  5438                           ;ax.c: 342: parameter6 = 0;
  5439  001C24  0E00               	movlw	0
  5440  001C26  0100               	movlb	0	; () banked
  5441  001C28  6F9C               	movwf	_parameter6& (0+255),b	;volatile
  5442                           
  5443                           ;ax.c: 343: readIndex = 0;
  5444  001C2A  0E00               	movlw	0
  5445  001C2C  6E57               	movwf	_readIndex+1,c	;volatile
  5446  001C2E  0E00               	movlw	0
  5447  001C30  6E56               	movwf	_readIndex,c	;volatile
  5448                           
  5449                           ; BSR set to: 0
  5450  001C32  0012               	return		;funcret
  5451  001C34                     __end_of_clearState:
  5452                           	opt stack 0
  5453                           pclatu	equ	0xFFB
  5454                           pclath	equ	0xFFA
  5455                           tblptru	equ	0xFF8
  5456                           tblptrh	equ	0xFF7
  5457                           tblptrl	equ	0xFF6
  5458                           tablat	equ	0xFF5
  5459                           prodh	equ	0xFF4
  5460                           prodl	equ	0xFF3
  5461                           intcon	equ	0xFF2
  5462                           postinc0	equ	0xFEE
  5463                           fsr0h	equ	0xFEA
  5464                           fsr0l	equ	0xFE9
  5465                           wreg	equ	0xFE8
  5466                           fsr1h	equ	0xFE2
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _ADC_GetConversion *****************
  5476 ;; Defined at:
  5477 ;;		line 105 in file "mcc_generated_files/adc.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  channel         1    wreg     enum E15090
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  channel         1    4[COMRAM] enum E15090
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  2    0[COMRAM] unsigned int 
  5484 ;; Registers used:
  5485 ;;		wreg, status,2, status,0
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5493 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5494 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5495 ;;Total ram usage:        5 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_getByteToSend
  5501 ;;		_getADC
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text33
  5506  001C34                     __ptext33:
  5507                           	opt stack 0
  5508  001C34                     _ADC_GetConversion:
  5509                           	opt stack 24
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;incstack = 0
  5513                           ;ADC_GetConversion@channel stored from wreg
  5514  001C34  6E05               	movwf	ADC_GetConversion@channel,c
  5515                           
  5516                           ;adc.c: 108: ADCON0bits.CHS = channel;
  5517  001C36  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  5518  001C3A  4603               	rlncf	??_ADC_GetConversion,f,c
  5519  001C3C  4603               	rlncf	??_ADC_GetConversion,f,c
  5520  001C3E  50C2               	movf	4034,w,c	;volatile
  5521  001C40  1803               	xorwf	??_ADC_GetConversion,w,c
  5522  001C42  0B83               	andlw	-125
  5523  001C44  1803               	xorwf	??_ADC_GetConversion,w,c
  5524  001C46  6EC2               	movwf	4034,c	;volatile
  5525                           
  5526                           ;adc.c: 111: ADCON0bits.ADON = 1;
  5527  001C48  80C2               	bsf	4034,0,c	;volatile
  5528                           
  5529                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  5530  001C4A  82C2               	bsf	4034,1,c	;volatile
  5531  001C4C                     i2l254:
  5532  001C4C  B2C2               	btfsc	4034,1,c	;volatile
  5533  001C4E  D7FE               	goto	i2l254
  5534                           
  5535                           ;adc.c: 120: }
  5536                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  5537  001C50  50C4               	movf	4036,w,c	;volatile
  5538  001C52  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  5539  001C54  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  5540  001C56  50C3               	movf	4035,w,c	;volatile
  5541  001C58  2403               	addwf	??_ADC_GetConversion,w,c
  5542  001C5A  6E01               	movwf	?_ADC_GetConversion,c
  5543  001C5C  0E00               	movlw	0
  5544  001C5E  2004               	addwfc	??_ADC_GetConversion+1,w,c
  5545  001C60  6E02               	movwf	?_ADC_GetConversion+1,c
  5546  001C62  0012               	return	
  5547  001C64                     __end_of_ADC_GetConversion:
  5548                           	opt stack 0
  5549                           pclatu	equ	0xFFB
  5550                           pclath	equ	0xFFA
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           postinc0	equ	0xFEE
  5559                           fsr0h	equ	0xFEA
  5560                           fsr0l	equ	0xFE9
  5561                           wreg	equ	0xFE8
  5562                           fsr1h	equ	0xFE2
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _ADC_ISR *****************
  5572 ;; Defined at:
  5573 ;;		line 126 in file "mcc_generated_files/adc.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		None
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_INTERRUPT_InterruptManager
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text34
  5601  001D68                     __ptext34:
  5602                           	opt stack 0
  5603  001D68                     _ADC_ISR:
  5604                           	opt stack 26
  5605                           
  5606                           ;adc.c: 129: PIR1bits.ADIF = 0;
  5607                           
  5608                           ;incstack = 0
  5609  001D68  9C9E               	bcf	3998,6,c	;volatile
  5610  001D6A  0012               	return		;funcret
  5611  001D6C                     __end_of_ADC_ISR:
  5612                           	opt stack 0
  5613                           pclatu	equ	0xFFB
  5614                           pclath	equ	0xFFA
  5615                           tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           intcon	equ	0xFF2
  5622                           postinc0	equ	0xFEE
  5623                           fsr0h	equ	0xFEA
  5624                           fsr0l	equ	0xFE9
  5625                           wreg	equ	0xFE8
  5626                           fsr1h	equ	0xFE2
  5627                           fsr1l	equ	0xFE1
  5628                           indf2	equ	0xFDF
  5629                           postinc2	equ	0xFDE
  5630                           postdec2	equ	0xFDD
  5631                           fsr2h	equ	0xFDA
  5632                           fsr2l	equ	0xFD9
  5633                           status	equ	0xFD8
  5634                           pclatu	equ	0xFFB
  5635                           pclath	equ	0xFFA
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           intcon	equ	0xFF2
  5643                           postinc0	equ	0xFEE
  5644                           fsr0h	equ	0xFEA
  5645                           fsr0l	equ	0xFE9
  5646                           wreg	equ	0xFE8
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           fsr2h	equ	0xFDA
  5653                           fsr2l	equ	0xFD9
  5654                           status	equ	0xFD8
  5655                           
  5656                           	psect	rparam
  5657  0000                     pclatu	equ	0xFFB
  5658                           pclath	equ	0xFFA
  5659                           tblptru	equ	0xFF8
  5660                           tblptrh	equ	0xFF7
  5661                           tblptrl	equ	0xFF6
  5662                           tablat	equ	0xFF5
  5663                           prodh	equ	0xFF4
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           fsr0h	equ	0xFEA
  5668                           fsr0l	equ	0xFE9
  5669                           wreg	equ	0xFE8
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679                           	psect	temp
  5680  00005F                     btemp:
  5681                           	opt stack 0
  5682  00005F                     	ds	1
  5683  0000                     int$flags	set	btemp
  5684                           pclatu	equ	0xFFB
  5685                           pclath	equ	0xFFA
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           intcon	equ	0xFF2
  5693                           postinc0	equ	0xFEE
  5694                           fsr0h	equ	0xFEA
  5695                           fsr0l	equ	0xFE9
  5696                           wreg	equ	0xFE8
  5697                           fsr1h	equ	0xFE2
  5698                           fsr1l	equ	0xFE1
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           fsr2h	equ	0xFDA
  5703                           fsr2l	equ	0xFD9
  5704                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    0
    Data        3
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     85      94
    BANK0           160     50     115
    BANK1           256     21      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(BANK0[20]), readAXData@result(BANK0[20]), pingAX@result(BANK0[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(BANK0[20]), readAXData@packet(BANK0[20]), pingAX@packet(BANK0[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_ISR->_getByteToSend
    i2_printf->i2_putch
    i2_putch->i2_EUSART2_Write
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_writeAXData
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _getByteToSend->_readAXData

Critical Paths under _main in BANK1

    _main->_delay_ms
    _printf->_putch
    _putch->_EUSART2_Write
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2804
                                             15 BANK1      6     6      0
                  _SYSTEM_Initialize
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     365
                                              2 BANK1      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                              1 BANK1      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1928
                                              8 BANK1      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     625
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                              0 BANK1      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0    8467
                                             71 COMRAM    14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              0     0      0    8467
                      _getByteToSend
                 _handleByteReceived
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            18    16      2     116
                                              2 COMRAM     5     3      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (8) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0     418
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _getByteToSend                                       18    18      0    7933
                                             54 COMRAM    17    17      0
                  _ADC_GetConversion
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
 ---------------------------------------------------------------------------------
 (7) _writeAXData                                         55    49      6    2770
                                             47 COMRAM     7     1      6
                                              0 BANK0     48    48      0
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (7) _readAXData                                          56    52      4    2628
                                             47 COMRAM     6     2      4
                                              0 BANK0     50    50      0
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _getAddressSize                                       4     2      2     174
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _pingAX                                              51    49      2    2194
                                             47 COMRAM     3     1      2
                                              0 BANK0     48    48      0
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _sendAX                                              45    37      8    1844
                                              2 COMRAM    45    37      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Read                                         2     2      0      24
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _printf
     _putch
       _EUSART2_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _getByteToSend
       _ADC_GetConversion
       _clearState
       _pingAX
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _readAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _writeAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
     _handleByteReceived
       _setLedOff
       _setLedOn
     i2_printf
       i2_putch
         i2_EUSART2_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     15      15       8        8.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     55      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6       6        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon May 08 12:13:05 2017

                        _SSPSTATbits 000FC7                                   l31 1D34  
                       ___awdiv@sign 0105                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l415 18D8                                  l345 13D2  
                                l385 1486                                  l388 1488  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
         __end_of_handleByteReceived 15AA                      __end_of_I2C_ISR 17C6  
                    _timer1ReloadVal 0058                      __end_of_ADC_ISR 1D6C  
                                prod 000FF3                                  wreg 000FE8  
                               l2900 15DC                                 l2910 160C  
                               l2906 15FA                                 l2922 164A  
                               l2908 1606                                 l2932 1B6E  
                               l2926 165E                                 l2918 163C  
                               l2934 1B76                                 l2960 18C0  
                               l2954 1882                                 l2970 1352  
                               l2956 1896                                 l2894 15C6  
                               l2966 133C                                 l2976 1378  
                               l2998 13BC                                 STR_1 0F1F  
                               STR_2 0F12                                 STR_3 0F01  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u1667 188A  
                               u1677 18C8                                 i2l31 1D40  
                               i2l96 1BF2                                 _WPUB 000F5B  
                      _EUSART1_Write 1D4A                        _EUSART2_Write 1D30  
                               _main 1332                        ?_EUSART1_Read 0001  
                               _junk 009E                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005F                                 prodh 000FF4  
                               prodl 000FF3                                 start 0096  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                    __end_ofi2_putch 1D60                       readAXData@size 00CF  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                        _writeAXData 17C6             __size_ofi2_EUSART2_Write 000C  
                 writeAXData@address 0032              __size_of_getAddressSize 0078  
     __size_of_OSCILLATOR_Initialize 0012        __end_of_OSCILLATOR_Initialize 1D22  
                              ?_main 0001                                _BCLIF 007D0B  
                    __end_of___awdiv 1668                      _TMR1_StartTimer 1D60  
                    ___awdiv@divisor 0102                                _T1CON 000FCD  
                              i2l104 1D4C                                i2l312 005A  
                              i2l153 1724                                i2l254 1C4C  
                              i2l502 1996                                i2l505 199A  
                              i2l442 18FC                                i2l452 1908  
                              i2l461 1914                                i2l550 1822  
                              i2l470 1920                                i2l446 1900  
                              i2l455 190C                                i2l464 1918  
                              i2l481 197A                                i2l449 1904  
                              i2l538 117A                                i2l490 1986  
                              i2l458 1910                                i2l467 191C  
                              i2l484 197E                                i2l493 198A  
                              i2l477 1976                                i2l487 1982  
                              i2l496 198E                                i2l499 1992  
                              i2l596 15A8                      ___awdiv@counter 0104  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _SSPIF 007CF3  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                                _first 00D1  
                  getByteToSend@xlow 003D                                _putch 1D22  
                              main@i 010F                       ?_EUSART1_Write 0001  
            __end_of_TMR1_Initialize 1BCC                       ?_EUSART2_Write 0001  
                              pclath 000FFA                                tablat 000FF5  
             readAXData@nbParameters 00C9                       ??_EUSART1_Read 0001  
                              status 000FD8                      readAXData@error 00B3  
                   __end_ofi2_printf 1C90                      __initialization 1ADA  
         __end_of_EUSART1_Initialize 1D10                         __end_of_main 14AA  
                         i2printf@ap 0005                            ??_I2C_ISR 0048  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 010F                        __activetblptr 000003  
                     __CFG_PLLCFG$ON 000000                       __CFG_RETEN$OFF 000000  
         __end_of_EUSART2_Initialize 1CFA                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _ANCON0 000F5D                               _ANCON1 000F5C  
                   ___awdiv@dividend 0100                               ?_putch 0001  
                             _T1GCON 000FAA                               i2l2102 19F0  
                    __CFG_BBSIZ$BB2K 000000                               i2l2112 1A04  
                             i2l2122 0F3A                               i2l2106 19FA  
                             i2l2132 0F6E                               i2l2126 0F4E  
                             i2l2080 1BD6                               i2l2144 0FB4  
                             i2l2136 0F84                               i2l2320 182C  
                             i2l2092 1BFE                               i2l2172 103A  
                             i2l2148 0FC8                               i2l2228 1924  
                             i2l2158 0FFC                               i2l2166 101C  
                             i2l2414 12F0                               i2l2406 12DC  
                             i2l2238 199E                               i2l2184 1108  
                             i2l2176 1050                               i2l2168 1024  
                             i2l2426 132E                               i2l2442 14D8  
                             i2l2610 1796                               i2l2188 111C  
                             i2l2292 1702                               i2l2460 1522  
                             i2l2374 1202                               i2l2358 11C2  
                     __CFG_WDTEN$OFF 000000                               i2l2392 1286  
                             i2l2384 1248                               i2l2472 1552  
                             i2l2448 14F6                               i2l2560 1C6E  
                             i2l2616 17A8                               i2l2608 1790  
                             i2l2394 128E                               i2l2490 158E  
                             i2l2466 153E                               i2l2562 1C74  
                             i2l2618 17AA                               i2l2484 157A  
                             i2l2628 17C2                               i2l2580 1742  
                             i2l2478 1566                               i2l2496 15A2  
                             i2l2690 004E                               i2l2588 1758  
                             i2l2598 176C                        i2putch@txData 0002  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                            ??i2_putch 0002  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _TXREG1 000FAD                               _TXREG2 000F79  
                             _TXSTA1 000FAC                               _TXSTA2 000FBA  
                   __end_of_delay_ms 18FA                       __CFG_XINST$OFF 000000  
                     sendAX@checksum 002C              __end_of_TMR1_StartTimer 1D64  
                          ??___awdiv 0104                       __CFG_STVREN$ON 000000  
                 getByteToSend@error 0039                   getByteToSend@value 0042  
                 getByteToSend@xhigh 003E                               _pingAX 1A66  
                             _sendAX 0F2A                               clear_0 1B0A  
                             clear_1 1B16                     ___awdiv@quotient 0106  
            __size_of_I2C_Initialize 001A                               _printf 1B60  
                   __end_of_setLedOn 1974                    ??i2_EUSART2_Write 0001  
                       __pdataCOMRAM 005E                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8             ADC_GetConversion@channel 0005  
                    ??_EUSART1_Write 0001                      ??_EUSART2_Write 0100  
      __size_of_INTERRUPT_Initialize 0004                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 1C90                           __accesstop 0060  
            __end_of__initialization 1B1C                     readAXData@packet 00B5  
                   readAXData@length 00CB                   ?_SYSTEM_Initialize 0001  
                        pingAX@error 00CD                        ___rparam_used 000001  
                   readAXData@result 009F                         readAXData@id 0030  
                     __pcstackCOMRAM 0001                         __pidataBANK0 1D6C  
              readAXData@instruction 00CD                  ??_SYSTEM_Initialize 0102  
              __end_of_getByteToSend 1332                          sendAX@count 001E  
                     _getAddressSize 19EE                           _adc_values 0080  
                      __end_of_putch 1D30                 __end_of_EUSART1_Read 1C02  
                          ?i2_printf 0003            __end_of_SYSTEM_Initialize 1CB2  
                            ??_putch 0101                           _dataToSend 0060  
                         __pbssBANK0 0060               sendAX@parametersToRead 0009  
                 _handleByteReceived 14AA                          setLedOn@led 0001  
                         _clearState 1C02                  ?_handleByteReceived 0001  
             __end_of_getAddressSize 1A66                         ?_writeAXData 0030  
                 __size_of_setLedOff 007A                     ?_TMR1_StartTimer 0001  
                            _I2C_ISR 171A                              _ADC_ISR 1D68  
                            ?_pingAX 0030                              ?_sendAX 0003  
                            ?_printf 0102              __size_of_ADC_Initialize 0018  
                      EUSART1_Read@i 0001                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                              _OSCCON2 000FD2  
                          ?_delay_ms 0108                 ??_handleByteReceived 0005  
                         ??i2_printf 0005                              _OSCTUNE 000F9B  
                            _SPBRGH1 000F7D                              _SPBRGH2 000F7C  
                            i2u99_45 125A                              _SSPCON1 000FC6  
                            _SSPCON2 000FC5                              _SSPSTAT 000FC7  
                            i2_putch 1D56                      writeAXData@data 0034  
             getByteToSend@xlow_1451 003F                      writeAXData@size 00CD  
                         _readAXData 1668                            ?_setLedOn 0001  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
              getAddressSize@address 0001                              __Lparam 0000  
                    ?_getAddressSize 0001                              ___awdiv 15AA  
                       __psmallconst 0F00                              __pcinit 1ADA  
                     _I2C_Initialize 1CB2                      __size_of_pingAX 0074  
                            __ramtop 0F00                      __size_of_sendAX 026A  
                            __ptext0 1332                              __ptext1 1B60  
                            __ptext2 1D22                              __ptext3 1D30  
                            __ptext4 186C                              __ptext5 15AA  
                            __ptext6 1C90                              __ptext7 1B96  
                            __ptext8 1D60                              __ptext9 1B26  
                    __size_of_printf 0036                           _parameter1 005D  
                         _parameter2 005C                           _parameter3 005B  
                         _parameter4 005A                           _parameter5 009D  
                         _parameter6 009C                            _T1CONbits 000FCD  
              _OSCILLATOR_Initialize 1D10                   _EUSART1_Initialize 1CFA  
           ??_PIN_MANAGER_Initialize 0100                    __CFG_MSSPMSK$MSK7 000000  
                         ??_delay_ms 010A                              main@adc 0111  
                  __end_of_setLedOff 19EE           __size_of_SYSTEM_Initialize 0022  
              i2EUSART2_Write@txData 0001                           delay_ms@ms 0108  
               end_of_initialization 1B1C                  ?_EUSART1_Initialize 0001  
             handleByteReceived@data 0007                              sendAX@i 0020  
                         ??_setLedOn 0003                          ?_clearState 0001  
                 _EUSART2_Initialize 1CE4                      i2_EUSART2_Write 1D3E  
                            printf@c 0106                              printf@f 0102  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                __size_of_EUSART1_Read 0036  
             __end_of_I2C_Initialize 1CCC                 ??_EUSART1_Initialize 0100  
                ?_EUSART2_Initialize 0001                            _PORTCbits 000F82  
                  readAXData@address 0032                  EUSART1_Write@txData 0001  
               ??_EUSART2_Initialize 0100                       getByteToSend@d 0041  
                     getByteToSend@r 0046                         pingAX@packet 00B3  
                       pingAX@length 00C9                    pingAX@instruction 00CB  
                       pingAX@result 009F               writeAXData@instruction 00C9  
                       _EUSART1_Read 1BCC                          ?_readAXData 0030  
                       sendAX@i_1381 0028                         sendAX@i_1390 002A  
                       sendAX@i_1374 0022                         sendAX@i_1377 0024  
       __end_of_INTERRUPT_Initialize 1D68                      ?_I2C_Initialize 0001  
                  writeAXData@packet 00B3                    writeAXData@length 00C7  
               __size_of_writeAXData 00A6                        __pidataCOMRAM 1D6E  
                  writeAXData@result 009F                       _ADC_Initialize 1CCC  
             ?_OSCILLATOR_Initialize 0001                         sendAX@buffer 0003  
                     __end_of_pingAX 1ADA                       __end_of_sendAX 1194  
                       sendAX@param0 0010                         sendAX@param1 0012  
                       sendAX@param2 0014                         sendAX@param3 0016  
                       sendAX@param4 0018                         sendAX@param5 001A  
                       sendAX@param6 001C                  handleByteReceived@i 0005  
                     __end_of_printf 1B96                         sendAX@result 0007  
                start_initialization 1ADA      __size_of_PIN_MANAGER_Initialize 003A  
                __size_of_clearState 0032                            i2printf@c 0007  
                          i2printf@f 0003                          putch@txData 0101  
                  __size_ofi2_printf 002C                __end_of_EUSART1_Write 1D56  
              __end_of_EUSART2_Write 1D3E              __end_ofi2_EUSART2_Write 1D4A  
                     _currentCommand 005E             __size_of_TMR1_Initialize 0036  
                 pingAX@nbParameters 00C7               __end_of_ADC_Initialize 1CE4  
                        __pdataBANK0 00D1                             ?_I2C_ISR 0001  
                           ?_ADC_ISR 0001                             ??_pingAX 0032  
                           ??_sendAX 000B                             ??_printf 0104  
                        __pbssCOMRAM 0056                  __size_of_readAXData 00B2  
                      __pcstackBANK0 009F                        __pcstackBANK1 0100  
                       setLedOff@led 0001                           sendAX@stop 002E  
                  __size_of_delay_ms 008E                  EUSART2_Write@txData 0100  
             __size_of_getByteToSend 019E                             ?i2_putch 0001  
                   ??_getAddressSize 0003              getByteToSend@error_1447 003B  
             _PIN_MANAGER_Initialize 1B26                    __size_of_setLedOn 007A  
                          __pintcode 0008                             ?___awdiv 0100  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 0048  
                        __smallconst 0F00                             _BAUDCON1 000FA7  
                           _BAUDCON2 000FB9             __size_of_TMR1_StartTimer 0004  
                          _index_i2c 009A                        _nbBytesToSend 0096  
        __size_of_handleByteReceived 0100                            _readIndex 0056  
                          _bytesSent 0094       getByteToSend@i2c_data_received 0001  
                     __size_of_putch 000E                 _INTERRUPT_Initialize 1D64  
            getByteToSend@value_1450 0044                            _setLedOff 1974  
                   ?i2_EUSART2_Write 0001                             _LATBbits 000F8A  
                           _LATCbits 000F8B                             _LATDbits 000F8C  
                          delay_ms@i 010D                            delay_ms@n 010B  
                           _PIE1bits 000F9D                         ??_clearState 0001  
                           i2u100_40 1278                             i2u105_40 14D6  
__size_of_INTERRUPT_InterruptManager 008E                             i2u168_47 0FDE  
                           _PIR1bits 000F9E                             i2u169_47 117E  
                           _PIR3bits 000FA4                             _RCONbits 000FD0  
                      _getByteToSend 1194              getByteToSend@xhigh_1452 0040  
                   __size_of_I2C_ISR 00AC                    ??_TMR1_Initialize 0100  
                   __size_of_ADC_ISR 0004                           _ADCON0bits 000FC2  
                   __CFG_SOSCSEL$DIG 000000                            main@delay 0113  
                           i2_printf 1C64                   __end_of_clearState 1C34  
                   writeAXData@error 00CB                ?_INTERRUPT_Initialize 0001  
                         ?_setLedOff 0001                     __size_ofi2_putch 000A  
                       ??_readAXData 0034                     ??_I2C_Initialize 0100  
                           __Hrparam 0000                             __Lrparam 0000  
                  _ADC_GetConversion 1C34                   __CFG_BOREN$SBORDIS 000000  
                     ?_getByteToSend 0001              ??_OSCILLATOR_Initialize 0100  
                 ?_ADC_GetConversion 0001                     __size_of___awdiv 00BE  
        __size_of_EUSART1_Initialize 0016                _TMR1_InterruptHandler 0098  
                ??_ADC_GetConversion 0003                             _delay_ms 186C  
                 __end_of_readAXData 171A                             __ptext10 1D10  
                           __ptext11 1D64                             __ptext20 1D3E  
                           __ptext12 1CB2                             __ptext21 14AA  
                           __ptext13 1CE4                           _T1GCONbits 000FAA  
                           __ptext30 1D4A                             __ptext22 18FA  
                           __ptext14 1CFA                             __ptext31 1BCC  
                           __ptext23 1974                             __ptext15 1CCC  
                           __ptext32 1C02                             __ptext24 1194  
                           __ptext33 1C34                             __ptext25 17C6  
                           __ptext17 171A                             __ptext34 1D68  
                           __ptext26 1668                             __ptext18 1C64  
                           __ptext27 19EE                             __ptext19 1D56  
                           __ptext28 1A66                             __ptext29 0F2A  
                  ??_TMR1_StartTimer 0100                        writeAXData@id 0030  
        __size_of_EUSART2_Initialize 0016                        __size_of_main 0178  
                           _setLedOn 18FA            __end_of_ADC_GetConversion 1C64  
                      ??_writeAXData 0036                             int$flags 005F  
 __end_of_INTERRUPT_InterruptManager 0096           _INTERRUPT_InterruptManager 0008  
                __CFG_INTOSCSEL$HIGH 000000                     sendAX@packetSize 0005  
                 _I2C_slaveWriteData 00D2                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 0100                             pingAX@id 0030  
                           sendAX@r0 0026                             intlevel2 0000  
                        ??_setLedOff 0003              ?_PIN_MANAGER_Initialize 0001  
               sendAX@checksumResult 002D                           _RCSTA1bits 000FAB  
                         _RCSTA2bits 000FA6                     ??_ADC_Initialize 0100  
                    ??_getByteToSend 0037                             printf@ap 0104  
                 __CFG_WDTPS$1048576 000000               __size_of_EUSART1_Write 000C  
             __size_of_EUSART2_Write 000E                  __end_of_writeAXData 186C  
                        _SSPCON1bits 000FC6       __end_of_PIN_MANAGER_Initialize 1B60  
                __CFG_BORPWR$ZPBORMV 000000           __size_of_ADC_GetConversion 0030  
                    _TMR1_Initialize 1B96  
