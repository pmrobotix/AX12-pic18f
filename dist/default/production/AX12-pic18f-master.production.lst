

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 06 11:59:49 2021

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.42
    56                           ; Generated 13/04/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F46K80 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001F54                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _currentCommand
    95  001F54  FF                 	db	255
    96                           
    97                           	psect	idataBANK0
    98  001F52                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _first
   102  001F52  01                 	db	1
   103                           
   104                           ;initializer for _I2C_slaveWriteData
   105  001F53  55                 	db	85
   106  0000                     _WPUB	set	3931
   107  0000                     _ANCON1	set	3932
   108  0000                     _ANCON0	set	3933
   109  0000                     _LATBbits	set	3978
   110  0000                     _LATCbits	set	3979
   111  0000                     _LATDbits	set	3980
   112  0000                     _INTCONbits	set	4082
   113  0000                     _RCONbits	set	4048
   114  0000                     _REFOCON	set	3994
   115  0000                     _OSCTUNE	set	3995
   116  0000                     _OSCCON2	set	4050
   117  0000                     _OSCCON	set	4051
   118  0000                     _ADCON0bits	set	4034
   119  0000                     _ADRESL	set	4035
   120  0000                     _ADRESH	set	4036
   121  0000                     _ADCON2	set	4032
   122  0000                     _ADCON1	set	4033
   123  0000                     _ADCON0	set	4034
   124  0000                     _T1GCONbits	set	4010
   125  0000                     _T1CONbits	set	4045
   126  0000                     _TMR1L	set	4046
   127  0000                     _TMR1H	set	4047
   128  0000                     _T1GCON	set	4010
   129  0000                     _T1CON	set	4045
   130  0000                     _PORTCbits	set	3970
   131  0000                     _SSPCON1bits	set	4038
   132  0000                     _SSPBUF	set	4041
   133  0000                     _SSPSTATbits	set	4039
   134  0000                     _PIE1bits	set	3997
   135  0000                     _SSPADD	set	4040
   136  0000                     _SSPCON2	set	4037
   137  0000                     _SSPCON1	set	4038
   138  0000                     _SSPSTAT	set	4039
   139  0000                     _TXREG1	set	4013
   140  0000                     _RCREG1	set	4014
   141  0000                     _PIR1bits	set	3998
   142  0000                     _RCSTA1bits	set	4011
   143  0000                     _SPBRGH1	set	3965
   144  0000                     _SPBRG1	set	4015
   145  0000                     _TXSTA1	set	4012
   146  0000                     _RCSTA1	set	4011
   147  0000                     _BAUDCON1	set	4007
   148  0000                     _TRISD	set	3989
   149  0000                     _TRISC	set	3988
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISA	set	3986
   152  0000                     _TRISE	set	3990
   153  0000                     _LATC	set	3979
   154  0000                     _LATB	set	3978
   155  0000                     _LATA	set	3977
   156  0000                     _LATD	set	3980
   157  0000                     _LATE	set	3981
   158  0000                     _TXREG2	set	3961
   159  0000                     _RCREG2	set	3962
   160  0000                     _RCSTA2bits	set	4006
   161  0000                     _PIR3bits	set	4004
   162  0000                     _SPBRGH2	set	3964
   163  0000                     _SPBRG2	set	3963
   164  0000                     _TXSTA2	set	4026
   165  0000                     _RCSTA2	set	4006
   166  0000                     _BAUDCON2	set	4025
   167  0000                     _BCLIF	set	32011
   168  0000                     _SSPIF	set	31987
   169                           
   170                           	psect	smallconst
   171  000F00                     __psmallconst:
   172                           	opt stack 0
   173  000F00  00                 	db	0
   174  000F01                     STR_3:
   175  000F01  49                 	db	73	;'I'
   176  000F02  6E                 	db	110	;'n'
   177  000F03  69                 	db	105	;'i'
   178  000F04  74                 	db	116	;'t'
   179  000F05  20                 	db	32
   180  000F06  63                 	db	99	;'c'
   181  000F07  6F                 	db	111	;'o'
   182  000F08  6D                 	db	109	;'m'
   183  000F09  70                 	db	112	;'p'
   184  000F0A  6C                 	db	108	;'l'
   185  000F0B  65                 	db	101	;'e'
   186  000F0C  74                 	db	116	;'t'
   187  000F0D  65                 	db	101	;'e'
   188  000F0E  64                 	db	100	;'d'
   189  000F0F  0D                 	db	13
   190  000F10  0A                 	db	10
   191  000F11  00                 	db	0
   192  000F12                     STR_2:
   193  000F12  50                 	db	80	;'P'
   194  000F13  4D                 	db	77	;'M'
   195  000F14  20                 	db	32
   196  000F15  52                 	db	82	;'R'
   197  000F16  6F                 	db	111	;'o'
   198  000F17  62                 	db	98	;'b'
   199  000F18  6F                 	db	111	;'o'
   200  000F19  74                 	db	116	;'t'
   201  000F1A  69                 	db	105	;'i'
   202  000F1B  78                 	db	120	;'x'
   203  000F1C  0D                 	db	13
   204  000F1D  0A                 	db	10
   205  000F1E  00                 	db	0
   206  000F1F                     STR_1:
   207  000F1F  63                 	db	99	;'c'
   208  000F20  6F                 	db	111	;'o'
   209  000F21  6C                 	db	108	;'l'
   210  000F22  6C                 	db	108	;'l'
   211  000F23  69                 	db	105	;'i'
   212  000F24  64                 	db	100	;'d'
   213  000F25  65                 	db	101	;'e'
   214  000F26  0D                 	db	13
   215  000F27  0A                 	db	10
   216  000F28  00                 	db	0
   217                           
   218                           ; #config settings
   219  000F29  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  001CBC                     __pcinit:
   223                           	opt stack 0
   224  001CBC                     start_initialization:
   225                           	opt stack 0
   226  001CBC                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Initialize objects allocated to BANK0 (2 bytes)
   230                           ; load TBLPTR registers with __pidataBANK0
   231  001CBC  0E52               	movlw	low __pidataBANK0
   232  001CBE  6EF6               	movwf	tblptrl,c
   233  001CC0  0E1F               	movlw	high __pidataBANK0
   234  001CC2  6EF7               	movwf	tblptrh,c
   235  001CC4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   236  001CC6  6EF8               	movwf	tblptru,c
   237  001CC8  0009               	tblrd		*+	;fetch initializer
   238  001CCA  CFF5 F0D6          	movff	tablat,__pdataBANK0
   239  001CCE  0009               	tblrd		*+	;fetch initializer
   240  001CD0  CFF5 F0D7          	movff	tablat,__pdataBANK0+1
   241                           
   242                           ; Initialize objects allocated to COMRAM (1 bytes)
   243                           ; load TBLPTR registers with __pidataCOMRAM
   244  001CD4  0E54               	movlw	low __pidataCOMRAM
   245  001CD6  6EF6               	movwf	tblptrl,c
   246  001CD8  0E1F               	movlw	high __pidataCOMRAM
   247  001CDA  6EF7               	movwf	tblptrh,c
   248  001CDC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   249  001CDE  6EF8               	movwf	tblptru,c
   250  001CE0  0009               	tblrd		*+	;fetch initializer
   251  001CE2  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   252                           
   253                           ; Clear objects allocated to BANK0 (68 bytes)
   254  001CE6  EE00  F060         	lfsr	0,__pbssBANK0
   255  001CEA  0E44               	movlw	68
   256  001CEC                     clear_0:
   257  001CEC  6AEE               	clrf	postinc0,c
   258  001CEE  06E8               	decf	wreg,f,c
   259  001CF0  E1FD               	bnz	clear_0
   260                           
   261                           ; Clear objects allocated to COMRAM (3 bytes)
   262  001CF2  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   263  001CF4  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   264  001CF6  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   265  001CF8                     end_of_initialization:
   266                           	opt stack 0
   267  001CF8                     __end_of__initialization:
   268                           	opt stack 0
   269  001CF8  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   270  001CFA  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   271  001CFC  0100               	movlb	0
   272  001CFE  EFCC  F009         	goto	_main	;jump to C main() function
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	bssCOMRAM
   281  00005B                     __pbssCOMRAM:
   282                           	opt stack 0
   283  00005B                     _readIndex:
   284                           	opt stack 0
   285  00005B                     	ds	2
   286  00005D                     _parameter1:
   287                           	opt stack 0
   288  00005D                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	dataCOMRAM
   297  00005E                     __pdataCOMRAM:
   298                           	opt stack 0
   299  00005E                     _currentCommand:
   300                           	opt stack 0
   301  00005E                     	ds	1
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	bssBANK0
   310  000060                     __pbssBANK0:
   311                           	opt stack 0
   312  000060                     _dataToSend:
   313                           	opt stack 0
   314  000060                     	ds	32
   315  000080                     _adc_values:
   316                           	opt stack 0
   317  000080                     	ds	20
   318  000094                     _bytesSent:
   319                           	opt stack 0
   320  000094                     	ds	2
   321  000096                     _nbBytesToSend:
   322                           	opt stack 0
   323  000096                     	ds	2
   324  000098                     _TMR1_InterruptHandler:
   325                           	opt stack 0
   326  000098                     	ds	2
   327  00009A                     _timer1ReloadVal:
   328                           	opt stack 0
   329  00009A                     	ds	2
   330  00009C                     _index_i2c:
   331                           	opt stack 0
   332  00009C                     	ds	2
   333  00009E                     _parameter6:
   334                           	opt stack 0
   335  00009E                     	ds	1
   336  00009F                     _parameter5:
   337                           	opt stack 0
   338  00009F                     	ds	1
   339  0000A0                     _parameter4:
   340                           	opt stack 0
   341  0000A0                     	ds	1
   342  0000A1                     _parameter3:
   343                           	opt stack 0
   344  0000A1                     	ds	1
   345  0000A2                     _parameter2:
   346                           	opt stack 0
   347  0000A2                     	ds	1
   348  0000A3                     _junk:
   349                           	opt stack 0
   350  0000A3                     	ds	1
   351                           tblptru	equ	0xFF8
   352                           tblptrh	equ	0xFF7
   353                           tblptrl	equ	0xFF6
   354                           tablat	equ	0xFF5
   355                           postinc0	equ	0xFEE
   356                           wreg	equ	0xFE8
   357                           
   358                           	psect	dataBANK0
   359  0000D6                     __pdataBANK0:
   360                           	opt stack 0
   361  0000D6                     _first:
   362                           	opt stack 0
   363  0000D6                     	ds	1
   364  0000D7                     _I2C_slaveWriteData:
   365                           	opt stack 0
   366  0000D7                     	ds	1
   367                           tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           	psect	cstackBANK1
   375  000100                     __pcstackBANK1:
   376                           	opt stack 0
   377  000100                     ??_TMR1_Initialize:
   378  000100                     ?___awdiv:
   379                           	opt stack 0
   380  000100                     EUSART2_Write@txData:
   381                           	opt stack 0
   382  000100                     ___awdiv@dividend:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x0
   386  000100                     	ds	1
   387  000101                     putch@txData:
   388                           	opt stack 0
   389                           
   390                           ; 1 bytes @ 0x1
   391  000101                     	ds	1
   392  000102                     ?_printf:
   393                           	opt stack 0
   394  000102                     printf@f:
   395                           	opt stack 0
   396  000102                     ___awdiv@divisor:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x2
   400  000102                     	ds	2
   401  000104                     ___awdiv@counter:
   402                           	opt stack 0
   403  000104                     printf@ap:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x4
   407  000104                     	ds	1
   408  000105                     ___awdiv@sign:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x5
   412  000105                     	ds	1
   413  000106                     printf@c:
   414                           	opt stack 0
   415  000106                     ___awdiv@quotient:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x6
   419  000106                     	ds	2
   420  000108                     delay_ms@ms:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x8
   424  000108                     	ds	2
   425  00010A                     ??_delay_ms:
   426                           
   427                           ; 1 bytes @ 0xA
   428  00010A                     	ds	1
   429  00010B                     delay_ms@n:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xB
   433  00010B                     	ds	2
   434  00010D                     delay_ms@i:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0xD
   438  00010D                     	ds	2
   439  00010F                     main@i:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0xF
   443  00010F                     	ds	2
   444  000111                     main@adc:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x11
   448  000111                     	ds	2
   449  000113                     main@delay:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x13
   453  000113                     	ds	2
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           
   461                           	psect	cstackBANK0
   462  0000A4                     __pcstackBANK0:
   463                           	opt stack 0
   464  0000A4                     pingAX@result:
   465                           	opt stack 0
   466  0000A4                     readAXData@result:
   467                           	opt stack 0
   468  0000A4                     writeAXData@result:
   469                           	opt stack 0
   470                           
   471                           ; 20 bytes @ 0x0
   472  0000A4                     	ds	20
   473  0000B8                     pingAX@packet:
   474                           	opt stack 0
   475  0000B8                     readAXData@packet:
   476                           	opt stack 0
   477  0000B8                     writeAXData@packet:
   478                           	opt stack 0
   479                           
   480                           ; 20 bytes @ 0x14
   481  0000B8                     	ds	20
   482  0000CC                     pingAX@nbParameters:
   483                           	opt stack 0
   484  0000CC                     readAXData@nbParameters:
   485                           	opt stack 0
   486  0000CC                     writeAXData@length:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x28
   490  0000CC                     	ds	2
   491  0000CE                     pingAX@length:
   492                           	opt stack 0
   493  0000CE                     readAXData@length:
   494                           	opt stack 0
   495  0000CE                     writeAXData@instruction:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x2A
   499  0000CE                     	ds	2
   500  0000D0                     pingAX@instruction:
   501                           	opt stack 0
   502  0000D0                     readAXData@instruction:
   503                           	opt stack 0
   504  0000D0                     writeAXData@error:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2C
   508  0000D0                     	ds	2
   509  0000D2                     pingAX@error:
   510                           	opt stack 0
   511  0000D2                     readAXData@error:
   512                           	opt stack 0
   513  0000D2                     writeAXData@size:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2E
   517  0000D2                     	ds	2
   518  0000D4                     readAXData@size:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x30
   522  0000D4                     	ds	2
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           
   530                           	psect	cstackCOMRAM
   531  000001                     __pcstackCOMRAM:
   532                           	opt stack 0
   533  000001                     ?_ADC_GetConversion:
   534                           	opt stack 0
   535  000001                     ?_getAddressSize:
   536                           	opt stack 0
   537  000001                     EUSART1_Write@txData:
   538                           	opt stack 0
   539  000001                     i2EUSART2_Write@txData:
   540                           	opt stack 0
   541  000001                     EUSART1_Read@i:
   542                           	opt stack 0
   543  000001                     getAddressSize@address:
   544                           	opt stack 0
   545  000001                     setLedOn@led:
   546                           	opt stack 0
   547  000001                     setLedOff@led:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x0
   551  000001                     	ds	1
   552  000002                     i2putch@txData:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x1
   556  000002                     	ds	1
   557  000003                     ??_ADC_GetConversion:
   558  000003                     ??_getAddressSize:
   559  000003                     ??_setLedOn:
   560  000003                     ??_setLedOff:
   561  000003                     ?i2_printf:
   562                           	opt stack 0
   563  000003                     sendAX@buffer:
   564                           	opt stack 0
   565  000003                     i2printf@f:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x2
   569  000003                     	ds	2
   570  000005                     ADC_GetConversion@channel:
   571                           	opt stack 0
   572  000005                     sendAX@packetSize:
   573                           	opt stack 0
   574  000005                     handleByteReceived@i:
   575                           	opt stack 0
   576  000005                     i2printf@ap:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x4
   580  000005                     	ds	2
   581  000007                     handleByteReceived@data:
   582                           	opt stack 0
   583  000007                     i2printf@c:
   584                           	opt stack 0
   585  000007                     sendAX@result:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x6
   589  000007                     	ds	2
   590  000009                     sendAX@parametersToRead:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x8
   594  000009                     	ds	2
   595  00000B                     ??_sendAX:
   596                           
   597                           ; 1 bytes @ 0xA
   598  00000B                     	ds	5
   599  000010                     sendAX@param0:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0xF
   603  000010                     	ds	2
   604  000012                     sendAX@param1:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x11
   608  000012                     	ds	2
   609  000014                     sendAX@param2:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x13
   613  000014                     	ds	2
   614  000016                     sendAX@param3:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x15
   618  000016                     	ds	2
   619  000018                     sendAX@param4:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x17
   623  000018                     	ds	2
   624  00001A                     sendAX@param5:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x19
   628  00001A                     	ds	2
   629  00001C                     sendAX@param6:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x1B
   633  00001C                     	ds	2
   634  00001E                     sendAX@count:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1D
   638  00001E                     	ds	2
   639  000020                     sendAX@header_found:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1F
   643  000020                     	ds	2
   644  000022                     sendAX@i:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x21
   648  000022                     	ds	2
   649  000024                     sendAX@i_1419:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x23
   653  000024                     	ds	2
   654  000026                     sendAX@i_1422:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x25
   658  000026                     	ds	2
   659  000028                     sendAX@i_1427:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x27
   663  000028                     	ds	2
   664  00002A                     sendAX@i_1436:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x29
   668  00002A                     	ds	2
   669  00002C                     sendAX@checksum:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x2B
   673  00002C                     	ds	1
   674  00002D                     sendAX@checksumResult:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x2C
   678  00002D                     	ds	1
   679  00002E                     sendAX@r0:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x2D
   683  00002E                     	ds	2
   684  000030                     sendAX@stop:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2F
   688  000030                     	ds	2
   689  000032                     ?_pingAX:
   690                           	opt stack 0
   691  000032                     ?_readAXData:
   692                           	opt stack 0
   693  000032                     ?_writeAXData:
   694                           	opt stack 0
   695  000032                     pingAX@id:
   696                           	opt stack 0
   697  000032                     readAXData@id:
   698                           	opt stack 0
   699  000032                     writeAXData@id:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x31
   703  000032                     	ds	2
   704  000034                     ??_pingAX:
   705  000034                     readAXData@address:
   706                           	opt stack 0
   707  000034                     writeAXData@address:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x33
   711  000034                     	ds	2
   712  000036                     readAXData@err:
   713                           	opt stack 0
   714  000036                     writeAXData@data:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x35
   718  000036                     	ds	2
   719  000038                     ??_readAXData:
   720  000038                     ??_writeAXData:
   721                           
   722                           ; 1 bytes @ 0x37
   723  000038                     	ds	2
   724  00003A                     ??_getByteToSend:
   725                           
   726                           ; 1 bytes @ 0x39
   727  00003A                     	ds	2
   728  00003C                     getByteToSend@error:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x3B
   732  00003C                     	ds	2
   733  00003E                     getByteToSend@error_1495:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x3D
   737  00003E                     	ds	2
   738  000040                     getByteToSend@xlow:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x3F
   742  000040                     	ds	1
   743  000041                     getByteToSend@xhigh:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x40
   747  000041                     	ds	1
   748  000042                     getByteToSend@xlow_1499:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x41
   752  000042                     	ds	1
   753  000043                     getByteToSend@xhigh_1500:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x42
   757  000043                     	ds	1
   758  000044                     getByteToSend@d:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x43
   762  000044                     	ds	1
   763  000045                     getByteToSend@value:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x44
   767  000045                     	ds	2
   768  000047                     getByteToSend@value_1498:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x46
   772  000047                     	ds	2
   773  000049                     getByteToSend@error_1490:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x48
   777  000049                     	ds	2
   778  00004B                     getByteToSend@r:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x4A
   782  00004B                     	ds	2
   783  00004D                     ??_INTERRUPT_InterruptManager:
   784                           
   785                           ; 1 bytes @ 0x4C
   786  00004D                     	ds	14
   787                           tblptru	equ	0xFF8
   788                           tblptrh	equ	0xFF7
   789                           tblptrl	equ	0xFF6
   790                           tablat	equ	0xFF5
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           
   794 ;;
   795 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   796 ;;
   797 ;; *************** function _main *****************
   798 ;; Defined at:
   799 ;;		line 52 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  i               2   15[BANK1 ] int 
   804 ;;  adc             2   17[BANK1 ] int 
   805 ;;  delay           2   19[BANK1 ] int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   816 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   818 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   819 ;;Total ram usage:        6 bytes
   820 ;; Hardware stack levels required when called:    9
   821 ;; This function calls:
   822 ;;		_SYSTEM_Initialize
   823 ;;		_delay_ms
   824 ;;		_printf
   825 ;; This function is called by:
   826 ;;		Startup code after reset
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text0
   831  001398                     __ptext0:
   832                           	opt stack 0
   833  001398                     _main:
   834                           	opt stack 22
   835                           
   836                           ;main.c: 54: for (int adc = 0; adc < 10; adc++) {
   837                           
   838                           ;incstack = 0
   839  001398  0E00               	movlw	0
   840  00139A  0101               	movlb	1	; () banked
   841  00139C  6F12               	movwf	(main@adc+1)& (0+255),b
   842  00139E  0E00               	movlw	0
   843  0013A0  6F11               	movwf	main@adc& (0+255),b
   844  0013A2                     l3106:
   845                           
   846                           ; BSR set to: 1
   847  0013A2  0101               	movlb	1	; () banked
   848  0013A4  BF12               	btfsc	(main@adc+1)& (0+255),7,b
   849  0013A6  D008               	goto	l3110
   850  0013A8  0101               	movlb	1	; () banked
   851  0013AA  5112               	movf	(main@adc+1)& (0+255),w,b
   852  0013AC  E118               	bnz	l3116
   853  0013AE  0E0A               	movlw	10
   854  0013B0  0101               	movlb	1	; () banked
   855  0013B2  5D11               	subwf	main@adc& (0+255),w,b
   856  0013B4  B0D8               	btfsc	status,0,c
   857  0013B6  D013               	goto	l3116
   858  0013B8                     l3110:
   859                           
   860                           ; BSR set to: 1
   861                           ;main.c: 55: adc_values[adc] = 0;
   862  0013B8  90D8               	bcf	status,0,c
   863  0013BA  0101               	movlb	1	; () banked
   864  0013BC  3511               	rlcf	main@adc& (0+255),w,b
   865  0013BE  6ED9               	movwf	fsr2l,c
   866  0013C0  0101               	movlb	1	; () banked
   867  0013C2  3512               	rlcf	(main@adc+1)& (0+255),w,b
   868  0013C4  6EDA               	movwf	fsr2h,c
   869  0013C6  0E80               	movlw	low _adc_values
   870  0013C8  26D9               	addwf	fsr2l,f,c
   871  0013CA  0E00               	movlw	high _adc_values
   872  0013CC  22DA               	addwfc	fsr2h,f,c
   873  0013CE  0E00               	movlw	0
   874  0013D0  6EDE               	movwf	postinc2,c
   875  0013D2  0E00               	movlw	0
   876  0013D4  6EDD               	movwf	postdec2,c
   877                           
   878                           ; BSR set to: 1
   879  0013D6  0101               	movlb	1	; () banked
   880  0013D8  4B11               	infsnz	main@adc& (0+255),f,b
   881  0013DA  2B12               	incf	(main@adc+1)& (0+255),f,b
   882  0013DC  D7E2               	goto	l3106
   883  0013DE                     l3116:
   884                           
   885                           ; BSR set to: 1
   886                           ;main.c: 56: }
   887                           ;main.c: 59: SYSTEM_Initialize();
   888  0013DE  EC3B  F00F         	call	_SYSTEM_Initialize	;wreg free
   889                           
   890                           ;main.c: 60: do { LATDbits.LATD3 = 1; } while(0);
   891  0013E2  868C               	bsf	3980,3,c	;volatile
   892                           
   893                           ;main.c: 78: (INTCONbits.GIE = 1);
   894  0013E4  8EF2               	bsf	intcon,7,c	;volatile
   895                           
   896                           ;main.c: 79: do { LATDbits.LATD2 = 1; } while(0);
   897  0013E6  848C               	bsf	3980,2,c	;volatile
   898                           
   899                           ;main.c: 81: (INTCONbits.PEIE = 1);
   900  0013E8  8CF2               	bsf	intcon,6,c	;volatile
   901                           
   902                           ;main.c: 88: printf("PM Robotix\r\n");
   903  0013EA  0E12               	movlw	low STR_2
   904  0013EC  0101               	movlb	1	; () banked
   905  0013EE  6F02               	movwf	printf@f& (0+255),b
   906  0013F0  0E0F               	movlw	high STR_2
   907  0013F2  0101               	movlb	1	; () banked
   908  0013F4  6F03               	movwf	(printf@f+1)& (0+255),b
   909  0013F6  ECD7  F00E         	call	_printf	;wreg free
   910                           
   911                           ;main.c: 89: printf("Init completed\r\n");
   912  0013FA  0E01               	movlw	low STR_3
   913  0013FC  0101               	movlb	1	; () banked
   914  0013FE  6F02               	movwf	printf@f& (0+255),b
   915  001400  0E0F               	movlw	high STR_3
   916  001402  0101               	movlb	1	; () banked
   917  001404  6F03               	movwf	(printf@f+1)& (0+255),b
   918  001406  ECD7  F00E         	call	_printf	;wreg free
   919                           
   920                           ;main.c: 91: int delay = 10;
   921  00140A  0E00               	movlw	0
   922  00140C  0101               	movlb	1	; () banked
   923  00140E  6F14               	movwf	(main@delay+1)& (0+255),b
   924  001410  0E0A               	movlw	10
   925  001412  6F13               	movwf	main@delay& (0+255),b
   926                           
   927                           ; BSR set to: 1
   928                           
   929                           ; BSR set to: 1
   930                           
   931                           ;main.c: 92: do { LATDbits.LATD1 = 1; } while(0);
   932  001414  828C               	bsf	3980,1,c	;volatile
   933                           
   934                           ; BSR set to: 1
   935                           
   936                           ; BSR set to: 1
   937                           
   938                           ;main.c: 93: do { LATDbits.LATD0 = 1; } while(0);
   939                           
   940                           ; BSR set to: 1
   941  001416  808C               	bsf	3980,0,c	;volatile
   942                           
   943                           ; BSR set to: 1
   944                           ;main.c: 94: for (int i = 0; i < 2; i++) {
   945                           
   946                           ; BSR set to: 1
   947  001418  0E00               	movlw	0
   948  00141A  0101               	movlb	1	; () banked
   949  00141C  6F10               	movwf	(main@i+1)& (0+255),b
   950  00141E  0E00               	movlw	0
   951  001420  6F0F               	movwf	main@i& (0+255),b
   952  001422                     l3138:
   953                           
   954                           ; BSR set to: 1
   955  001422  0101               	movlb	1	; () banked
   956  001424  BF10               	btfsc	(main@i+1)& (0+255),7,b
   957  001426  D008               	goto	l345
   958  001428  0101               	movlb	1	; () banked
   959  00142A  5110               	movf	(main@i+1)& (0+255),w,b
   960  00142C  E15F               	bnz	l385
   961  00142E  0E02               	movlw	2
   962  001430  0101               	movlb	1	; () banked
   963  001432  5D0F               	subwf	main@i& (0+255),w,b
   964  001434  B0D8               	btfsc	status,0,c
   965  001436  D05A               	goto	l385
   966  001438                     l345:
   967                           
   968                           ; BSR set to: 1
   969  001438  868C               	bsf	3980,3,c	;volatile
   970                           
   971                           ; BSR set to: 1
   972                           ;main.c: 97: delay_ms(delay);
   973                           
   974                           ; BSR set to: 1
   975  00143A  C113  F108         	movff	main@delay,delay_ms@ms
   976  00143E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   977  001442  EC61  F00D         	call	_delay_ms	;wreg free
   978                           
   979                           ;main.c: 98: do { LATDbits.LATD3 = 0; } while(0);
   980  001446  968C               	bcf	3980,3,c	;volatile
   981                           
   982                           ;main.c: 99: do { LATDbits.LATD2 = 1; } while(0);
   983  001448  848C               	bsf	3980,2,c	;volatile
   984                           
   985                           ;main.c: 100: delay_ms(delay);
   986  00144A  C113  F108         	movff	main@delay,delay_ms@ms
   987  00144E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   988  001452  EC61  F00D         	call	_delay_ms	;wreg free
   989                           
   990                           ;main.c: 101: do { LATDbits.LATD2 = 0; } while(0);
   991  001456  948C               	bcf	3980,2,c	;volatile
   992                           
   993                           ;main.c: 102: do { LATDbits.LATD1 = 1; } while(0);
   994  001458  828C               	bsf	3980,1,c	;volatile
   995                           
   996                           ;main.c: 103: delay_ms(delay);
   997  00145A  C113  F108         	movff	main@delay,delay_ms@ms
   998  00145E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
   999  001462  EC61  F00D         	call	_delay_ms	;wreg free
  1000                           
  1001                           ;main.c: 104: do { LATDbits.LATD1 = 0; } while(0);
  1002  001466  928C               	bcf	3980,1,c	;volatile
  1003                           
  1004                           ;main.c: 105: do { LATDbits.LATD0 = 1; } while(0);
  1005  001468  808C               	bsf	3980,0,c	;volatile
  1006                           
  1007                           ;main.c: 106: delay_ms(delay);
  1008  00146A  C113  F108         	movff	main@delay,delay_ms@ms
  1009  00146E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1010  001472  EC61  F00D         	call	_delay_ms	;wreg free
  1011                           
  1012                           ;main.c: 107: do { LATDbits.LATD0 = 0; } while(0);
  1013  001476  908C               	bcf	3980,0,c	;volatile
  1014                           
  1015                           ;main.c: 108: do { LATCbits.LATC2 = 1; } while(0);
  1016  001478  848B               	bsf	3979,2,c	;volatile
  1017                           
  1018                           ;main.c: 109: delay_ms(delay);
  1019  00147A  C113  F108         	movff	main@delay,delay_ms@ms
  1020  00147E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1021  001482  EC61  F00D         	call	_delay_ms	;wreg free
  1022                           
  1023                           ;main.c: 110: do { LATCbits.LATC2 = 0; } while(0);
  1024  001486  948B               	bcf	3979,2,c	;volatile
  1025                           
  1026                           ;main.c: 111: do { LATCbits.LATC1 = 1; } while(0);
  1027  001488  828B               	bsf	3979,1,c	;volatile
  1028                           
  1029                           ;main.c: 112: delay_ms(delay);
  1030  00148A  C113  F108         	movff	main@delay,delay_ms@ms
  1031  00148E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1032  001492  EC61  F00D         	call	_delay_ms	;wreg free
  1033                           
  1034                           ;main.c: 113: do { LATCbits.LATC1 = 0; } while(0);
  1035  001496  928B               	bcf	3979,1,c	;volatile
  1036                           
  1037                           ;main.c: 114: do { LATCbits.LATC0 = 1; } while(0);
  1038  001498  808B               	bsf	3979,0,c	;volatile
  1039                           
  1040                           ;main.c: 115: delay_ms(delay);
  1041  00149A  C113  F108         	movff	main@delay,delay_ms@ms
  1042  00149E  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1043  0014A2  EC61  F00D         	call	_delay_ms	;wreg free
  1044                           
  1045                           ;main.c: 116: do { LATCbits.LATC0 = 0; } while(0);
  1046  0014A6  908B               	bcf	3979,0,c	;volatile
  1047                           
  1048                           ;main.c: 117: do { LATBbits.LATB0 = 1; } while(0);
  1049  0014A8  808A               	bsf	3978,0,c	;volatile
  1050                           
  1051                           ;main.c: 118: delay_ms(delay);
  1052  0014AA  C113  F108         	movff	main@delay,delay_ms@ms
  1053  0014AE  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1054  0014B2  EC61  F00D         	call	_delay_ms	;wreg free
  1055                           
  1056                           ;main.c: 119: do { LATBbits.LATB0 = 0; } while(0);
  1057  0014B6  908A               	bcf	3978,0,c	;volatile
  1058                           
  1059                           ;main.c: 120: do { LATBbits.LATB2 = 1; } while(0);
  1060  0014B8  848A               	bsf	3978,2,c	;volatile
  1061                           
  1062                           ;main.c: 121: delay_ms(delay);
  1063  0014BA  C113  F108         	movff	main@delay,delay_ms@ms
  1064  0014BE  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1065  0014C2  EC61  F00D         	call	_delay_ms	;wreg free
  1066                           
  1067                           ;main.c: 122: do { LATBbits.LATB2 = 0; } while(0);
  1068  0014C6  948A               	bcf	3978,2,c	;volatile
  1069                           
  1070                           ;main.c: 123: do { LATBbits.LATB3 = 1; } while(0);
  1071  0014C8  868A               	bsf	3978,3,c	;volatile
  1072                           
  1073                           ;main.c: 124: delay_ms(delay);
  1074  0014CA  C113  F108         	movff	main@delay,delay_ms@ms
  1075  0014CE  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1076  0014D2  EC61  F00D         	call	_delay_ms	;wreg free
  1077                           
  1078                           ;main.c: 125: do { LATBbits.LATB3 = 0; } while(0);
  1079  0014D6  968A               	bcf	3978,3,c	;volatile
  1080                           
  1081                           ;main.c: 126: delay_ms(delay);
  1082  0014D8  C113  F108         	movff	main@delay,delay_ms@ms
  1083  0014DC  C114  F109         	movff	main@delay+1,delay_ms@ms+1
  1084  0014E0  EC61  F00D         	call	_delay_ms	;wreg free
  1085  0014E4  0101               	movlb	1	; () banked
  1086  0014E6  4B0F               	infsnz	main@i& (0+255),f,b
  1087  0014E8  2B10               	incf	(main@i+1)& (0+255),f,b
  1088  0014EA  D79B               	goto	l3138
  1089  0014EC                     l385:
  1090                           
  1091                           ; BSR set to: 1
  1092  0014EC  988C               	bcf	3980,4,c	;volatile
  1093  0014EE                     l388:
  1094  0014EE  868A               	bsf	3978,3,c	;volatile
  1095                           
  1096                           ;main.c: 134: delay_ms(500);
  1097  0014F0  0E01               	movlw	1
  1098  0014F2  0101               	movlb	1	; () banked
  1099  0014F4  6F09               	movwf	(delay_ms@ms+1)& (0+255),b
  1100  0014F6  0EF4               	movlw	244
  1101  0014F8  6F08               	movwf	delay_ms@ms& (0+255),b
  1102  0014FA  EC61  F00D         	call	_delay_ms	;wreg free
  1103                           
  1104                           ;main.c: 135: do { LATBbits.LATB3 = 0; } while(0);
  1105  0014FE  968A               	bcf	3978,3,c	;volatile
  1106                           
  1107                           ;main.c: 136: delay_ms(500);
  1108  001500  0E01               	movlw	1
  1109  001502  0101               	movlb	1	; () banked
  1110  001504  6F09               	movwf	(delay_ms@ms+1)& (0+255),b
  1111  001506  0EF4               	movlw	244
  1112  001508  6F08               	movwf	delay_ms@ms& (0+255),b
  1113  00150A  EC61  F00D         	call	_delay_ms	;wreg free
  1114  00150E  D7EF               	goto	l388
  1115  001510                     __end_of_main:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           intcon	equ	0xFF2
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           postinc2	equ	0xFDE
  1125                           postdec2	equ	0xFDD
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130 ;; *************** function _printf *****************
  1131 ;; Defined at:
  1132 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;  f               2    2[BANK1 ] PTR const unsigned char 
  1135 ;;		 -> STR_3(17), STR_2(13), STR_1(10), 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;  tmpval          4    0        struct .
  1138 ;;  cp              3    0        PTR const unsigned char 
  1139 ;;  ap              2    4[BANK1 ] PTR void [1]
  1140 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1141 ;;  len             2    0        unsigned int 
  1142 ;;  val             2    0        unsigned int 
  1143 ;;  c               1    6[BANK1 ] char 
  1144 ;;  flag            1    0        unsigned char 
  1145 ;;  prec            1    0        char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  2    2[BANK1 ] int 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1155 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1156 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1158 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1159 ;;Total ram usage:        5 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    8
  1162 ;; This function calls:
  1163 ;;		_putch
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text1
  1170  001DAE                     __ptext1:
  1171                           	opt stack 0
  1172  001DAE                     _printf:
  1173                           	opt stack 22
  1174                           
  1175                           ;doprnt.c: 466: va_list ap;
  1176                           ;doprnt.c: 499: signed char c;
  1177                           ;doprnt.c: 506: signed char prec;
  1178                           ;doprnt.c: 508: unsigned char flag;
  1179                           ;doprnt.c: 523: union {
  1180                           ;doprnt.c: 524: unsigned long vd;
  1181                           ;doprnt.c: 525: double integ;
  1182                           ;doprnt.c: 526: } tmpval;
  1183                           ;doprnt.c: 528: unsigned int val;
  1184                           ;doprnt.c: 529: unsigned len;
  1185                           ;doprnt.c: 530: const char * cp;
  1186                           ;doprnt.c: 533: *ap = __va_start();
  1187                           
  1188                           ;incstack = 0
  1189  001DAE  0E04               	movlw	low (?_printf+2)
  1190  001DB0  0101               	movlb	1	; () banked
  1191  001DB2  6F04               	movwf	printf@ap& (0+255),b
  1192  001DB4  0E01               	movlw	high (?_printf+2)
  1193  001DB6  0101               	movlb	1	; () banked
  1194  001DB8  6F05               	movwf	(printf@ap+1)& (0+255),b
  1195                           
  1196                           ;doprnt.c: 536: while(c = *f++) {
  1197  001DBA  D004               	goto	l3074
  1198  001DBC                     l3072:
  1199                           
  1200                           ; BSR set to: 1
  1201                           ;doprnt.c: 540: {
  1202                           ;doprnt.c: 541: (putch(c) );
  1203  001DBC  0101               	movlb	1	; () banked
  1204  001DBE  5106               	movf	printf@c& (0+255),w,b
  1205  001DC0  EC84  F00F         	call	_putch
  1206  001DC4                     l3074:
  1207  001DC4  C102  FFF6         	movff	printf@f,tblptrl
  1208  001DC8  C103  FFF7         	movff	printf@f+1,tblptrh
  1209  001DCC  0101               	movlb	1	; () banked
  1210  001DCE  4B02               	infsnz	printf@f& (0+255),f,b
  1211  001DD0  2B03               	incf	(printf@f+1)& (0+255),f,b
  1212  001DD2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1213  001DD2  6AF8               	clrf	tblptru,c
  1214  001DD4                     	endif
  1215  001DD4                     	if	0	;tblptru may be non-zero
  1216  001DD4                     	endif
  1217  001DD4  0008               	tblrd		*
  1218  001DD6  CFF5 F106          	movff	tablat,printf@c
  1219  001DDA  0101               	movlb	1	; () banked
  1220  001DDC  5106               	movf	printf@c& (0+255),w,b
  1221  001DDE  B4D8               	btfsc	status,2,c
  1222  001DE0  0012               	return	
  1223  001DE2  D7EC               	goto	l3072
  1224  001DE4                     __end_of_printf:
  1225                           	opt stack 0
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           intcon	equ	0xFF2
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postinc2	equ	0xFDE
  1234                           postdec2	equ	0xFDD
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _putch *****************
  1240 ;; Defined at:
  1241 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  txData          1    wreg     unsigned char 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  txData          1    1[BANK1 ] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1256 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1258 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1259 ;;Total ram usage:        1 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    7
  1262 ;; This function calls:
  1263 ;;		_EUSART2_Write
  1264 ;; This function is called by:
  1265 ;;		_printf
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text2
  1270  001F08                     __ptext2:
  1271                           	opt stack 0
  1272  001F08                     _putch:
  1273                           	opt stack 22
  1274                           
  1275                           ; BSR set to: 1
  1276                           ;incstack = 0
  1277                           ;putch@txData stored from wreg
  1278  001F08  0101               	movlb	1	; () banked
  1279  001F0A  6F01               	movwf	putch@txData& (0+255),b
  1280                           
  1281                           ;eusart2.c: 112: EUSART2_Write(txData);
  1282  001F0C  0101               	movlb	1	; () banked
  1283  001F0E  5101               	movf	putch@txData& (0+255),w,b
  1284  001F10  EC8B  F00F         	call	_EUSART2_Write
  1285  001F14  0012               	return		;funcret
  1286  001F16                     __end_of_putch:
  1287                           	opt stack 0
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           intcon	equ	0xFF2
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           postinc2	equ	0xFDE
  1296                           postdec2	equ	0xFDD
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _EUSART2_Write *****************
  1302 ;; Defined at:
  1303 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  txData          1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  txData          1    0[BANK1 ] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1318 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1320 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1321 ;;Total ram usage:        1 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    6
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_putch
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text3
  1332  001F16                     __ptext3:
  1333                           	opt stack 0
  1334  001F16                     _EUSART2_Write:
  1335                           	opt stack 22
  1336                           
  1337                           ;incstack = 0
  1338                           ;EUSART2_Write@txData stored from wreg
  1339  001F16  0101               	movlb	1	; () banked
  1340  001F18  6F00               	movwf	EUSART2_Write@txData& (0+255),b
  1341  001F1A                     l31:
  1342  001F1A  A8A4               	btfss	4004,4,c	;volatile
  1343  001F1C  D7FE               	goto	l31
  1344                           
  1345                           ;eusart2.c: 100: }
  1346                           ;eusart2.c: 102: TXREG2 = txData;
  1347  001F1E  C100  FF79         	movff	EUSART2_Write@txData,3961	;volatile
  1348  001F22  0012               	return		;funcret
  1349  001F24                     __end_of_EUSART2_Write:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           intcon	equ	0xFF2
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postinc2	equ	0xFDE
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _delay_ms *****************
  1365 ;; Defined at:
  1366 ;;		line 13 in file "ax.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  ms              2    8[BANK1 ] int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  i               2   13[BANK1 ] int 
  1371 ;;  n               2   11[BANK1 ] int 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1381 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1382 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1383 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1384 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1385 ;;Total ram usage:        7 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    7
  1388 ;; This function calls:
  1389 ;;		___awdiv
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text4
  1396  001AC2                     __ptext4:
  1397                           	opt stack 0
  1398  001AC2                     _delay_ms:
  1399                           	opt stack 23
  1400                           
  1401                           ;ax.c: 14: if (ms < 10) {
  1402                           
  1403                           ;incstack = 0
  1404  001AC2  0101               	movlb	1	; () banked
  1405  001AC4  BF09               	btfsc	(delay_ms@ms+1)& (0+255),7,b
  1406  001AC6  D008               	goto	l3094
  1407  001AC8  0101               	movlb	1	; () banked
  1408  001ACA  5109               	movf	(delay_ms@ms+1)& (0+255),w,b
  1409  001ACC  E10F               	bnz	l3096
  1410  001ACE  0E0A               	movlw	10
  1411  001AD0  0101               	movlb	1	; () banked
  1412  001AD2  5D08               	subwf	delay_ms@ms& (0+255),w,b
  1413  001AD4  B0D8               	btfsc	status,0,c
  1414  001AD6  D00A               	goto	l3096
  1415  001AD8                     l3094:
  1416                           
  1417                           ; BSR set to: 1
  1418                           ;ax.c: 15: _delay((unsigned long)((10)*(64000000/4000.0)));
  1419  001AD8  0ED0               	movlw	208
  1420  001ADA  0101               	movlb	1	; () banked
  1421  001ADC  6F0A               	movwf	??_delay_ms& (0+255),b
  1422  001ADE  0EC9               	movlw	201
  1423  001AE0                     u1847:
  1424  001AE0  2EE8               	decfsz	wreg,f,c
  1425  001AE2  D7FE               	bra	u1847
  1426  001AE4  2F0A               	decfsz	??_delay_ms& (0+255),f,b
  1427  001AE6  D7FC               	bra	u1847
  1428  001AE8  D000               	nop2	
  1429                           
  1430                           ;ax.c: 16: } else {
  1431  001AEA  0012               	return	
  1432  001AEC                     l3096:
  1433                           
  1434                           ;ax.c: 17: int n = ms / 10;
  1435  001AEC  C108  F100         	movff	delay_ms@ms,___awdiv@dividend
  1436  001AF0  C109  F101         	movff	delay_ms@ms+1,___awdiv@dividend+1
  1437  001AF4  0E00               	movlw	0
  1438  001AF6  0101               	movlb	1	; () banked
  1439  001AF8  6F03               	movwf	(___awdiv@divisor+1)& (0+255),b
  1440  001AFA  0E0A               	movlw	10
  1441  001AFC  6F02               	movwf	___awdiv@divisor& (0+255),b
  1442  001AFE  ECAC  F00C         	call	___awdiv	;wreg free
  1443  001B02  C100  F10B         	movff	?___awdiv,delay_ms@n
  1444  001B06  C101  F10C         	movff	?___awdiv+1,delay_ms@n+1
  1445                           
  1446                           ;ax.c: 18: for (int i = 0; i < n; i++) {
  1447  001B0A  0E00               	movlw	0
  1448  001B0C  0101               	movlb	1	; () banked
  1449  001B0E  6F0E               	movwf	(delay_ms@i+1)& (0+255),b
  1450  001B10  0E00               	movlw	0
  1451  001B12  6F0D               	movwf	delay_ms@i& (0+255),b
  1452  001B14  D00C               	goto	l417
  1453  001B16                     l3100:
  1454                           
  1455                           ; BSR set to: 1
  1456                           ;ax.c: 19: _delay((unsigned long)((10)*(64000000/4000.0)));
  1457  001B16  0ED0               	movlw	208
  1458  001B18  0101               	movlb	1	; () banked
  1459  001B1A  6F0A               	movwf	??_delay_ms& (0+255),b
  1460  001B1C  0EC9               	movlw	201
  1461  001B1E                     u1857:
  1462  001B1E  2EE8               	decfsz	wreg,f,c
  1463  001B20  D7FE               	bra	u1857
  1464  001B22  2F0A               	decfsz	??_delay_ms& (0+255),f,b
  1465  001B24  D7FC               	bra	u1857
  1466  001B26  D000               	nop2	
  1467  001B28  0101               	movlb	1	; () banked
  1468  001B2A  4B0D               	infsnz	delay_ms@i& (0+255),f,b
  1469  001B2C  2B0E               	incf	(delay_ms@i+1)& (0+255),f,b
  1470  001B2E                     l417:
  1471                           
  1472                           ; BSR set to: 1
  1473  001B2E  0101               	movlb	1	; () banked
  1474  001B30  510B               	movf	delay_ms@n& (0+255),w,b
  1475  001B32  0101               	movlb	1	; () banked
  1476  001B34  5D0D               	subwf	delay_ms@i& (0+255),w,b
  1477  001B36  0101               	movlb	1	; () banked
  1478  001B38  510E               	movf	(delay_ms@i+1)& (0+255),w,b
  1479  001B3A  0A80               	xorlw	128
  1480  001B3C  0101               	movlb	1	; () banked
  1481  001B3E  6F0A               	movwf	??_delay_ms& (0+255),b
  1482  001B40  0101               	movlb	1	; () banked
  1483  001B42  510C               	movf	(delay_ms@n+1)& (0+255),w,b
  1484  001B44  0A80               	xorlw	128
  1485  001B46  0101               	movlb	1	; () banked
  1486  001B48  590A               	subwfb	??_delay_ms& (0+255),w,b
  1487  001B4A  B0D8               	btfsc	status,0,c
  1488  001B4C  0012               	return	
  1489  001B4E  D7E3               	goto	l3100
  1490  001B50                     __end_of_delay_ms:
  1491                           	opt stack 0
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           intcon	equ	0xFF2
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postinc2	equ	0xFDE
  1500                           postdec2	equ	0xFDD
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function ___awdiv *****************
  1506 ;; Defined at:
  1507 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  dividend        2    0[BANK1 ] int 
  1510 ;;  divisor         2    2[BANK1 ] int 
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  quotient        2    6[BANK1 ] int 
  1513 ;;  sign            1    5[BANK1 ] unsigned char 
  1514 ;;  counter         1    4[BANK1 ] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2    0[BANK1 ] int 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1524 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1525 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1528 ;;Total ram usage:        8 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    6
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		_delay_ms
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text5
  1539  001958                     __ptext5:
  1540                           	opt stack 0
  1541  001958                     ___awdiv:
  1542                           	opt stack 23
  1543                           
  1544                           ;incstack = 0
  1545  001958  0E00               	movlw	0
  1546  00195A  0101               	movlb	1	; () banked
  1547  00195C  6F05               	movwf	___awdiv@sign& (0+255),b
  1548                           
  1549                           ; BSR set to: 1
  1550  00195E  0101               	movlb	1	; () banked
  1551  001960  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1552  001962  D008               	goto	l3034
  1553                           
  1554                           ; BSR set to: 1
  1555  001964  0101               	movlb	1	; () banked
  1556  001966  6D02               	negf	___awdiv@divisor& (0+255),b
  1557  001968  1F03               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1558  00196A  B0D8               	btfsc	status,0,c
  1559  00196C  2B03               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1560                           
  1561                           ; BSR set to: 1
  1562  00196E  0E01               	movlw	1
  1563  001970  0101               	movlb	1	; () banked
  1564  001972  6F05               	movwf	___awdiv@sign& (0+255),b
  1565  001974                     l3034:
  1566                           
  1567                           ; BSR set to: 1
  1568  001974  0101               	movlb	1	; () banked
  1569  001976  AF01               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1570  001978  D008               	goto	l3040
  1571                           
  1572                           ; BSR set to: 1
  1573  00197A  0101               	movlb	1	; () banked
  1574  00197C  6D00               	negf	___awdiv@dividend& (0+255),b
  1575  00197E  1F01               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1576  001980  B0D8               	btfsc	status,0,c
  1577  001982  2B01               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1578                           
  1579                           ; BSR set to: 1
  1580  001984  0E01               	movlw	1
  1581  001986  0101               	movlb	1	; () banked
  1582  001988  1B05               	xorwf	___awdiv@sign& (0+255),f,b
  1583  00198A                     l3040:
  1584                           
  1585                           ; BSR set to: 1
  1586  00198A  0E00               	movlw	0
  1587  00198C  0101               	movlb	1	; () banked
  1588  00198E  6F07               	movwf	(___awdiv@quotient+1)& (0+255),b
  1589  001990  0E00               	movlw	0
  1590  001992  6F06               	movwf	___awdiv@quotient& (0+255),b
  1591                           
  1592                           ; BSR set to: 1
  1593  001994  0101               	movlb	1	; () banked
  1594  001996  5102               	movf	___awdiv@divisor& (0+255),w,b
  1595  001998  0101               	movlb	1	; () banked
  1596  00199A  1103               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1597  00199C  B4D8               	btfsc	status,2,c
  1598  00199E  D02C               	goto	l3062
  1599                           
  1600                           ; BSR set to: 1
  1601  0019A0  0E01               	movlw	1
  1602  0019A2  0101               	movlb	1	; () banked
  1603  0019A4  6F04               	movwf	___awdiv@counter& (0+255),b
  1604  0019A6  D006               	goto	l3048
  1605  0019A8                     l3046:
  1606                           
  1607                           ; BSR set to: 1
  1608  0019A8  0101               	movlb	1	; () banked
  1609  0019AA  90D8               	bcf	status,0,c
  1610  0019AC  3702               	rlcf	___awdiv@divisor& (0+255),f,b
  1611  0019AE  3703               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1612  0019B0  0101               	movlb	1	; () banked
  1613  0019B2  2B04               	incf	___awdiv@counter& (0+255),f,b
  1614  0019B4                     l3048:
  1615                           
  1616                           ; BSR set to: 1
  1617  0019B4  0101               	movlb	1	; () banked
  1618  0019B6  AF03               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1619  0019B8  D7F7               	goto	l3046
  1620  0019BA                     l3050:
  1621                           
  1622                           ; BSR set to: 1
  1623  0019BA  0101               	movlb	1	; () banked
  1624  0019BC  90D8               	bcf	status,0,c
  1625  0019BE  3706               	rlcf	___awdiv@quotient& (0+255),f,b
  1626  0019C0  3707               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1627                           
  1628                           ; BSR set to: 1
  1629  0019C2  0101               	movlb	1	; () banked
  1630  0019C4  5102               	movf	___awdiv@divisor& (0+255),w,b
  1631  0019C6  0101               	movlb	1	; () banked
  1632  0019C8  5D00               	subwf	___awdiv@dividend& (0+255),w,b
  1633  0019CA  0101               	movlb	1	; () banked
  1634  0019CC  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1635  0019CE  0101               	movlb	1	; () banked
  1636  0019D0  5901               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1637  0019D2  A0D8               	btfss	status,0,c
  1638  0019D4  D00A               	goto	l3058
  1639                           
  1640                           ; BSR set to: 1
  1641  0019D6  0101               	movlb	1	; () banked
  1642  0019D8  5102               	movf	___awdiv@divisor& (0+255),w,b
  1643  0019DA  0101               	movlb	1	; () banked
  1644  0019DC  5F00               	subwf	___awdiv@dividend& (0+255),f,b
  1645  0019DE  0101               	movlb	1	; () banked
  1646  0019E0  5103               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1647  0019E2  0101               	movlb	1	; () banked
  1648  0019E4  5B01               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1649                           
  1650                           ; BSR set to: 1
  1651  0019E6  0101               	movlb	1	; () banked
  1652  0019E8  8106               	bsf	___awdiv@quotient& (0+255),0,b
  1653  0019EA                     l3058:
  1654                           
  1655                           ; BSR set to: 1
  1656  0019EA  0101               	movlb	1	; () banked
  1657  0019EC  90D8               	bcf	status,0,c
  1658  0019EE  3303               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1659  0019F0  3302               	rrcf	___awdiv@divisor& (0+255),f,b
  1660                           
  1661                           ; BSR set to: 1
  1662  0019F2  0101               	movlb	1	; () banked
  1663  0019F4  2F04               	decfsz	___awdiv@counter& (0+255),f,b
  1664  0019F6  D7E1               	goto	l3050
  1665  0019F8                     l3062:
  1666                           
  1667                           ; BSR set to: 1
  1668  0019F8  0101               	movlb	1	; () banked
  1669  0019FA  5105               	movf	___awdiv@sign& (0+255),w,b
  1670  0019FC  0101               	movlb	1	; () banked
  1671  0019FE  B4D8               	btfsc	status,2,c
  1672  001A00  D005               	goto	l3066
  1673                           
  1674                           ; BSR set to: 1
  1675  001A02  0101               	movlb	1	; () banked
  1676  001A04  6D06               	negf	___awdiv@quotient& (0+255),b
  1677  001A06  1F07               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1678  001A08  B0D8               	btfsc	status,0,c
  1679  001A0A  2B07               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1680  001A0C                     l3066:
  1681                           
  1682                           ; BSR set to: 1
  1683  001A0C  C106  F100         	movff	___awdiv@quotient,?___awdiv
  1684  001A10  C107  F101         	movff	___awdiv@quotient+1,?___awdiv+1
  1685  001A14  0012               	return	
  1686  001A16                     __end_of___awdiv:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           intcon	equ	0xFF2
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postinc2	equ	0xFDE
  1696                           postdec2	equ	0xFDD
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _SYSTEM_Initialize *****************
  1702 ;; Defined at:
  1703 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1721 ;;Total ram usage:        0 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    8
  1724 ;; This function calls:
  1725 ;;		_ADC_Initialize
  1726 ;;		_EUSART1_Initialize
  1727 ;;		_EUSART2_Initialize
  1728 ;;		_I2C_Initialize
  1729 ;;		_INTERRUPT_Initialize
  1730 ;;		_OSCILLATOR_Initialize
  1731 ;;		_PIN_MANAGER_Initialize
  1732 ;;		_TMR1_Initialize
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text6
  1739  001E76                     __ptext6:
  1740                           	opt stack 0
  1741  001E76                     _SYSTEM_Initialize:
  1742                           	opt stack 22
  1743                           
  1744                           ;mcc.c: 114: INTERRUPT_Initialize();
  1745                           
  1746                           ; BSR set to: 1
  1747                           ;incstack = 0
  1748  001E76  ECA5  F00F         	call	_INTERRUPT_Initialize	;wreg free
  1749                           
  1750                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  1751  001E7A  EC9E  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  1752                           
  1753                           ;mcc.c: 116: OSCILLATOR_Initialize();
  1754  001E7E  EC7B  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  1755                           
  1756                           ;mcc.c: 117: I2C_Initialize();
  1757  001E82  EC4C  F00F         	call	_I2C_Initialize	;wreg free
  1758                           
  1759                           ;mcc.c: 118: ADC_Initialize();
  1760  001E86  EC59  F00F         	call	_ADC_Initialize	;wreg free
  1761                           
  1762                           ;mcc.c: 119: TMR1_Initialize();
  1763  001E8A  EC81  F00E         	call	_TMR1_Initialize	;wreg free
  1764                           
  1765                           ;mcc.c: 120: EUSART1_Initialize();
  1766  001E8E  EC70  F00F         	call	_EUSART1_Initialize	;wreg free
  1767                           
  1768                           ;mcc.c: 121: EUSART2_Initialize();
  1769  001E92  EC65  F00F         	call	_EUSART2_Initialize	;wreg free
  1770  001E96  0012               	return		;funcret
  1771  001E98                     __end_of_SYSTEM_Initialize:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           intcon	equ	0xFF2
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           postinc2	equ	0xFDE
  1781                           postdec2	equ	0xFDD
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _TMR1_Initialize *****************
  1787 ;; Defined at:
  1788 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1804 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;Total ram usage:        2 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    7
  1809 ;; This function calls:
  1810 ;;		_TMR1_StartTimer
  1811 ;; This function is called by:
  1812 ;;		_SYSTEM_Initialize
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text7
  1817  001D02                     __ptext7:
  1818                           	opt stack 0
  1819  001D02                     _TMR1_Initialize:
  1820                           	opt stack 22
  1821                           
  1822                           ;tmr1.c: 68: T1CON = 0x30;
  1823                           
  1824                           ;incstack = 0
  1825  001D02  0E30               	movlw	48
  1826  001D04  6ECD               	movwf	4045,c	;volatile
  1827                           
  1828                           ;tmr1.c: 71: T1GCON = 0x00;
  1829  001D06  0E00               	movlw	0
  1830  001D08  6EAA               	movwf	4010,c	;volatile
  1831                           
  1832                           ;tmr1.c: 74: TMR1H = 0xF8;
  1833  001D0A  0EF8               	movlw	248
  1834  001D0C  6ECF               	movwf	4047,c	;volatile
  1835                           
  1836                           ;tmr1.c: 77: TMR1L = 0x30;
  1837  001D0E  0E30               	movlw	48
  1838  001D10  6ECE               	movwf	4046,c	;volatile
  1839                           
  1840                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  1841  001D12  50CE               	movf	4046,w,c	;volatile
  1842  001D14  CFCF F100          	movff	4047,??_TMR1_Initialize	;volatile
  1843  001D18  0101               	movlb	1	; () banked
  1844  001D1A  6B01               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  1845  001D1C  C100  F101         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  1846  001D20  0101               	movlb	1	; () banked
  1847  001D22  6B00               	clrf	??_TMR1_Initialize& (0+255),b
  1848  001D24  0101               	movlb	1	; () banked
  1849  001D26  1100               	iorwf	??_TMR1_Initialize& (0+255),w,b
  1850  001D28  0100               	movlb	0	; () banked
  1851  001D2A  6F9A               	movwf	_timer1ReloadVal& (0+255),b	;volatile
  1852  001D2C  0101               	movlb	1	; () banked
  1853  001D2E  5101               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  1854  001D30  0100               	movlb	0	; () banked
  1855  001D32  6F9B               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  1859  001D34  909E               	bcf	3998,0,c	;volatile
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;tmr1.c: 86: TMR1_StartTimer();
  1863  001D36  ECA3  F00F         	call	_TMR1_StartTimer	;wreg free
  1864  001D3A  0012               	return		;funcret
  1865  001D3C                     __end_of_TMR1_Initialize:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           intcon	equ	0xFF2
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postinc2	equ	0xFDE
  1875                           postdec2	equ	0xFDD
  1876                           fsr2h	equ	0xFDA
  1877                           fsr2l	equ	0xFD9
  1878                           status	equ	0xFD8
  1879                           
  1880 ;; *************** function _TMR1_StartTimer *****************
  1881 ;; Defined at:
  1882 ;;		line 89 in file "mcc_generated_files/tmr1.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      void 
  1889 ;; Registers used:
  1890 ;;		None
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1900 ;;Total ram usage:        0 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    6
  1903 ;; This function calls:
  1904 ;;		Nothing
  1905 ;; This function is called by:
  1906 ;;		_TMR1_Initialize
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           	psect	text8
  1911  001F46                     __ptext8:
  1912                           	opt stack 0
  1913  001F46                     _TMR1_StartTimer:
  1914                           	opt stack 22
  1915                           
  1916                           ;tmr1.c: 92: T1CONbits.TMR1ON = 1;
  1917                           
  1918                           ;incstack = 0
  1919  001F46  80CD               	bsf	4045,0,c	;volatile
  1920  001F48  0012               	return		;funcret
  1921  001F4A                     __end_of_TMR1_StartTimer:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           intcon	equ	0xFF2
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _PIN_MANAGER_Initialize *****************
  1937 ;; Defined at:
  1938 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;		None
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;Total ram usage:        0 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    6
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_SYSTEM_Initialize
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text9
  1967  001D3C                     __ptext9:
  1968                           	opt stack 0
  1969  001D3C                     _PIN_MANAGER_Initialize:
  1970                           	opt stack 23
  1971                           
  1972                           ;pin_manager.c: 56: LATE = 0x00;
  1973                           
  1974                           ;incstack = 0
  1975  001D3C  0E00               	movlw	0
  1976  001D3E  6E8D               	movwf	3981,c	;volatile
  1977                           
  1978                           ;pin_manager.c: 57: LATD = 0x00;
  1979  001D40  0E00               	movlw	0
  1980  001D42  6E8C               	movwf	3980,c	;volatile
  1981                           
  1982                           ;pin_manager.c: 58: LATA = 0x00;
  1983  001D44  0E00               	movlw	0
  1984  001D46  6E89               	movwf	3977,c	;volatile
  1985                           
  1986                           ;pin_manager.c: 59: LATB = 0x00;
  1987  001D48  0E00               	movlw	0
  1988  001D4A  6E8A               	movwf	3978,c	;volatile
  1989                           
  1990                           ;pin_manager.c: 60: LATC = 0x00;
  1991  001D4C  0E00               	movlw	0
  1992  001D4E  6E8B               	movwf	3979,c	;volatile
  1993                           
  1994                           ;pin_manager.c: 65: TRISE = 0x07;
  1995  001D50  0E07               	movlw	7
  1996  001D52  6E96               	movwf	3990,c	;volatile
  1997                           
  1998                           ;pin_manager.c: 66: TRISA = 0xEF;
  1999  001D54  0EEF               	movlw	239
  2000  001D56  6E92               	movwf	3986,c	;volatile
  2001                           
  2002                           ;pin_manager.c: 67: TRISB = 0xF2;
  2003  001D58  0EF2               	movlw	242
  2004  001D5A  6E93               	movwf	3987,c	;volatile
  2005                           
  2006                           ;pin_manager.c: 68: TRISC = 0xB8;
  2007  001D5C  0EB8               	movlw	184
  2008  001D5E  6E94               	movwf	3988,c	;volatile
  2009                           
  2010                           ;pin_manager.c: 69: TRISD = 0xA0;
  2011  001D60  0EA0               	movlw	160
  2012  001D62  6E95               	movwf	3989,c	;volatile
  2013                           
  2014                           ;pin_manager.c: 74: ANCON0 = 0xFF;
  2015  001D64  010F               	movlb	15	; () banked
  2016  001D66  695D               	setf	93,b	;volatile
  2017                           
  2018                           ;pin_manager.c: 75: ANCON1 = 0x7B;
  2019  001D68  0E7B               	movlw	123
  2020  001D6A  010F               	movlb	15	; () banked
  2021  001D6C  6F5C               	movwf	92,b	;volatile
  2022                           
  2023                           ;pin_manager.c: 80: WPUB = 0xFE;
  2024  001D6E  0EFE               	movlw	254
  2025  001D70  010F               	movlb	15	; () banked
  2026  001D72  6F5B               	movwf	91,b	;volatile
  2027                           
  2028                           ; BSR set to: 15
  2029  001D74  0012               	return		;funcret
  2030  001D76                     __end_of_PIN_MANAGER_Initialize:
  2031                           	opt stack 0
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           intcon	equ	0xFF2
  2037                           postinc0	equ	0xFEE
  2038                           wreg	equ	0xFE8
  2039                           postinc2	equ	0xFDE
  2040                           postdec2	equ	0xFDD
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _OSCILLATOR_Initialize *****************
  2046 ;; Defined at:
  2047 ;;		line 124 in file "mcc_generated_files/mcc.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    6
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_SYSTEM_Initialize
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text10
  2076  001EF6                     __ptext10:
  2077                           	opt stack 0
  2078  001EF6                     _OSCILLATOR_Initialize:
  2079                           	opt stack 23
  2080                           
  2081                           ;mcc.c: 127: OSCCON = 0x60;
  2082                           
  2083                           ; BSR set to: 15
  2084                           ;incstack = 0
  2085  001EF6  0E60               	movlw	96
  2086  001EF8  6ED3               	movwf	4051,c	;volatile
  2087                           
  2088                           ;mcc.c: 129: OSCCON2 = 0x00;
  2089  001EFA  0E00               	movlw	0
  2090  001EFC  6ED2               	movwf	4050,c	;volatile
  2091                           
  2092                           ;mcc.c: 131: OSCTUNE = 0x00;
  2093  001EFE  0E00               	movlw	0
  2094  001F00  6E9B               	movwf	3995,c	;volatile
  2095                           
  2096                           ;mcc.c: 133: REFOCON = 0x00;
  2097  001F02  0E00               	movlw	0
  2098  001F04  6E9A               	movwf	3994,c	;volatile
  2099  001F06  0012               	return		;funcret
  2100  001F08                     __end_of_OSCILLATOR_Initialize:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           intcon	equ	0xFF2
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postinc2	equ	0xFDE
  2110                           postdec2	equ	0xFDD
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _INTERRUPT_Initialize *****************
  2116 ;; Defined at:
  2117 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		None
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2135 ;;Total ram usage:        0 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    6
  2138 ;; This function calls:
  2139 ;;		Nothing
  2140 ;; This function is called by:
  2141 ;;		_SYSTEM_Initialize
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text11
  2146  001F4A                     __ptext11:
  2147                           	opt stack 0
  2148  001F4A                     _INTERRUPT_Initialize:
  2149                           	opt stack 23
  2150                           
  2151                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  2152                           
  2153                           ;incstack = 0
  2154  001F4A  9ED0               	bcf	4048,7,c	;volatile
  2155  001F4C  0012               	return		;funcret
  2156  001F4E                     __end_of_INTERRUPT_Initialize:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           intcon	equ	0xFF2
  2163                           postinc0	equ	0xFEE
  2164                           wreg	equ	0xFE8
  2165                           postinc2	equ	0xFDE
  2166                           postdec2	equ	0xFDD
  2167                           fsr2h	equ	0xFDA
  2168                           fsr2l	equ	0xFD9
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _I2C_Initialize *****************
  2172 ;; Defined at:
  2173 ;;		line 79 in file "mcc_generated_files/i2c.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2191 ;;Total ram usage:        0 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    6
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_SYSTEM_Initialize
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text12
  2202  001E98                     __ptext12:
  2203                           	opt stack 0
  2204  001E98                     _I2C_Initialize:
  2205                           	opt stack 23
  2206                           
  2207                           ;i2c.c: 82: SSPSTAT = 0x00;
  2208                           
  2209                           ;incstack = 0
  2210  001E98  0E00               	movlw	0
  2211  001E9A  6EC7               	movwf	4039,c	;volatile
  2212                           
  2213                           ;i2c.c: 84: SSPCON1 = 0x3E;
  2214  001E9C  0E3E               	movlw	62
  2215  001E9E  6EC6               	movwf	4038,c	;volatile
  2216                           
  2217                           ;i2c.c: 86: SSPCON2 = 0x01;
  2218  001EA0  0E01               	movlw	1
  2219  001EA2  6EC5               	movwf	4037,c	;volatile
  2220                           
  2221                           ;i2c.c: 88: SSPADD = (0x7F << 1);
  2222  001EA4  0EFE               	movlw	254
  2223  001EA6  6EC8               	movwf	4040,c	;volatile
  2224                           
  2225                           ;i2c.c: 90: SSPADD = (0x08 << 1);
  2226  001EA8  0E10               	movlw	16
  2227  001EAA  6EC8               	movwf	4040,c	;volatile
  2228                           
  2229                           ;i2c.c: 93: PIR1bits.SSPIF = 0;
  2230  001EAC  969E               	bcf	3998,3,c	;volatile
  2231                           
  2232                           ;i2c.c: 95: PIE1bits.SSPIE = 1;
  2233  001EAE  869D               	bsf	3997,3,c	;volatile
  2234  001EB0  0012               	return		;funcret
  2235  001EB2                     __end_of_I2C_Initialize:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           intcon	equ	0xFF2
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postinc2	equ	0xFDE
  2245                           postdec2	equ	0xFDD
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _EUSART2_Initialize *****************
  2251 ;; Defined at:
  2252 ;;		line 55 in file "mcc_generated_files/eusart2.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, status,2
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2270 ;;Total ram usage:        0 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    6
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_SYSTEM_Initialize
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text13
  2281  001ECA                     __ptext13:
  2282                           	opt stack 0
  2283  001ECA                     _EUSART2_Initialize:
  2284                           	opt stack 23
  2285                           
  2286                           ;eusart2.c: 60: BAUDCON2 = 0x18;
  2287                           
  2288                           ;incstack = 0
  2289  001ECA  0E18               	movlw	24
  2290  001ECC  6EB9               	movwf	4025,c	;volatile
  2291                           
  2292                           ;eusart2.c: 63: RCSTA2 = 0x90;
  2293  001ECE  0E90               	movlw	144
  2294  001ED0  6EA6               	movwf	4006,c	;volatile
  2295                           
  2296                           ;eusart2.c: 66: TXSTA2 = 0xA6;
  2297  001ED2  0EA6               	movlw	166
  2298  001ED4  6EBA               	movwf	4026,c	;volatile
  2299                           
  2300                           ;eusart2.c: 69: SPBRG2 = 0x8A;
  2301  001ED6  0E8A               	movlw	138
  2302  001ED8  6E7B               	movwf	3963,c	;volatile
  2303                           
  2304                           ;eusart2.c: 72: SPBRGH2 = 0x00;
  2305  001EDA  0E00               	movlw	0
  2306  001EDC  6E7C               	movwf	3964,c	;volatile
  2307  001EDE  0012               	return		;funcret
  2308  001EE0                     __end_of_EUSART2_Initialize:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _EUSART1_Initialize *****************
  2324 ;; Defined at:
  2325 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2343 ;;Total ram usage:        0 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    6
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_SYSTEM_Initialize
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text14
  2354  001EE0                     __ptext14:
  2355                           	opt stack 0
  2356  001EE0                     _EUSART1_Initialize:
  2357                           	opt stack 23
  2358                           
  2359                           ;eusart1.c: 59: BAUDCON1 = 0x08;
  2360                           
  2361                           ;incstack = 0
  2362  001EE0  0E08               	movlw	8
  2363  001EE2  6EA7               	movwf	4007,c	;volatile
  2364                           
  2365                           ;eusart1.c: 62: RCSTA1 = 0x90;
  2366  001EE4  0E90               	movlw	144
  2367  001EE6  6EAB               	movwf	4011,c	;volatile
  2368                           
  2369                           ;eusart1.c: 65: TXSTA1 = 0xA4;
  2370  001EE8  0EA4               	movlw	164
  2371  001EEA  6EAC               	movwf	4012,c	;volatile
  2372                           
  2373                           ;eusart1.c: 68: SPBRG1 = 0x0F;
  2374  001EEC  0E0F               	movlw	15
  2375  001EEE  6EAF               	movwf	4015,c	;volatile
  2376                           
  2377                           ;eusart1.c: 71: SPBRGH1 = 0x00;
  2378  001EF0  0E00               	movlw	0
  2379  001EF2  6E7D               	movwf	3965,c	;volatile
  2380  001EF4  0012               	return		;funcret
  2381  001EF6                     __end_of_EUSART1_Initialize:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           intcon	equ	0xFF2
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           fsr2h	equ	0xFDA
  2393                           fsr2l	equ	0xFD9
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _ADC_Initialize *****************
  2397 ;; Defined at:
  2398 ;;		line 58 in file "mcc_generated_files/adc.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    6
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_SYSTEM_Initialize
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text15
  2427  001EB2                     __ptext15:
  2428                           	opt stack 0
  2429  001EB2                     _ADC_Initialize:
  2430                           	opt stack 23
  2431                           
  2432                           ;adc.c: 63: ADCON0 = 0x01;
  2433                           
  2434                           ;incstack = 0
  2435  001EB2  0E01               	movlw	1
  2436  001EB4  6EC2               	movwf	4034,c	;volatile
  2437                           
  2438                           ;adc.c: 66: ADCON1 = 0x80;
  2439  001EB6  0E80               	movlw	128
  2440  001EB8  6EC1               	movwf	4033,c	;volatile
  2441                           
  2442                           ;adc.c: 69: ADCON2 = 0x16;
  2443  001EBA  0E16               	movlw	22
  2444  001EBC  6EC0               	movwf	4032,c	;volatile
  2445                           
  2446                           ;adc.c: 72: ADRESH = 0x00;
  2447  001EBE  0E00               	movlw	0
  2448  001EC0  6EC4               	movwf	4036,c	;volatile
  2449                           
  2450                           ;adc.c: 75: ADRESL = 0x00;
  2451  001EC2  0E00               	movlw	0
  2452  001EC4  6EC3               	movwf	4035,c	;volatile
  2453                           
  2454                           ;adc.c: 78: PIE1bits.ADIE = 1;
  2455  001EC6  8C9D               	bsf	3997,6,c	;volatile
  2456  001EC8  0012               	return		;funcret
  2457  001ECA                     __end_of_ADC_Initialize:
  2458                           	opt stack 0
  2459                           tblptru	equ	0xFF8
  2460                           tblptrh	equ	0xFF7
  2461                           tblptrl	equ	0xFF6
  2462                           tablat	equ	0xFF5
  2463                           intcon	equ	0xFF2
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           postinc2	equ	0xFDE
  2467                           postdec2	equ	0xFDD
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _INTERRUPT_InterruptManager *****************
  2473 ;; Defined at:
  2474 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2491 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2492 ;;Total ram usage:       14 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    5
  2495 ;; This function calls:
  2496 ;;		_ADC_ISR
  2497 ;;		_I2C_ISR
  2498 ;; This function is called by:
  2499 ;;		Interrupt level 2
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	intcode
  2504  000008                     __pintcode:
  2505                           	opt stack 0
  2506  000008                     _INTERRUPT_InterruptManager:
  2507                           	opt stack 22
  2508                           
  2509                           ;incstack = 0
  2510  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2511  00000A  CFFA F04D          	movff	pclath,??_INTERRUPT_InterruptManager
  2512  00000E  CFFB F04E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2513  000012  CFE9 F04F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2514  000016  CFEA F050          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2515  00001A  CFE1 F051          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2516  00001E  CFE2 F052          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2517  000022  CFD9 F053          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2518  000026  CFDA F054          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2519  00002A  CFF3 F055          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2520  00002E  CFF4 F056          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2521  000032  CFF6 F057          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2522  000036  CFF7 F058          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2523  00003A  CFF8 F059          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2524  00003E  CFF5 F05A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2525                           
  2526                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  2527  000042  BCF2               	btfsc	intcon,6,c	;volatile
  2528  000044  AC9D               	btfss	3997,6,c	;volatile
  2529  000046  D003               	goto	i2l2830
  2530  000048  BC9E               	btfsc	3998,6,c	;volatile
  2531                           
  2532                           ;interrupt_manager.c: 61: {
  2533                           ;interrupt_manager.c: 62: ADC_ISR();
  2534  00004A  ECA7  F00F         	call	_ADC_ISR	;wreg free
  2535  00004E                     i2l2830:
  2536                           
  2537                           ;interrupt_manager.c: 63: }
  2538                           ;interrupt_manager.c: 64: if(INTCONbits.PEIE == 1 && PIE1bits.SSPIE == 1 && PIR1bits.SSP
      +                          IF == 1)
  2539  00004E  BCF2               	btfsc	intcon,6,c	;volatile
  2540  000050  A69D               	btfss	3997,3,c	;volatile
  2541  000052  D003               	goto	i2l312
  2542  000054  B69E               	btfsc	3998,3,c	;volatile
  2543                           
  2544                           ;interrupt_manager.c: 65: {
  2545                           ;interrupt_manager.c: 66: I2C_ISR();
  2546  000056  EC0B  F00D         	call	_I2C_ISR	;wreg free
  2547  00005A                     i2l312:
  2548  00005A  C05A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2549  00005E  C059  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2550  000062  C058  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2551  000066  C057  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2552  00006A  C056  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2553  00006E  C055  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2554  000072  C054  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2555  000076  C053  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2556  00007A  C052  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2557  00007E  C051  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2558  000082  C050  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2559  000086  C04F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2560  00008A  C04E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2561  00008E  C04D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2562  000092  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2563  000094  0011               	retfie		f
  2564  000096                     __end_of_INTERRUPT_InterruptManager:
  2565                           	opt stack 0
  2566                           pclatu	equ	0xFFB
  2567                           pclath	equ	0xFFA
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           postinc0	equ	0xFEE
  2576                           fsr0h	equ	0xFEA
  2577                           fsr0l	equ	0xFE9
  2578                           wreg	equ	0xFE8
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _I2C_ISR *****************
  2588 ;; Defined at:
  2589 ;;		line 102 in file "mcc_generated_files/i2c.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;Total ram usage:        0 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    4
  2610 ;; This function calls:
  2611 ;;		_getByteToSend
  2612 ;;		_handleByteReceived
  2613 ;;		i2_printf
  2614 ;; This function is called by:
  2615 ;;		_INTERRUPT_InterruptManager
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text17
  2620  001A16                     __ptext17:
  2621                           	opt stack 0
  2622  001A16                     _I2C_ISR:
  2623                           	opt stack 22
  2624                           
  2625                           ;i2c.c: 103: if (SSPSTATbits.BF == 0 && SSPSTATbits.BF == 0) {
  2626                           
  2627                           ;incstack = 0
  2628  001A16  A0C7               	btfss	4039,0,c	;volatile
  2629  001A18  B0C7               	btfsc	4039,0,c	;volatile
  2630  001A1A  D002               	goto	i2l153
  2631                           
  2632                           ;i2c.c: 105: SSPIF = 0;
  2633  001A1C  969E               	bcf	3998,3,c	;volatile
  2634                           
  2635                           ;i2c.c: 106: return;
  2636  001A1E  0012               	return	
  2637  001A20                     i2l153:
  2638                           
  2639                           ;i2c.c: 107: }
  2640                           ;i2c.c: 109: if (SSPIF)
  2641  001A20  A69E               	btfss	3998,3,c	;volatile
  2642  001A22  D041               	goto	i2l2754
  2643                           
  2644                           ;i2c.c: 110: {
  2645                           ;i2c.c: 111: if (SSPSTATbits.R_nW)
  2646  001A24  A4C7               	btfss	4039,2,c	;volatile
  2647  001A26  D016               	goto	i2l2724
  2648                           
  2649                           ;i2c.c: 112: {
  2650                           ;i2c.c: 113: if (!SSPSTATbits.D_nA)
  2651  001A28  BAC7               	btfsc	4039,5,c	;volatile
  2652  001A2A  D009               	goto	i2l2716
  2653                           
  2654                           ;i2c.c: 114: {
  2655                           ;i2c.c: 115: SSPBUF = getByteToSend(index_i2c);
  2656  001A2C  0100               	movlb	0	; () banked
  2657  001A2E  519C               	movf	_index_i2c& (0+255),w,b
  2658  001A30  ECF1  F008         	call	_getByteToSend
  2659  001A34  6EC9               	movwf	4041,c	;volatile
  2660                           
  2661                           ;i2c.c: 116: index_i2c++;
  2662  001A36  0100               	movlb	0	; () banked
  2663  001A38  4B9C               	infsnz	_index_i2c& (0+255),f,b
  2664  001A3A  2B9D               	incf	(_index_i2c+1)& (0+255),f,b
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;i2c.c: 117: SSPCON1bits.CKP = 1;
  2668  001A3C  88C6               	bsf	4038,4,c	;volatile
  2669  001A3E                     i2l2716:
  2670                           
  2671                           ;i2c.c: 118: }
  2672                           ;i2c.c: 119: if (SSPSTATbits.D_nA)
  2673  001A3E  AAC7               	btfss	4039,5,c	;volatile
  2674  001A40  D009               	goto	i2l2724
  2675                           
  2676                           ;i2c.c: 120: {
  2677                           ;i2c.c: 121: SSPBUF = getByteToSend(index_i2c);
  2678  001A42  0100               	movlb	0	; () banked
  2679  001A44  519C               	movf	_index_i2c& (0+255),w,b
  2680  001A46  ECF1  F008         	call	_getByteToSend
  2681  001A4A  6EC9               	movwf	4041,c	;volatile
  2682                           
  2683                           ;i2c.c: 122: index_i2c++;
  2684  001A4C  0100               	movlb	0	; () banked
  2685  001A4E  4B9C               	infsnz	_index_i2c& (0+255),f,b
  2686  001A50  2B9D               	incf	(_index_i2c+1)& (0+255),f,b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;i2c.c: 123: SSPCON1bits.CKP = 1;
  2690  001A52  88C6               	bsf	4038,4,c	;volatile
  2691  001A54                     i2l2724:
  2692                           
  2693                           ;i2c.c: 124: }
  2694                           ;i2c.c: 126: }
  2695                           ;i2c.c: 127: if (!SSPSTATbits.R_nW)
  2696  001A54  B4C7               	btfsc	4039,2,c	;volatile
  2697  001A56  D027               	goto	i2l2754
  2698                           
  2699                           ;i2c.c: 128: {
  2700                           ;i2c.c: 129: if (!SSPSTATbits.D_nA)
  2701  001A58  BAC7               	btfsc	4039,5,c	;volatile
  2702  001A5A  D006               	goto	i2l2734
  2703                           
  2704                           ;i2c.c: 130: {
  2705                           ;i2c.c: 131: first = 1;
  2706  001A5C  0E01               	movlw	1
  2707  001A5E  0100               	movlb	0	; () banked
  2708  001A60  6FD6               	movwf	_first& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;i2c.c: 132: junk = SSPBUF;
  2712  001A62  CFC9 F0A3          	movff	4041,_junk	;volatile
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;i2c.c: 134: SSPCON1bits.CKP = 1;
  2716  001A66  88C6               	bsf	4038,4,c	;volatile
  2717  001A68                     i2l2734:
  2718                           
  2719                           ;i2c.c: 135: }
  2720                           ;i2c.c: 136: if (SSPSTATbits.D_nA)
  2721  001A68  AAC7               	btfss	4039,5,c	;volatile
  2722  001A6A  D01D               	goto	i2l2754
  2723                           
  2724                           ;i2c.c: 137: {
  2725                           ;i2c.c: 138: if (first) {
  2726  001A6C  0100               	movlb	0	; () banked
  2727  001A6E  51D6               	movf	_first& (0+255),w,b
  2728  001A70  B4D8               	btfsc	status,2,c
  2729  001A72  D00C               	goto	i2l2744
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;i2c.c: 139: index_i2c = SSPBUF;
  2733  001A74  CFC9 F09C          	movff	4041,_index_i2c	;volatile
  2734  001A78  0100               	movlb	0	; () banked
  2735  001A7A  6B9D               	clrf	(_index_i2c+1)& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;i2c.c: 140: handleByteReceived(index_i2c);
  2739  001A7C  0100               	movlb	0	; () banked
  2740  001A7E  519C               	movf	_index_i2c& (0+255),w,b
  2741  001A80  ECB8  F00B         	call	_handleByteReceived
  2742                           
  2743                           ;i2c.c: 141: first = 0;
  2744  001A84  0E00               	movlw	0
  2745  001A86  0100               	movlb	0	; () banked
  2746  001A88  6FD6               	movwf	_first& (0+255),b
  2747                           
  2748                           ;i2c.c: 142: }
  2749  001A8A  D003               	goto	i2l2746
  2750  001A8C                     i2l2744:
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;i2c.c: 144: else {
  2754                           ;i2c.c: 146: handleByteReceived(SSPBUF);
  2755  001A8C  50C9               	movf	4041,w,c	;volatile
  2756  001A8E  ECB8  F00B         	call	_handleByteReceived
  2757  001A92                     i2l2746:
  2758                           
  2759                           ;i2c.c: 148: }
  2760                           ;i2c.c: 149: if (SSPCON1bits.WCOL)
  2761  001A92  AEC6               	btfss	4038,7,c	;volatile
  2762  001A94  D007               	goto	i2l2752
  2763                           
  2764                           ;i2c.c: 150: {
  2765                           ;i2c.c: 151: SSPCON1bits.WCOL = 0;
  2766  001A96  9EC6               	bcf	4038,7,c	;volatile
  2767                           
  2768                           ;i2c.c: 152: junk = SSPBUF;
  2769  001A98  CFC9 F0A3          	movff	4041,_junk	;volatile
  2770                           
  2771                           ;i2c.c: 153: handleByteReceived(junk);
  2772  001A9C  0100               	movlb	0	; () banked
  2773  001A9E  51A3               	movf	_junk& (0+255),w,b
  2774  001AA0  ECB8  F00B         	call	_handleByteReceived
  2775  001AA4                     i2l2752:
  2776                           
  2777                           ;i2c.c: 154: }
  2778                           ;i2c.c: 155: SSPCON1bits.CKP = 1;
  2779  001AA4  88C6               	bsf	4038,4,c	;volatile
  2780  001AA6                     i2l2754:
  2781                           
  2782                           ;i2c.c: 156: }
  2783                           ;i2c.c: 157: }
  2784                           ;i2c.c: 158: }
  2785                           ;i2c.c: 159: if (BCLIF)
  2786  001AA6  A6A1               	btfss	4001,3,c	;volatile
  2787  001AA8  D00A               	goto	i2l2764
  2788                           
  2789                           ;i2c.c: 160: {
  2790                           ;i2c.c: 161: printf("collide\r\n");
  2791  001AAA  0E1F               	movlw	low STR_1
  2792  001AAC  6E03               	movwf	i2printf@f,c
  2793  001AAE  0E0F               	movlw	high STR_1
  2794  001AB0  6E04               	movwf	i2printf@f+1,c
  2795  001AB2  EC25  F00F         	call	i2_printf	;wreg free
  2796                           
  2797                           ;i2c.c: 162: junk = SSPBUF;
  2798  001AB6  CFC9 F0A3          	movff	4041,_junk	;volatile
  2799                           
  2800                           ;i2c.c: 163: BCLIF = 0;
  2801  001ABA  96A1               	bcf	4001,3,c	;volatile
  2802                           
  2803                           ;i2c.c: 164: SSPCON1bits.CKP = 1;
  2804  001ABC  88C6               	bsf	4038,4,c	;volatile
  2805  001ABE                     i2l2764:
  2806                           
  2807                           ;i2c.c: 165: }
  2808                           ;i2c.c: 166: SSPIF = 0;
  2809  001ABE  969E               	bcf	3998,3,c	;volatile
  2810  001AC0  0012               	return		;funcret
  2811  001AC2                     __end_of_I2C_ISR:
  2812                           	opt stack 0
  2813                           pclatu	equ	0xFFB
  2814                           pclath	equ	0xFFA
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           prodh	equ	0xFF4
  2820                           prodl	equ	0xFF3
  2821                           intcon	equ	0xFF2
  2822                           postinc0	equ	0xFEE
  2823                           fsr0h	equ	0xFEA
  2824                           fsr0l	equ	0xFE9
  2825                           wreg	equ	0xFE8
  2826                           fsr1h	equ	0xFE2
  2827                           fsr1l	equ	0xFE1
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function i2_printf *****************
  2835 ;; Defined at:
  2836 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  f               2    2[COMRAM] PTR const unsigned char 
  2839 ;;		 -> STR_3(17), STR_2(13), STR_1(10), 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  printf          4    0        struct .
  2842 ;;  printf          3    0        PTR const unsigned char 
  2843 ;;  printf          2    4[COMRAM] PTR void [1]
  2844 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2845 ;;  printf          2    0        unsigned int 
  2846 ;;  printf          2    0        unsigned int 
  2847 ;;  printf          1    6[COMRAM] char 
  2848 ;;  printf          1    0        unsigned char 
  2849 ;;  printf          1    0        char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  2    2[COMRAM] int 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2860 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2862 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;Total ram usage:        5 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    2
  2866 ;; This function calls:
  2867 ;;		i2_putch
  2868 ;; This function is called by:
  2869 ;;		_I2C_ISR
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text18
  2874  001E4A                     __ptext18:
  2875                           	opt stack 0
  2876  001E4A                     i2_printf:
  2877                           	opt stack 23
  2878                           
  2879                           ;doprnt.c: 466: va_list ap;
  2880                           ;doprnt.c: 499: signed char c;
  2881                           ;doprnt.c: 506: signed char prec;
  2882                           ;doprnt.c: 508: unsigned char flag;
  2883                           ;doprnt.c: 523: union {
  2884                           ;doprnt.c: 524: unsigned long vd;
  2885                           ;doprnt.c: 525: double integ;
  2886                           ;doprnt.c: 526: } tmpval;
  2887                           ;doprnt.c: 528: unsigned int val;
  2888                           ;doprnt.c: 529: unsigned len;
  2889                           ;doprnt.c: 530: const char * cp;
  2890                           ;doprnt.c: 533: *ap = __va_start();
  2891                           
  2892                           ;incstack = 0
  2893  001E4A  0E05               	movlw	low (?i2_printf+2)
  2894  001E4C  6E05               	movwf	i2printf@ap,c
  2895  001E4E  0E00               	movlw	high (?i2_printf+2)
  2896  001E50  6E06               	movwf	i2printf@ap+1,c
  2897                           
  2898                           ;doprnt.c: 536: while(c = *f++) {
  2899  001E52  D003               	goto	i2l2698
  2900  001E54                     i2l2696:
  2901                           
  2902                           ;doprnt.c: 540: {
  2903                           ;doprnt.c: 541: (putch(c) );
  2904  001E54  5007               	movf	i2printf@c,w,c
  2905  001E56  EC9E  F00F         	call	i2_putch
  2906  001E5A                     i2l2698:
  2907  001E5A  C003  FFF6         	movff	i2printf@f,tblptrl
  2908  001E5E  C004  FFF7         	movff	i2printf@f+1,tblptrh
  2909  001E62  4A03               	infsnz	i2printf@f,f,c
  2910  001E64  2A04               	incf	i2printf@f+1,f,c
  2911  001E66                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2912  001E66  6AF8               	clrf	tblptru,c
  2913  001E68                     	endif
  2914  001E68                     	if	0	;tblptru may be non-zero
  2915  001E68                     	endif
  2916  001E68  0008               	tblrd		*
  2917  001E6A  CFF5 F007          	movff	tablat,i2printf@c
  2918  001E6E  5007               	movf	i2printf@c,w,c
  2919  001E70  B4D8               	btfsc	status,2,c
  2920  001E72  0012               	return	
  2921  001E74  D7EF               	goto	i2l2696
  2922  001E76                     __end_ofi2_printf:
  2923                           	opt stack 0
  2924                           pclatu	equ	0xFFB
  2925                           pclath	equ	0xFFA
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           prodh	equ	0xFF4
  2931                           prodl	equ	0xFF3
  2932                           intcon	equ	0xFF2
  2933                           postinc0	equ	0xFEE
  2934                           fsr0h	equ	0xFEA
  2935                           fsr0l	equ	0xFE9
  2936                           wreg	equ	0xFE8
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function i2_putch *****************
  2946 ;; Defined at:
  2947 ;;		line 110 in file "mcc_generated_files/eusart2.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  txData          1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  txData          1    1[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;Total ram usage:        1 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    1
  2968 ;; This function calls:
  2969 ;;		i2_EUSART2_Write
  2970 ;; This function is called by:
  2971 ;;		i2_printf
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text19
  2976  001F3C                     __ptext19:
  2977                           	opt stack 0
  2978  001F3C                     i2_putch:
  2979                           	opt stack 23
  2980                           
  2981                           ;incstack = 0
  2982                           ;i2putch@txData stored from wreg
  2983  001F3C  6E02               	movwf	i2putch@txData,c
  2984                           
  2985                           ;eusart2.c: 112: EUSART2_Write(txData);
  2986  001F3E  5002               	movf	i2putch@txData,w,c
  2987  001F40  EC92  F00F         	call	i2_EUSART2_Write
  2988  001F44  0012               	return		;funcret
  2989  001F46                     __end_ofi2_putch:
  2990                           	opt stack 0
  2991                           pclatu	equ	0xFFB
  2992                           pclath	equ	0xFFA
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           postinc0	equ	0xFEE
  3001                           fsr0h	equ	0xFEA
  3002                           fsr0l	equ	0xFE9
  3003                           wreg	equ	0xFE8
  3004                           fsr1h	equ	0xFE2
  3005                           fsr1l	equ	0xFE1
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function i2_EUSART2_Write *****************
  3013 ;; Defined at:
  3014 ;;		line 96 in file "mcc_generated_files/eusart2.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  txData          1    wreg     unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  txData          1    0[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3032 ;;Total ram usage:        1 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		i2_putch
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text20
  3042  001F24                     __ptext20:
  3043                           	opt stack 0
  3044  001F24                     i2_EUSART2_Write:
  3045                           	opt stack 23
  3046                           
  3047                           ;incstack = 0
  3048                           ;i2EUSART2_Write@txData stored from wreg
  3049  001F24  6E01               	movwf	i2EUSART2_Write@txData,c
  3050  001F26                     i2l31:
  3051  001F26  A8A4               	btfss	4004,4,c	;volatile
  3052  001F28  D7FE               	goto	i2l31
  3053                           
  3054                           ;eusart2.c: 100: }
  3055                           ;eusart2.c: 102: TXREG2 = txData;
  3056  001F2A  C001  FF79         	movff	i2EUSART2_Write@txData,3961	;volatile
  3057  001F2E  0012               	return		;funcret
  3058  001F30                     __end_ofi2_EUSART2_Write:
  3059                           	opt stack 0
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           fsr0h	equ	0xFEA
  3071                           fsr0l	equ	0xFE9
  3072                           wreg	equ	0xFE8
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _handleByteReceived *****************
  3082 ;; Defined at:
  3083 ;;		line 357 in file "ax.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  data            1    wreg     unsigned char 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  data            1    6[COMRAM] unsigned char 
  3088 ;;  i               2    4[COMRAM] int 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3101 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;Total ram usage:        3 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    1
  3105 ;; This function calls:
  3106 ;;		_setLedOff
  3107 ;;		_setLedOn
  3108 ;; This function is called by:
  3109 ;;		_I2C_ISR
  3110 ;;		_I2C_ISR_bad
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text21
  3115  001770                     __ptext21:
  3116                           	opt stack 0
  3117  001770                     _handleByteReceived:
  3118                           	opt stack 24
  3119                           
  3120                           ;incstack = 0
  3121                           ;handleByteReceived@data stored from wreg
  3122  001770  6E07               	movwf	handleByteReceived@data,c
  3123                           
  3124                           ;ax.c: 359: if (readIndex == 0) {
  3125  001772  505B               	movf	_readIndex,w,c	;volatile
  3126  001774  105C               	iorwf	_readIndex+1,w,c	;volatile
  3127  001776  A4D8               	btfss	status,2,c
  3128  001778  D021               	goto	i2l2584
  3129                           
  3130                           ;ax.c: 360: currentCommand = data;
  3131  00177A  C007  F05E         	movff	handleByteReceived@data,_currentCommand	;volatile
  3132                           
  3133                           ;ax.c: 361: readIndex++;
  3134  00177E  4A5B               	infsnz	_readIndex,f,c	;volatile
  3135  001780  2A5C               	incf	_readIndex+1,f,c	;volatile
  3136                           
  3137                           ;ax.c: 363: for (int i = 0; i < 32; i++) {
  3138  001782  0E00               	movlw	0
  3139  001784  6E06               	movwf	handleByteReceived@i+1,c
  3140  001786  0E00               	movlw	0
  3141  001788  6E05               	movwf	handleByteReceived@i,c
  3142  00178A  BE06               	btfsc	handleByteReceived@i+1,7,c
  3143  00178C  D008               	goto	i2l2578
  3144  00178E  5006               	movf	handleByteReceived@i+1,w,c
  3145  001790  E105               	bnz	i2u123_40
  3146  001792  0E20               	movlw	32
  3147  001794  5C05               	subwf	handleByteReceived@i,w,c
  3148  001796  B0D8               	btfsc	status,0,c
  3149  001798  0012               	return	
  3150  00179A  D001               	goto	i2l2578
  3151  00179C                     i2u123_40:
  3152  00179C  0012               	return	
  3153  00179E                     i2l2578:
  3154                           
  3155                           ;ax.c: 364: dataToSend[i] = 66;
  3156  00179E  0E60               	movlw	low _dataToSend
  3157  0017A0  2405               	addwf	handleByteReceived@i,w,c
  3158  0017A2  6ED9               	movwf	fsr2l,c
  3159  0017A4  0E00               	movlw	high _dataToSend
  3160  0017A6  2006               	addwfc	handleByteReceived@i+1,w,c
  3161  0017A8  6EDA               	movwf	fsr2h,c
  3162  0017AA  0E42               	movlw	66
  3163  0017AC  6EDF               	movwf	indf2,c
  3164  0017AE  4A05               	infsnz	handleByteReceived@i,f,c
  3165  0017B0  2A06               	incf	handleByteReceived@i+1,f,c
  3166  0017B2  BE06               	btfsc	handleByteReceived@i+1,7,c
  3167  0017B4  D7F4               	goto	i2l2578
  3168  0017B6  5006               	movf	handleByteReceived@i+1,w,c
  3169  0017B8  E15A               	bnz	i2l608
  3170  0017BA  D7EB               	goto	L2
  3171  0017BC                     i2l2584:
  3172  0017BC  045B               	decf	_readIndex,w,c	;volatile
  3173  0017BE  105C               	iorwf	_readIndex+1,w,c	;volatile
  3174  0017C0  A4D8               	btfss	status,2,c
  3175  0017C2  D020               	goto	i2l2602
  3176                           
  3177                           ;ax.c: 367: parameter1 = data;
  3178  0017C4  C007  F05D         	movff	handleByteReceived@data,_parameter1	;volatile
  3179                           
  3180                           ;ax.c: 368: readIndex++;
  3181  0017C8  4A5B               	infsnz	_readIndex,f,c	;volatile
  3182  0017CA  2A5C               	incf	_readIndex+1,f,c	;volatile
  3183                           
  3184                           ;ax.c: 369: if (currentCommand == 10) {
  3185  0017CC  0E0A               	movlw	10
  3186  0017CE  185E               	xorwf	_currentCommand,w,c	;volatile
  3187  0017D0  A4D8               	btfss	status,2,c
  3188  0017D2  D00A               	goto	i2l2596
  3189                           
  3190                           ;ax.c: 370: setLedOn(parameter1);
  3191  0017D4  C05D  F001         	movff	_parameter1,setLedOn@led	;volatile
  3192  0017D8  6A02               	clrf	setLedOn@led+1,c
  3193  0017DA  ECA8  F00D         	call	_setLedOn	;wreg free
  3194                           
  3195                           ;ax.c: 371: readIndex = 0;
  3196  0017DE  0E00               	movlw	0
  3197  0017E0  6E5C               	movwf	_readIndex+1,c	;volatile
  3198  0017E2  0E00               	movlw	0
  3199  0017E4  6E5B               	movwf	_readIndex,c	;volatile
  3200                           
  3201                           ;ax.c: 372: } else if (currentCommand == 11) {
  3202  0017E6  0012               	return	
  3203  0017E8                     i2l2596:
  3204  0017E8  0E0B               	movlw	11
  3205  0017EA  185E               	xorwf	_currentCommand,w,c	;volatile
  3206  0017EC  A4D8               	btfss	status,2,c
  3207  0017EE  0012               	return	
  3208                           
  3209                           ;ax.c: 373: setLedOff(parameter1);
  3210  0017F0  C05D  F001         	movff	_parameter1,setLedOff@led	;volatile
  3211  0017F4  6A02               	clrf	setLedOff@led+1,c
  3212  0017F6  ECE5  F00D         	call	_setLedOff	;wreg free
  3213                           
  3214                           ;ax.c: 374: readIndex = 0;
  3215  0017FA  0E00               	movlw	0
  3216  0017FC  6E5C               	movwf	_readIndex+1,c	;volatile
  3217  0017FE  0E00               	movlw	0
  3218  001800  6E5B               	movwf	_readIndex,c	;volatile
  3219                           
  3220                           ;ax.c: 375: }
  3221                           ;ax.c: 377: } else if (readIndex == 2) {
  3222  001802  0012               	return	
  3223  001804                     i2l2602:
  3224  001804  0E02               	movlw	2
  3225  001806  185B               	xorwf	_readIndex,w,c	;volatile
  3226  001808  105C               	iorwf	_readIndex+1,w,c	;volatile
  3227  00180A  A4D8               	btfss	status,2,c
  3228  00180C  D005               	goto	i2l2608
  3229                           
  3230                           ;ax.c: 378: parameter2 = data;
  3231  00180E  C007  F0A2         	movff	handleByteReceived@data,_parameter2	;volatile
  3232                           
  3233                           ;ax.c: 379: readIndex++;
  3234  001812  4A5B               	infsnz	_readIndex,f,c	;volatile
  3235  001814  2A5C               	incf	_readIndex+1,f,c	;volatile
  3236                           
  3237                           ;ax.c: 380: } else if (readIndex == 3) {
  3238  001816  0012               	return	
  3239  001818                     i2l2608:
  3240  001818  0E03               	movlw	3
  3241  00181A  185B               	xorwf	_readIndex,w,c	;volatile
  3242  00181C  105C               	iorwf	_readIndex+1,w,c	;volatile
  3243  00181E  A4D8               	btfss	status,2,c
  3244  001820  D005               	goto	i2l2614
  3245                           
  3246                           ;ax.c: 381: parameter3 = data;
  3247  001822  C007  F0A1         	movff	handleByteReceived@data,_parameter3	;volatile
  3248                           
  3249                           ;ax.c: 382: readIndex++;
  3250  001826  4A5B               	infsnz	_readIndex,f,c	;volatile
  3251  001828  2A5C               	incf	_readIndex+1,f,c	;volatile
  3252                           
  3253                           ;ax.c: 383: } else if (readIndex == 4) {
  3254  00182A  0012               	return	
  3255  00182C                     i2l2614:
  3256  00182C  0E04               	movlw	4
  3257  00182E  185B               	xorwf	_readIndex,w,c	;volatile
  3258  001830  105C               	iorwf	_readIndex+1,w,c	;volatile
  3259  001832  A4D8               	btfss	status,2,c
  3260  001834  D005               	goto	i2l2620
  3261                           
  3262                           ;ax.c: 384: parameter4 = data;
  3263  001836  C007  F0A0         	movff	handleByteReceived@data,_parameter4	;volatile
  3264                           
  3265                           ;ax.c: 385: readIndex++;
  3266  00183A  4A5B               	infsnz	_readIndex,f,c	;volatile
  3267  00183C  2A5C               	incf	_readIndex+1,f,c	;volatile
  3268                           
  3269                           ;ax.c: 386: } else if (readIndex == 5) {
  3270  00183E  0012               	return	
  3271  001840                     i2l2620:
  3272  001840  0E05               	movlw	5
  3273  001842  185B               	xorwf	_readIndex,w,c	;volatile
  3274  001844  105C               	iorwf	_readIndex+1,w,c	;volatile
  3275  001846  A4D8               	btfss	status,2,c
  3276  001848  D005               	goto	i2l2626
  3277                           
  3278                           ;ax.c: 387: parameter5 = data;
  3279  00184A  C007  F09F         	movff	handleByteReceived@data,_parameter5	;volatile
  3280                           
  3281                           ;ax.c: 388: readIndex++;
  3282  00184E  4A5B               	infsnz	_readIndex,f,c	;volatile
  3283  001850  2A5C               	incf	_readIndex+1,f,c	;volatile
  3284                           
  3285                           ;ax.c: 389: } else if (readIndex == 6) {
  3286  001852  0012               	return	
  3287  001854                     i2l2626:
  3288  001854  0E06               	movlw	6
  3289  001856  185B               	xorwf	_readIndex,w,c	;volatile
  3290  001858  105C               	iorwf	_readIndex+1,w,c	;volatile
  3291  00185A  A4D8               	btfss	status,2,c
  3292  00185C  D005               	goto	i2l2632
  3293                           
  3294                           ;ax.c: 390: parameter6 = data;
  3295  00185E  C007  F09E         	movff	handleByteReceived@data,_parameter6	;volatile
  3296                           
  3297                           ;ax.c: 391: readIndex++;
  3298  001862  4A5B               	infsnz	_readIndex,f,c	;volatile
  3299  001864  2A5C               	incf	_readIndex+1,f,c	;volatile
  3300                           
  3301                           ;ax.c: 392: } else {
  3302  001866  0012               	return	
  3303  001868                     i2l2632:
  3304                           
  3305                           ;ax.c: 393: readIndex++;
  3306  001868  4A5B               	infsnz	_readIndex,f,c	;volatile
  3307  00186A  2A5C               	incf	_readIndex+1,f,c	;volatile
  3308  00186C  0012               	return	
  3309  00186E                     i2l608:
  3310  00186E  0012               	return		;funcret
  3311  001870                     __end_of_handleByteReceived:
  3312                           	opt stack 0
  3313                           pclatu	equ	0xFFB
  3314                           pclath	equ	0xFFA
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           fsr0h	equ	0xFEA
  3324                           fsr0l	equ	0xFE9
  3325                           wreg	equ	0xFE8
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _setLedOn *****************
  3336 ;; Defined at:
  3337 ;;		line 45 in file "ax.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  led             2    0[COMRAM] int 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3355 ;;Total ram usage:        4 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_handleByteReceived
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text22
  3365  001B50                     __ptext22:
  3366                           	opt stack 0
  3367  001B50                     _setLedOn:
  3368                           	opt stack 24
  3369                           
  3370                           ;ax.c: 46: switch (led) {
  3371                           
  3372                           ;incstack = 0
  3373  001B50  D014               	goto	i2l2334
  3374  001B52                     i2l444:
  3375  001B52  868C               	bsf	3980,3,c	;volatile
  3376                           
  3377                           ;ax.c: 49: break;
  3378  001B54  0012               	return	
  3379  001B56                     i2l448:
  3380  001B56  848C               	bsf	3980,2,c	;volatile
  3381                           
  3382                           ;ax.c: 52: break;
  3383  001B58  0012               	return	
  3384  001B5A                     i2l451:
  3385  001B5A  828C               	bsf	3980,1,c	;volatile
  3386                           
  3387                           ;ax.c: 55: break;
  3388  001B5C  0012               	return	
  3389  001B5E                     i2l454:
  3390  001B5E  808C               	bsf	3980,0,c	;volatile
  3391                           
  3392                           ;ax.c: 58: break;
  3393  001B60  0012               	return	
  3394  001B62                     i2l457:
  3395  001B62  848B               	bsf	3979,2,c	;volatile
  3396                           
  3397                           ;ax.c: 61: break;
  3398  001B64  0012               	return	
  3399  001B66                     i2l460:
  3400  001B66  828B               	bsf	3979,1,c	;volatile
  3401                           
  3402                           ;ax.c: 64: break;
  3403  001B68  0012               	return	
  3404  001B6A                     i2l463:
  3405  001B6A  808B               	bsf	3979,0,c	;volatile
  3406                           
  3407                           ;ax.c: 67: break;
  3408  001B6C  0012               	return	
  3409  001B6E                     i2l466:
  3410  001B6E  808A               	bsf	3978,0,c	;volatile
  3411                           
  3412                           ;ax.c: 70: break;
  3413  001B70  0012               	return	
  3414  001B72                     i2l469:
  3415  001B72  848A               	bsf	3978,2,c	;volatile
  3416                           
  3417                           ;ax.c: 73: break;
  3418  001B74  0012               	return	
  3419  001B76                     i2l472:
  3420  001B76  868A               	bsf	3978,3,c	;volatile
  3421                           
  3422                           ;ax.c: 77: }
  3423                           
  3424                           ;ax.c: 76: break;
  3425  001B78  0012               	return	
  3426  001B7A                     i2l2334:
  3427  001B7A  C001  F003         	movff	setLedOn@led,??_setLedOn
  3428  001B7E  C002  F004         	movff	setLedOn@led+1,??_setLedOn+1
  3429                           
  3430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3431                           ; Switch size 1, requested type "space"
  3432                           ; Number of cases is 1, Range of values is 0 to 0
  3433                           ; switch strategies available:
  3434                           ; Name         Instructions Cycles
  3435                           ; simple_byte            4     3 (average)
  3436                           ;	Chosen strategy is simple_byte
  3437  001B82  5004               	movf	??_setLedOn+1,w,c
  3438  001B84  0A00               	xorlw	0	; case 0
  3439  001B86  A4D8               	btfss	status,2,c
  3440  001B88  0012               	return	
  3441                           
  3442                           ; Switch size 1, requested type "space"
  3443                           ; Number of cases is 10, Range of values is 1 to 10
  3444                           ; switch strategies available:
  3445                           ; Name         Instructions Cycles
  3446                           ; simple_byte           31    16 (average)
  3447                           ;	Chosen strategy is simple_byte
  3448  001B8A  5003               	movf	??_setLedOn,w,c
  3449  001B8C  0A01               	xorlw	1	; case 1
  3450  001B8E  B4D8               	btfsc	status,2,c
  3451  001B90  D7E0               	goto	i2l444
  3452  001B92  0A03               	xorlw	3	; case 2
  3453  001B94  B4D8               	btfsc	status,2,c
  3454  001B96  D7DF               	goto	i2l448
  3455  001B98  0A01               	xorlw	1	; case 3
  3456  001B9A  B4D8               	btfsc	status,2,c
  3457  001B9C  D7DE               	goto	i2l451
  3458  001B9E  0A07               	xorlw	7	; case 4
  3459  001BA0  B4D8               	btfsc	status,2,c
  3460  001BA2  D7DD               	goto	i2l454
  3461  001BA4  0A01               	xorlw	1	; case 5
  3462  001BA6  B4D8               	btfsc	status,2,c
  3463  001BA8  D7DC               	goto	i2l457
  3464  001BAA  0A03               	xorlw	3	; case 6
  3465  001BAC  B4D8               	btfsc	status,2,c
  3466  001BAE  D7DB               	goto	i2l460
  3467  001BB0  0A01               	xorlw	1	; case 7
  3468  001BB2  B4D8               	btfsc	status,2,c
  3469  001BB4  D7DA               	goto	i2l463
  3470  001BB6  0A0F               	xorlw	15	; case 8
  3471  001BB8  B4D8               	btfsc	status,2,c
  3472  001BBA  D7D9               	goto	i2l466
  3473  001BBC  0A01               	xorlw	1	; case 9
  3474  001BBE  B4D8               	btfsc	status,2,c
  3475  001BC0  D7D8               	goto	i2l469
  3476  001BC2  0A03               	xorlw	3	; case 10
  3477  001BC4  A4D8               	btfss	status,2,c
  3478  001BC6  0012               	return	
  3479  001BC8  D7D6               	goto	i2l472
  3480  001BCA                     __end_of_setLedOn:
  3481                           	opt stack 0
  3482                           pclatu	equ	0xFFB
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           fsr0h	equ	0xFEA
  3493                           fsr0l	equ	0xFE9
  3494                           wreg	equ	0xFE8
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _setLedOff *****************
  3505 ;; Defined at:
  3506 ;;		line 80 in file "ax.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  led             2    0[COMRAM] int 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3523 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3524 ;;Total ram usage:        4 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_handleByteReceived
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text23
  3534  001BCA                     __ptext23:
  3535                           	opt stack 0
  3536  001BCA                     _setLedOff:
  3537                           	opt stack 24
  3538                           
  3539                           ;ax.c: 81: switch (led) {
  3540                           
  3541                           ;incstack = 0
  3542  001BCA  D014               	goto	i2l2344
  3543  001BCC                     i2l479:
  3544  001BCC  968C               	bcf	3980,3,c	;volatile
  3545                           
  3546                           ;ax.c: 84: break;
  3547  001BCE  0012               	return	
  3548  001BD0                     i2l483:
  3549  001BD0  948C               	bcf	3980,2,c	;volatile
  3550                           
  3551                           ;ax.c: 87: break;
  3552  001BD2  0012               	return	
  3553  001BD4                     i2l486:
  3554  001BD4  928C               	bcf	3980,1,c	;volatile
  3555                           
  3556                           ;ax.c: 90: break;
  3557  001BD6  0012               	return	
  3558  001BD8                     i2l489:
  3559  001BD8  908C               	bcf	3980,0,c	;volatile
  3560                           
  3561                           ;ax.c: 93: break;
  3562  001BDA  0012               	return	
  3563  001BDC                     i2l492:
  3564  001BDC  948B               	bcf	3979,2,c	;volatile
  3565                           
  3566                           ;ax.c: 96: break;
  3567  001BDE  0012               	return	
  3568  001BE0                     i2l495:
  3569  001BE0  928B               	bcf	3979,1,c	;volatile
  3570                           
  3571                           ;ax.c: 99: break;
  3572  001BE2  0012               	return	
  3573  001BE4                     i2l498:
  3574  001BE4  908B               	bcf	3979,0,c	;volatile
  3575                           
  3576                           ;ax.c: 102: break;
  3577  001BE6  0012               	return	
  3578  001BE8                     i2l501:
  3579  001BE8  908A               	bcf	3978,0,c	;volatile
  3580                           
  3581                           ;ax.c: 105: break;
  3582  001BEA  0012               	return	
  3583  001BEC                     i2l504:
  3584  001BEC  948A               	bcf	3978,2,c	;volatile
  3585                           
  3586                           ;ax.c: 108: break;
  3587  001BEE  0012               	return	
  3588  001BF0                     i2l507:
  3589  001BF0  968A               	bcf	3978,3,c	;volatile
  3590                           
  3591                           ;ax.c: 112: }
  3592                           
  3593                           ;ax.c: 111: break;
  3594  001BF2  0012               	return	
  3595  001BF4                     i2l2344:
  3596  001BF4  C001  F003         	movff	setLedOff@led,??_setLedOff
  3597  001BF8  C002  F004         	movff	setLedOff@led+1,??_setLedOff+1
  3598                           
  3599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3600                           ; Switch size 1, requested type "space"
  3601                           ; Number of cases is 1, Range of values is 0 to 0
  3602                           ; switch strategies available:
  3603                           ; Name         Instructions Cycles
  3604                           ; simple_byte            4     3 (average)
  3605                           ;	Chosen strategy is simple_byte
  3606  001BFC  5004               	movf	??_setLedOff+1,w,c
  3607  001BFE  0A00               	xorlw	0	; case 0
  3608  001C00  A4D8               	btfss	status,2,c
  3609  001C02  0012               	return	
  3610                           
  3611                           ; Switch size 1, requested type "space"
  3612                           ; Number of cases is 10, Range of values is 1 to 10
  3613                           ; switch strategies available:
  3614                           ; Name         Instructions Cycles
  3615                           ; simple_byte           31    16 (average)
  3616                           ;	Chosen strategy is simple_byte
  3617  001C04  5003               	movf	??_setLedOff,w,c
  3618  001C06  0A01               	xorlw	1	; case 1
  3619  001C08  B4D8               	btfsc	status,2,c
  3620  001C0A  D7E0               	goto	i2l479
  3621  001C0C  0A03               	xorlw	3	; case 2
  3622  001C0E  B4D8               	btfsc	status,2,c
  3623  001C10  D7DF               	goto	i2l483
  3624  001C12  0A01               	xorlw	1	; case 3
  3625  001C14  B4D8               	btfsc	status,2,c
  3626  001C16  D7DE               	goto	i2l486
  3627  001C18  0A07               	xorlw	7	; case 4
  3628  001C1A  B4D8               	btfsc	status,2,c
  3629  001C1C  D7DD               	goto	i2l489
  3630  001C1E  0A01               	xorlw	1	; case 5
  3631  001C20  B4D8               	btfsc	status,2,c
  3632  001C22  D7DC               	goto	i2l492
  3633  001C24  0A03               	xorlw	3	; case 6
  3634  001C26  B4D8               	btfsc	status,2,c
  3635  001C28  D7DB               	goto	i2l495
  3636  001C2A  0A01               	xorlw	1	; case 7
  3637  001C2C  B4D8               	btfsc	status,2,c
  3638  001C2E  D7DA               	goto	i2l498
  3639  001C30  0A0F               	xorlw	15	; case 8
  3640  001C32  B4D8               	btfsc	status,2,c
  3641  001C34  D7D9               	goto	i2l501
  3642  001C36  0A01               	xorlw	1	; case 9
  3643  001C38  B4D8               	btfsc	status,2,c
  3644  001C3A  D7D8               	goto	i2l504
  3645  001C3C  0A03               	xorlw	3	; case 10
  3646  001C3E  A4D8               	btfss	status,2,c
  3647  001C40  0012               	return	
  3648  001C42  D7D6               	goto	i2l507
  3649  001C44                     __end_of_setLedOff:
  3650                           	opt stack 0
  3651                           pclatu	equ	0xFFB
  3652                           pclath	equ	0xFFA
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           prodh	equ	0xFF4
  3658                           prodl	equ	0xFF3
  3659                           intcon	equ	0xFF2
  3660                           postinc0	equ	0xFEE
  3661                           fsr0h	equ	0xFEA
  3662                           fsr0l	equ	0xFE9
  3663                           wreg	equ	0xFE8
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _getByteToSend *****************
  3674 ;; Defined at:
  3675 ;;		line 412 in file "ax.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  i2c_data_rec    1    wreg     unsigned char 
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  i2c_data_rec    1    0[COMRAM] unsigned char 
  3680 ;;  r               2   74[COMRAM] unsigned int 
  3681 ;;  value           2   70[COMRAM] int 
  3682 ;;  xhigh           1   66[COMRAM] unsigned char 
  3683 ;;  xlow            1   65[COMRAM] unsigned char 
  3684 ;;  error           2   61[COMRAM] int 
  3685 ;;  error           2   72[COMRAM] int 
  3686 ;;  value           2   68[COMRAM] int 
  3687 ;;  xhigh           1   64[COMRAM] unsigned char 
  3688 ;;  xlow            1   63[COMRAM] unsigned char 
  3689 ;;  error           2   59[COMRAM] int 
  3690 ;;  d               1   67[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      unsigned char 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3701 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;Total ram usage:       19 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; Hardware stack levels required when called:    3
  3707 ;; This function calls:
  3708 ;;		_ADC_GetConversion
  3709 ;;		_clearState
  3710 ;;		_pingAX
  3711 ;;		_readAXData
  3712 ;;		_writeAXData
  3713 ;; This function is called by:
  3714 ;;		_I2C_ISR
  3715 ;;		_I2C_ISR_bad
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text24
  3720  0011E2                     __ptext24:
  3721                           	opt stack 0
  3722  0011E2                     _getByteToSend:
  3723                           	opt stack 22
  3724                           
  3725                           ;ax.c: 415: if (currentCommand == 20) {
  3726                           
  3727                           ;incstack = 0
  3728  0011E2  0E14               	movlw	20
  3729  0011E4  185E               	xorwf	_currentCommand,w,c	;volatile
  3730  0011E6  A4D8               	btfss	status,2,c
  3731  0011E8  D013               	goto	i2l2490
  3732                           
  3733                           ;ax.c: 416: int error = pingAX(parameter1);
  3734  0011EA  C05D  F032         	movff	_parameter1,pingAX@id	;volatile
  3735  0011EE  6A33               	clrf	pingAX@id+1,c
  3736  0011F0  EC38  F00C         	call	_pingAX	;wreg free
  3737  0011F4  C032  F03C         	movff	?_pingAX,getByteToSend@error
  3738  0011F8  C033  F03D         	movff	?_pingAX+1,getByteToSend@error+1
  3739                           
  3740                           ;ax.c: 417: nbBytesToSend = 1;
  3741  0011FC  0E00               	movlw	0
  3742  0011FE  0100               	movlb	0	; () banked
  3743  001200  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3744  001202  0E01               	movlw	1
  3745  001204  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;ax.c: 418: dataToSend[0] = error;
  3749  001206  C03C  F060         	movff	getByteToSend@error,_dataToSend	;volatile
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;ax.c: 419: clearState();
  3753  00120A  ECBB  F00E         	call	_clearState	;wreg free
  3754                           
  3755                           ;ax.c: 420: } else if (currentCommand == 21) {
  3756  00120E  D099               	goto	i2l2542
  3757  001210                     i2l2490:
  3758  001210  0E15               	movlw	21
  3759  001212  185E               	xorwf	_currentCommand,w,c	;volatile
  3760  001214  A4D8               	btfss	status,2,c
  3761  001216  D026               	goto	i2l2510
  3762                           
  3763                           ;ax.c: 422: int error=0;
  3764  001218  0E00               	movlw	0
  3765  00121A  6E4A               	movwf	getByteToSend@error_1490+1,c
  3766  00121C  0E00               	movlw	0
  3767  00121E  6E49               	movwf	getByteToSend@error_1490,c
  3768                           
  3769                           ;ax.c: 423: int value = readAXData(parameter1, parameter2, &error);
  3770  001220  C05D  F032         	movff	_parameter1,readAXData@id	;volatile
  3771  001224  6A33               	clrf	readAXData@id+1,c
  3772  001226  C0A2  F034         	movff	_parameter2,readAXData@address	;volatile
  3773  00122A  6A35               	clrf	readAXData@address+1,c
  3774  00122C  0E49               	movlw	low getByteToSend@error_1490
  3775  00122E  6E36               	movwf	readAXData@err,c
  3776  001230  0E00               	movlw	high getByteToSend@error_1490
  3777  001232  6E37               	movwf	readAXData@err+1,c
  3778  001234  EC88  F00A         	call	_readAXData	;wreg free
  3779  001238  C032  F045         	movff	?_readAXData,getByteToSend@value
  3780  00123C  C033  F046         	movff	?_readAXData+1,getByteToSend@value+1
  3781                           
  3782                           ;ax.c: 424: nbBytesToSend = 3;
  3783  001240  0E00               	movlw	0
  3784  001242  0100               	movlb	0	; () banked
  3785  001244  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3786  001246  0E03               	movlw	3
  3787  001248  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;ax.c: 425: uint8_t xlow = value & 0xff;
  3791  00124A  C045  F040         	movff	getByteToSend@value,getByteToSend@xlow
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;ax.c: 426: uint8_t xhigh = (value >> 8);
  3795  00124E  5046               	movf	getByteToSend@value+1,w,c
  3796  001250  6E41               	movwf	getByteToSend@xhigh,c
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;ax.c: 427: dataToSend[0] = xlow;
  3800  001252  C040  F060         	movff	getByteToSend@xlow,_dataToSend	;volatile
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;ax.c: 428: dataToSend[1] = xhigh;
  3804  001256  C041  F061         	movff	getByteToSend@xhigh,_dataToSend+1	;volatile
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;ax.c: 429: dataToSend[2] = error;
  3808  00125A  C049  F062         	movff	getByteToSend@error_1490,_dataToSend+2	;volatile
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;ax.c: 430: clearState();
  3812  00125E  ECBB  F00E         	call	_clearState	;wreg free
  3813                           
  3814                           ;ax.c: 431: } else if (currentCommand == 22) {
  3815  001262  D06F               	goto	i2l2542
  3816  001264                     i2l2510:
  3817  001264  0E16               	movlw	22
  3818  001266  185E               	xorwf	_currentCommand,w,c	;volatile
  3819  001268  A4D8               	btfss	status,2,c
  3820  00126A  D021               	goto	i2l2520
  3821                           
  3822                           ;ax.c: 432: int error = writeAXData(parameter1, parameter2, parameter3 + (parameter4 << 
      +                          8));
  3823  00126C  C05D  F032         	movff	_parameter1,writeAXData@id	;volatile
  3824  001270  6A33               	clrf	writeAXData@id+1,c
  3825  001272  C0A2  F034         	movff	_parameter2,writeAXData@address	;volatile
  3826  001276  6A35               	clrf	writeAXData@address+1,c
  3827  001278  0100               	movlb	0	; () banked
  3828  00127A  51A0               	movf	_parameter4& (0+255),w,b	;volatile
  3829  00127C  6E3B               	movwf	(??_getByteToSend+1)& (0+255),c
  3830  00127E  6A3A               	clrf	??_getByteToSend& (0+255),c
  3831  001280  0100               	movlb	0	; () banked
  3832  001282  51A1               	movf	_parameter3& (0+255),w,b	;volatile
  3833  001284  243A               	addwf	??_getByteToSend,w,c
  3834  001286  6E36               	movwf	writeAXData@data,c
  3835  001288  0E00               	movlw	0
  3836  00128A  203B               	addwfc	??_getByteToSend+1,w,c
  3837  00128C  6E37               	movwf	writeAXData@data+1,c
  3838  00128E  EC23  F00B         	call	_writeAXData	;wreg free
  3839  001292  C032  F03E         	movff	?_writeAXData,getByteToSend@error_1495
  3840  001296  C033  F03F         	movff	?_writeAXData+1,getByteToSend@error_1495+1
  3841                           
  3842                           ;ax.c: 433: nbBytesToSend = 1;
  3843  00129A  0E00               	movlw	0
  3844  00129C  0100               	movlb	0	; () banked
  3845  00129E  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3846  0012A0  0E01               	movlw	1
  3847  0012A2  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;ax.c: 434: dataToSend[0] = error;
  3851  0012A4  C03E  F060         	movff	getByteToSend@error_1495,_dataToSend	;volatile
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;ax.c: 435: clearState();
  3855  0012A8  ECBB  F00E         	call	_clearState	;wreg free
  3856                           
  3857                           ;ax.c: 436: } else if (currentCommand == 12) {
  3858  0012AC  D04A               	goto	i2l2542
  3859  0012AE                     i2l2520:
  3860  0012AE  0E0C               	movlw	12
  3861  0012B0  185E               	xorwf	_currentCommand,w,c	;volatile
  3862  0012B2  A4D8               	btfss	status,2,c
  3863  0012B4  D046               	goto	i2l2542
  3864                           
  3865                           ;ax.c: 437: uint16_t r = ADC_GetConversion(parameter1) / 16;
  3866  0012B6  505D               	movf	_parameter1,w,c	;volatile
  3867  0012B8  EC0D  F00F         	call	_ADC_GetConversion
  3868  0012BC  0E04               	movlw	4
  3869  0012BE  6E3A               	movwf	??_getByteToSend& (0+255),c
  3870  0012C0                     i2u117_45:
  3871  0012C0  90D8               	bcf	status,0,c
  3872  0012C2  3202               	rrcf	?_ADC_GetConversion+1,f,c
  3873  0012C4  3201               	rrcf	?_ADC_GetConversion,f,c
  3874  0012C6  2E3A               	decfsz	??_getByteToSend& (0+255),f,c
  3875  0012C8  D7FB               	goto	i2u117_45
  3876  0012CA  C001  F04B         	movff	?_ADC_GetConversion,getByteToSend@r
  3877  0012CE  C002  F04C         	movff	?_ADC_GetConversion+1,getByteToSend@r+1
  3878                           
  3879                           ;ax.c: 439: if (r == 4095 || r == 4094)
  3880  0012D2  284B               	incf	getByteToSend@r,w,c
  3881  0012D4  E104               	bnz	i2u118_40
  3882  0012D6  0E0F               	movlw	15
  3883  0012D8  184C               	xorwf	getByteToSend@r+1,w,c
  3884  0012DA  B4D8               	btfsc	status,2,c
  3885  0012DC  D007               	goto	i2l2528
  3886  0012DE                     i2u118_40:
  3887  0012DE  0EFE               	movlw	254
  3888  0012E0  184B               	xorwf	getByteToSend@r,w,c
  3889  0012E2  E108               	bnz	i2l2530
  3890  0012E4  0E0F               	movlw	15
  3891  0012E6  184C               	xorwf	getByteToSend@r+1,w,c
  3892  0012E8  A4D8               	btfss	status,2,c
  3893  0012EA  D004               	goto	i2l2530
  3894  0012EC                     i2l2528:
  3895                           
  3896                           ;ax.c: 440: r = 0;
  3897  0012EC  0E00               	movlw	0
  3898  0012EE  6E4C               	movwf	getByteToSend@r+1,c
  3899  0012F0  0E00               	movlw	0
  3900  0012F2  6E4B               	movwf	getByteToSend@r,c
  3901  0012F4                     i2l2530:
  3902                           
  3903                           ;ax.c: 441: adc_values[parameter1] = r;
  3904  0012F4  505D               	movf	_parameter1,w,c	;volatile
  3905  0012F6  0D02               	mullw	2
  3906  0012F8  0E80               	movlw	low _adc_values
  3907  0012FA  24F3               	addwf	prodl,w,c
  3908  0012FC  6ED9               	movwf	fsr2l,c
  3909  0012FE  0E00               	movlw	high _adc_values
  3910  001300  20F4               	addwfc	prodh,w,c
  3911  001302  6EDA               	movwf	fsr2h,c
  3912  001304  C04B  FFDE         	movff	getByteToSend@r,postinc2
  3913  001308  C04C  FFDD         	movff	getByteToSend@r+1,postdec2
  3914                           
  3915                           ;ax.c: 443: int value = adc_values[parameter1];
  3916  00130C  505D               	movf	_parameter1,w,c	;volatile
  3917  00130E  0D02               	mullw	2
  3918  001310  0E80               	movlw	low _adc_values
  3919  001312  24F3               	addwf	prodl,w,c
  3920  001314  6ED9               	movwf	fsr2l,c
  3921  001316  0E00               	movlw	high _adc_values
  3922  001318  20F4               	addwfc	prodh,w,c
  3923  00131A  6EDA               	movwf	fsr2h,c
  3924  00131C  CFDE F047          	movff	postinc2,getByteToSend@value_1498
  3925  001320  CFDD F048          	movff	postdec2,getByteToSend@value_1498+1
  3926                           
  3927                           ;ax.c: 444: nbBytesToSend = 2;
  3928  001324  0E00               	movlw	0
  3929  001326  0100               	movlb	0	; () banked
  3930  001328  6F97               	movwf	(_nbBytesToSend+1)& (0+255),b	;volatile
  3931  00132A  0E02               	movlw	2
  3932  00132C  6F96               	movwf	_nbBytesToSend& (0+255),b	;volatile
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;ax.c: 445: uint8_t xlow = value & 0xff;
  3936  00132E  C047  F042         	movff	getByteToSend@value_1498,getByteToSend@xlow_1499
  3937                           
  3938                           ;ax.c: 446: uint8_t xhigh = (value >> 8);
  3939  001332  5048               	movf	getByteToSend@value_1498+1,w,c
  3940  001334  6E43               	movwf	getByteToSend@xhigh_1500,c
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;ax.c: 447: dataToSend[0] = xlow;
  3944  001336  C042  F060         	movff	getByteToSend@xlow_1499,_dataToSend	;volatile
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;ax.c: 448: dataToSend[1] = xhigh;
  3948  00133A  C043  F061         	movff	getByteToSend@xhigh_1500,_dataToSend+1	;volatile
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;ax.c: 449: clearState();
  3952  00133E  ECBB  F00E         	call	_clearState	;wreg free
  3953  001342                     i2l2542:
  3954                           
  3955                           ;ax.c: 450: }
  3956                           ;ax.c: 451: if (nbBytesToSend == 0) {
  3957  001342  0100               	movlb	0	; () banked
  3958  001344  5196               	movf	_nbBytesToSend& (0+255),w,b	;volatile
  3959  001346  0100               	movlb	0	; () banked
  3960  001348  1197               	iorwf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  3961  00134A  A4D8               	btfss	status,2,c
  3962  00134C  D004               	goto	i2l2550
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;ax.c: 453: clearState();
  3966  00134E  ECBB  F00E         	call	_clearState	;wreg free
  3967                           
  3968                           ;ax.c: 454: return 0;
  3969  001352  0E00               	movlw	0
  3970  001354  0012               	return	
  3971  001356                     i2l2550:
  3972                           
  3973                           ;ax.c: 455: }
  3974                           ;ax.c: 456: uint8_t d = dataToSend[bytesSent];
  3975  001356  0E60               	movlw	low _dataToSend
  3976  001358  0100               	movlb	0	; () banked
  3977  00135A  2594               	addwf	_bytesSent& (0+255),w,b	;volatile
  3978  00135C  6ED9               	movwf	fsr2l,c
  3979  00135E  0E00               	movlw	high _dataToSend
  3980  001360  0100               	movlb	0	; () banked
  3981  001362  2195               	addwfc	(_bytesSent+1)& (0+255),w,b	;volatile
  3982  001364  6EDA               	movwf	fsr2h,c
  3983  001366  50DF               	movf	indf2,w,c
  3984  001368  6E44               	movwf	getByteToSend@d,c
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;ax.c: 457: bytesSent++;
  3988  00136A  0100               	movlb	0	; () banked
  3989  00136C  4B94               	infsnz	_bytesSent& (0+255),f,b	;volatile
  3990  00136E  2B95               	incf	(_bytesSent+1)& (0+255),f,b	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;ax.c: 459: if (bytesSent > nbBytesToSend) {
  3994  001370  0100               	movlb	0	; () banked
  3995  001372  5194               	movf	_bytesSent& (0+255),w,b	;volatile
  3996  001374  0100               	movlb	0	; () banked
  3997  001376  5D96               	subwf	_nbBytesToSend& (0+255),w,b	;volatile
  3998  001378  0100               	movlb	0	; () banked
  3999  00137A  5197               	movf	(_nbBytesToSend+1)& (0+255),w,b	;volatile
  4000  00137C  0A80               	xorlw	128
  4001  00137E  6E3A               	movwf	??_getByteToSend& (0+255),c
  4002  001380  0100               	movlb	0	; () banked
  4003  001382  5195               	movf	(_bytesSent+1)& (0+255),w,b	;volatile
  4004  001384  0A80               	xorlw	128
  4005  001386  583A               	subwfb	??_getByteToSend& (0+255),w,c
  4006  001388  B0D8               	btfsc	status,0,c
  4007  00138A  D004               	goto	i2l2562
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;ax.c: 461: clearState();
  4011  00138C  ECBB  F00E         	call	_clearState	;wreg free
  4012                           
  4013                           ;ax.c: 462: return 111;
  4014  001390  0E6F               	movlw	111
  4015  001392  0012               	return	
  4016  001394                     i2l2562:
  4017                           
  4018                           ;ax.c: 463: }
  4019                           ;ax.c: 465: return d;
  4020  001394  5044               	movf	getByteToSend@d,w,c
  4021  001396  0012               	return	
  4022  001398                     __end_of_getByteToSend:
  4023                           	opt stack 0
  4024                           pclatu	equ	0xFFB
  4025                           pclath	equ	0xFFA
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           tblptrl	equ	0xFF6
  4029                           tablat	equ	0xFF5
  4030                           prodh	equ	0xFF4
  4031                           prodl	equ	0xFF3
  4032                           intcon	equ	0xFF2
  4033                           postinc0	equ	0xFEE
  4034                           fsr0h	equ	0xFEA
  4035                           fsr0l	equ	0xFE9
  4036                           wreg	equ	0xFE8
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _writeAXData *****************
  4047 ;; Defined at:
  4048 ;;		line 310 in file "ax.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  id              2   49[COMRAM] int 
  4051 ;;  address         2   51[COMRAM] int 
  4052 ;;  data            2   53[COMRAM] int 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  packet         20   20[BANK0 ] unsigned char [20]
  4055 ;;  result         20    0[BANK0 ] unsigned char [20]
  4056 ;;  size            2   46[BANK0 ] int 
  4057 ;;  error           2   44[BANK0 ] int 
  4058 ;;  instruction     2   42[BANK0 ] int 
  4059 ;;  length          2   40[BANK0 ] int 
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  2   49[COMRAM] int 
  4062 ;; Registers used:
  4063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4069 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4070 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;      Totals:         7      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4073 ;;Total ram usage:       55 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    2
  4076 ;; This function calls:
  4077 ;;		_getAddressSize
  4078 ;;		_sendAX
  4079 ;; This function is called by:
  4080 ;;		_getByteToSend
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text25
  4085  001646                     __ptext25:
  4086                           	opt stack 0
  4087  001646                     _writeAXData:
  4088                           	opt stack 22
  4089                           
  4090                           ;ax.c: 311: int size = getAddressSize(address);
  4091                           
  4092                           ;incstack = 0
  4093  001646  C034  F001         	movff	writeAXData@address,getAddressSize@address
  4094  00164A  C035  F002         	movff	writeAXData@address+1,getAddressSize@address+1
  4095  00164E  EC22  F00E         	call	_getAddressSize	;wreg free
  4096  001652  C001  F0D2         	movff	?_getAddressSize,writeAXData@size
  4097  001656  C002  F0D3         	movff	?_getAddressSize+1,writeAXData@size+1
  4098                           
  4099                           ;ax.c: 313: uint8_t packet[20];
  4100                           ;ax.c: 314: uint8_t result[20];
  4101                           ;ax.c: 315: packet[0] = 0xFF;
  4102  00165A  0100               	movlb	0	; () banked
  4103  00165C  69B8               	setf	writeAXData@packet& (0+255),b
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;ax.c: 316: packet[1] = 0xFF;
  4107  00165E  0100               	movlb	0	; () banked
  4108  001660  69B9               	setf	(writeAXData@packet+1)& (0+255),b
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;ax.c: 317: packet[2] = id;
  4112  001662  C032  F0BA         	movff	writeAXData@id,writeAXData@packet+2
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;ax.c: 318: int length = size + 3;
  4116  001666  0E03               	movlw	3
  4117  001668  0100               	movlb	0	; () banked
  4118  00166A  25D2               	addwf	writeAXData@size& (0+255),w,b
  4119  00166C  0100               	movlb	0	; () banked
  4120  00166E  6FCC               	movwf	writeAXData@length& (0+255),b
  4121  001670  0E00               	movlw	0
  4122  001672  0100               	movlb	0	; () banked
  4123  001674  21D3               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4124  001676  0100               	movlb	0	; () banked
  4125  001678  6FCD               	movwf	(writeAXData@length+1)& (0+255),b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;ax.c: 319: packet[3] = length;
  4129  00167A  C0CC  F0BB         	movff	writeAXData@length,writeAXData@packet+3
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;ax.c: 320: int instruction = 0x03;
  4133  00167E  0E00               	movlw	0
  4134  001680  0100               	movlb	0	; () banked
  4135  001682  6FCF               	movwf	(writeAXData@instruction+1)& (0+255),b
  4136  001684  0E03               	movlw	3
  4137  001686  6FCE               	movwf	writeAXData@instruction& (0+255),b
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;ax.c: 321: packet[4] = instruction;
  4141  001688  C0CE  F0BC         	movff	writeAXData@instruction,writeAXData@packet+4
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;ax.c: 322: packet[5] = address;
  4145  00168C  C034  F0BD         	movff	writeAXData@address,writeAXData@packet+5
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;ax.c: 323: if (size == 1) {
  4149  001690  0100               	movlb	0	; () banked
  4150  001692  05D2               	decf	writeAXData@size& (0+255),w,b
  4151  001694  0100               	movlb	0	; () banked
  4152  001696  11D3               	iorwf	(writeAXData@size+1)& (0+255),w,b
  4153  001698  A4D8               	btfss	status,2,c
  4154  00169A  D003               	goto	i2l560
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;ax.c: 324: packet[6] = data;
  4158  00169C  C036  F0BE         	movff	writeAXData@data,writeAXData@packet+6
  4159                           
  4160                           ;ax.c: 325: } else {
  4161  0016A0  D005               	goto	i2l2444
  4162  0016A2                     i2l560:
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;ax.c: 326: packet[6] = data & 0xff;
  4166  0016A2  C036  F0BE         	movff	writeAXData@data,writeAXData@packet+6
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;ax.c: 327: packet[7] = (data >> 8);
  4170  0016A6  5037               	movf	writeAXData@data+1,w,c
  4171  0016A8  0100               	movlb	0	; () banked
  4172  0016AA  6FBF               	movwf	(writeAXData@packet+7)& (0+255),b
  4173  0016AC                     i2l2444:
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;ax.c: 328: }
  4177                           ;ax.c: 331: int error = sendAX(packet, 6 + size, result, 0);
  4178  0016AC  0EB8               	movlw	low writeAXData@packet
  4179  0016AE  6E03               	movwf	sendAX@buffer,c
  4180  0016B0  0E00               	movlw	high writeAXData@packet
  4181  0016B2  6E04               	movwf	sendAX@buffer+1,c
  4182  0016B4  0E06               	movlw	6
  4183  0016B6  0100               	movlb	0	; () banked
  4184  0016B8  25D2               	addwf	writeAXData@size& (0+255),w,b
  4185  0016BA  6E05               	movwf	sendAX@packetSize,c
  4186  0016BC  0E00               	movlw	0
  4187  0016BE  0100               	movlb	0	; () banked
  4188  0016C0  21D3               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4189  0016C2  6E06               	movwf	sendAX@packetSize+1,c
  4190  0016C4  0EA4               	movlw	low writeAXData@result
  4191  0016C6  6E07               	movwf	sendAX@result,c
  4192  0016C8  0E00               	movlw	high writeAXData@result
  4193  0016CA  6E08               	movwf	sendAX@result+1,c
  4194  0016CC  0E00               	movlw	0
  4195  0016CE  6E0A               	movwf	sendAX@parametersToRead+1,c
  4196  0016D0  0E00               	movlw	0
  4197  0016D2  6E09               	movwf	sendAX@parametersToRead,c
  4198  0016D4  EC95  F007         	call	_sendAX	;wreg free
  4199  0016D8  6E38               	movwf	??_writeAXData& (0+255),c
  4200  0016DA  5038               	movf	??_writeAXData,w,c
  4201  0016DC  0100               	movlb	0	; () banked
  4202  0016DE  6FD0               	movwf	writeAXData@error& (0+255),b
  4203  0016E0  6BD1               	clrf	(writeAXData@error+1)& (0+255),b
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;ax.c: 332: if(error!=0){
  4207  0016E2  0100               	movlb	0	; () banked
  4208  0016E4  51D0               	movf	writeAXData@error& (0+255),w,b
  4209  0016E6  0100               	movlb	0	; () banked
  4210  0016E8  11D1               	iorwf	(writeAXData@error+1)& (0+255),w,b
  4211  0016EA  B4D8               	btfsc	status,2,c
  4212  0016EC  D01B               	goto	i2l2450
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;ax.c: 334: error = sendAX(packet, 6 + size, result, 0);
  4216  0016EE  0EB8               	movlw	low writeAXData@packet
  4217  0016F0  6E03               	movwf	sendAX@buffer,c
  4218  0016F2  0E00               	movlw	high writeAXData@packet
  4219  0016F4  6E04               	movwf	sendAX@buffer+1,c
  4220  0016F6  0E06               	movlw	6
  4221  0016F8  0100               	movlb	0	; () banked
  4222  0016FA  25D2               	addwf	writeAXData@size& (0+255),w,b
  4223  0016FC  6E05               	movwf	sendAX@packetSize,c
  4224  0016FE  0E00               	movlw	0
  4225  001700  0100               	movlb	0	; () banked
  4226  001702  21D3               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4227  001704  6E06               	movwf	sendAX@packetSize+1,c
  4228  001706  0EA4               	movlw	low writeAXData@result
  4229  001708  6E07               	movwf	sendAX@result,c
  4230  00170A  0E00               	movlw	high writeAXData@result
  4231  00170C  6E08               	movwf	sendAX@result+1,c
  4232  00170E  0E00               	movlw	0
  4233  001710  6E0A               	movwf	sendAX@parametersToRead+1,c
  4234  001712  0E00               	movlw	0
  4235  001714  6E09               	movwf	sendAX@parametersToRead,c
  4236  001716  EC95  F007         	call	_sendAX	;wreg free
  4237  00171A  6E38               	movwf	??_writeAXData& (0+255),c
  4238  00171C  5038               	movf	??_writeAXData,w,c
  4239  00171E  0100               	movlb	0	; () banked
  4240  001720  6FD0               	movwf	writeAXData@error& (0+255),b
  4241  001722  6BD1               	clrf	(writeAXData@error+1)& (0+255),b
  4242  001724                     i2l2450:
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;ax.c: 335: }
  4246                           ;ax.c: 336: if(error!=0){
  4247  001724  0100               	movlb	0	; () banked
  4248  001726  51D0               	movf	writeAXData@error& (0+255),w,b
  4249  001728  0100               	movlb	0	; () banked
  4250  00172A  11D1               	iorwf	(writeAXData@error+1)& (0+255),w,b
  4251  00172C  B4D8               	btfsc	status,2,c
  4252  00172E  D01B               	goto	i2l2454
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;ax.c: 338: error = sendAX(packet, 6 + size, result, 0);
  4256  001730  0EB8               	movlw	low writeAXData@packet
  4257  001732  6E03               	movwf	sendAX@buffer,c
  4258  001734  0E00               	movlw	high writeAXData@packet
  4259  001736  6E04               	movwf	sendAX@buffer+1,c
  4260  001738  0E06               	movlw	6
  4261  00173A  0100               	movlb	0	; () banked
  4262  00173C  25D2               	addwf	writeAXData@size& (0+255),w,b
  4263  00173E  6E05               	movwf	sendAX@packetSize,c
  4264  001740  0E00               	movlw	0
  4265  001742  0100               	movlb	0	; () banked
  4266  001744  21D3               	addwfc	(writeAXData@size+1)& (0+255),w,b
  4267  001746  6E06               	movwf	sendAX@packetSize+1,c
  4268  001748  0EA4               	movlw	low writeAXData@result
  4269  00174A  6E07               	movwf	sendAX@result,c
  4270  00174C  0E00               	movlw	high writeAXData@result
  4271  00174E  6E08               	movwf	sendAX@result+1,c
  4272  001750  0E00               	movlw	0
  4273  001752  6E0A               	movwf	sendAX@parametersToRead+1,c
  4274  001754  0E00               	movlw	0
  4275  001756  6E09               	movwf	sendAX@parametersToRead,c
  4276  001758  EC95  F007         	call	_sendAX	;wreg free
  4277  00175C  6E38               	movwf	??_writeAXData& (0+255),c
  4278  00175E  5038               	movf	??_writeAXData,w,c
  4279  001760  0100               	movlb	0	; () banked
  4280  001762  6FD0               	movwf	writeAXData@error& (0+255),b
  4281  001764  6BD1               	clrf	(writeAXData@error+1)& (0+255),b
  4282  001766                     i2l2454:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;ax.c: 339: }
  4286                           ;ax.c: 340: return error;
  4287  001766  C0D0  F032         	movff	writeAXData@error,?_writeAXData
  4288  00176A  C0D1  F033         	movff	writeAXData@error+1,?_writeAXData+1
  4289  00176E  0012               	return	
  4290  001770                     __end_of_writeAXData:
  4291                           	opt stack 0
  4292                           pclatu	equ	0xFFB
  4293                           pclath	equ	0xFFA
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           postinc0	equ	0xFEE
  4302                           fsr0h	equ	0xFEA
  4303                           fsr0l	equ	0xFE9
  4304                           wreg	equ	0xFE8
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _readAXData *****************
  4315 ;; Defined at:
  4316 ;;		line 273 in file "ax.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  id              2   49[COMRAM] int 
  4319 ;;  address         2   51[COMRAM] int 
  4320 ;;  err             2   53[COMRAM] PTR int 
  4321 ;;		 -> getByteToSend@error_1490(2), 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  packet         20   20[BANK0 ] unsigned char [20]
  4324 ;;  result         20    0[BANK0 ] unsigned char [20]
  4325 ;;  size            2   48[BANK0 ] int 
  4326 ;;  error           2   46[BANK0 ] int 
  4327 ;;  instruction     2   44[BANK0 ] int 
  4328 ;;  length          2   42[BANK0 ] int 
  4329 ;;  nbParameters    2   40[BANK0 ] int 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  2   49[COMRAM] int 
  4332 ;; Registers used:
  4333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4339 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4340 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4341 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4342 ;;      Totals:         8      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4343 ;;Total ram usage:       58 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    2
  4346 ;; This function calls:
  4347 ;;		_getAddressSize
  4348 ;;		_sendAX
  4349 ;; This function is called by:
  4350 ;;		_getByteToSend
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text26
  4355  001510                     __ptext26:
  4356                           	opt stack 0
  4357  001510                     _readAXData:
  4358                           	opt stack 22
  4359                           
  4360                           ;ax.c: 274: int size = getAddressSize(address);
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;incstack = 0
  4364  001510  C034  F001         	movff	readAXData@address,getAddressSize@address
  4365  001514  C035  F002         	movff	readAXData@address+1,getAddressSize@address+1
  4366  001518  EC22  F00E         	call	_getAddressSize	;wreg free
  4367  00151C  C001  F0D4         	movff	?_getAddressSize,readAXData@size
  4368  001520  C002  F0D5         	movff	?_getAddressSize+1,readAXData@size+1
  4369                           
  4370                           ;ax.c: 276: uint8_t packet[20];
  4371                           ;ax.c: 277: uint8_t result[20];
  4372                           ;ax.c: 278: packet[0] = 0xFF;
  4373  001524  0100               	movlb	0	; () banked
  4374  001526  69B8               	setf	readAXData@packet& (0+255),b
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;ax.c: 279: packet[1] = 0xFF;
  4378  001528  0100               	movlb	0	; () banked
  4379  00152A  69B9               	setf	(readAXData@packet+1)& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;ax.c: 280: packet[2] = id;
  4383  00152C  C032  F0BA         	movff	readAXData@id,readAXData@packet+2
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;ax.c: 281: int nbParameters = 2;
  4387  001530  0E00               	movlw	0
  4388  001532  0100               	movlb	0	; () banked
  4389  001534  6FCD               	movwf	(readAXData@nbParameters+1)& (0+255),b
  4390  001536  0E02               	movlw	2
  4391  001538  6FCC               	movwf	readAXData@nbParameters& (0+255),b
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;ax.c: 282: int length = nbParameters + 2;
  4395  00153A  0E02               	movlw	2
  4396  00153C  0100               	movlb	0	; () banked
  4397  00153E  25CC               	addwf	readAXData@nbParameters& (0+255),w,b
  4398  001540  0100               	movlb	0	; () banked
  4399  001542  6FCE               	movwf	readAXData@length& (0+255),b
  4400  001544  0E00               	movlw	0
  4401  001546  0100               	movlb	0	; () banked
  4402  001548  21CD               	addwfc	(readAXData@nbParameters+1)& (0+255),w,b
  4403  00154A  0100               	movlb	0	; () banked
  4404  00154C  6FCF               	movwf	(readAXData@length+1)& (0+255),b
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;ax.c: 283: packet[3] = length;
  4408  00154E  C0CE  F0BB         	movff	readAXData@length,readAXData@packet+3
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;ax.c: 284: int instruction = 0x02;
  4412  001552  0E00               	movlw	0
  4413  001554  0100               	movlb	0	; () banked
  4414  001556  6FD1               	movwf	(readAXData@instruction+1)& (0+255),b
  4415  001558  0E02               	movlw	2
  4416  00155A  6FD0               	movwf	readAXData@instruction& (0+255),b
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;ax.c: 285: packet[4] = instruction;
  4420  00155C  C0D0  F0BC         	movff	readAXData@instruction,readAXData@packet+4
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;ax.c: 286: packet[5] = address;
  4424  001560  C034  F0BD         	movff	readAXData@address,readAXData@packet+5
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;ax.c: 287: packet[6] = size;
  4428  001564  C0D4  F0BE         	movff	readAXData@size,readAXData@packet+6
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;ax.c: 290: int error = sendAX(packet, 7, result, size);
  4432  001568  0EB8               	movlw	low readAXData@packet
  4433  00156A  6E03               	movwf	sendAX@buffer,c
  4434  00156C  0E00               	movlw	high readAXData@packet
  4435  00156E  6E04               	movwf	sendAX@buffer+1,c
  4436  001570  0E00               	movlw	0
  4437  001572  6E06               	movwf	sendAX@packetSize+1,c
  4438  001574  0E07               	movlw	7
  4439  001576  6E05               	movwf	sendAX@packetSize,c
  4440  001578  0EA4               	movlw	low readAXData@result
  4441  00157A  6E07               	movwf	sendAX@result,c
  4442  00157C  0E00               	movlw	high readAXData@result
  4443  00157E  6E08               	movwf	sendAX@result+1,c
  4444  001580  C0D4  F009         	movff	readAXData@size,sendAX@parametersToRead
  4445  001584  C0D5  F00A         	movff	readAXData@size+1,sendAX@parametersToRead+1
  4446  001588  EC95  F007         	call	_sendAX	;wreg free
  4447  00158C  6E38               	movwf	??_readAXData& (0+255),c
  4448  00158E  5038               	movf	??_readAXData,w,c
  4449  001590  0100               	movlb	0	; () banked
  4450  001592  6FD2               	movwf	readAXData@error& (0+255),b
  4451  001594  6BD3               	clrf	(readAXData@error+1)& (0+255),b
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;ax.c: 291: if(error!=0){
  4455  001596  0100               	movlb	0	; () banked
  4456  001598  51D2               	movf	readAXData@error& (0+255),w,b
  4457  00159A  0100               	movlb	0	; () banked
  4458  00159C  11D3               	iorwf	(readAXData@error+1)& (0+255),w,b
  4459  00159E  B4D8               	btfsc	status,2,c
  4460  0015A0  D017               	goto	i2l2404
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;ax.c: 293: error = sendAX(packet, 7, result, size);
  4464  0015A2  0EB8               	movlw	low readAXData@packet
  4465  0015A4  6E03               	movwf	sendAX@buffer,c
  4466  0015A6  0E00               	movlw	high readAXData@packet
  4467  0015A8  6E04               	movwf	sendAX@buffer+1,c
  4468  0015AA  0E00               	movlw	0
  4469  0015AC  6E06               	movwf	sendAX@packetSize+1,c
  4470  0015AE  0E07               	movlw	7
  4471  0015B0  6E05               	movwf	sendAX@packetSize,c
  4472  0015B2  0EA4               	movlw	low readAXData@result
  4473  0015B4  6E07               	movwf	sendAX@result,c
  4474  0015B6  0E00               	movlw	high readAXData@result
  4475  0015B8  6E08               	movwf	sendAX@result+1,c
  4476  0015BA  C0D4  F009         	movff	readAXData@size,sendAX@parametersToRead
  4477  0015BE  C0D5  F00A         	movff	readAXData@size+1,sendAX@parametersToRead+1
  4478  0015C2  EC95  F007         	call	_sendAX	;wreg free
  4479  0015C6  6E38               	movwf	??_readAXData& (0+255),c
  4480  0015C8  5038               	movf	??_readAXData,w,c
  4481  0015CA  0100               	movlb	0	; () banked
  4482  0015CC  6FD2               	movwf	readAXData@error& (0+255),b
  4483  0015CE  6BD3               	clrf	(readAXData@error+1)& (0+255),b
  4484  0015D0                     i2l2404:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;ax.c: 294: }
  4488                           ;ax.c: 295: if(error!=0){
  4489  0015D0  0100               	movlb	0	; () banked
  4490  0015D2  51D2               	movf	readAXData@error& (0+255),w,b
  4491  0015D4  0100               	movlb	0	; () banked
  4492  0015D6  11D3               	iorwf	(readAXData@error+1)& (0+255),w,b
  4493  0015D8  B4D8               	btfsc	status,2,c
  4494  0015DA  D017               	goto	i2l2408
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;ax.c: 297: error = sendAX(packet, 7, result, size);
  4498  0015DC  0EB8               	movlw	low readAXData@packet
  4499  0015DE  6E03               	movwf	sendAX@buffer,c
  4500  0015E0  0E00               	movlw	high readAXData@packet
  4501  0015E2  6E04               	movwf	sendAX@buffer+1,c
  4502  0015E4  0E00               	movlw	0
  4503  0015E6  6E06               	movwf	sendAX@packetSize+1,c
  4504  0015E8  0E07               	movlw	7
  4505  0015EA  6E05               	movwf	sendAX@packetSize,c
  4506  0015EC  0EA4               	movlw	low readAXData@result
  4507  0015EE  6E07               	movwf	sendAX@result,c
  4508  0015F0  0E00               	movlw	high readAXData@result
  4509  0015F2  6E08               	movwf	sendAX@result+1,c
  4510  0015F4  C0D4  F009         	movff	readAXData@size,sendAX@parametersToRead
  4511  0015F8  C0D5  F00A         	movff	readAXData@size+1,sendAX@parametersToRead+1
  4512  0015FC  EC95  F007         	call	_sendAX	;wreg free
  4513  001600  6E38               	movwf	??_readAXData& (0+255),c
  4514  001602  5038               	movf	??_readAXData,w,c
  4515  001604  0100               	movlb	0	; () banked
  4516  001606  6FD2               	movwf	readAXData@error& (0+255),b
  4517  001608  6BD3               	clrf	(readAXData@error+1)& (0+255),b
  4518  00160A                     i2l2408:
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;ax.c: 298: }
  4522                           ;ax.c: 299: *err=error;
  4523  00160A  C036  FFD9         	movff	readAXData@err,fsr2l
  4524  00160E  C037  FFDA         	movff	readAXData@err+1,fsr2h
  4525  001612  C0D2  FFDE         	movff	readAXData@error,postinc2
  4526  001616  C0D3  FFDD         	movff	readAXData@error+1,postdec2
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;ax.c: 301: if (size == 1) {
  4530  00161A  0100               	movlb	0	; () banked
  4531  00161C  05D4               	decf	readAXData@size& (0+255),w,b
  4532  00161E  0100               	movlb	0	; () banked
  4533  001620  11D5               	iorwf	(readAXData@size+1)& (0+255),w,b
  4534  001622  A4D8               	btfss	status,2,c
  4535  001624  D004               	goto	i2l2416
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;ax.c: 303: return result[5];
  4539  001626  C0A9  F032         	movff	readAXData@result+5,?_readAXData
  4540  00162A  6A33               	clrf	?_readAXData+1,c
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;ax.c: 304: } else {
  4544  00162C  0012               	return	
  4545  00162E                     i2l2416:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;ax.c: 306: return result[5] + result[6]*256;
  4549  00162E  0100               	movlb	0	; () banked
  4550  001630  51AA               	movf	(readAXData@result+6)& (0+255),w,b
  4551  001632  6E39               	movwf	(??_readAXData+1)& (0+255),c
  4552  001634  6A38               	clrf	??_readAXData& (0+255),c
  4553  001636  0100               	movlb	0	; () banked
  4554  001638  51A9               	movf	(readAXData@result+5)& (0+255),w,b
  4555  00163A  2438               	addwf	??_readAXData,w,c
  4556  00163C  6E32               	movwf	?_readAXData,c
  4557  00163E  0E00               	movlw	0
  4558  001640  2039               	addwfc	??_readAXData+1,w,c
  4559  001642  6E33               	movwf	?_readAXData+1,c
  4560                           
  4561                           ; BSR set to: 0
  4562  001644  0012               	return	
  4563  001646                     __end_of_readAXData:
  4564                           	opt stack 0
  4565                           pclatu	equ	0xFFB
  4566                           pclath	equ	0xFFA
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           postinc0	equ	0xFEE
  4575                           fsr0h	equ	0xFEA
  4576                           fsr0l	equ	0xFE9
  4577                           wreg	equ	0xFE8
  4578                           fsr1h	equ	0xFE2
  4579                           fsr1l	equ	0xFE1
  4580                           indf2	equ	0xFDF
  4581                           postinc2	equ	0xFDE
  4582                           postdec2	equ	0xFDD
  4583                           fsr2h	equ	0xFDA
  4584                           fsr2l	equ	0xFD9
  4585                           status	equ	0xFD8
  4586                           
  4587 ;; *************** function _getAddressSize *****************
  4588 ;; Defined at:
  4589 ;;		line 24 in file "ax.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  address         2    0[COMRAM] int 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  2    0[COMRAM] int 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2, status,0
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4606 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4607 ;;Total ram usage:        4 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_readAXData
  4613 ;;		_writeAXData
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text27
  4618  001C44                     __ptext27:
  4619                           	opt stack 0
  4620  001C44                     _getAddressSize:
  4621                           	opt stack 23
  4622                           
  4623                           ;ax.c: 25: switch (address) {
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;incstack = 0
  4627  001C44  D00A               	goto	i2l2186
  4628  001C46                     i2l2176:
  4629                           
  4630                           ;ax.c: 27: case 6:
  4631                           ;ax.c: 28: case 8:
  4632                           ;ax.c: 29: case 14:
  4633                           ;ax.c: 30: case 20:
  4634                           ;ax.c: 31: case 22:
  4635                           ;ax.c: 32: case 30:
  4636                           ;ax.c: 33: case 32:
  4637                           ;ax.c: 34: case 34:
  4638                           ;ax.c: 35: case 36:
  4639                           ;ax.c: 36: case 38:
  4640                           ;ax.c: 37: case 40:
  4641                           ;ax.c: 38: case 48:
  4642                           ;ax.c: 39: return 2;
  4643  001C46  0E00               	movlw	0
  4644  001C48  6E02               	movwf	?_getAddressSize+1,c
  4645  001C4A  0E02               	movlw	2
  4646  001C4C  6E01               	movwf	?_getAddressSize,c
  4647  001C4E  0012               	return	
  4648  001C50                     i2l2180:
  4649                           
  4650                           ;ax.c: 41: return 1;
  4651  001C50  0E00               	movlw	0
  4652  001C52  6E02               	movwf	?_getAddressSize+1,c
  4653  001C54  0E01               	movlw	1
  4654  001C56  6E01               	movwf	?_getAddressSize,c
  4655                           
  4656                           ;ax.c: 42: }
  4657  001C58  0012               	return	
  4658  001C5A                     i2l2186:
  4659  001C5A  C001  F003         	movff	getAddressSize@address,??_getAddressSize
  4660  001C5E  C002  F004         	movff	getAddressSize@address+1,??_getAddressSize+1
  4661                           
  4662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4663                           ; Switch size 1, requested type "space"
  4664                           ; Number of cases is 1, Range of values is 0 to 0
  4665                           ; switch strategies available:
  4666                           ; Name         Instructions Cycles
  4667                           ; simple_byte            4     3 (average)
  4668                           ;	Chosen strategy is simple_byte
  4669  001C62  5004               	movf	??_getAddressSize+1,w,c
  4670  001C64  0A00               	xorlw	0	; case 0
  4671  001C66  A4D8               	btfss	status,2,c
  4672  001C68  D7F3               	goto	i2l2180
  4673                           
  4674                           ; Switch size 1, requested type "space"
  4675                           ; Number of cases is 13, Range of values is 0 to 48
  4676                           ; switch strategies available:
  4677                           ; Name         Instructions Cycles
  4678                           ; simple_byte           40    21 (average)
  4679                           ;	Chosen strategy is simple_byte
  4680  001C6A  5003               	movf	??_getAddressSize,w,c
  4681  001C6C  0A00               	xorlw	0	; case 0
  4682  001C6E  B4D8               	btfsc	status,2,c
  4683  001C70  D7EA               	goto	i2l2176
  4684  001C72  0A06               	xorlw	6	; case 6
  4685  001C74  B4D8               	btfsc	status,2,c
  4686  001C76  D7E7               	goto	i2l2176
  4687  001C78  0A0E               	xorlw	14	; case 8
  4688  001C7A  B4D8               	btfsc	status,2,c
  4689  001C7C  D7E4               	goto	i2l2176
  4690  001C7E  0A06               	xorlw	6	; case 14
  4691  001C80  B4D8               	btfsc	status,2,c
  4692  001C82  D7E1               	goto	i2l2176
  4693  001C84  0A1A               	xorlw	26	; case 20
  4694  001C86  B4D8               	btfsc	status,2,c
  4695  001C88  D7DE               	goto	i2l2176
  4696  001C8A  0A02               	xorlw	2	; case 22
  4697  001C8C  B4D8               	btfsc	status,2,c
  4698  001C8E  D7DB               	goto	i2l2176
  4699  001C90  0A08               	xorlw	8	; case 30
  4700  001C92  B4D8               	btfsc	status,2,c
  4701  001C94  D7D8               	goto	i2l2176
  4702  001C96  0A3E               	xorlw	62	; case 32
  4703  001C98  B4D8               	btfsc	status,2,c
  4704  001C9A  D7D5               	goto	i2l2176
  4705  001C9C  0A02               	xorlw	2	; case 34
  4706  001C9E  B4D8               	btfsc	status,2,c
  4707  001CA0  D7D2               	goto	i2l2176
  4708  001CA2  0A06               	xorlw	6	; case 36
  4709  001CA4  B4D8               	btfsc	status,2,c
  4710  001CA6  D7CF               	goto	i2l2176
  4711  001CA8  0A02               	xorlw	2	; case 38
  4712  001CAA  B4D8               	btfsc	status,2,c
  4713  001CAC  D7CC               	goto	i2l2176
  4714  001CAE  0A0E               	xorlw	14	; case 40
  4715  001CB0  B4D8               	btfsc	status,2,c
  4716  001CB2  D7C9               	goto	i2l2176
  4717  001CB4  0A18               	xorlw	24	; case 48
  4718  001CB6  B4D8               	btfsc	status,2,c
  4719  001CB8  D7C6               	goto	i2l2176
  4720  001CBA  D7CA               	goto	i2l2180
  4721  001CBC                     __end_of_getAddressSize:
  4722                           	opt stack 0
  4723                           pclatu	equ	0xFFB
  4724                           pclath	equ	0xFFA
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           postinc0	equ	0xFEE
  4733                           fsr0h	equ	0xFEA
  4734                           fsr0l	equ	0xFE9
  4735                           wreg	equ	0xFE8
  4736                           fsr1h	equ	0xFE2
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function _pingAX *****************
  4746 ;; Defined at:
  4747 ;;		line 248 in file "ax.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  id              2   49[COMRAM] int 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  packet         20   20[BANK0 ] unsigned char [20]
  4752 ;;  result         20    0[BANK0 ] unsigned char [20]
  4753 ;;  error           2   46[BANK0 ] int 
  4754 ;;  instruction     2   44[BANK0 ] int 
  4755 ;;  length          2   42[BANK0 ] int 
  4756 ;;  nbParameters    2   40[BANK0 ] int 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  2   49[COMRAM] int 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Locals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Totals:         3      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;Total ram usage:       51 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    2
  4773 ;; This function calls:
  4774 ;;		_sendAX
  4775 ;; This function is called by:
  4776 ;;		_getByteToSend
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text28
  4781  001870                     __ptext28:
  4782                           	opt stack 0
  4783  001870                     _pingAX:
  4784                           	opt stack 22
  4785                           
  4786                           ;ax.c: 249: uint8_t packet[20];
  4787                           ;ax.c: 250: uint8_t result[20];
  4788                           ;ax.c: 251: packet[0] = 0xFF;
  4789                           
  4790                           ;incstack = 0
  4791  001870  0100               	movlb	0	; () banked
  4792  001872  69B8               	setf	pingAX@packet& (0+255),b
  4793                           
  4794                           ;ax.c: 252: packet[1] = 0xFF;
  4795  001874  0100               	movlb	0	; () banked
  4796  001876  69B9               	setf	(pingAX@packet+1)& (0+255),b
  4797                           
  4798                           ;ax.c: 253: packet[2] = id;
  4799  001878  C032  F0BA         	movff	pingAX@id,pingAX@packet+2
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;ax.c: 254: int nbParameters = 0;
  4803  00187C  0E00               	movlw	0
  4804  00187E  0100               	movlb	0	; () banked
  4805  001880  6FCD               	movwf	(pingAX@nbParameters+1)& (0+255),b
  4806  001882  0E00               	movlw	0
  4807  001884  6FCC               	movwf	pingAX@nbParameters& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;ax.c: 255: int length = nbParameters + 2;
  4811  001886  0E02               	movlw	2
  4812  001888  0100               	movlb	0	; () banked
  4813  00188A  25CC               	addwf	pingAX@nbParameters& (0+255),w,b
  4814  00188C  0100               	movlb	0	; () banked
  4815  00188E  6FCE               	movwf	pingAX@length& (0+255),b
  4816  001890  0E00               	movlw	0
  4817  001892  0100               	movlb	0	; () banked
  4818  001894  21CD               	addwfc	(pingAX@nbParameters+1)& (0+255),w,b
  4819  001896  0100               	movlb	0	; () banked
  4820  001898  6FCF               	movwf	(pingAX@length+1)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;ax.c: 256: packet[3] = length;
  4824  00189A  C0CE  F0BB         	movff	pingAX@length,pingAX@packet+3
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;ax.c: 257: int instruction = 0x01;
  4828  00189E  0E00               	movlw	0
  4829  0018A0  0100               	movlb	0	; () banked
  4830  0018A2  6FD1               	movwf	(pingAX@instruction+1)& (0+255),b
  4831  0018A4  0E01               	movlw	1
  4832  0018A6  6FD0               	movwf	pingAX@instruction& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;ax.c: 258: packet[4] = instruction;
  4836  0018A8  C0D0  F0BC         	movff	pingAX@instruction,pingAX@packet+4
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;ax.c: 261: int error = sendAX(packet, 5, result, 0);
  4840  0018AC  0EB8               	movlw	low pingAX@packet
  4841  0018AE  6E03               	movwf	sendAX@buffer,c
  4842  0018B0  0E00               	movlw	high pingAX@packet
  4843  0018B2  6E04               	movwf	sendAX@buffer+1,c
  4844  0018B4  0E00               	movlw	0
  4845  0018B6  6E06               	movwf	sendAX@packetSize+1,c
  4846  0018B8  0E05               	movlw	5
  4847  0018BA  6E05               	movwf	sendAX@packetSize,c
  4848  0018BC  0EA4               	movlw	low pingAX@result
  4849  0018BE  6E07               	movwf	sendAX@result,c
  4850  0018C0  0E00               	movlw	high pingAX@result
  4851  0018C2  6E08               	movwf	sendAX@result+1,c
  4852  0018C4  0E00               	movlw	0
  4853  0018C6  6E0A               	movwf	sendAX@parametersToRead+1,c
  4854  0018C8  0E00               	movlw	0
  4855  0018CA  6E09               	movwf	sendAX@parametersToRead,c
  4856  0018CC  EC95  F007         	call	_sendAX	;wreg free
  4857  0018D0  6E34               	movwf	??_pingAX& (0+255),c
  4858  0018D2  5034               	movf	??_pingAX,w,c
  4859  0018D4  0100               	movlb	0	; () banked
  4860  0018D6  6FD2               	movwf	pingAX@error& (0+255),b
  4861  0018D8  6BD3               	clrf	(pingAX@error+1)& (0+255),b
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;ax.c: 262: if(error!=0){
  4865  0018DA  0100               	movlb	0	; () banked
  4866  0018DC  51D2               	movf	pingAX@error& (0+255),w,b
  4867  0018DE  0100               	movlb	0	; () banked
  4868  0018E0  11D3               	iorwf	(pingAX@error+1)& (0+255),w,b
  4869  0018E2  B4D8               	btfsc	status,2,c
  4870  0018E4  D017               	goto	i2l2368
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;ax.c: 264: error = sendAX(packet, 5, result, 0);
  4874  0018E6  0EB8               	movlw	low pingAX@packet
  4875  0018E8  6E03               	movwf	sendAX@buffer,c
  4876  0018EA  0E00               	movlw	high pingAX@packet
  4877  0018EC  6E04               	movwf	sendAX@buffer+1,c
  4878  0018EE  0E00               	movlw	0
  4879  0018F0  6E06               	movwf	sendAX@packetSize+1,c
  4880  0018F2  0E05               	movlw	5
  4881  0018F4  6E05               	movwf	sendAX@packetSize,c
  4882  0018F6  0EA4               	movlw	low pingAX@result
  4883  0018F8  6E07               	movwf	sendAX@result,c
  4884  0018FA  0E00               	movlw	high pingAX@result
  4885  0018FC  6E08               	movwf	sendAX@result+1,c
  4886  0018FE  0E00               	movlw	0
  4887  001900  6E0A               	movwf	sendAX@parametersToRead+1,c
  4888  001902  0E00               	movlw	0
  4889  001904  6E09               	movwf	sendAX@parametersToRead,c
  4890  001906  EC95  F007         	call	_sendAX	;wreg free
  4891  00190A  6E34               	movwf	??_pingAX& (0+255),c
  4892  00190C  5034               	movf	??_pingAX,w,c
  4893  00190E  0100               	movlb	0	; () banked
  4894  001910  6FD2               	movwf	pingAX@error& (0+255),b
  4895  001912  6BD3               	clrf	(pingAX@error+1)& (0+255),b
  4896  001914                     i2l2368:
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;ax.c: 265: }
  4900                           ;ax.c: 266: if(error!=0){
  4901  001914  0100               	movlb	0	; () banked
  4902  001916  51D2               	movf	pingAX@error& (0+255),w,b
  4903  001918  0100               	movlb	0	; () banked
  4904  00191A  11D3               	iorwf	(pingAX@error+1)& (0+255),w,b
  4905  00191C  B4D8               	btfsc	status,2,c
  4906  00191E  D017               	goto	i2l2372
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;ax.c: 268: error = sendAX(packet, 5, result, 0);
  4910  001920  0EB8               	movlw	low pingAX@packet
  4911  001922  6E03               	movwf	sendAX@buffer,c
  4912  001924  0E00               	movlw	high pingAX@packet
  4913  001926  6E04               	movwf	sendAX@buffer+1,c
  4914  001928  0E00               	movlw	0
  4915  00192A  6E06               	movwf	sendAX@packetSize+1,c
  4916  00192C  0E05               	movlw	5
  4917  00192E  6E05               	movwf	sendAX@packetSize,c
  4918  001930  0EA4               	movlw	low pingAX@result
  4919  001932  6E07               	movwf	sendAX@result,c
  4920  001934  0E00               	movlw	high pingAX@result
  4921  001936  6E08               	movwf	sendAX@result+1,c
  4922  001938  0E00               	movlw	0
  4923  00193A  6E0A               	movwf	sendAX@parametersToRead+1,c
  4924  00193C  0E00               	movlw	0
  4925  00193E  6E09               	movwf	sendAX@parametersToRead,c
  4926  001940  EC95  F007         	call	_sendAX	;wreg free
  4927  001944  6E34               	movwf	??_pingAX& (0+255),c
  4928  001946  5034               	movf	??_pingAX,w,c
  4929  001948  0100               	movlb	0	; () banked
  4930  00194A  6FD2               	movwf	pingAX@error& (0+255),b
  4931  00194C  6BD3               	clrf	(pingAX@error+1)& (0+255),b
  4932  00194E                     i2l2372:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;ax.c: 269: }
  4936                           ;ax.c: 270: return error;
  4937  00194E  C0D2  F032         	movff	pingAX@error,?_pingAX
  4938  001952  C0D3  F033         	movff	pingAX@error+1,?_pingAX+1
  4939  001956  0012               	return	
  4940  001958                     __end_of_pingAX:
  4941                           	opt stack 0
  4942                           pclatu	equ	0xFFB
  4943                           pclath	equ	0xFFA
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           postinc0	equ	0xFEE
  4952                           fsr0h	equ	0xFEA
  4953                           fsr0l	equ	0xFE9
  4954                           wreg	equ	0xFE8
  4955                           fsr1h	equ	0xFE2
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _sendAX *****************
  4965 ;; Defined at:
  4966 ;;		line 137 in file "ax.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  buffer          2    2[COMRAM] PTR unsigned char 
  4969 ;;		 -> writeAXData@packet(20), readAXData@packet(20), pingAX@packet(20), 
  4970 ;;  packetSize      2    4[COMRAM] int 
  4971 ;;  result          2    6[COMRAM] PTR unsigned char 
  4972 ;;		 -> writeAXData@result(20), readAXData@result(20), pingAX@result(20), 
  4973 ;;  parametersTo    2    8[COMRAM] int 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  i               2   41[COMRAM] int 
  4976 ;;  i               2   39[COMRAM] int 
  4977 ;;  i               2   37[COMRAM] int 
  4978 ;;  i               2   35[COMRAM] int 
  4979 ;;  i               2   33[COMRAM] int 
  4980 ;;  stop            2   47[COMRAM] int 
  4981 ;;  r0              2   45[COMRAM] int 
  4982 ;;  header_found    2   31[COMRAM] int 
  4983 ;;  count           2   29[COMRAM] int 
  4984 ;;  param6          2   27[COMRAM] int 
  4985 ;;  param5          2   25[COMRAM] int 
  4986 ;;  param4          2   23[COMRAM] int 
  4987 ;;  param3          2   21[COMRAM] int 
  4988 ;;  param2          2   19[COMRAM] int 
  4989 ;;  param1          2   17[COMRAM] int 
  4990 ;;  param0          2   15[COMRAM] int 
  4991 ;;  checksumResu    1   44[COMRAM] unsigned char 
  4992 ;;  checksum        1   43[COMRAM] unsigned char 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      unsigned char 
  4995 ;; Registers used:
  4996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5002 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5003 ;;      Locals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5004 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5005 ;;      Totals:        47       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5006 ;;Total ram usage:       47 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    1
  5009 ;; This function calls:
  5010 ;;		_EUSART1_Read
  5011 ;;		_EUSART1_Write
  5012 ;; This function is called by:
  5013 ;;		_pingAX
  5014 ;;		_readAXData
  5015 ;;		_writeAXData
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text29
  5020  000F2A                     __ptext29:
  5021                           	opt stack 0
  5022  000F2A                     _sendAX:
  5023                           	opt stack 22
  5024                           
  5025                           ;ax.c: 143: RCSTA1bits.SPEN = 0;
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;incstack = 0
  5029  000F2A  9EAB               	bcf	4011,7,c	;volatile
  5030                           
  5031                           ;ax.c: 144: RCSTA1bits.SPEN = 1;
  5032  000F2C  8EAB               	bsf	4011,7,c	;volatile
  5033                           
  5034                           ;ax.c: 145: RCSTA1bits.CREN= 0;
  5035  000F2E  98AB               	bcf	4011,4,c	;volatile
  5036                           
  5037                           ;ax.c: 149: uint8_t checksum = 0;
  5038  000F30  0E00               	movlw	0
  5039  000F32  6E2C               	movwf	sendAX@checksum,c
  5040                           
  5041                           ;ax.c: 150: do { LATDbits.LATD4 = 1; } while(0);
  5042  000F34  888C               	bsf	3980,4,c	;volatile
  5043                           
  5044                           ;ax.c: 151: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5045  000F36  0E35               	movlw	53
  5046  000F38                     i2u186_47:
  5047  000F38  2EE8               	decfsz	wreg,f,c
  5048  000F3A  D7FE               	bra	i2u186_47
  5049  000F3C  F000               	nop	
  5050                           
  5051                           ;ax.c: 152: for (int i = 2; i < packetSize; i++) {
  5052  000F3E  0E00               	movlw	0
  5053  000F40  6E23               	movwf	sendAX@i+1,c
  5054  000F42  0E02               	movlw	2
  5055  000F44  6E22               	movwf	sendAX@i,c
  5056  000F46  D00A               	goto	i2l2206
  5057  000F48                     i2l2202:
  5058                           
  5059                           ;ax.c: 153: checksum += buffer[i];
  5060  000F48  5022               	movf	sendAX@i,w,c
  5061  000F4A  2403               	addwf	sendAX@buffer,w,c
  5062  000F4C  6ED9               	movwf	fsr2l,c
  5063  000F4E  5023               	movf	sendAX@i+1,w,c
  5064  000F50  2004               	addwfc	sendAX@buffer+1,w,c
  5065  000F52  6EDA               	movwf	fsr2h,c
  5066  000F54  50DF               	movf	indf2,w,c
  5067  000F56  262C               	addwf	sendAX@checksum,f,c
  5068  000F58  4A22               	infsnz	sendAX@i,f,c
  5069  000F5A  2A23               	incf	sendAX@i+1,f,c
  5070  000F5C                     i2l2206:
  5071  000F5C  5005               	movf	sendAX@packetSize,w,c
  5072  000F5E  5C22               	subwf	sendAX@i,w,c
  5073  000F60  5023               	movf	sendAX@i+1,w,c
  5074  000F62  0A80               	xorlw	128
  5075  000F64  6E0B               	movwf	??_sendAX& (0+255),c
  5076  000F66  5006               	movf	sendAX@packetSize+1,w,c
  5077  000F68  0A80               	xorlw	128
  5078  000F6A  580B               	subwfb	??_sendAX& (0+255),w,c
  5079  000F6C  A0D8               	btfss	status,0,c
  5080  000F6E  D7EC               	goto	i2l2202
  5081                           
  5082                           ;ax.c: 154: }
  5083                           ;ax.c: 155: checksum = ~checksum;
  5084  000F70  1E2C               	comf	sendAX@checksum,f,c
  5085                           
  5086                           ;ax.c: 158: for (int i = 0; i < packetSize; i++) {
  5087  000F72  0E00               	movlw	0
  5088  000F74  6E25               	movwf	sendAX@i_1419+1,c
  5089  000F76  0E00               	movlw	0
  5090  000F78  6E24               	movwf	sendAX@i_1419,c
  5091  000F7A  D00B               	goto	i2l2216
  5092  000F7C                     i2l2212:
  5093                           
  5094                           ;ax.c: 159: EUSART1_Write(buffer[i]);
  5095  000F7C  5024               	movf	sendAX@i_1419,w,c
  5096  000F7E  2403               	addwf	sendAX@buffer,w,c
  5097  000F80  6ED9               	movwf	fsr2l,c
  5098  000F82  5025               	movf	sendAX@i_1419+1,w,c
  5099  000F84  2004               	addwfc	sendAX@buffer+1,w,c
  5100  000F86  6EDA               	movwf	fsr2h,c
  5101  000F88  50DF               	movf	indf2,w,c
  5102  000F8A  EC98  F00F         	call	_EUSART1_Write
  5103  000F8E  4A24               	infsnz	sendAX@i_1419,f,c
  5104  000F90  2A25               	incf	sendAX@i_1419+1,f,c
  5105  000F92                     i2l2216:
  5106  000F92  5005               	movf	sendAX@packetSize,w,c
  5107  000F94  5C24               	subwf	sendAX@i_1419,w,c
  5108  000F96  5025               	movf	sendAX@i_1419+1,w,c
  5109  000F98  0A80               	xorlw	128
  5110  000F9A  6E0B               	movwf	??_sendAX& (0+255),c
  5111  000F9C  5006               	movf	sendAX@packetSize+1,w,c
  5112  000F9E  0A80               	xorlw	128
  5113  000FA0  580B               	subwfb	??_sendAX& (0+255),w,c
  5114  000FA2  A0D8               	btfss	status,0,c
  5115  000FA4  D7EB               	goto	i2l2212
  5116                           
  5117                           ;ax.c: 160: }
  5118                           ;ax.c: 161: EUSART1_Write(checksum);
  5119  000FA6  502C               	movf	sendAX@checksum,w,c
  5120  000FA8  EC98  F00F         	call	_EUSART1_Write
  5121                           
  5122                           ;ax.c: 163: int stop = 6 + parametersToRead;
  5123  000FAC  0E06               	movlw	6
  5124  000FAE  2409               	addwf	sendAX@parametersToRead,w,c
  5125  000FB0  6E30               	movwf	sendAX@stop,c
  5126  000FB2  0E00               	movlw	0
  5127  000FB4  200A               	addwfc	sendAX@parametersToRead+1,w,c
  5128  000FB6  6E31               	movwf	sendAX@stop+1,c
  5129                           
  5130                           ;ax.c: 165: for (int i = 0; i < stop; i++) {
  5131  000FB8  0E00               	movlw	0
  5132  000FBA  6E27               	movwf	sendAX@i_1422+1,c
  5133  000FBC  0E00               	movlw	0
  5134  000FBE  6E26               	movwf	sendAX@i_1422,c
  5135  000FC0  D00A               	goto	i2l2228
  5136  000FC2                     i2l2224:
  5137                           
  5138                           ;ax.c: 166: result[i] = 0X00;
  5139  000FC2  5026               	movf	sendAX@i_1422,w,c
  5140  000FC4  2407               	addwf	sendAX@result,w,c
  5141  000FC6  6ED9               	movwf	fsr2l,c
  5142  000FC8  5027               	movf	sendAX@i_1422+1,w,c
  5143  000FCA  2008               	addwfc	sendAX@result+1,w,c
  5144  000FCC  6EDA               	movwf	fsr2h,c
  5145  000FCE  0E00               	movlw	0
  5146  000FD0  6EDF               	movwf	indf2,c
  5147  000FD2  4A26               	infsnz	sendAX@i_1422,f,c
  5148  000FD4  2A27               	incf	sendAX@i_1422+1,f,c
  5149  000FD6                     i2l2228:
  5150  000FD6  5030               	movf	sendAX@stop,w,c
  5151  000FD8  5C26               	subwf	sendAX@i_1422,w,c
  5152  000FDA  5027               	movf	sendAX@i_1422+1,w,c
  5153  000FDC  0A80               	xorlw	128
  5154  000FDE  6E0B               	movwf	??_sendAX& (0+255),c
  5155  000FE0  5031               	movf	sendAX@stop+1,w,c
  5156  000FE2  0A80               	xorlw	128
  5157  000FE4  580B               	subwfb	??_sendAX& (0+255),w,c
  5158  000FE6  A0D8               	btfss	status,0,c
  5159  000FE8  D7EC               	goto	i2l2224
  5160                           
  5161                           ;ax.c: 167: }
  5162                           ;ax.c: 180: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5163  000FEA  0E35               	movlw	53
  5164  000FEC                     i2u187_47:
  5165  000FEC  2EE8               	decfsz	wreg,f,c
  5166  000FEE  D7FE               	bra	i2u187_47
  5167  000FF0  F000               	nop	
  5168                           
  5169                           ;ax.c: 181: do { LATDbits.LATD4 = 0; } while(0);
  5170  000FF2  988C               	bcf	3980,4,c	;volatile
  5171                           
  5172                           ;ax.c: 184: RCSTA1bits.SPEN = 0;
  5173  000FF4  9EAB               	bcf	4011,7,c	;volatile
  5174                           
  5175                           ;ax.c: 185: RCSTA1bits.SPEN = 1;
  5176  000FF6  8EAB               	bsf	4011,7,c	;volatile
  5177                           
  5178                           ;ax.c: 186: RCSTA1bits.CREN= 1;
  5179  000FF8  88AB               	bsf	4011,4,c	;volatile
  5180                           
  5181                           ;ax.c: 191: int count = 0;
  5182  000FFA  0E00               	movlw	0
  5183  000FFC  6E1F               	movwf	sendAX@count+1,c
  5184  000FFE  0E00               	movlw	0
  5185  001000  6E1E               	movwf	sendAX@count,c
  5186                           
  5187                           ;ax.c: 192: int header_found=0;
  5188  001002  0E00               	movlw	0
  5189  001004  6E21               	movwf	sendAX@header_found+1,c
  5190  001006  0E00               	movlw	0
  5191  001008  6E20               	movwf	sendAX@header_found,c
  5192                           
  5193                           ;ax.c: 193: int r0 = EUSART1_Read();
  5194  00100A  ECF2  F00E         	call	_EUSART1_Read	;wreg free
  5195  00100E  6E0B               	movwf	??_sendAX& (0+255),c
  5196  001010  500B               	movf	??_sendAX,w,c
  5197  001012  6E2E               	movwf	sendAX@r0,c
  5198  001014  6A2F               	clrf	sendAX@r0+1,c
  5199                           
  5200                           ;ax.c: 194: if(r0==0xFF){
  5201  001016  282E               	incf	sendAX@r0,w,c
  5202  001018  102F               	iorwf	sendAX@r0+1,w,c
  5203  00101A  A4D8               	btfss	status,2,c
  5204  00101C  D015               	goto	i2l2258
  5205                           
  5206                           ;ax.c: 195: header_found=1;
  5207  00101E  0E00               	movlw	0
  5208  001020  6E21               	movwf	sendAX@header_found+1,c
  5209  001022  0E01               	movlw	1
  5210  001024  6E20               	movwf	sendAX@header_found,c
  5211                           
  5212                           ;ax.c: 196: } else {
  5213  001026  D014               	goto	i2l2260
  5214  001028                     i2l2250:
  5215                           
  5216                           ;ax.c: 198: r0 = EUSART1_Read();
  5217  001028  ECF2  F00E         	call	_EUSART1_Read	;wreg free
  5218  00102C  6E0B               	movwf	??_sendAX& (0+255),c
  5219  00102E  500B               	movf	??_sendAX,w,c
  5220  001030  6E2E               	movwf	sendAX@r0,c
  5221  001032  6A2F               	clrf	sendAX@r0+1,c
  5222                           
  5223                           ;ax.c: 199: count++;
  5224  001034  4A1E               	infsnz	sendAX@count,f,c
  5225  001036  2A1F               	incf	sendAX@count+1,f,c
  5226                           
  5227                           ;ax.c: 201: if (count > 5) {
  5228  001038  BE1F               	btfsc	sendAX@count+1,7,c
  5229  00103A  D006               	goto	i2l2258
  5230  00103C  501F               	movf	sendAX@count+1,w,c
  5231  00103E  E108               	bnz	i2l2260
  5232  001040  0E06               	movlw	6
  5233  001042  5C1E               	subwf	sendAX@count,w,c
  5234  001044  B0D8               	btfsc	status,0,c
  5235  001046  D004               	goto	i2l2260
  5236  001048                     i2l2258:
  5237  001048  282E               	incf	sendAX@r0,w,c
  5238  00104A  102F               	iorwf	sendAX@r0+1,w,c
  5239  00104C  A4D8               	btfss	status,2,c
  5240  00104E  D7EC               	goto	i2l2250
  5241  001050                     i2l2260:
  5242                           
  5243                           ;ax.c: 203: }
  5244                           ;ax.c: 204: }
  5245                           ;ax.c: 205: }
  5246                           ;ax.c: 206: if(header_found==0){
  5247  001050  5020               	movf	sendAX@header_found,w,c
  5248  001052  1021               	iorwf	sendAX@header_found+1,w,c
  5249  001054  A4D8               	btfss	status,2,c
  5250  001056  D002               	goto	i2l2266
  5251                           
  5252                           ;ax.c: 208: return 251;
  5253  001058  0EFB               	movlw	251
  5254  00105A  0012               	return	
  5255  00105C                     i2l2266:
  5256                           
  5257                           ;ax.c: 209: }
  5258                           ;ax.c: 211: result[0] = r0;
  5259  00105C  C007  FFD9         	movff	sendAX@result,fsr2l
  5260  001060  C008  FFDA         	movff	sendAX@result+1,fsr2h
  5261  001064  C02E  FFDF         	movff	sendAX@r0,indf2
  5262                           
  5263                           ;ax.c: 213: for (int i = 1; i < stop; i++) {
  5264  001068  0E00               	movlw	0
  5265  00106A  6E29               	movwf	sendAX@i_1427+1,c
  5266  00106C  0E01               	movlw	1
  5267  00106E  6E28               	movwf	sendAX@i_1427,c
  5268  001070  D016               	goto	i2l2280
  5269  001072                     i2l2270:
  5270                           
  5271                           ;ax.c: 214: result[i] = EUSART1_Read();
  5272  001072  5028               	movf	sendAX@i_1427,w,c
  5273  001074  2407               	addwf	sendAX@result,w,c
  5274  001076  6ED9               	movwf	fsr2l,c
  5275  001078  5029               	movf	sendAX@i_1427+1,w,c
  5276  00107A  2008               	addwfc	sendAX@result+1,w,c
  5277  00107C  6EDA               	movwf	fsr2h,c
  5278  00107E  ECF2  F00E         	call	_EUSART1_Read	;wreg free
  5279  001082  6EDF               	movwf	indf2,c
  5280                           
  5281                           ;ax.c: 215: if(result[1]!=0xFF){
  5282  001084  EE20 F001          	lfsr	2,1
  5283  001088  5007               	movf	sendAX@result,w,c
  5284  00108A  26D9               	addwf	fsr2l,f,c
  5285  00108C  5008               	movf	sendAX@result+1,w,c
  5286  00108E  22DA               	addwfc	fsr2h,f,c
  5287  001090  28DE               	incf	postinc2,w,c
  5288  001092  B4D8               	btfsc	status,2,c
  5289  001094  D002               	goto	i2l2278
  5290                           
  5291                           ;ax.c: 216: return 250;
  5292  001096  0EFA               	movlw	250
  5293  001098  0012               	return	
  5294  00109A                     i2l2278:
  5295  00109A  4A28               	infsnz	sendAX@i_1427,f,c
  5296  00109C  2A29               	incf	sendAX@i_1427+1,f,c
  5297  00109E                     i2l2280:
  5298  00109E  5030               	movf	sendAX@stop,w,c
  5299  0010A0  5C28               	subwf	sendAX@i_1427,w,c
  5300  0010A2  5029               	movf	sendAX@i_1427+1,w,c
  5301  0010A4  0A80               	xorlw	128
  5302  0010A6  6E0B               	movwf	??_sendAX& (0+255),c
  5303  0010A8  5031               	movf	sendAX@stop+1,w,c
  5304  0010AA  0A80               	xorlw	128
  5305  0010AC  580B               	subwfb	??_sendAX& (0+255),w,c
  5306  0010AE  A0D8               	btfss	status,0,c
  5307  0010B0  D7E0               	goto	i2l2270
  5308                           
  5309                           ;ax.c: 217: }
  5310                           ;ax.c: 218: }
  5311                           ;ax.c: 220: int param0 = result[0];
  5312  0010B2  C007  FFD9         	movff	sendAX@result,fsr2l
  5313  0010B6  C008  FFDA         	movff	sendAX@result+1,fsr2h
  5314  0010BA  50DF               	movf	indf2,w,c
  5315  0010BC  6E0B               	movwf	??_sendAX& (0+255),c
  5316  0010BE  500B               	movf	??_sendAX,w,c
  5317  0010C0  6E10               	movwf	sendAX@param0,c
  5318  0010C2  6A11               	clrf	sendAX@param0+1,c
  5319                           
  5320                           ;ax.c: 221: int param1 = result[1];
  5321  0010C4  EE20 F001          	lfsr	2,1
  5322  0010C8  5007               	movf	sendAX@result,w,c
  5323  0010CA  26D9               	addwf	fsr2l,f,c
  5324  0010CC  5008               	movf	sendAX@result+1,w,c
  5325  0010CE  22DA               	addwfc	fsr2h,f,c
  5326  0010D0  50DF               	movf	indf2,w,c
  5327  0010D2  6E0B               	movwf	??_sendAX& (0+255),c
  5328  0010D4  500B               	movf	??_sendAX,w,c
  5329  0010D6  6E12               	movwf	sendAX@param1,c
  5330  0010D8  6A13               	clrf	sendAX@param1+1,c
  5331                           
  5332                           ;ax.c: 222: int param2 = result[2];
  5333  0010DA  EE20 F002          	lfsr	2,2
  5334  0010DE  5007               	movf	sendAX@result,w,c
  5335  0010E0  26D9               	addwf	fsr2l,f,c
  5336  0010E2  5008               	movf	sendAX@result+1,w,c
  5337  0010E4  22DA               	addwfc	fsr2h,f,c
  5338  0010E6  50DF               	movf	indf2,w,c
  5339  0010E8  6E0B               	movwf	??_sendAX& (0+255),c
  5340  0010EA  500B               	movf	??_sendAX,w,c
  5341  0010EC  6E14               	movwf	sendAX@param2,c
  5342  0010EE  6A15               	clrf	sendAX@param2+1,c
  5343                           
  5344                           ;ax.c: 223: int param3 = result[3];
  5345  0010F0  EE20 F003          	lfsr	2,3
  5346  0010F4  5007               	movf	sendAX@result,w,c
  5347  0010F6  26D9               	addwf	fsr2l,f,c
  5348  0010F8  5008               	movf	sendAX@result+1,w,c
  5349  0010FA  22DA               	addwfc	fsr2h,f,c
  5350  0010FC  50DF               	movf	indf2,w,c
  5351  0010FE  6E0B               	movwf	??_sendAX& (0+255),c
  5352  001100  500B               	movf	??_sendAX,w,c
  5353  001102  6E16               	movwf	sendAX@param3,c
  5354  001104  6A17               	clrf	sendAX@param3+1,c
  5355                           
  5356                           ;ax.c: 224: int param4 = result[4];
  5357  001106  EE20 F004          	lfsr	2,4
  5358  00110A  5007               	movf	sendAX@result,w,c
  5359  00110C  26D9               	addwf	fsr2l,f,c
  5360  00110E  5008               	movf	sendAX@result+1,w,c
  5361  001110  22DA               	addwfc	fsr2h,f,c
  5362  001112  50DF               	movf	indf2,w,c
  5363  001114  6E0B               	movwf	??_sendAX& (0+255),c
  5364  001116  500B               	movf	??_sendAX,w,c
  5365  001118  6E18               	movwf	sendAX@param4,c
  5366  00111A  6A19               	clrf	sendAX@param4+1,c
  5367                           
  5368                           ;ax.c: 225: int param5 = result[5];
  5369  00111C  EE20 F005          	lfsr	2,5
  5370  001120  5007               	movf	sendAX@result,w,c
  5371  001122  26D9               	addwf	fsr2l,f,c
  5372  001124  5008               	movf	sendAX@result+1,w,c
  5373  001126  22DA               	addwfc	fsr2h,f,c
  5374  001128  50DF               	movf	indf2,w,c
  5375  00112A  6E0B               	movwf	??_sendAX& (0+255),c
  5376  00112C  500B               	movf	??_sendAX,w,c
  5377  00112E  6E1A               	movwf	sendAX@param5,c
  5378  001130  6A1B               	clrf	sendAX@param5+1,c
  5379                           
  5380                           ;ax.c: 226: int param6 = result[6];
  5381  001132  EE20 F006          	lfsr	2,6
  5382  001136  5007               	movf	sendAX@result,w,c
  5383  001138  26D9               	addwf	fsr2l,f,c
  5384  00113A  5008               	movf	sendAX@result+1,w,c
  5385  00113C  22DA               	addwfc	fsr2h,f,c
  5386  00113E  50DF               	movf	indf2,w,c
  5387  001140  6E0B               	movwf	??_sendAX& (0+255),c
  5388  001142  500B               	movf	??_sendAX,w,c
  5389  001144  6E1C               	movwf	sendAX@param6,c
  5390  001146  6A1D               	clrf	sendAX@param6+1,c
  5391                           
  5392                           ;ax.c: 229: uint8_t checksumResult = 0;
  5393  001148  0E00               	movlw	0
  5394  00114A  6E2D               	movwf	sendAX@checksumResult,c
  5395                           
  5396                           ;ax.c: 230: for (int i = 2; i < stop - 1; i++) {
  5397  00114C  0E00               	movlw	0
  5398  00114E  6E2B               	movwf	sendAX@i_1436+1,c
  5399  001150  0E02               	movlw	2
  5400  001152  6E2A               	movwf	sendAX@i_1436,c
  5401  001154  D00A               	goto	i2l2292
  5402  001156                     i2l2288:
  5403                           
  5404                           ;ax.c: 231: checksumResult += result[i];
  5405  001156  502A               	movf	sendAX@i_1436,w,c
  5406  001158  2407               	addwf	sendAX@result,w,c
  5407  00115A  6ED9               	movwf	fsr2l,c
  5408  00115C  502B               	movf	sendAX@i_1436+1,w,c
  5409  00115E  2008               	addwfc	sendAX@result+1,w,c
  5410  001160  6EDA               	movwf	fsr2h,c
  5411  001162  50DF               	movf	indf2,w,c
  5412  001164  262D               	addwf	sendAX@checksumResult,f,c
  5413  001166  4A2A               	infsnz	sendAX@i_1436,f,c
  5414  001168  2A2B               	incf	sendAX@i_1436+1,f,c
  5415  00116A                     i2l2292:
  5416  00116A  0EFF               	movlw	255
  5417  00116C  6E0B               	movwf	??_sendAX& (0+255),c
  5418  00116E  0EFF               	movlw	255
  5419  001170  6E0C               	movwf	(??_sendAX+1)& (0+255),c
  5420  001172  C030  F00D         	movff	sendAX@stop,??_sendAX+2
  5421  001176  C031  F00E         	movff	sendAX@stop+1,??_sendAX+3
  5422  00117A  500B               	movf	??_sendAX,w,c
  5423  00117C  260D               	addwf	??_sendAX+2,f,c
  5424  00117E  500C               	movf	??_sendAX+1,w,c
  5425  001180  220E               	addwfc	??_sendAX+3,f,c
  5426  001182  500D               	movf	??_sendAX+2,w,c
  5427  001184  5C2A               	subwf	sendAX@i_1436,w,c
  5428  001186  502B               	movf	sendAX@i_1436+1,w,c
  5429  001188  0A80               	xorlw	128
  5430  00118A  6E0F               	movwf	(??_sendAX+4)& (0+255),c
  5431  00118C  500E               	movf	??_sendAX+3,w,c
  5432  00118E  0A80               	xorlw	128
  5433  001190  580F               	subwfb	(??_sendAX+4)& (0+255),w,c
  5434  001192  A0D8               	btfss	status,0,c
  5435  001194  D7E0               	goto	i2l2288
  5436                           
  5437                           ;ax.c: 232: }
  5438                           ;ax.c: 233: checksumResult = ~checksumResult;
  5439  001196  1E2D               	comf	sendAX@checksumResult,f,c
  5440                           
  5441                           ;ax.c: 236: {
  5442                           ;ax.c: 237: do { LATDbits.LATD4 = 1; } while(0);
  5443  001198  888C               	bsf	3980,4,c	;volatile
  5444                           
  5445                           ;ax.c: 238: _delay((unsigned long)((10)*(64000000/4000000.0)));
  5446  00119A  0E35               	movlw	53
  5447  00119C                     i2u188_47:
  5448  00119C  2EE8               	decfsz	wreg,f,c
  5449  00119E  D7FE               	bra	i2u188_47
  5450  0011A0  F000               	nop	
  5451                           
  5452                           ;ax.c: 239: }
  5453                           ;ax.c: 240: if (checksumResult != result[stop - 1]) {
  5454  0011A2  0EFF               	movlw	255
  5455  0011A4  6E0B               	movwf	??_sendAX& (0+255),c
  5456  0011A6  0EFF               	movlw	255
  5457  0011A8  6E0C               	movwf	(??_sendAX+1)& (0+255),c
  5458  0011AA  C030  F00D         	movff	sendAX@stop,??_sendAX+2
  5459  0011AE  C031  F00E         	movff	sendAX@stop+1,??_sendAX+3
  5460  0011B2  500B               	movf	??_sendAX,w,c
  5461  0011B4  260D               	addwf	??_sendAX+2,f,c
  5462  0011B6  500C               	movf	??_sendAX+1,w,c
  5463  0011B8  220E               	addwfc	??_sendAX+3,f,c
  5464  0011BA  500D               	movf	??_sendAX+2,w,c
  5465  0011BC  2407               	addwf	sendAX@result,w,c
  5466  0011BE  6ED9               	movwf	fsr2l,c
  5467  0011C0  500E               	movf	??_sendAX+3,w,c
  5468  0011C2  2008               	addwfc	sendAX@result+1,w,c
  5469  0011C4  6EDA               	movwf	fsr2h,c
  5470  0011C6  502D               	movf	sendAX@checksumResult,w,c
  5471  0011C8  18DE               	xorwf	postinc2,w,c
  5472  0011CA  B4D8               	btfsc	status,2,c
  5473  0011CC  D002               	goto	i2l2306
  5474                           
  5475                           ;ax.c: 242: return 253;
  5476  0011CE  0EFD               	movlw	253
  5477  0011D0  0012               	return	
  5478  0011D2                     i2l2306:
  5479                           
  5480                           ;ax.c: 243: }
  5481                           ;ax.c: 244: return result[4];
  5482  0011D2  EE20 F004          	lfsr	2,4
  5483  0011D6  5007               	movf	sendAX@result,w,c
  5484  0011D8  26D9               	addwf	fsr2l,f,c
  5485  0011DA  5008               	movf	sendAX@result+1,w,c
  5486  0011DC  22DA               	addwfc	fsr2h,f,c
  5487  0011DE  50DF               	movf	indf2,w,c
  5488  0011E0  0012               	return	
  5489  0011E2                     __end_of_sendAX:
  5490                           	opt stack 0
  5491                           pclatu	equ	0xFFB
  5492                           pclath	equ	0xFFA
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           postinc0	equ	0xFEE
  5501                           fsr0h	equ	0xFEA
  5502                           fsr0l	equ	0xFE9
  5503                           wreg	equ	0xFE8
  5504                           fsr1h	equ	0xFE2
  5505                           fsr1l	equ	0xFE1
  5506                           indf2	equ	0xFDF
  5507                           postinc2	equ	0xFDE
  5508                           postdec2	equ	0xFDD
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _EUSART1_Write *****************
  5514 ;; Defined at:
  5515 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  txData          1    wreg     unsigned char 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  txData          1    0[COMRAM] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5533 ;;Total ram usage:        1 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		_sendAX
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text30
  5543  001F30                     __ptext30:
  5544                           	opt stack 0
  5545  001F30                     _EUSART1_Write:
  5546                           	opt stack 22
  5547                           
  5548                           ;incstack = 0
  5549                           ;EUSART1_Write@txData stored from wreg
  5550  001F30  6E01               	movwf	EUSART1_Write@txData,c
  5551  001F32                     i2l104:
  5552  001F32  A89E               	btfss	3998,4,c	;volatile
  5553  001F34  D7FE               	goto	i2l104
  5554                           
  5555                           ;eusart1.c: 98: }
  5556                           ;eusart1.c: 100: TXREG1 = txData;
  5557  001F36  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  5558  001F3A  0012               	return		;funcret
  5559  001F3C                     __end_of_EUSART1_Write:
  5560                           	opt stack 0
  5561                           pclatu	equ	0xFFB
  5562                           pclath	equ	0xFFA
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           postinc0	equ	0xFEE
  5571                           fsr0h	equ	0xFEA
  5572                           fsr0l	equ	0xFE9
  5573                           wreg	equ	0xFE8
  5574                           fsr1h	equ	0xFE2
  5575                           fsr1l	equ	0xFE1
  5576                           indf2	equ	0xFDF
  5577                           postinc2	equ	0xFDE
  5578                           postdec2	equ	0xFDD
  5579                           fsr2h	equ	0xFDA
  5580                           fsr2l	equ	0xFD9
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _EUSART1_Read *****************
  5584 ;; Defined at:
  5585 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  i               2    0[COMRAM] int 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      unsigned char 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5602 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5603 ;;Total ram usage:        2 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_sendAX
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text31
  5613  001DE4                     __ptext31:
  5614                           	opt stack 0
  5615  001DE4                     _EUSART1_Read:
  5616                           	opt stack 22
  5617                           
  5618                           ;eusart1.c: 76: int i = 0;
  5619                           
  5620                           ;incstack = 0
  5621  001DE4  0E00               	movlw	0
  5622  001DE6  6E02               	movwf	EUSART1_Read@i+1,c
  5623  001DE8  0E00               	movlw	0
  5624  001DEA  6E01               	movwf	EUSART1_Read@i,c
  5625                           
  5626                           ;eusart1.c: 78: while (!PIR1bits.RC1IF) {
  5627  001DEC  D00E               	goto	i2l96
  5628  001DEE                     i2l2154:
  5629                           
  5630                           ;eusart1.c: 79: i++;
  5631  001DEE  4A01               	infsnz	EUSART1_Read@i,f,c
  5632  001DF0  2A02               	incf	EUSART1_Read@i+1,f,c
  5633                           
  5634                           ;eusart1.c: 80: if (i > 500) {
  5635  001DF2  BE02               	btfsc	EUSART1_Read@i+1,7,c
  5636  001DF4  D00A               	goto	i2l96
  5637  001DF6  0EF5               	movlw	245
  5638  001DF8  5C01               	subwf	EUSART1_Read@i,w,c
  5639  001DFA  0E01               	movlw	1
  5640  001DFC  5802               	subwfb	EUSART1_Read@i+1,w,c
  5641  001DFE  A0D8               	btfss	status,0,c
  5642  001E00  D004               	goto	i2l96
  5643                           
  5644                           ;eusart1.c: 81: RCSTA1bits.SPEN = 0;
  5645  001E02  9EAB               	bcf	4011,7,c	;volatile
  5646                           
  5647                           ;eusart1.c: 82: RCSTA1bits.SPEN = 1;
  5648  001E04  8EAB               	bsf	4011,7,c	;volatile
  5649                           
  5650                           ;eusart1.c: 83: return 252;
  5651  001E06  0EFC               	movlw	252
  5652  001E08  0012               	return	
  5653  001E0A                     i2l96:
  5654  001E0A  AA9E               	btfss	3998,5,c	;volatile
  5655  001E0C  D7F0               	goto	i2l2154
  5656                           
  5657                           ;eusart1.c: 84: }
  5658                           ;eusart1.c: 85: }
  5659                           ;eusart1.c: 88: if (1 == RCSTA1bits.OERR) {
  5660  001E0E  A2AB               	btfss	4011,1,c	;volatile
  5661  001E10  D002               	goto	i2l2166
  5662                           
  5663                           ;eusart1.c: 89: RCSTA1bits.SPEN = 0;
  5664  001E12  9EAB               	bcf	4011,7,c	;volatile
  5665                           
  5666                           ;eusart1.c: 90: RCSTA1bits.SPEN = 1;
  5667  001E14  8EAB               	bsf	4011,7,c	;volatile
  5668  001E16                     i2l2166:
  5669                           
  5670                           ;eusart1.c: 91: }
  5671                           ;eusart1.c: 93: return RCREG1;
  5672  001E16  50AE               	movf	4014,w,c	;volatile
  5673  001E18  0012               	return	
  5674  001E1A                     __end_of_EUSART1_Read:
  5675                           	opt stack 0
  5676                           pclatu	equ	0xFFB
  5677                           pclath	equ	0xFFA
  5678                           tblptru	equ	0xFF8
  5679                           tblptrh	equ	0xFF7
  5680                           tblptrl	equ	0xFF6
  5681                           tablat	equ	0xFF5
  5682                           prodh	equ	0xFF4
  5683                           prodl	equ	0xFF3
  5684                           intcon	equ	0xFF2
  5685                           postinc0	equ	0xFEE
  5686                           fsr0h	equ	0xFEA
  5687                           fsr0l	equ	0xFE9
  5688                           wreg	equ	0xFE8
  5689                           fsr1h	equ	0xFE2
  5690                           fsr1l	equ	0xFE1
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _clearState *****************
  5699 ;; Defined at:
  5700 ;;		line 400 in file "ax.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      void 
  5707 ;; Registers used:
  5708 ;;		wreg, status,2
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_getByteToSend
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text32
  5728  001D76                     __ptext32:
  5729                           	opt stack 0
  5730  001D76                     _clearState:
  5731                           	opt stack 24
  5732                           
  5733                           ;ax.c: 401: bytesSent = 0;
  5734                           
  5735                           ;incstack = 0
  5736  001D76  0E00               	movlw	0
  5737  001D78  0100               	movlb	0	; () banked
  5738  001D7A  6F95               	movwf	(_bytesSent+1)& (0+255),b	;volatile
  5739  001D7C  0E00               	movlw	0
  5740  001D7E  6F94               	movwf	_bytesSent& (0+255),b	;volatile
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;ax.c: 402: currentCommand = -1;
  5744  001D80  685E               	setf	_currentCommand,c	;volatile
  5745                           
  5746                           ;ax.c: 403: parameter1 = 0;
  5747  001D82  0E00               	movlw	0
  5748  001D84  6E5D               	movwf	_parameter1,c	;volatile
  5749                           
  5750                           ;ax.c: 404: parameter2 = 0;
  5751  001D86  0E00               	movlw	0
  5752  001D88  0100               	movlb	0	; () banked
  5753  001D8A  6FA2               	movwf	_parameter2& (0+255),b	;volatile
  5754                           
  5755                           ;ax.c: 405: parameter3 = 0;
  5756  001D8C  0E00               	movlw	0
  5757  001D8E  0100               	movlb	0	; () banked
  5758  001D90  6FA1               	movwf	_parameter3& (0+255),b	;volatile
  5759                           
  5760                           ;ax.c: 406: parameter4 = 0;
  5761  001D92  0E00               	movlw	0
  5762  001D94  0100               	movlb	0	; () banked
  5763  001D96  6FA0               	movwf	_parameter4& (0+255),b	;volatile
  5764                           
  5765                           ;ax.c: 407: parameter5 = 0;
  5766  001D98  0E00               	movlw	0
  5767  001D9A  0100               	movlb	0	; () banked
  5768  001D9C  6F9F               	movwf	_parameter5& (0+255),b	;volatile
  5769                           
  5770                           ;ax.c: 408: parameter6 = 0;
  5771  001D9E  0E00               	movlw	0
  5772  001DA0  0100               	movlb	0	; () banked
  5773  001DA2  6F9E               	movwf	_parameter6& (0+255),b	;volatile
  5774                           
  5775                           ;ax.c: 409: readIndex = 0;
  5776  001DA4  0E00               	movlw	0
  5777  001DA6  6E5C               	movwf	_readIndex+1,c	;volatile
  5778  001DA8  0E00               	movlw	0
  5779  001DAA  6E5B               	movwf	_readIndex,c	;volatile
  5780                           
  5781                           ; BSR set to: 0
  5782  001DAC  0012               	return		;funcret
  5783  001DAE                     __end_of_clearState:
  5784                           	opt stack 0
  5785                           pclatu	equ	0xFFB
  5786                           pclath	equ	0xFFA
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           intcon	equ	0xFF2
  5794                           postinc0	equ	0xFEE
  5795                           fsr0h	equ	0xFEA
  5796                           fsr0l	equ	0xFE9
  5797                           wreg	equ	0xFE8
  5798                           fsr1h	equ	0xFE2
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _ADC_GetConversion *****************
  5808 ;; Defined at:
  5809 ;;		line 105 in file "mcc_generated_files/adc.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  channel         1    wreg     enum E15090
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  channel         1    4[COMRAM] enum E15090
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  2    0[COMRAM] unsigned int 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5823 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5825 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5826 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5827 ;;Total ram usage:        5 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_getByteToSend
  5833 ;;		_getADC
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text33
  5838  001E1A                     __ptext33:
  5839                           	opt stack 0
  5840  001E1A                     _ADC_GetConversion:
  5841                           	opt stack 24
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;incstack = 0
  5845                           ;ADC_GetConversion@channel stored from wreg
  5846  001E1A  6E05               	movwf	ADC_GetConversion@channel,c
  5847                           
  5848                           ;adc.c: 108: ADCON0bits.CHS = channel;
  5849  001E1C  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  5850  001E20  4603               	rlncf	??_ADC_GetConversion,f,c
  5851  001E22  4603               	rlncf	??_ADC_GetConversion,f,c
  5852  001E24  50C2               	movf	4034,w,c	;volatile
  5853  001E26  1803               	xorwf	??_ADC_GetConversion,w,c
  5854  001E28  0B83               	andlw	-125
  5855  001E2A  1803               	xorwf	??_ADC_GetConversion,w,c
  5856  001E2C  6EC2               	movwf	4034,c	;volatile
  5857                           
  5858                           ;adc.c: 111: ADCON0bits.ADON = 1;
  5859  001E2E  80C2               	bsf	4034,0,c	;volatile
  5860                           
  5861                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
  5862  001E30  82C2               	bsf	4034,1,c	;volatile
  5863  001E32                     i2l254:
  5864  001E32  B2C2               	btfsc	4034,1,c	;volatile
  5865  001E34  D7FE               	goto	i2l254
  5866                           
  5867                           ;adc.c: 120: }
  5868                           ;adc.c: 123: return ((ADRESH << 8) + ADRESL);
  5869  001E36  50C4               	movf	4036,w,c	;volatile
  5870  001E38  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  5871  001E3A  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  5872  001E3C  50C3               	movf	4035,w,c	;volatile
  5873  001E3E  2403               	addwf	??_ADC_GetConversion,w,c
  5874  001E40  6E01               	movwf	?_ADC_GetConversion,c
  5875  001E42  0E00               	movlw	0
  5876  001E44  2004               	addwfc	??_ADC_GetConversion+1,w,c
  5877  001E46  6E02               	movwf	?_ADC_GetConversion+1,c
  5878  001E48  0012               	return	
  5879  001E4A                     __end_of_ADC_GetConversion:
  5880                           	opt stack 0
  5881                           pclatu	equ	0xFFB
  5882                           pclath	equ	0xFFA
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           postinc0	equ	0xFEE
  5891                           fsr0h	equ	0xFEA
  5892                           fsr0l	equ	0xFE9
  5893                           wreg	equ	0xFE8
  5894                           fsr1h	equ	0xFE2
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _ADC_ISR *****************
  5904 ;; Defined at:
  5905 ;;		line 126 in file "mcc_generated_files/adc.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;		None
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		None
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5923 ;;Total ram usage:        0 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_INTERRUPT_InterruptManager
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text34
  5933  001F4E                     __ptext34:
  5934                           	opt stack 0
  5935  001F4E                     _ADC_ISR:
  5936                           	opt stack 26
  5937                           
  5938                           ;adc.c: 129: PIR1bits.ADIF = 0;
  5939                           
  5940                           ;incstack = 0
  5941  001F4E  9C9E               	bcf	3998,6,c	;volatile
  5942  001F50  0012               	return		;funcret
  5943  001F52                     __end_of_ADC_ISR:
  5944                           	opt stack 0
  5945                           pclatu	equ	0xFFB
  5946                           pclath	equ	0xFFA
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           postinc0	equ	0xFEE
  5955                           fsr0h	equ	0xFEA
  5956                           fsr0l	equ	0xFE9
  5957                           wreg	equ	0xFE8
  5958                           fsr1h	equ	0xFE2
  5959                           fsr1l	equ	0xFE1
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           postdec2	equ	0xFDD
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           pclatu	equ	0xFFB
  5967                           pclath	equ	0xFFA
  5968                           tblptru	equ	0xFF8
  5969                           tblptrh	equ	0xFF7
  5970                           tblptrl	equ	0xFF6
  5971                           tablat	equ	0xFF5
  5972                           prodh	equ	0xFF4
  5973                           prodl	equ	0xFF3
  5974                           intcon	equ	0xFF2
  5975                           postinc0	equ	0xFEE
  5976                           fsr0h	equ	0xFEA
  5977                           fsr0l	equ	0xFE9
  5978                           wreg	equ	0xFE8
  5979                           fsr1h	equ	0xFE2
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988                           	psect	rparam
  5989  0000                     pclatu	equ	0xFFB
  5990                           pclath	equ	0xFFA
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           fsr0h	equ	0xFEA
  6000                           fsr0l	equ	0xFE9
  6001                           wreg	equ	0xFE8
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011                           	psect	temp
  6012  00005F                     btemp:
  6013                           	opt stack 0
  6014  00005F                     	ds	1
  6015  0000                     int$flags	set	btemp
  6016                           pclatu	equ	0xFFB
  6017                           pclath	equ	0xFFA
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           postinc0	equ	0xFEE
  6026                           fsr0h	equ	0xFEA
  6027                           fsr0l	equ	0xFE9
  6028                           wreg	equ	0xFE8
  6029                           fsr1h	equ	0xFE2
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           postinc2	equ	0xFDE
  6033                           postdec2	equ	0xFDD
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8


Data Sizes:
    Strings     40
    Constant    0
    Data        3
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     90      94
    BANK0           160     50     120
    BANK1           256     21      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 

    readAXData@err	PTR int  size(2) Largest target is 2
		 -> getByteToSend@error_1490(COMRAM[2]), 

    sendAX@result	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@result(BANK0[20]), readAXData@result(BANK0[20]), pingAX@result(BANK0[20]), 

    sendAX@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> writeAXData@packet(BANK0[20]), readAXData@packet(BANK0[20]), pingAX@packet(BANK0[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _I2C_ISR->_getByteToSend
    i2_printf->i2_putch
    i2_putch->i2_EUSART2_Write
    _handleByteReceived->_setLedOff
    _handleByteReceived->_setLedOn
    _getByteToSend->_readAXData
    _writeAXData->_sendAX
    _readAXData->_sendAX
    _pingAX->_sendAX
    _sendAX->_EUSART1_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _getByteToSend->_readAXData

Critical Paths under _main in BANK1

    _main->_delay_ms
    _printf->_putch
    _putch->_EUSART2_Write
    _delay_ms->___awdiv
    _SYSTEM_Initialize->_TMR1_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2804
                                             15 BANK1      6     6      0
                  _SYSTEM_Initialize
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     365
                                              2 BANK1      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      62
                                              1 BANK1      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             7     5      2    1928
                                              8 BANK1      7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     625
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0       0
                                              0 BANK1      2     2      0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          14    14      0   14825
                                             76 COMRAM    14    14      0
                            _ADC_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (5) _I2C_ISR                                              0     0      0   14825
                      _getByteToSend
                 _handleByteReceived
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            18    16      2     116
                                              2 COMRAM     5     3      2
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (8) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _handleByteReceived                                   3     3      0     418
                                              4 COMRAM     3     3      0
                          _setLedOff
                           _setLedOn
 ---------------------------------------------------------------------------------
 (7) _setLedOn                                             4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _setLedOff                                            4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _getByteToSend                                       20    20      0   14291
                                             57 COMRAM    19    19      0
                  _ADC_GetConversion
                         _clearState
                             _pingAX
                         _readAXData
                        _writeAXData
 ---------------------------------------------------------------------------------
 (7) _writeAXData                                         55    49      6    4841
                                             49 COMRAM     7     1      6
                                              0 BANK0     48    48      0
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (7) _readAXData                                          58    52      6    4841
                                             49 COMRAM     8     2      6
                                              0 BANK0     50    50      0
                     _getAddressSize
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _getAddressSize                                       4     2      2     174
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _pingAX                                              51    49      2    4221
                                             49 COMRAM     3     1      2
                                              0 BANK0     48    48      0
                             _sendAX
 ---------------------------------------------------------------------------------
 (8) _sendAX                                              47    39      8    3736
                                              2 COMRAM    47    39      8
                       _EUSART1_Read
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Read                                         2     2      0      24
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _clearState                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversion                                    5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _I2C_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _delay_ms
     ___awdiv
   _printf
     _putch
       _EUSART2_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _I2C_ISR
     _getByteToSend
       _ADC_GetConversion
       _clearState
       _pingAX
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _readAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
       _writeAXData
         _getAddressSize
         _sendAX
           _EUSART1_Read
           _EUSART1_Write
     _handleByteReceived
       _setLedOff
       _setLedOn
     i2_printf
       i2_putch
         i2_EUSART2_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     15      15       8        8.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     32      78       5       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5A      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EB       6        0.0%
DATA                 0      0      EB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 06 11:59:49 2021

                        _SSPSTATbits 000FC7                                   l31 1F1A  
                       ___awdiv@sign 0105                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l417 1B2E                                  l345 1438  
                                l385 14EC                                  l388 14EE  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
         __end_of_handleByteReceived 1870                      __end_of_I2C_ISR 1AC2  
                    _timer1ReloadVal 009A                      __end_of_ADC_ISR 1F52  
                                prod 000FF3                                  wreg 000FE8  
                               l3100 1B16                                 l3110 13B8  
                               l3040 198A                                 l3050 19BA  
                               l3034 1974                                 l3106 13A2  
                               l3116 13DE                                 l3046 19A8  
                               l3062 19F8                                 l3048 19B4  
                               l3072 1DBC                                 l3066 1A0C  
                               l3058 19EA                                 l3074 1DC4  
                               l3138 1422                                 l3094 1AD8  
                               l3096 1AEC                                 STR_1 0F1F  
                               STR_2 0F12                                 STR_3 0F01  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u1847 1AE0  
                               u1857 1B1E                                 i2l31 1F26  
                               i2l96 1E0A                                 _WPUB 000F5B  
                      _EUSART1_Write 1F30                        _EUSART2_Write 1F16  
                               _main 1398                        ?_EUSART1_Read 0001  
                               _junk 00A3                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005F                                 prodh 000FF4  
                               prodl 000FF3                                 start 0096  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$HS2 000000  
                    __end_ofi2_putch 1F46                       readAXData@size 00D4  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                        _writeAXData 1646             __size_ofi2_EUSART2_Write 000C  
                 writeAXData@address 0034              __size_of_getAddressSize 0078  
     __size_of_OSCILLATOR_Initialize 0012        __end_of_OSCILLATOR_Initialize 1F08  
                              ?_main 0001                                _BCLIF 007D0B  
                    __end_of___awdiv 1A16                      _TMR1_StartTimer 1F46  
                    ___awdiv@divisor 0102                                _T1CON 000FCD  
                              i2l104 1F32                                i2l312 005A  
                              i2l153 1A20                                i2l501 1BE8  
                              i2l254 1E32                                i2l504 1BEC  
                              i2l507 1BF0                                i2l451 1B5A  
                              i2l460 1B66                                i2l444 1B52  
                              i2l454 1B5E                                i2l463 1B6A  
                              i2l560 16A2                                i2l472 1B76  
                              i2l448 1B56                                i2l608 186E  
                              i2l457 1B62                                i2l466 1B6E  
                              i2l483 1BD0                                i2l492 1BDC  
                              i2l469 1B72                                i2l486 1BD4  
                              i2l495 1BE0                                i2l479 1BCC  
                              i2l489 1BD8                                i2l498 1BE4  
                    ___awdiv@counter 0104                                _TMR1H 000FCF  
                              _TMR1L 000FCE                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _SSPIF 007CF3                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                              _first 00D6                    getByteToSend@xlow 0040  
                              _putch 1F08                                main@i 010F  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 1D3C  
                     ?_EUSART2_Write 0001                                pclath 000FFA  
                              tablat 000FF5               readAXData@nbParameters 00CC  
                     ??_EUSART1_Read 0001                                status 000FD8  
                    readAXData@error 00D2                     __end_ofi2_printf 1E76  
                    __initialization 1CBC           __end_of_EUSART1_Initialize 1EF6  
                       __end_of_main 1510                           i2printf@ap 0005  
                          ??_I2C_ISR 004D                            ??_ADC_ISR 0001  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 010F  
                      __activetblptr 000003                       __CFG_PLLCFG$ON 000000  
                     __CFG_RETEN$OFF 000000           __end_of_EUSART2_Initialize 1EE0  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _ANCON0 000F5D  
                             _ANCON1 000F5C                     ___awdiv@dividend 0100  
                             ?_putch 0001                               _T1GCON 000FAA  
                    __CFG_BBSIZ$BB2K 000000                               i2l2202 0F48  
                             i2l2212 0F7C                               i2l2206 0F5C  
                             i2l2224 0FC2                               i2l2216 0F92  
                             i2l2154 1DEE                               i2l2306 11D2  
                             i2l2250 1028                               i2l2260 1050  
                             i2l2228 0FD6                               i2l2180 1C50  
                             i2l2404 15D0                               i2l2166 1E16  
                             i2l2270 1072                               i2l2510 1264  
                             i2l2334 1B7A                               i2l2280 109E  
                             i2l2176 1C46                               i2l2416 162E  
                             i2l2408 160A                               i2l2520 12AE  
                             i2l2344 1BF4                               i2l2266 105C  
                             i2l2258 1048                               i2l2186 1C5A  
                             i2l2450 1724                               i2l2530 12F4  
                             i2l2602 1804                               i2l2292 116A  
                             i2l2372 194E                               i2l2444 16AC  
                             i2l2620 1840                               i2l2278 109A  
                             i2l2454 1766                               i2l2550 1356  
                             i2l2542 1342                               i2l2614 182C  
                     __CFG_WDTEN$OFF 000000                               i2l2288 1156  
                             i2l2368 1914                               i2l2528 12EC  
                             i2l2632 1868                               i2l2608 1818  
                             i2l2562 1394                               i2l2490 1210  
                             i2l2626 1854                               i2l2716 1A3E  
                             i2l2724 1A54                               i2l2734 1A68  
                             i2l2830 004E                               i2l2584 17BC  
                             i2l2752 1AA4                               i2l2744 1A8C  
                             i2l2578 179E                               i2l2746 1A92  
                             i2l2754 1AA6                               i2l2596 17E8  
                             i2l2764 1ABE                               i2l2696 1E54  
                             i2l2698 1E5A                        i2putch@txData 0002  
                             _RCREG1 000FAE                               _RCREG2 000F7A  
                             _RCSTA1 000FAB                               _RCSTA2 000FA6  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _SPBRG2 000F7B                            ??i2_putch 0002  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
                             _TXREG1 000FAD                               _TXREG2 000F79  
                             _TXSTA1 000FAC                               _TXSTA2 000FBA  
                   __end_of_delay_ms 1B50                       __CFG_XINST$OFF 000000  
                     sendAX@checksum 002C              __end_of_TMR1_StartTimer 1F4A  
                          ??___awdiv 0104                       __CFG_STVREN$ON 000000  
                 getByteToSend@error 003C                   getByteToSend@value 0045  
                 getByteToSend@xhigh 0041                               _pingAX 1870  
                             _sendAX 0F2A                               clear_0 1CEC  
                   ___awdiv@quotient 0106              __size_of_I2C_Initialize 001A  
                             _printf 1DAE                     __end_of_setLedOn 1BCA  
                  ??i2_EUSART2_Write 0001                         __pdataCOMRAM 005E  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0005                      ??_EUSART1_Write 0001  
                    ??_EUSART2_Write 0100        __size_of_INTERRUPT_Initialize 0004  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 1E76  
                         __accesstop 0060              __end_of__initialization 1CF8  
                   readAXData@packet 00B8                     readAXData@length 00CE  
                 ?_SYSTEM_Initialize 0001                          pingAX@error 00D2  
                      ___rparam_used 000001                     readAXData@result 00A4  
                       readAXData@id 0032                       __pcstackCOMRAM 0001  
                       __pidataBANK0 1F52                readAXData@instruction 00D0  
                ??_SYSTEM_Initialize 0102                __end_of_getByteToSend 1398  
                        sendAX@count 001E                       _getAddressSize 1C44  
                         _adc_values 0080                        __end_of_putch 1F16  
               __end_of_EUSART1_Read 1E1A                   sendAX@header_found 0020  
                          ?i2_printf 0003            __end_of_SYSTEM_Initialize 1E98  
                            ??_putch 0101                           _dataToSend 0060  
                         __pbssBANK0 0060               sendAX@parametersToRead 0009  
                 _handleByteReceived 1770                          setLedOn@led 0001  
                         _clearState 1D76                  ?_handleByteReceived 0001  
             __end_of_getAddressSize 1CBC                         ?_writeAXData 0032  
                 __size_of_setLedOff 007A                     ?_TMR1_StartTimer 0001  
                            _I2C_ISR 1A16                              _ADC_ISR 1F4E  
                            ?_pingAX 0032                              ?_sendAX 0003  
                            ?_printf 0102              __size_of_ADC_Initialize 0018  
                      EUSART1_Read@i 0001                     __CFG_CANMX$PORTB 000000  
                            _REFOCON 000F9A                              _OSCCON2 000FD2  
                          ?_delay_ms 0108                 ??_handleByteReceived 0005  
                         ??i2_printf 0005                              _OSCTUNE 000F9B  
                            _SPBRGH1 000F7D                              _SPBRGH2 000F7C  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                              i2_putch 1F3C  
                    writeAXData@data 0036               getByteToSend@xlow_1499 0042  
                    writeAXData@size 00D2                           _readAXData 1510  
                          ?_setLedOn 0001                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                getAddressSize@address 0001  
                            __Lparam 0000                      ?_getAddressSize 0001  
                            ___awdiv 1958                         __psmallconst 0F00  
                            __pcinit 1CBC                       _I2C_Initialize 1E98  
                    __size_of_pingAX 00E8                              __ramtop 0F00  
                    __size_of_sendAX 02B8                              __ptext0 1398  
                            __ptext1 1DAE                              __ptext2 1F08  
                            __ptext3 1F16                              __ptext4 1AC2  
                            __ptext5 1958                              __ptext6 1E76  
                            __ptext7 1D02                              __ptext8 1F46  
                            __ptext9 1D3C                      __size_of_printf 0036  
                         _parameter1 005D                           _parameter2 00A2  
                         _parameter3 00A1                           _parameter4 00A0  
                         _parameter5 009F                           _parameter6 009E  
                          _T1CONbits 000FCD                _OSCILLATOR_Initialize 1EF6  
                 _EUSART1_Initialize 1EE0             ??_PIN_MANAGER_Initialize 0100  
                  __CFG_MSSPMSK$MSK7 000000                           ??_delay_ms 010A  
                            main@adc 0111                    __end_of_setLedOff 1C44  
         __size_of_SYSTEM_Initialize 0022                i2EUSART2_Write@txData 0001  
                         delay_ms@ms 0108                 end_of_initialization 1CF8  
                ?_EUSART1_Initialize 0001               handleByteReceived@data 0007  
                            sendAX@i 0022                           ??_setLedOn 0003  
                        ?_clearState 0001                   _EUSART2_Initialize 1ECA  
                    i2_EUSART2_Write 1F24                              printf@c 0106  
                            printf@f 0102                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0036               __end_of_I2C_Initialize 1EB2  
               ??_EUSART1_Initialize 0100                  ?_EUSART2_Initialize 0001  
                          _PORTCbits 000F82                    readAXData@address 0034  
                EUSART1_Write@txData 0001                 ??_EUSART2_Initialize 0100  
                     getByteToSend@d 0044                       getByteToSend@r 004B  
                       pingAX@packet 00B8                         pingAX@length 00CE  
                  pingAX@instruction 00D0                         pingAX@result 00A4  
             writeAXData@instruction 00CE                         _EUSART1_Read 1DE4  
                        ?_readAXData 0032                        readAXData@err 0036  
                       sendAX@i_1422 0026                         sendAX@i_1427 0028  
                       sendAX@i_1419 0024                         sendAX@i_1436 002A  
       __end_of_INTERRUPT_Initialize 1F4E                      ?_I2C_Initialize 0001  
                  writeAXData@packet 00B8                    writeAXData@length 00CC  
               __size_of_writeAXData 012A                        __pidataCOMRAM 1F54  
                  writeAXData@result 00A4                       _ADC_Initialize 1EB2  
             ?_OSCILLATOR_Initialize 0001                         sendAX@buffer 0003  
                     __end_of_pingAX 1958                       __end_of_sendAX 11E2  
                       sendAX@param0 0010                         sendAX@param1 0012  
                       sendAX@param2 0014                         sendAX@param3 0016  
                       sendAX@param4 0018                         sendAX@param5 001A  
                       sendAX@param6 001C                  handleByteReceived@i 0005  
                     __end_of_printf 1DE4                         sendAX@result 0007  
                start_initialization 1CBC      __size_of_PIN_MANAGER_Initialize 003A  
                __size_of_clearState 0038                            i2printf@c 0007  
                          i2printf@f 0003                          putch@txData 0101  
                  __size_ofi2_printf 002C                __end_of_EUSART1_Write 1F3C  
              __end_of_EUSART2_Write 1F24              __end_ofi2_EUSART2_Write 1F30  
                     _currentCommand 005E             __size_of_TMR1_Initialize 003A  
                 pingAX@nbParameters 00CC               __end_of_ADC_Initialize 1ECA  
                        __pdataBANK0 00D6                             ?_I2C_ISR 0001  
                           ?_ADC_ISR 0001                             ??_pingAX 0034  
                           ??_sendAX 000B                             ??_printf 0104  
                        __pbssCOMRAM 005B                  __size_of_readAXData 0136  
                      __pcstackBANK0 00A4                        __pcstackBANK1 0100  
                       setLedOff@led 0001                           sendAX@stop 0030  
                  __size_of_delay_ms 008E                  EUSART2_Write@txData 0100  
             __size_of_getByteToSend 01B6                             ?i2_putch 0001  
                   ??_getAddressSize 0003              getByteToSend@error_1490 0049  
            getByteToSend@error_1495 003E               _PIN_MANAGER_Initialize 1D3C  
                  __size_of_setLedOn 007A                            __pintcode 0008  
                           ?___awdiv 0100                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 004D                          __smallconst 0F00  
                           _BAUDCON1 000FA7                             _BAUDCON2 000FB9  
           __size_of_TMR1_StartTimer 0004                            _index_i2c 009C  
                      _nbBytesToSend 0096          __size_of_handleByteReceived 0100  
                          _readIndex 005B                            _bytesSent 0094  
     getByteToSend@i2c_data_received 0001                       __size_of_putch 000E  
               _INTERRUPT_Initialize 1F4A              getByteToSend@value_1498 0047  
                          _setLedOff 1BCA                     ?i2_EUSART2_Write 0001  
                           _LATBbits 000F8A                             _LATCbits 000F8B  
                           _LATDbits 000F8C                            delay_ms@i 010D  
                          delay_ms@n 010B                             _PIE1bits 000F9D  
                       ??_clearState 0001                             i2u123_40 179C  
                           i2u117_45 12C0                             i2u118_40 12DE  
__size_of_INTERRUPT_InterruptManager 008E                             _PIR1bits 000F9E  
                           i2u186_47 0F38                             i2u187_47 0FEC  
                           i2u188_47 119C                             _PIR3bits 000FA4  
                           _RCONbits 000FD0                        _getByteToSend 11E2  
            getByteToSend@xhigh_1500 0043                     __size_of_I2C_ISR 00AC  
                  ??_TMR1_Initialize 0100                     __size_of_ADC_ISR 0004  
                         _ADCON0bits 000FC2                     __CFG_SOSCSEL$DIG 000000  
                          main@delay 0113                             i2_printf 1E4A  
                 __end_of_clearState 1DAE                     writeAXData@error 00D0  
              ?_INTERRUPT_Initialize 0001                           ?_setLedOff 0001  
                   __size_ofi2_putch 000A                         ??_readAXData 0038  
                   ??_I2C_Initialize 0100                             __Hrparam 0000  
                           __Lrparam 0000                    _ADC_GetConversion 1E1A  
                 __CFG_BOREN$SBORDIS 000000                       ?_getByteToSend 0001  
            ??_OSCILLATOR_Initialize 0100                   ?_ADC_GetConversion 0001  
                   __size_of___awdiv 00BE          __size_of_EUSART1_Initialize 0016  
              _TMR1_InterruptHandler 0098                  ??_ADC_GetConversion 0003  
                           _delay_ms 1AC2                   __end_of_readAXData 1646  
                           __ptext10 1EF6                             __ptext11 1F4A  
                           __ptext20 1F24                             __ptext12 1E98  
                           __ptext21 1770                             __ptext13 1ECA  
                         _T1GCONbits 000FAA                             __ptext30 1F30  
                           __ptext22 1B50                             __ptext14 1EE0  
                           __ptext31 1DE4                             __ptext23 1BCA  
                           __ptext15 1EB2                             __ptext32 1D76  
                           __ptext24 11E2                             __ptext33 1E1A  
                           __ptext25 1646                             __ptext17 1A16  
                           __ptext34 1F4E                             __ptext26 1510  
                           __ptext18 1E4A                             __ptext27 1C44  
                           __ptext19 1F3C                             __ptext28 1870  
                           __ptext29 0F2A                    ??_TMR1_StartTimer 0100  
                      writeAXData@id 0032          __size_of_EUSART2_Initialize 0016  
                      __size_of_main 0178                             _setLedOn 1B50  
          __end_of_ADC_GetConversion 1E4A                        ??_writeAXData 0038  
                           int$flags 005F   __end_of_INTERRUPT_InterruptManager 0096  
         _INTERRUPT_InterruptManager 0008                  __CFG_INTOSCSEL$HIGH 000000  
                   sendAX@packetSize 0005                   _I2C_slaveWriteData 00D7  
                         _INTCONbits 000FF2               ??_INTERRUPT_Initialize 0100  
                           pingAX@id 0032                             sendAX@r0 002E  
                           intlevel2 0000                          ??_setLedOff 0003  
            ?_PIN_MANAGER_Initialize 0001                 sendAX@checksumResult 002D  
                         _RCSTA1bits 000FAB                           _RCSTA2bits 000FA6  
                   ??_ADC_Initialize 0100                      ??_getByteToSend 003A  
                           printf@ap 0104                   __CFG_WDTPS$1048576 000000  
             __size_of_EUSART1_Write 000C               __size_of_EUSART2_Write 000E  
                __end_of_writeAXData 1770                          _SSPCON1bits 000FC6  
     __end_of_PIN_MANAGER_Initialize 1D76                  __CFG_BORPWR$ZPBORMV 000000  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 1D02  
